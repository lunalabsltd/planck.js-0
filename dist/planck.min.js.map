{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","normal","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_activeFlag","active","m_userData","userData","isActive","setActive","flag","getType","getBodyA","setBodyA","body","setAwake","getBodyB","setBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","testOverlap","shapeTransform","shapeChildIndex","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","push","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","EPSION","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","stats","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","radiusSum","EdgeShape","radius","m_vertex1","m_vertex2","m_edgeRadius","m_noAlignRot","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","m_alignRot","_getAlignRot","m_alignedV2","_alignPoint","rayCastWithRadius","height","ry","p1x","p1y","y1","discr","k","t3","discrSqrt","t4","y2","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","string","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","edgeShape","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","getProxyId","destroyProxy","createProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","queryOverlaps","_reportOverlap","_overlaps","_overlapCallback","_transform","_childIndex","queryAABB","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryCallback","_reportFixtureCallback","query","_queryAABBCallback","point1","point2","reportFixtureCallback","_raycastCallback","_hits","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","reset","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stack","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","h","Iterator","iterator","close","parents","states","root","timer","Timer","now","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","time","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","opts","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","size","item","shift","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","Date","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy"],"mappings":"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","file":"planck.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\n/**\n * Creates zero vector.\n *\n * @return {Vec2} Zero vector.\n */\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\n/**\n * Zero vector for internal usage. Must not be modified.\n */\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns this vector.\n */\nVec2.prototype.normal = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return this;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return this;\n};\n\n/**\n * Rotates current vector inline by specified rotation angle.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Rotates current vector inline by rotation angle negative to the specified one.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_activeFlag = def.active;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive or joint itself is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_activeFlag && this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This joint will be used in physics callculations if true, and skipped if false.\n */\nJoint.prototype.setActive = function(flag) {\n  this.m_activeFlag = flag;\n};\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Set the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.setBodyA = function(body) {\n  this.m_bodyA = body;\n  body.setAwake(true);\n};\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Set the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.setBodyB = function(body) {\n  this.m_bodyB = body;\n  body.setAwake(true);\n};\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n\n/**\n * Tests if current shape overlaps with a provided shape.\n *\n * @param {planck.Shape} shape A shape to test for overlapping with a current one.\n * @param {Transform} transform The transform applied to the shape.\n * @param {Number} childIndex The child shape index\n * @return {Boolean} True if shapes overlap, false otherwise.\n */\nShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2(), rot = new Rot();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  /*if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }*/\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  if (this.m_vertices[3]) {\n    this.m_vertices[0].set(-hx, -hy);\n    this.m_vertices[1].set(hx, -hy);\n    this.m_vertices[2].set(hx, hy);\n    this.m_vertices[3].set(-hx, hy);\n  } else {\n    this.m_vertices[0] = Vec2.neo(-hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, -hy);\n    this.m_vertices[2] = Vec2.neo(hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, hy);\n  }\n  if (this.m_normals[3]) {\n    this.m_normals[0].set(0.0, -1.0);\n    this.m_normals[1].set(1.0, 0.0);\n    this.m_normals[2].set(0.0, 1.0);\n    this.m_normals[3].set(-1.0, 0.0);\n  } else {\n    this.m_normals[0] = Vec2.neo(0.0, -1.0);\n    this.m_normals[1] = Vec2.neo(1.0, 0.0);\n    this.m_normals[2] = Vec2.neo(0.0, 1.0);\n    this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n  }\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center) &&\n    (center.x < -Math.EPSILON || Math.EPSILON < center.x ||\n    center.y < -Math.EPSILON || Math.EPSILON < center.y)) {\n    \n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n    rot.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = this.m_vertices[i].rot(rot).add(center);\n      this.m_normals[i] = this.m_normals[i].rot(rot);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    d = d.set(this.m_outsidePoint).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    v1.set(this.m_vertices[i]);\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set(v1).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (-Math.EPSION <= denominator && denominator <= Math.EPSION) { // Ray is parallel to poligon's side.\n      continue;\n    }\n\n    var a = numerator / denominator;\n    p.set(d).mul(a).add(p1);\n\n    v2.set( this.m_vertices[ i + 1 < this.m_count ? i + 1 : 0 ] ); // Set second vertex.\n    var intersects = Vec2.dot(v1.sub(p), v2.sub(p)) < 0.0; // If ray line intersects polygon side.\n    if (!intersects) {\n      continue;\n    }\n\n    lower = 0.0;\n    upper = maxFraction;\n\n    intersects = lower <= a; // If half-line intersects polygon side.\n    if (intersects) {\n      ++count;\n    }\n\n    if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n      // Increase lower.\n      // The segment enters this half-space.\n      lower = a;\n    } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n      // Decrease upper.\n      // The segment exits this half-space.\n      upper = a;\n    } else { // No intersection.\n      continue;\n    }\n\n    if (lower <= upper) {\n      index = i; // Save closest intersection.\n      if (a < lowest) {\n        lowest = a;\n      }\n    }\n\n  }\n\n  if (count & 1) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = isPoint ? Vec2.ZERO : d.neg().normal().rot(xf.q);\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = d.set(this.m_normals[index]).rot(xf.q);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), r = new Vec2();\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n  var r = Vec2.sub(input.p2, input.p1);\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = r.neg().normal();\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r)).normal();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n\nCircleShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n  if (shape.m_type != CircleShape.TYPE) {\n    return; // Only circles are supported.\n  }\n\n  p = p.set(this.m_p).rot(transform.q).add(transform.p);\n  r = r.set(shape.m_p).rot(shapeTransform.q).add(shapeTransform.p);\n\n  var lengthSquared = p.sub(r).lengthSquared();\n  var radiusSum = this.m_radius + shape.m_radius;\n\n  return radiusSum * radiusSum > lengthSquared\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n *\n * @param {Number} radius Radius extending around the edge.\n */\nfunction EdgeShape(v1, v2, radius) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n    this.m_noAlignRot = true; // This rotation is used to align the edge to y axis,\n                              // so v1 is in origin and (v1, v2) is codirectional with y.\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  this.m_noAlignRot = true;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  clone.m_edgeRadius = this.m_edgeRadius;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nEdgeShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0) { // No radius => we never inside.\n    return false;\n  }\n  // Put the point into the edge's frame of reference.\n  p = p1.set(p).sub(xf.p).rotT(xf.q);\n\n  // Transform all points so v2 is on y axis, positive half-space, v1 is in (0, 0).\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n  p = this._alignPoint(p);\n  var v2 = this.m_alignedV2;\n\n  var radius = this.m_edgeRadius;\n  if (p.y > v2.y) {\n    var dx = p.x - v2.x, dy = p.y - v2.y;\n    return dx * dx + dy * dy < radius * radius;\n  }\n  if (p.y < 0.0) {\n    return p.x * p.x + p.y * p.y < radius * radius;\n  }\n  return -radius < p.x && p.x < radius;\n};\n\n/**\n * Creates a rotation to be used to align the edge to y axis.\n *\n * @return {Rot} Rotation used to align points.\n */\nEdgeShape.prototype._getAlignRot = function() {\n  var rot = this.m_alignRot = this.m_alignRot || new Rot();\n  this.m_noAlignRot = false;\n\n  var v1 = this.m_vertex1, v2 = this.m_vertex2;\n  var length = d.set(v2).sub(v1).length();\n\n  if (length <= Math.EPSILON) {\n    return rot;\n  }\n\n  // cos = ( x1 * x2 + y1 * y2 ) / ( length1 * length2 )\n  // sin = ( x1 * y2 - x2 * y1 ) / ( length1 * length2 )\n  // x1 = d.x, y1 = d.y\n  // x2 = 0, y2 = 1\n  // length1 = length, length2 = 1\n  rot.c = d.y / length;\n  rot.s = d.x / length;\n\n  return rot;\n};\n\n/**\n * Inline-transforms provided point so it's in coordinate system where current edge is aligned to y axis.\n *\n * @param {Vec2} p Point.\n * @return {Vec2} The transformed point.\n */\nEdgeShape.prototype._alignPoint = function(p) {\n  return p.sub(this.m_vertex1).rot(this.m_alignRot);\n};\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  if (this.m_edgeRadius > 0.0) {\n    return this.rayCastWithRadius(output, input, xf);\n  }\n\n  v1 = v1.set(this.m_vertex1);\n  v2 = v2.set(this.m_vertex2);\n  v2 = v2.sub(v1);\n  var r = v2;\n  p = p.set(r.y, -r.x);\n  var normal = p;\n  var length = normal.normalize();\n\n  if (length <= Math.EPSILON) { // The edge is a point, can't intersect.\n    return false;\n  }\n\n  // Put the ray into the edge's frame of reference.\n  p1 = p1.set(input.p1).sub(xf.p).rotT(xf.q);\n  p2 = p2.set(input.p2).sub(xf.p).rotT(xf.q);\n  d = d.set(p2).sub(p1);\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator <= Math.EPSILON) { // Ray is parallel to the edge.\n    return false;\n  }\n\n  p2 = p2.set(v1).sub(p1);\n  var numerator = Vec2.dot(normal, p2);\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var rr = length * length;\n\n  // q = p1 + t * d\n  d = d.mul(t);\n  p1 = p1.add(d);\n  var q = p1;\n\n  q = q.sub(v1);\n  var s = Vec2.dot(q, r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = normal.rot(xf.q).neg(); // We are safe to return a reference as it's coppied in c# wrapper.\n  } else {\n    output.normal = normal.rot(xf.q); // We are safe to return a reference as it's coppied in c# wrapper.\n  }\n  return true;\n};\n\n/**\n * Used internally to do ray casts if current edge has positive radius.\n *\n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n */\nEdgeShape.prototype.rayCastWithRadius = function(output, input, xf) {\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n\n  var radius = this.m_edgeRadius;\n\n  // Put the ray into the edge's frame of reference.\n  p1 = this._alignPoint( p1.set(input.p1).sub(xf.p).rotT(xf.q) );\n  p2 = this._alignPoint( p2.set(input.p2).sub(xf.p).rotT(xf.q) );\n  d = d.set(p2).sub(p1);\n  var dx = d.x;\n\n  if (-Math.EPSILON <= dx && dx <= Math.EPSILON) { // The ray runs parallel to edge y axis.\n    var px = p1.x; // Intersection point x component.\n    if (px <= -radius || radius <= px) { // The ray runs parallel to the edge and fully outside of its radius.\n      return false;\n    }\n    var height = this.m_alignedV2.y;\n    var ry = Math.sqrt(radius * radius - px * px);\n    var py = height + ry; // Intersection point y component.\n\n    if (p1.y >= py) { // The ray starts above top.\n      if (p2.y >= py) { // The ray ends above top, it's fully outside.\n        return false;\n      }\n      output.fraction = (p1.y - py) / d.length();\n      output.normal = p.set(px, ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else if (p1.y <= -ry) { // The ray starts below bottom.\n      if (p2.y <= -ry) { // The ray ends below bottom, it's fully outside.\n        return false;\n      }\n      output.fraction = (-p1.y - ry) / d.length();\n      output.normal = p.set(px, -ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else { // The ray starts between top and bottom.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n    }\n  } else { // The ray is not parallel to edge y axis.\n    var p1x = p1.x;\n    var t1 = (-radius - p1x) / dx; // Intersection points of the ray line and cylinder containing edge with radius.\n    var t2 = (radius - p1x) / dx;\n\n    if ( (t1 <= 0.0 && t2 <= 0.0) || (t1 >= 1.0 && t2 >= 1.0) ) { // Intersections are outside of the ray.\n      return false;\n    }\n\n    if (t1 > t2) {\n      var t = t1;\n      t1 = t2;\n      t2 = t;\n    }\n\n    var dy = d.y;\n    var p1y = p1.y;\n    var y1 = p1y + t1 * dy;\n    if (y1 > height) { // Line intersects cylinder above edge top.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n      var k = p1x * dx + dy * (p1y - height);\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect top circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and top circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy - height); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and top circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 >= height) { // Line and top circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects bottom semicircle of the top circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 < 0.0) { // Line intersects cylinder below edge bottom, i. e. intersects bottom circle.\n\n            c += height * (2 * p1y - height);\n            k += dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from bottom circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (y1 < 0.0) { // Line intersects cylinder below edge bottom.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + p1y * p1y - radius * radius;\n      var k = p1x * dx + p1y * dy;\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect bottom circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and bottom circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and bottom circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 <= 0.0) { // Line and bottom circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects top semicircle of the bottom circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 > height) { // Line intersects cylinder above edge bottom, i. e. intersects top circle.\n\n            c -= height * (2 * p1y - height);\n            k -= dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from top circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (t1 >= 0.0) { // The ray intersects cylinder between top and bottom (first intersection point).\n      output.fraction = t1;\n      output.normal = p.set(dx > 0.0 ? -1.0 : 1.0, 0.0); // Will be coppied in c# wrapper.\n    } else { // Start point is inside of cylinder and the ray is pointing away from first intersection point.\n      var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n\n      if (y2 > height) { // Line intersects cylinder above edge top.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n        var k = p1x * dx + dy * (p1y - height);\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and top circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the top circle.\n          return false;\n        }\n      } else if (y2 < 0.0) { // Line intersects cylinder below edge bottom.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + p1y * p1y - radius * radius;\n        var k = p1x * dx + p1y * dy;\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and bottom circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the bottom circle.\n          return false;\n        }\n      }\n      // The ray starts inside of the shape.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal();\n    }\n  }\n\n  output.normal.rotT(this.m_alignRot).rot(xf.q);\n  return true;\n};\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an impulse to the center of mass. This immediately modifies the velocity.\n * This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulseToCenter = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.isActive()) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = fixture.isActive();\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n *\n * @param {Number} radius Radius extending around the chain.\n */\nfunction ChainShape(vertices, loop, radius) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_count = this.m_vertices.length = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count > 0 ? this.m_count - 1 : 0;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n  edge.m_edgeRadius = this.m_edgeRadius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0 || this.m_count < 2) {\n    return false;\n  }\n  var vertices = this.m_vertices;\n  var edgeShape = new EdgeShape(vertices[0], vertices[1], this.m_edgeRadius);\n  if (edgeShape.testPoint(xf, p)) {\n    return true;\n  }\n  for (var count = this.m_count, i = 2; i < count; ++i) {\n    edgeShape._set(vertices[i - 1], vertices[i]);\n    if (edgeShape.testPoint(xf, p)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1), this.m_edgeRadius);\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  if (this.m_activeFlag) {\n    var childCount = this.m_proxyCount = this.m_shape.getChildCount();\n    for (var i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * Gets aabb proxy id.\n *\n * @param {Number} childIndex Child index to get proxy id for.\n */\nFixture.prototype.getProxyId = function(childIndex) {\n  return this.m_proxies[childIndex].proxyId;\n};\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  broadPhase = broadPhase || this.m_body.getWorld().m_broadPhase;\n  xf = xf || this.m_body.getTransform();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxies.length = this.m_proxyCount = this.m_shape.getChildCount();\n\n  // Create proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i] = this.m_proxies[i] || new FixtureProxy(this, i);\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null || !this.m_activeFlag) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\n/**\n * If this fixture is used in physics calculations.\n *\n * @return {boolean} True if active, false otherwise.\n */\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This fixture will be used in physics callculations if true, and skipped if false.\n */\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n\n/**\n * @function Fixture~overlapCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap current fixture.\n *\n * @param {Fixture~overlapCallback} callback Called for each fixture found.\n */\nFixture.prototype.queryOverlaps = function(callback) {\n  if (!this.m_activeFlag || this.m_proxyCount == 0) {\n    return;\n  }\n  var world = this.m_body.getWorld();\n  if (world == null) {\n    return;\n  }\n  if (this._reportOverlap == Fixture.prototype._reportOverlap) {\n    this._reportOverlap = this._reportOverlap.bind(this);\n  }\n  this._overlaps = {};\n  this._overlapCallback = callback;\n  this._transform = this.m_body.getTransform();\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    this._childIndex = i;\n    world.queryAABB(this.m_proxies[i].aabb, this._reportOverlap);\n  }\n  this._transform = this._childIndex = this._overlaps = this._overlapCallback = callback = null;\n};\n\n/**\n * Called for each overlapping fixture. Used internally.\n */\nFixture.prototype._reportOverlap = function(fixture, proxy) {\n  if (fixture == this) {\n    return true;\n  }\n  var id = fixture.m_proxies[0].proxyId;\n  if (this._overlaps[id] ||\n    !this.m_shape.testOverlap(this._transform, this._childIndex, fixture.m_shape, fixture.m_body.getTransform(), proxy.childIndex)) {\n    return true;\n  }\n  this._overlaps[id] = true;\n  return this._overlapCallback(fixture); // Dynamic tree must not be modified here.\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n * @param proxy\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  World._reportFixtureCallback = queryCallback;\n  this.m_broadPhase.query(aabb, this._queryAABBCallback);\n  World._reportFixtureCallback = null;\n};\n\n/**\n * Called for each fixture found in the query AABB.\n * Used internally.\n */\nWorld.prototype._queryAABBCallback = function(proxyId, proxy) {\n  return World._reportFixtureCallback(proxy.fixture, proxy);\n};\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  if (this._raycastCallback == World.prototype._raycastCallback) {\n    this._raycastCallback = this._raycastCallback.bind(this);\n  }\n  this._hits = {};\n  this._reportFixtureCallback = reportFixtureCallback;\n  this.m_broadPhase.rayCast(null, this._raycastCallback, point1, point2, 1.0);\n  this._hits = this._reportFixtureCallback = reportFixtureCallback = null;\n};\n\n/**\n * A function that is called for each proxy that is hit by the ray.\n * Used internally.\n */\nWorld.prototype._raycastCallback = function(input, proxyId, proxy) {\n  var fixture = proxy.fixture;\n  var id = fixture.getProxyId(0);\n  if (this._hits[id]) {\n    return input.maxFraction;\n  }\n  var index = proxy.childIndex;\n  var output = {}; // TODO GC\n  var hit = fixture.rayCast(output, input, index);\n  if (hit) {\n    this._hits[id] = true;\n    var fraction = output.fraction;\n    var point = input.p1.mul(1.0 - fraction).add(input.p2.mul(fraction));\n    return this._reportFixtureCallback(fixture, point, output.normal, fraction);\n  }\n  return input.maxFraction;\n};\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyA = fixtureA.getBody();\n    if (!bodyA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyB = fixtureB.getBody();\n    if (!bodyB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id, node.userData);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  p1 = p1 || input.p1;\n  p2 = p2 || input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  maxFraction = maxFraction >= 0.0 ? maxFraction : input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(p1);\n      subInput.p2 = Vec2.clone(p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id, node.userData);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false,\n  active: true\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0,\n  active: true\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) {\n  this.m_tree.rayCast(input, rayCastCallback, p1, p2, maxFraction);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        var fixtureA = contact.m_fixtureA;\n        var fixtureB = contact.m_fixtureB;\n\n        if (!(fixtureA.isActive() && fixtureB.isActive())) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = fixtureA.m_isSensor;\n        var sensorB = fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true || je.joint.m_activeFlag == false) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        if (!(fA.isActive() && fB.isActive())) {\n          continue;\n        }\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n    var offset = Vec2.dot(n, v1);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - offset;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = edgeA.m_radius + polygonB.m_radius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n  active: true\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0,\n  active: true\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3,\n  active: true\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true,\n  active: true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n  active: true\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setLength = function(length) {\n  this.m_maxLength = length;\n};\n\nRopeJoint.prototype.getLength = function() {\n  return this.m_maxLength;\n};\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n"],"sourceRoot":""}