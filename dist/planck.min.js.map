{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","normal","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_activeFlag","active","m_userData","userData","isActive","setActive","flag","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","testOverlap","shapeTransform","shapeChildIndex","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","push","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","EPSION","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","stats","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","radiusSum","EdgeShape","radius","m_vertex1","m_vertex2","m_edgeRadius","m_noAlignRot","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","m_alignRot","_getAlignRot","m_alignedV2","_alignPoint","rayCastWithRadius","height","ry","p1x","p1y","y1","discr","k","t3","discrSqrt","t4","y2","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","string","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","edgeShape","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","body","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","getProxyId","destroyProxy","createProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","queryOverlaps","_reportOverlap","self","_overlaps","_overlapCallback","_transform","_childIndex","queryAABB","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryCallback","_reportFixtureCallback","query","_queryAABBCallback","point1","point2","reportFixtureCallback","_raycastCallback","_hits","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","reset","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stack","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","h","Iterator","iterator","close","parents","states","root","timer","Timer","now","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","time","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","opts","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","size","item","shift","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","Date","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy"],"mappings":"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","file":"planck.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\n/**\n * Creates zero vector.\n *\n * @return {Vec2} Zero vector.\n */\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\n/**\n * Zero vector for internal usage. Must not be modified.\n */\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns this vector.\n */\nVec2.prototype.normal = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return this;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return this;\n};\n\n/**\n * Rotates current vector inline by specified rotation angle.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Rotates current vector inline by rotation angle negative to the specified one.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_activeFlag = def.active;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive or joint itself is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_activeFlag && this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This joint will be used in physics callculations if true, and skipped if false.\n */\nJoint.prototype.setActive = function(flag) {\n  this.m_activeFlag = flag;\n};\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n\n/**\n * Tests if current shape overlaps with a provided shape.\n *\n * @param {planck.Shape} shape A shape to test for overlapping with a current one.\n * @param {Transform} transform The transform applied to the shape.\n * @param {Number} childIndex The child shape index\n * @return {Boolean} True if shapes overlap, false otherwise.\n */\nShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2(), rot = new Rot();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  /*if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }*/\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  if (this.m_vertices[3]) {\n    this.m_vertices[0].set(-hx, -hy);\n    this.m_vertices[1].set(hx, -hy);\n    this.m_vertices[2].set(hx, hy);\n    this.m_vertices[3].set(-hx, hy);\n  } else {\n    this.m_vertices[0] = Vec2.neo(-hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, -hy);\n    this.m_vertices[2] = Vec2.neo(hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, hy);\n  }\n  if (this.m_normals[3]) {\n    this.m_normals[0].set(0.0, -1.0);\n    this.m_normals[1].set(1.0, 0.0);\n    this.m_normals[2].set(0.0, 1.0);\n    this.m_normals[3].set(-1.0, 0.0);\n  } else {\n    this.m_normals[0] = Vec2.neo(0.0, -1.0);\n    this.m_normals[1] = Vec2.neo(1.0, 0.0);\n    this.m_normals[2] = Vec2.neo(0.0, 1.0);\n    this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n  }\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center) &&\n    (center.x < -Math.EPSILON || Math.EPSILON < center.x ||\n    center.y < -Math.EPSILON || Math.EPSILON < center.y)) {\n    \n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n    rot.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = this.m_vertices[i].rot(rot).add(center);\n      this.m_normals[i] = this.m_normals[i].rot(rot);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    d = d.set(this.m_outsidePoint).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    v1.set(this.m_vertices[i]);\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set(v1).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (-Math.EPSION <= denominator && denominator <= Math.EPSION) { // Ray is parallel to poligon's side.\n      continue;\n    }\n\n    var a = numerator / denominator;\n    p.set(d).mul(a).add(p1);\n\n    v2.set( this.m_vertices[ i + 1 < this.m_count ? i + 1 : 0 ] ); // Set second vertex.\n    var intersects = Vec2.dot(v1.sub(p), v2.sub(p)) < 0.0; // If ray line intersects polygon side.\n    if (!intersects) {\n      continue;\n    }\n\n    lower = 0.0;\n    upper = maxFraction;\n\n    intersects = lower <= a; // If half-line intersects polygon side.\n    if (intersects) {\n      ++count;\n    }\n\n    if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n      // Increase lower.\n      // The segment enters this half-space.\n      lower = a;\n    } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n      // Decrease upper.\n      // The segment exits this half-space.\n      upper = a;\n    } else { // No intersection.\n      continue;\n    }\n\n    if (lower <= upper) {\n      index = i; // Save closest intersection.\n      if (a < lowest) {\n        lowest = a;\n      }\n    }\n\n  }\n\n  if (count & 1) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = isPoint ? Vec2.ZERO : d.neg().normal().rot(xf.q);\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = d.set(this.m_normals[index]).rot(xf.q);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), r = new Vec2();\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n  var r = Vec2.sub(input.p2, input.p1);\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = r.neg().normal();\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r)).normal();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n\nCircleShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n  if (shape.m_type != CircleShape.TYPE) {\n    return; // Only circles are supported.\n  }\n\n  p = p.set(this.m_p).rot(transform.q).add(transform.p);\n  r = r.set(shape.m_p).rot(shapeTransform.q).add(shapeTransform.p);\n\n  var lengthSquared = p.sub(r).lengthSquared();\n  var radiusSum = this.m_radius + shape.m_radius;\n\n  return radiusSum * radiusSum > lengthSquared\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n *\n * @param {Number} radius Radius extending around the edge.\n */\nfunction EdgeShape(v1, v2, radius) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n    this.m_noAlignRot = true; // This rotation is used to align the edge to y axis,\n                              // so v1 is in origin and (v1, v2) is codirectional with y.\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  this.m_noAlignRot = true;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  clone.m_edgeRadius = this.m_edgeRadius;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nEdgeShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0) { // No radius => we never inside.\n    return false;\n  }\n  // Put the point into the edge's frame of reference.\n  p = p1.set(p).sub(xf.p).rotT(xf.q);\n\n  // Transform all points so v2 is on y axis, positive half-space, v1 is in (0, 0).\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n  p = this._alignPoint(p);\n  var v2 = this.m_alignedV2;\n\n  var radius = this.m_edgeRadius;\n  if (p.y > v2.y) {\n    var dx = p.x - v2.x, dy = p.y - v2.y;\n    return dx * dx + dy * dy < radius * radius;\n  }\n  if (p.y < 0.0) {\n    return p.x * p.x + p.y * p.y < radius * radius;\n  }\n  return -radius < p.x && p.x < radius;\n};\n\n/**\n * Creates a rotation to be used to align the edge to y axis.\n *\n * @return {Rot} Rotation used to align points.\n */\nEdgeShape.prototype._getAlignRot = function() {\n  var rot = this.m_alignRot = this.m_alignRot || new Rot();\n  this.m_noAlignRot = false;\n\n  var v1 = this.m_vertex1, v2 = this.m_vertex2;\n  var length = d.set(v2).sub(v1).length();\n\n  if (length <= Math.EPSILON) {\n    return rot;\n  }\n\n  // cos = ( x1 * x2 + y1 * y2 ) / ( length1 * length2 )\n  // sin = ( x1 * y2 - x2 * y1 ) / ( length1 * length2 )\n  // x1 = d.x, y1 = d.y\n  // x2 = 0, y2 = 1\n  // length1 = length, length2 = 1\n  rot.c = d.y / length;\n  rot.s = d.x / length;\n\n  return rot;\n};\n\n/**\n * Inline-transforms provided point so it's in coordinate system where current edge is aligned to y axis.\n *\n * @param {Vec2} p Point.\n * @return {Vec2} The transformed point.\n */\nEdgeShape.prototype._alignPoint = function(p) {\n  return p.sub(this.m_vertex1).rot(this.m_alignRot);\n};\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  if (this.m_edgeRadius > 0.0) {\n    return this.rayCastWithRadius(output, input, xf);\n  }\n\n  v1 = v1.set(this.m_vertex1);\n  v2 = v2.set(this.m_vertex2);\n  v2 = v2.sub(v1);\n  var r = v2;\n  p = p.set(r.y, -r.x);\n  var normal = p;\n  var length = normal.normalize();\n\n  if (length <= Math.EPSILON) { // The edge is a point, can't intersect.\n    return false;\n  }\n\n  // Put the ray into the edge's frame of reference.\n  p1 = p1.set(input.p1).sub(xf.p).rotT(xf.q);\n  p2 = p2.set(input.p2).sub(xf.p).rotT(xf.q);\n  d = d.set(p2).sub(p1);\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator <= Math.EPSILON) { // Ray is parallel to the edge.\n    return false;\n  }\n\n  p2 = p2.set(v1).sub(p1);\n  var numerator = Vec2.dot(normal, p2);\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var rr = length * length;\n\n  // q = p1 + t * d\n  d = d.mul(t);\n  p1 = p1.add(d);\n  var q = p1;\n\n  q = q.sub(v1);\n  var s = Vec2.dot(q, r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = normal.rot(xf.q).neg(); // We are safe to return a reference as it's coppied in c# wrapper.\n  } else {\n    output.normal = normal.rot(xf.q); // We are safe to return a reference as it's coppied in c# wrapper.\n  }\n  return true;\n};\n\n/**\n * Used internally to do ray casts if current edge has positive radius.\n *\n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n */\nEdgeShape.prototype.rayCastWithRadius = function(output, input, xf) {\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n\n  var radius = this.m_edgeRadius;\n\n  // Put the ray into the edge's frame of reference.\n  p1 = this._alignPoint( p1.set(input.p1).sub(xf.p).rotT(xf.q) );\n  p2 = this._alignPoint( p2.set(input.p2).sub(xf.p).rotT(xf.q) );\n  d = d.set(p2).sub(p1);\n  var dx = d.x;\n\n  if (-Math.EPSILON <= dx && dx <= Math.EPSILON) { // The ray runs parallel to edge y axis.\n    var px = p1.x; // Intersection point x component.\n    if (px <= -radius || radius <= px) { // The ray runs parallel to the edge and fully outside of its radius.\n      return false;\n    }\n    var height = this.m_alignedV2.y;\n    var ry = Math.sqrt(radius * radius - px * px);\n    var py = height + ry; // Intersection point y component.\n\n    if (p1.y >= py) { // The ray starts above top.\n      if (p2.y >= py) { // The ray ends above top, it's fully outside.\n        return false;\n      }\n      output.fraction = (p1.y - py) / d.length();\n      output.normal = p.set(px, ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else if (p1.y <= -ry) { // The ray starts below bottom.\n      if (p2.y <= -ry) { // The ray ends below bottom, it's fully outside.\n        return false;\n      }\n      output.fraction = (-p1.y - ry) / d.length();\n      output.normal = p.set(px, -ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else { // The ray starts between top and bottom.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n    }\n  } else { // The ray is not parallel to edge y axis.\n    var p1x = p1.x;\n    var t1 = (-radius - p1x) / dx; // Intersection points of the ray line and cylinder containing edge with radius.\n    var t2 = (radius - p1x) / dx;\n\n    if ( (t1 <= 0.0 && t2 <= 0.0) || (t1 >= 1.0 && t2 >= 1.0) ) { // Intersections are outside of the ray.\n      return false;\n    }\n\n    if (t1 > t2) {\n      var t = t1;\n      t1 = t2;\n      t2 = t;\n    }\n\n    var dy = d.y;\n    var p1y = p1.y;\n    var y1 = p1y + t1 * dy;\n    if (y1 > height) { // Line intersects cylinder above edge top.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n      var k = p1x * dx + dy * (p1y - height);\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect top circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and top circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy - height); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and top circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 >= height) { // Line and top circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects bottom semicircle of the top circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 < 0.0) { // Line intersects cylinder below edge bottom, i. e. intersects bottom circle.\n\n            c += height * (2 * p1y - height);\n            k += dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from bottom circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (y1 < 0.0) { // Line intersects cylinder below edge bottom.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + p1y * p1y - radius * radius;\n      var k = p1x * dx + p1y * dy;\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect bottom circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and bottom circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and bottom circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 <= 0.0) { // Line and bottom circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects top semicircle of the bottom circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 > height) { // Line intersects cylinder above edge bottom, i. e. intersects top circle.\n\n            c -= height * (2 * p1y - height);\n            k -= dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from top circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (t1 >= 0.0) { // The ray intersects cylinder between top and bottom (first intersection point).\n      output.fraction = t1;\n      output.normal = p.set(dx > 0.0 ? -1.0 : 1.0, 0.0); // Will be coppied in c# wrapper.\n    } else { // Start point is inside of cylinder and the ray is pointing away from first intersection point.\n      var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n\n      if (y2 > height) { // Line intersects cylinder above edge top.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n        var k = p1x * dx + dy * (p1y - height);\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and top circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the top circle.\n          return false;\n        }\n      } else if (y2 < 0.0) { // Line intersects cylinder below edge bottom.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + p1y * p1y - radius * radius;\n        var k = p1x * dx + p1y * dy;\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and bottom circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the bottom circle.\n          return false;\n        }\n      }\n      // The ray starts inside of the shape.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal();\n    }\n  }\n\n  output.normal.rotT(this.m_alignRot).rot(xf.q);\n  return true;\n};\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an impulse to the center of mass. This immediately modifies the velocity.\n * This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulseToCenter = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.isActive()) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = fixture.isActive();\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n *\n * @param {Number} radius Radius extending around the chain.\n */\nfunction ChainShape(vertices, loop, radius) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_count = this.m_vertices.length = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count > 0 ? this.m_count - 1 : 0;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n  edge.m_edgeRadius = this.m_edgeRadius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0 || this.m_count < 2) {\n    return false;\n  }\n  var vertices = this.m_vertices;\n  var edgeShape = new EdgeShape(vertices[0], vertices[1], this.m_edgeRadius);\n  if (edgeShape.testPoint(xf, p)) {\n    return true;\n  }\n  for (var count = this.m_count, i = 2; i < count; ++i) {\n    edgeShape._set(vertices[i - 1], vertices[i]);\n    if (edgeShape.testPoint(xf, p)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1), this.m_edgeRadius);\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  if (this.m_activeFlag) {\n    var childCount = this.m_proxyCount = this.m_shape.getChildCount();\n    for (var i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * Gets aabb proxy id.\n *\n * @param {Number} childIndex Child index to get proxy id for.\n */\nFixture.prototype.getProxyId = function(childIndex) {\n  return this.m_proxies[childIndex].proxyId;\n};\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  broadPhase = broadPhase || this.m_body.getWorld().m_broadPhase;\n  xf = xf || this.m_body.getTransform();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxies.length = this.m_proxyCount = this.m_shape.getChildCount();\n\n  // Create proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i] = this.m_proxies[i] || new FixtureProxy(this, i);\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null || !this.m_activeFlag) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\n/**\n * If this fixture is used in physics calculations.\n *\n * @return {boolean} True if active, false otherwise.\n */\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This fixture will be used in physics callculations if true, and skipped if false.\n */\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n\n/**\n * @function Fixture~overlapCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap current fixture.\n *\n * @param {Fixture~overlapCallback} callback Called for each fixture found.\n */\nFixture.prototype.queryOverlaps = function(callback) {\n  if (!this.m_activeFlag || this.m_proxyCount == 0) {\n    return;\n  }\n  var world = this.m_body.getWorld();\n  if (world == null) {\n    return;\n  }\n  if (this._reportOverlap == Fixture.prototype._reportOverlap) {\n    var self = this;\n    this._reportOverlap = function(fixture, proxy) {\n      Fixture.prototype._reportOverlap.call(self, fixture, proxy);\n    };\n  }\n  this._overlaps = {};\n  this._overlapCallback = callback;\n  this._transform = this.m_body.getTransform();\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    this._childIndex = i;\n    world.queryAABB(this.m_proxies[i].aabb, this._reportOverlap);\n  }\n  this._transform = this._childIndex = this._overlaps = this._overlapCallback = callback = null;\n};\n\n/**\n * Called for each overlapping fixture. Used internally.\n */\nFixture.prototype._reportOverlap = function(fixture, proxy) {\n  if (fixture == this) {\n    return true;\n  }\n  var id = fixture.m_proxies[0].proxyId;\n  if (this._overlaps[id] ||\n    !this.m_shape.testOverlap(this._transform, this._childIndex, fixture.m_shape, fixture.m_body.getTransform(), proxy.childIndex)) {\n    return true;\n  }\n  this._overlaps[id] = true;\n  return this._overlapCallback(fixture); // Dynamic tree must not be modified here.\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n * @param proxy\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  World._reportFixtureCallback = queryCallback;\n  this.m_broadPhase.query(aabb, this._queryAABBCallback);\n  World._reportFixtureCallback = null;\n};\n\n/**\n * Called for each fixture found in the query AABB.\n * Used internally.\n */\nWorld.prototype._queryAABBCallback = function(proxyId, proxy) {\n  return World._reportFixtureCallback(proxy.fixture, proxy);\n};\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  if (this._raycastCallback == World.prototype._raycastCallback) {\n    var self = this;\n    this._raycastCallback = function(input, proxyId, proxy) {\n      World.prototype._raycastCallback.call(self, input, proxyId, proxy);\n    };\n  }\n  this._hits = {};\n  this._reportFixtureCallback = reportFixtureCallback;\n  this.m_broadPhase.rayCast(null, this._raycastCallback, point1, point2, 1.0);\n  this._hits = this._reportFixtureCallback = reportFixtureCallback = null;\n};\n\n/**\n * A function that is called for each proxy that is hit by the ray.\n * Used internally.\n */\nWorld.prototype._raycastCallback = function(input, proxyId, proxy) {\n  var fixture = proxy.fixture;\n  var id = fixture.getProxyId(0);\n  if (this._hits[id]) {\n    return input.maxFraction;\n  }\n  var index = proxy.childIndex;\n  var output = {}; // TODO GC\n  var hit = fixture.rayCast(output, input, index);\n  if (hit) {\n    this._hits[id] = true;\n    var fraction = output.fraction;\n    var point = input.p1.mul(1.0 - fraction).add(input.p2.mul(fraction));\n    return this._reportFixtureCallback(fixture, point, output.normal, fraction);\n  }\n  return input.maxFraction;\n};\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyA = fixtureA.getBody();\n    if (!bodyA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyB = fixtureB.getBody();\n    if (!bodyB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id, node.userData);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  p1 = p1 || input.p1;\n  p2 = p2 || input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  maxFraction = maxFraction >= 0.0 ? maxFraction : input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(p1);\n      subInput.p2 = Vec2.clone(p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id, node.userData);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false,\n  active: true\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0,\n  active: true\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) {\n  this.m_tree.rayCast(input, rayCastCallback, p1, p2, maxFraction);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        var fixtureA = contact.m_fixtureA;\n        var fixtureB = contact.m_fixtureB;\n\n        if (!(fixtureA.isActive() && fixtureB.isActive())) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = fixtureA.m_isSensor;\n        var sensorB = fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true || je.joint.m_activeFlag == false) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        if (!(fA.isActive() && fB.isActive())) {\n          continue;\n        }\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n    var offset = Vec2.dot(n, v1);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - offset;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = edgeA.m_radius + polygonB.m_radius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n  active: true\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0,\n  active: true\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3,\n  active: true\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true,\n  active: true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n  active: true\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n"],"sourceRoot":""}