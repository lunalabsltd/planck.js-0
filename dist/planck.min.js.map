{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","rot","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","PolygonShape","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","_set","getVertex","index","push","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","numerator","denominator","minX","minY","maxX","maxY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","stats","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","EdgeShape","v1","v2","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","active","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","setActive","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","string","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","body","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","createProxy","destroyProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","reset","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","height","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stack","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","h","Iterator","iterator","close","parents","states","root","timer","Timer","now","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","time","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","opts","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","size","item","shift","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","Date","BoxShape","CollideCircles","circleA","circleB","distSqr","radius","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy"],"mappings":"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","file":"planck.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  // Copy vertices.\n  for (var i = 0; i < m; ++i) {\n    this.m_vertices[i] = ps[hull[i]];\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    // Transform vertices and normals.\n    for (var i = 0; i < this.m_count; ++i) {\n      this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n    }\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  // Put the ray into the polygon's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var lower = 0.0;\n  var upper = input.maxFraction;\n\n  var index = -1;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    var numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n    var denominator = Vec2.dot(this.m_normals[i], d);\n\n    if (denominator == 0.0) {\n      if (numerator < 0.0) {\n        return false;\n      }\n    } else {\n      // Note: we want this predicate without division:\n      // lower < numerator / denominator, where denominator < 0\n      // Since denominator < 0, we have to flip the inequality:\n      // lower < numerator / denominator <==> denominator * lower > numerator.\n      if (denominator < 0.0 && numerator < lower * denominator) {\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = numerator / denominator;\n        index = i;\n      } else if (denominator > 0.0 && numerator < upper * denominator) {\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = numerator / denominator;\n      }\n    }\n\n    // The use of epsilon here causes the assert on lower to trip\n    // in some cases. Apparently the use of epsilon was to make edge\n    // shapes work, but now those are handled separately.\n    // if (upper < lower - Math.EPSILON)\n    if (upper < lower) {\n      return false;\n    }\n  }\n\n  _ASSERT && common.assert(0.0 <= lower && lower <= input.maxFraction);\n\n  if (index >= 0) {\n    output.fraction = lower;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n"],"sourceRoot":""}