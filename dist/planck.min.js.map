{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","normal","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","res","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Transform","Rot","position","rotation","q","identity","xf","setIdentity","Array","isArray","arr","mulRot","mulVec2","mulAll","mulFn","mulXf","mulT","px","py","mulTRot","mulTVec2","mulTXf","angle","setAngle","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulSub","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_activeFlag","active","m_userData","userData","isActive","setActive","flag","getType","getBodyA","setBodyA","body","setAwake","getBodyB","setBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","AABB","lowerBound","upperBound","aabb","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","rayCast","output","input","tmin","Infinity","tmax","p1","p2","absD","f","inv_d","t1","t2","temp","maxFraction","fraction","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","transform","childIndex","computeAABB","computeMass","massData","density","computeDistanceProxy","proxy","shapeTransform","shapeChildIndex","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","push","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","CircleShape","ChainShape","EdgeShape","m_p","setRadius","radius","getVertexCount","rr","sigma","circlesOverlap","polygonCircleOverlap","chainCircleOverlap","edgeCircleOverlap","m_vertex1","m_vertex2","m_edgeRadius","m_noAlignRot","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","m_alignRot","_getAlignRot","m_alignedV2","_alignPoint","rayCastWithRadius","height","ry","p1x","p1y","y1","discr","k","t3","discrSqrt","t4","y2","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","stats","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","edgeShape","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","string","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","getProxyId","destroyProxy","createProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","queryOverlaps","_reportOverlap","_overlaps","_overlapCallback","_transform","_childIndex","queryAABB","World","_aabb","_circle","_reportFixtureAABBCallback","_reportFixtureCallback","_hits","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryCallback","query","_queryAABBCallback","queryCircle","_queryCircleCallback","point1","point2","_raycastCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","reset","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stack","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","h","Iterator","iterator","close","parents","states","root","timer","Timer","now","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","time","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","setLocalAnchorA","getLocalAnchorB","setLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","opts","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","size","item","shift","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","Date","BoxShape","CollideCircles","circleA","circleB","distSqr","Q","CollideEdgeCircle","edgeA","A1","B1","u","B2","A2","den","chain","chainA","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","cLocal","polygonA","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy"],"mappings":"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","file":"planck.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\n/**\n * Creates zero vector.\n *\n * @return {Vec2} Zero vector.\n */\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\n/**\n * Zero vector for internal usage. Must not be modified.\n */\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns this vector.\n */\nVec2.prototype.normal = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return this;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return this;\n};\n\n/**\n * Rotates current vector inline by specified rotation angle.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Rotates current vector inline by rotation angle negative to the specified one.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w, res) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var x = (v.x + w.x) * 0.5;\n  var y = (v.y + w.y) * 0.5;\n  return res ? res.set(x, y) : Vec2.neo(x, y);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b, res) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return res ? res.set(x, y) : Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b, res) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return res ? res.set(x, y) : Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_activeFlag = def.active;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive or joint itself is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_activeFlag && this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This joint will be used in physics callculations if true, and skipped if false.\n */\nJoint.prototype.setActive = function(flag) {\n  this.m_activeFlag = flag;\n};\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Set the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.setBodyA = function(body) {\n  this.m_bodyA = body;\n  body.setAwake(true);\n};\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Set the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.setBodyB = function(body) {\n  this.m_bodyB = body;\n  body.setAwake(true);\n};\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n\n/**\n * Tests if current shape overlaps with a provided shape.\n *\n * @param {planck.Shape} shape A shape to test for overlapping with a current one.\n * @param {Transform} transform The transform applied to the shape.\n * @param {Number} childIndex The child shape index\n * @return {Boolean} True if shapes overlap, false otherwise.\n */\nShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2(), rot = new Rot();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  /*if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }*/\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  if (this.m_vertices[3]) {\n    this.m_vertices[0].set(-hx, -hy);\n    this.m_vertices[1].set(hx, -hy);\n    this.m_vertices[2].set(hx, hy);\n    this.m_vertices[3].set(-hx, hy);\n  } else {\n    this.m_vertices[0] = Vec2.neo(-hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, -hy);\n    this.m_vertices[2] = Vec2.neo(hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, hy);\n  }\n  if (this.m_normals[3]) {\n    this.m_normals[0].set(0.0, -1.0);\n    this.m_normals[1].set(1.0, 0.0);\n    this.m_normals[2].set(0.0, 1.0);\n    this.m_normals[3].set(-1.0, 0.0);\n  } else {\n    this.m_normals[0] = Vec2.neo(0.0, -1.0);\n    this.m_normals[1] = Vec2.neo(1.0, 0.0);\n    this.m_normals[2] = Vec2.neo(0.0, 1.0);\n    this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n  }\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center) &&\n    (center.x < -Math.EPSILON || Math.EPSILON < center.x ||\n    center.y < -Math.EPSILON || Math.EPSILON < center.y)) {\n    \n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n    rot.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = this.m_vertices[i].rot(rot).add(center);\n      this.m_normals[i] = this.m_normals[i].rot(rot);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    d = d.set(this.m_outsidePoint).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    v1.set(this.m_vertices[i]);\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set(v1).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (-Math.EPSILON <= denominator && denominator <= Math.EPSILON) { // Ray is parallel to poligon's side.\n      continue;\n    }\n\n    var a = numerator / denominator;\n    p.set(d).mul(a).add(p1);\n\n    v2.set( this.m_vertices[ i + 1 < this.m_count ? i + 1 : 0 ] ); // Set second vertex.\n    var dot = Vec2.dot(v1.sub(p), v2.sub(p));\n    var intersects = dot < Math.EPSILON; // If ray line intersects polygon side.\n    if (!intersects) {\n      continue;\n    }\n\n    lower = 0.0;\n    upper = maxFraction;\n\n    intersects = lower <= a; // If half-line intersects polygon side.\n    if (intersects) {\n      if (dot > -Math.EPSILON) { // If it intersects end of the side.\n        if (denominator < 0.0) { // denominator < 0 <=> ray and normal are opposite.\n          count -= 0.5;\n        } else { // denominator > 0 <=> ray and normal are codirectional.\n          count += 0.5;\n        }\n      } else {\n        count += 1;\n      }\n    }\n\n    if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n      // Increase lower.\n      // The segment enters this half-space.\n      lower = a;\n    } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n      // Decrease upper.\n      // The segment exits this half-space.\n      upper = a;\n    } else { // No intersection.\n      continue;\n    }\n\n    if (lower <= upper && a <= lowest) {\n      index = i; // Save closest intersection.\n      lowest = a;\n    }\n\n  }\n\n  if (count < 0.0) {\n    count = -count;\n  }\n\n  if (Math.abs(count % 2 - 1) < Math.EPSILON) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = isPoint ? Vec2.ZERO : d.neg().normal().rot(xf.q);\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = d.set(this.m_normals[index]).rot(xf.q);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar PolygonShape = require('./PolygonShape');\nvar ChainShape = require('./ChainShape');\nvar EdgeShape = require('./EdgeShape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\nCircleShape.prototype.setRadius = function(radius) {\n  this.m_radius = radius;\n};\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n  var r = Vec2.sub(input.p2, input.p1);\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = r.neg().normal();\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r)).normal();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n\nCircleShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n  if (shape.m_type == CircleShape.TYPE) {\n    return Contact.circlesOverlap(this, transform, shape, shapeTransform);\n  } else if (shape.m_type == PolygonShape.TYPE) {\n    return Contact.polygonCircleOverlap(shape, shapeTransform, this, transform);\n  } else if (shape.m_type == ChainShape.TYPE) {\n    return Contact.chainCircleOverlap(shape, shapeChildIndex, shapeTransform, this, transform);\n  } else if (shape.m_type == EdgeShape.TYPE) {\n    return Contact.edgeCircleOverlap(shape, shapeTransform, this, transform);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n *\n * @param {Number} radius Radius extending around the edge.\n */\nfunction EdgeShape(v1, v2, radius) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n    this.m_noAlignRot = true; // This rotation is used to align the edge to y axis,\n                              // so v1 is in origin and (v1, v2) is codirectional with y.\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  this.m_noAlignRot = true;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  clone.m_edgeRadius = this.m_edgeRadius;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nEdgeShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0) { // No radius => we never inside.\n    return false;\n  }\n  // Put the point into the edge's frame of reference.\n  p = p1.set(p).sub(xf.p).rotT(xf.q);\n\n  // Transform all points so v2 is on y axis, positive half-space, v1 is in (0, 0).\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n  p = this._alignPoint(p);\n  var v2 = this.m_alignedV2;\n\n  var radius = this.m_edgeRadius;\n  if (p.y > v2.y) {\n    var dx = p.x - v2.x, dy = p.y - v2.y;\n    return dx * dx + dy * dy < radius * radius;\n  }\n  if (p.y < 0.0) {\n    return p.x * p.x + p.y * p.y < radius * radius;\n  }\n  return -radius < p.x && p.x < radius;\n};\n\n/**\n * Creates a rotation to be used to align the edge to y axis.\n *\n * @return {Rot} Rotation used to align points.\n */\nEdgeShape.prototype._getAlignRot = function() {\n  var rot = this.m_alignRot = this.m_alignRot || new Rot();\n  this.m_noAlignRot = false;\n\n  var v1 = this.m_vertex1, v2 = this.m_vertex2;\n  var length = d.set(v2).sub(v1).length();\n\n  if (length <= Math.EPSILON) {\n    return rot;\n  }\n\n  // cos = ( x1 * x2 + y1 * y2 ) / ( length1 * length2 )\n  // sin = ( x1 * y2 - x2 * y1 ) / ( length1 * length2 )\n  // x1 = d.x, y1 = d.y\n  // x2 = 0, y2 = 1\n  // length1 = length, length2 = 1\n  rot.c = d.y / length;\n  rot.s = d.x / length;\n\n  return rot;\n};\n\n/**\n * Inline-transforms provided point so it's in coordinate system where current edge is aligned to y axis.\n *\n * @param {Vec2} p Point.\n * @return {Vec2} The transformed point.\n */\nEdgeShape.prototype._alignPoint = function(p) {\n  return p.sub(this.m_vertex1).rot(this.m_alignRot);\n};\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  if (this.m_edgeRadius > 0.0) {\n    return this.rayCastWithRadius(output, input, xf);\n  }\n\n  v1 = v1.set(this.m_vertex1);\n  v2 = v2.set(this.m_vertex2);\n  v2 = v2.sub(v1);\n  var r = v2;\n  p = p.set(r.y, -r.x);\n  var normal = p;\n  var length = normal.normalize();\n\n  if (length <= Math.EPSILON) { // The edge is a point, can't intersect.\n    return false;\n  }\n\n  // Put the ray into the edge's frame of reference.\n  p1 = p1.set(input.p1).sub(xf.p).rotT(xf.q);\n  p2 = p2.set(input.p2).sub(xf.p).rotT(xf.q);\n  d = d.set(p2).sub(p1);\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator <= Math.EPSILON) { // Ray is parallel to the edge.\n    return false;\n  }\n\n  p2 = p2.set(v1).sub(p1);\n  var numerator = Vec2.dot(normal, p2);\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var rr = length * length;\n\n  // q = p1 + t * d\n  d = d.mul(t);\n  p1 = p1.add(d);\n  var q = p1;\n\n  q = q.sub(v1);\n  var s = Vec2.dot(q, r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = normal.rot(xf.q).neg(); // We are safe to return a reference as it's coppied in c# wrapper.\n  } else {\n    output.normal = normal.rot(xf.q); // We are safe to return a reference as it's coppied in c# wrapper.\n  }\n  return true;\n};\n\n/**\n * Used internally to do ray casts if current edge has positive radius.\n *\n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n */\nEdgeShape.prototype.rayCastWithRadius = function(output, input, xf) {\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n\n  var radius = this.m_edgeRadius;\n\n  // Put the ray into the edge's frame of reference.\n  p1 = this._alignPoint( p1.set(input.p1).sub(xf.p).rotT(xf.q) );\n  p2 = this._alignPoint( p2.set(input.p2).sub(xf.p).rotT(xf.q) );\n  d = d.set(p2).sub(p1);\n  var dx = d.x;\n\n  if (-Math.EPSILON <= dx && dx <= Math.EPSILON) { // The ray runs parallel to edge y axis.\n    var px = p1.x; // Intersection point x component.\n    if (px <= -radius || radius <= px) { // The ray runs parallel to the edge and fully outside of its radius.\n      return false;\n    }\n    var height = this.m_alignedV2.y;\n    var ry = Math.sqrt(radius * radius - px * px);\n    var py = height + ry; // Intersection point y component.\n\n    if (p1.y >= py) { // The ray starts above top.\n      if (p2.y >= py) { // The ray ends above top, it's fully outside.\n        return false;\n      }\n      output.fraction = (p1.y - py) / d.length();\n      output.normal = p.set(px, ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else if (p1.y <= -ry) { // The ray starts below bottom.\n      if (p2.y <= -ry) { // The ray ends below bottom, it's fully outside.\n        return false;\n      }\n      output.fraction = (-p1.y - ry) / d.length();\n      output.normal = p.set(px, -ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else { // The ray starts between top and bottom.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n    }\n  } else { // The ray is not parallel to edge y axis.\n    var p1x = p1.x;\n    var t1 = (-radius - p1x) / dx; // Intersection points of the ray line and cylinder containing edge with radius.\n    var t2 = (radius - p1x) / dx;\n\n    if ( (t1 <= 0.0 && t2 <= 0.0) || (t1 >= 1.0 && t2 >= 1.0) ) { // Intersections are outside of the ray.\n      return false;\n    }\n\n    if (t1 > t2) {\n      var t = t1;\n      t1 = t2;\n      t2 = t;\n    }\n\n    var dy = d.y;\n    var p1y = p1.y;\n    var y1 = p1y + t1 * dy;\n    if (y1 > height) { // Line intersects cylinder above edge top.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n      var k = p1x * dx + dy * (p1y - height);\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect top circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and top circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy - height); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and top circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 >= height) { // Line and top circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects bottom semicircle of the top circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 < 0.0) { // Line intersects cylinder below edge bottom, i. e. intersects bottom circle.\n\n            c += height * (2 * p1y - height);\n            k += dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from bottom circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (y1 < 0.0) { // Line intersects cylinder below edge bottom.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + p1y * p1y - radius * radius;\n      var k = p1x * dx + p1y * dy;\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect bottom circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and bottom circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and bottom circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 <= 0.0) { // Line and bottom circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects top semicircle of the bottom circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 > height) { // Line intersects cylinder above edge bottom, i. e. intersects top circle.\n\n            c -= height * (2 * p1y - height);\n            k -= dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from top circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (t1 >= 0.0) { // The ray intersects cylinder between top and bottom (first intersection point).\n      output.fraction = t1;\n      output.normal = p.set(dx > 0.0 ? -1.0 : 1.0, 0.0); // Will be coppied in c# wrapper.\n    } else { // Start point is inside of cylinder and the ray is pointing away from first intersection point.\n      var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n\n      if (y2 > height) { // Line intersects cylinder above edge top.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n        var k = p1x * dx + dy * (p1y - height);\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and top circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the top circle.\n          return false;\n        }\n      } else if (y2 < 0.0) { // Line intersects cylinder below edge bottom.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + p1y * p1y - radius * radius;\n        var k = p1x * dx + p1y * dy;\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and bottom circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the bottom circle.\n          return false;\n        }\n      }\n      // The ray starts inside of the shape.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal();\n    }\n  }\n\n  output.normal.rotT(this.m_alignRot).rot(xf.q);\n  return true;\n};\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n *\n * @param {Number} radius Radius extending around the chain.\n */\nfunction ChainShape(vertices, loop, radius) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_count = this.m_vertices.length = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count > 0 ? this.m_count - 1 : 0;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n  edge.m_edgeRadius = this.m_edgeRadius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0 || this.m_count < 2) {\n    return false;\n  }\n  var vertices = this.m_vertices;\n  var edgeShape = new EdgeShape(vertices[0], vertices[1], this.m_edgeRadius);\n  if (edgeShape.testPoint(xf, p)) {\n    return true;\n  }\n  for (var count = this.m_count, i = 2; i < count; ++i) {\n    edgeShape._set(vertices[i - 1], vertices[i]);\n    if (edgeShape.testPoint(xf, p)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1), this.m_edgeRadius);\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an impulse to the center of mass. This immediately modifies the velocity.\n * This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulseToCenter = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.isActive()) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = fixture.isActive();\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint, res) {\n  return Transform.mulVec2(this.m_xf, localPoint, res);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  if (this.m_activeFlag) {\n    var childCount = this.m_proxyCount = this.m_shape.getChildCount();\n    for (var i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * Gets aabb proxy id.\n *\n * @param {Number} childIndex Child index to get proxy id for.\n */\nFixture.prototype.getProxyId = function(childIndex) {\n  return this.m_proxies[childIndex].proxyId;\n};\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  broadPhase = broadPhase || this.m_body.getWorld().m_broadPhase;\n  xf = xf || this.m_body.getTransform();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxies.length = this.m_proxyCount = this.m_shape.getChildCount();\n\n  // Create proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i] = this.m_proxies[i] || new FixtureProxy(this, i);\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null || !this.m_activeFlag) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\n/**\n * If this fixture is used in physics calculations.\n *\n * @return {boolean} True if active, false otherwise.\n */\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This fixture will be used in physics callculations if true, and skipped if false.\n */\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n\n/**\n * @function Fixture~overlapCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap current fixture.\n *\n * @param {Fixture~overlapCallback} callback Called for each fixture found.\n */\nFixture.prototype.queryOverlaps = function(callback) {\n  if (!this.m_activeFlag || this.m_proxyCount == 0) {\n    return;\n  }\n  var world = this.m_body.getWorld();\n  if (world == null) {\n    return;\n  }\n  if (this._reportOverlap == Fixture.prototype._reportOverlap) {\n    this._reportOverlap = this._reportOverlap.bind(this);\n  }\n  this._overlaps = {};\n  this._overlapCallback = callback;\n  this._transform = this.m_body.getTransform();\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    this._childIndex = i;\n    world.queryAABB(this.m_proxies[i].aabb, this._reportOverlap);\n  }\n  this._transform = this._childIndex = this._overlaps = this._overlapCallback = callback = null;\n};\n\n/**\n * Called for each overlapping fixture. Used internally.\n */\nFixture.prototype._reportOverlap = function(fixture, proxy) {\n  if (fixture == this) {\n    return true;\n  }\n  var id = fixture.m_proxies[0].proxyId;\n  if (this._overlaps[id] ||\n    !this.m_shape.testOverlap(this._transform, this._childIndex, fixture.m_shape, fixture.m_body.getTransform(), proxy.childIndex)) {\n    return true;\n  }\n  this._overlaps[id] = true;\n  return this._overlapCallback(fixture); // Dynamic tree must not be modified here.\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar AABB = require('./collision/AABB');\nvar CircleShape = require('./shape/CircleShape');\n\nvar _aabb, _transform, _circle;\nvar _reportFixtureAABBCallback, _reportFixtureCallback, _hits;\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param aabb The query box.\n *\n * @param {function} queryCallback Called for each fixture\n *          found in the query. It may return `false` to terminate the query.\n *\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  _reportFixtureAABBCallback = queryCallback;\n  this.m_broadPhase.query(aabb, this._queryAABBCallback);\n  _reportFixtureAABBCallback = null;\n};\n\n/**\n * Called for each fixture found in the query AABB.\n * Used internally.\n */\nWorld.prototype._queryAABBCallback = function(proxyId, proxy) {\n  return _reportFixtureAABBCallback(proxy.fixture, proxy);\n};\n\n/**\n * Query the world for all fixtures that potentially overlap the provided circle.\n *\n * @param {planck.Vec2} center The circle center.\n * @param {float} radius The circle radius.\n * @param {function} queryCallback Called for each fixture\n *          found in the query. It may return `false` to terminate the query.\n *\n */\nWorld.prototype.queryCircle = function(center, radius, queryCallback) {\n  _circle = _circle || new CircleShape();\n  _circle.setRadius(radius);\n\n  _transform = _transform || new Transform();\n  _transform.p.set(center);\n\n  _aabb = _aabb || new AABB();\n  _circle.computeAABB(_aabb, _transform);\n\n  _hits = {};\n  _reportFixtureCallback = queryCallback;\n  this.queryAABB(_aabb, this._queryCircleCallback);\n  _hits = _reportFixtureCallback = null;\n};\n\n/**\n * Called for each fixture found in the circle query.\n * Used internally.\n */\nWorld.prototype._queryCircleCallback = function(fixture, proxy) {\n  var id = fixture.m_proxies[0].proxyId;\n\n  if (_hits[id] || !_circle.testOverlap(_transform, 0, fixture.m_shape, fixture.m_body.getTransform(), proxy.childIndex)) {\n    return true;\n  }\n\n  _hits[id] = true;\n  return _reportFixtureCallback(fixture); // Dynamic tree must not be modified here.\n};\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} callback A user implemented callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, callback) {\n  _hits = {};\n  _reportFixtureCallback = callback;\n  this.m_broadPhase.rayCast(null, this._raycastCallback, point1, point2, 1.0);\n  _hits = _reportFixtureCallback = null;\n};\n\n/**\n * A function that is called for each proxy that is hit by the ray.\n * Used internally.\n */\nWorld.prototype._raycastCallback = function(input, proxyId, proxy) {\n  var fixture = proxy.fixture;\n  var id = fixture.getProxyId(0);\n  if (_hits[id]) {\n    return input.maxFraction;\n  }\n  var index = proxy.childIndex;\n  var output = {}; // TODO GC\n  var hit = fixture.rayCast(output, input, index);\n  if (hit) {\n    _hits[id] = true;\n    var fraction = output.fraction;\n    var point = input.p1.mul(1.0 - fraction).add(input.p2.mul(fraction));\n    return _reportFixtureCallback(fixture, point, output.normal, fraction);\n  }\n  return input.maxFraction;\n};\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyA = fixtureA.getBody();\n    if (!bodyA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyB = fixtureB.getBody();\n    if (!bodyB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id, node.userData);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  p1 = p1 || input.p1;\n  p2 = p2 || input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  maxFraction = maxFraction >= 0.0 ? maxFraction : input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(p1);\n      subInput.p2 = Vec2.clone(p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id, node.userData);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false,\n  active: true\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * Sets the local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.setLocalAnchorA = function(anchor) {\n  return this.m_localAnchorA = anchor;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Sets the local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.setLocalAnchorB = function(anchor) {\n  return this.m_localAnchorB = anchor;\n};\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0,\n  active: true\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) {\n  this.m_tree.rayCast(input, rayCastCallback, p1, p2, maxFraction);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        var fixtureA = contact.m_fixtureA;\n        var fixtureB = contact.m_fixtureB;\n\n        if (!(fixtureA.isActive() && fixtureB.isActive())) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = fixtureA.m_isSensor;\n        var sensorB = fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true || je.joint.m_activeFlag == false) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        if (!(fA.isActive() && fB.isActive())) {\n          continue;\n        }\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nvar pA = new Vec2(), pB = new Vec2();\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  pA = Transform.mulVec2(xfA, circleA.m_p, pA);\n  pB = Transform.mulVec2(xfB, circleB.m_p, pB);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n};\n\nexports.CollideCircles = CollideCircles;\n\nContact.circlesOverlap = function(circleA, xfA, circleB, xfB) {\n  pA = Transform.mulVec2(xfA, circleA.m_p, pA);\n  pB = Transform.mulVec2(xfB, circleB.m_p, pB);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  return radius * radius > distSqr;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nvar Q = new Vec2(), e = new Vec2(), d = new Vec2(), edge;\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  edge = edge || new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p, Q), Q);\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  e = e.set(B).sub(A);\n\n  // Barycentric coordinates\n  var v = Vec2.dot(e, d.set(Q).sub(A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = A;\n    d = d.set(Q).sub(P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = e.set(B1).sub(A1);\n      var u1 = Vec2.dot(e1, d.set(B1).sub(Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n\n  // Region B\n  if (u <= 0.0) {\n    var P = B;\n    d = d.set(Q).sub(P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = e.set(B2).sub(A2);\n      var v2 = Vec2.dot(e2, d.set(Q).sub(A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = d.setCombine(u / den, A, v / den, B);\n  d = d.set(-P.x, -P.y).add(Q); // reusing d vector, <=> Vec2.sub(Q, P)\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = e.set(-e.y, e.x);\n  if (Vec2.dot(n, d.set(Q).sub(A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal.set(n);\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n};\n\nContact.chainCircleOverlap = function(chainA, indexA, xfA, circleB, xfB) {\n  edge = edge || new EdgeShape();\n  chainA.getChildEdge(edge, indexA);\n  return Contact.edgeCircleOverlap(edge, xfA, circleB, xfB);\n};\n\nContact.edgeCircleOverlap = function(edgeA, xfA, circleB, xfB) {\n  // Compute circle in frame of edge\n  Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p, Q), Q);\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  e = e.set(B).sub(A);\n\n  // Barycentric coordinates\n  var v = Vec2.dot(e, d.set(Q).sub(A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = A;\n    d = d.set(Q).sub(P);\n    var dd = Vec2.dot(d, d);\n    if (dd >= radius * radius) {\n      return false;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = e.set(B1).sub(A1);\n      var u1 = Vec2.dot(e1, d.set(B1).sub(Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, d.set(B).sub(Q));\n\n  // Region B\n  if (u <= 0.0) {\n    var P = B;\n    d = d.set(Q).sub(P);\n    var dd = Vec2.dot(d, d);\n    if (dd >= radius * radius) {\n      return false;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = e.set(B2).sub(A2);\n      var v2 = Vec2.dot(e2, d.set(Q).sub(A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  var P = den > 0.0 ? e.setCombine(u / den, A, v / den, B) : A;\n  d = d.set(Q).sub(P);\n  var dd = Vec2.dot(d, d);\n  return dd < radius * radius;\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n    var offset = Vec2.dot(n, v1);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - offset;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nvar cLocal = new Vec2(), d = new Vec2(), r = new Vec2();\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  cLocal = Transform.mulVec2(xfB, circleB.m_p, cLocal);\n  cLocal = Transform.mulTVec2(xfA, cLocal, cLocal);\n\n  // Find the separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], d.set(cLocal).sub(vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  if (Vec2.dot(d.set(cLocal).sub(v1), r.set(v2).sub(v1)) <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (Vec2.dot(d.set(cLocal).sub(v2), r.set(v1).sub(v2)) <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2, r);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n};\n\nContact.polygonCircleOverlap = function(polygonA, xfA, circleB, xfB) {\n  // Compute circle position in the frame of the polygon.\n  cLocal = Transform.mulVec2(xfB, circleB.m_p, cLocal);\n  cLocal = Transform.mulTVec2(xfA, cLocal, cLocal);\n\n  // Find the separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], d.set(cLocal).sub(vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    return true;\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  if        (Vec2.dot(d.set(cLocal).sub(v1), r.set(v2).sub(v1)) <= 0.0) { return Vec2.distanceSquared(cLocal, v1) < radius * radius;\n  } else if (Vec2.dot(d.set(cLocal).sub(v2), r.set(v1).sub(v2)) <= 0.0) { return Vec2.distanceSquared(cLocal, v2) < radius * radius;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2, r);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1]) - Vec2.dot(faceCenter, normals[vertIndex1]);\n    return separation < radius;\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = edgeA.m_radius + polygonB.m_radius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * Sets the local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.setLocalAnchorA = function(anchor) {\n  return this.m_localAnchorA = anchor;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Sets the local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.setLocalAnchorB = function(anchor) {\n  return this.m_localAnchorB = anchor;\n};\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n  active: true\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0,\n  active: true\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3,\n  active: true\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true,\n  active: true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n  active: true\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * Sets the local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.setLocalAnchorA = function(anchor) {\n  return this.m_localAnchorA = anchor;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Sets the local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.setLocalAnchorB = function(anchor) {\n  return this.m_localAnchorB = anchor;\n};\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setLength = function(length) {\n  this.m_maxLength = length;\n};\n\nRopeJoint.prototype.getLength = function() {\n  return this.m_maxLength;\n};\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * Sets the local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.setLocalAnchorA = function(anchor) {\n  return this.m_localAnchorA = anchor;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Sets the local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.setLocalAnchorB = function(anchor) {\n  return this.m_localAnchorB = anchor;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n"],"sourceRoot":""}