{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_activeFlag","active","m_userData","userData","isActive","setActive","flag","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","push","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","stats","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","EdgeShape","radius","m_vertex1","m_vertex2","m_edgeRadius","m_noAlignRot","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","m_alignRot","_getAlignRot","m_alignedV2","_alignPoint","rayCastWithRadius","height","ry","p1x","p1y","y1","discr","k","t3","discrSqrt","t4","y2","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","string","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","edgeShape","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","body","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","destroyProxy","createProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","_reportFixtureCallback","_raycastCallback","undefined","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","reset","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stack","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","h","Iterator","iterator","close","parents","states","root","timer","Timer","now","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","time","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","opts","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","size","item","shift","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","Date","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy"],"mappings":"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","file":"planck.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\n/**\n * Creates zero vector.\n *\n * @return {Vec2} Zero vector.\n */\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\n/**\n * Zero vector for internal usage. Must not be modified.\n */\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Rotates current vector inline by specified rotation angle.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Rotates current vector inline by rotation angle negative to the specified one.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_activeFlag = def.active;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive or joint itself is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_activeFlag && this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This joint will be used in physics callculations if true, and skipped if false.\n */\nJoint.prototype.setActive = function(flag) {\n  this.m_activeFlag = flag;\n};\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2(), rot = new Rot();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  /*if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }*/\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  if (this.m_vertices[3]) {\n    this.m_vertices[0].set(-hx, -hy);\n    this.m_vertices[1].set(hx, -hy);\n    this.m_vertices[2].set(hx, hy);\n    this.m_vertices[3].set(-hx, hy);\n  } else {\n    this.m_vertices[0] = Vec2.neo(-hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, -hy);\n    this.m_vertices[2] = Vec2.neo(hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, hy);\n  }\n  if (this.m_normals[3]) {\n    this.m_normals[0].set(0.0, -1.0);\n    this.m_normals[1].set(1.0, 0.0);\n    this.m_normals[2].set(0.0, 1.0);\n    this.m_normals[3].set(-1.0, 0.0);\n  } else {\n    this.m_normals[0] = Vec2.neo(0.0, -1.0);\n    this.m_normals[1] = Vec2.neo(1.0, 0.0);\n    this.m_normals[2] = Vec2.neo(0.0, 1.0);\n    this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n  }\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center) &&\n    (center.x < -Math.EPSILON || Math.EPSILON < center.x ||\n    center.y < -Math.EPSILON || Math.EPSILON < center.y)) {\n    \n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n    rot.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = this.m_vertices[i].rot(rot).add(center);\n      this.m_normals[i] = this.m_normals[i].rot(rot);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    d = d.set(this.m_outsidePoint).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set( v1.set(this.m_vertices[i]) ).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (denominator == 0.0) { // Ray is parallel to poligon's side.\n      continue;\n    } else {\n\n      var a = numerator / denominator;\n      p.set(d).mul(a).add(p1);\n\n      v2.set( this.m_vertices[ i + 1 < this.m_count ? i + 1 : 0 ] ); // Set second vertex.\n      var intersects = Vec2.dot(v1.sub(p), v2.sub(p)) < 0.0; // If ray line intersects polygon side.\n      if (!intersects) {\n        continue;\n      }\n\n      lower = 0.0;\n      upper = maxFraction;\n\n      intersects = lower < a; // If half-line intersects polygon side.\n      if (intersects) {\n        ++count;\n      }\n\n      if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = a;\n      } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = a;\n      }\n\n    }\n\n    if (lower <= upper && lower < lowest) {\n      index = i; // Save closest intersection.\n    }\n\n  }\n\n  if (count & 1) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    output.normal = Vec2.ZERO; // we are safe to return a reference as it's coppied in c# wrapper.\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = d.set(this.m_normals[index]).rot(xf.q);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = Vec2.ZERO;\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n *\n * @param {Number} radius Radius extending around the edge.\n */\nfunction EdgeShape(v1, v2, radius) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n    this.m_noAlignRot = true; // This rotation is used to align the edge to y axis,\n                              // so v1 is in origin and (v1, v2) is codirectional with y.\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  this.m_noAlignRot = true;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  clone.m_edgeRadius = this.m_edgeRadius;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nEdgeShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0) { // No radius => we never inside.\n    return false;\n  }\n  // Put the point into the edge's frame of reference.\n  p = p1.set(p).sub(xf.p).rotT(xf.q);\n\n  // Transform all points so v2 is on y axis, positive half-space, v1 is in (0, 0).\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n  p = this._alignPoint(p);\n  var v2 = this.m_alignedV2;\n\n  var radius = this.m_edgeRadius;\n  if (p.y > v2.y) {\n    var dx = p.x - v2.x, dy = p.y - v2.y;\n    return dx * dx + dy * dy < radius * radius;\n  }\n  if (p.y < 0.0) {\n    return p.x * p.x + p.y * p.y < radius * radius;\n  }\n  return -radius < p.x && p.x < radius;\n};\n\n/**\n * Creates a rotation to be used to align the edge to y axis.\n *\n * @return {Rot} Rotation used to align points.\n */\nEdgeShape.prototype._getAlignRot = function() {\n  var rot = this.m_alignRot = this.m_alignRot || new Rot();\n  this.m_noAlignRot = false;\n\n  var v1 = this.m_vertex1, v2 = this.m_vertex2;\n  var length = d.set(v2).sub(v1).length();\n\n  if (length <= Math.EPSILON) {\n    return rot;\n  }\n\n  // cos = ( x1 * x2 + y1 * y2 ) / ( length1 * length2 )\n  // sin = ( x1 * y2 - x2 * y1 ) / ( length1 * length2 )\n  // x1 = d.x, y1 = d.y\n  // x2 = 0, y2 = 1\n  // length1 = length, length2 = 1\n  rot.c = d.y / length;\n  rot.s = d.x / length;\n\n  return rot;\n};\n\n/**\n * Inline-transforms provided point so it's in coordinate system where current edge is aligned to y axis.\n *\n * @param {Vec2} p Point.\n * @return {Vec2} The transformed point.\n */\nEdgeShape.prototype._alignPoint = function(p) {\n  return p.sub(this.m_vertex1).rot(this.m_alignRot);\n};\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  if (this.m_edgeRadius > 0.0) {\n    return this.rayCastWithRadius(output, input, xf);\n  }\n\n  v1 = v1.set(this.m_vertex1);\n  v2 = v2.set(this.m_vertex2);\n  v2 = v2.sub(v1);\n  var r = v2;\n  p = p.set(r.y, -r.x);\n  var normal = p;\n  var length = normal.normalize();\n\n  if (length <= Math.EPSILON) { // The edge is a point, can't intersect.\n    return false;\n  }\n\n  // Put the ray into the edge's frame of reference.\n  p1 = p1.set(input.p1).sub(xf.p).rotT(xf.q);\n  p2 = p2.set(input.p2).sub(xf.p).rotT(xf.q);\n  d = d.set(p2).sub(p1);\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator <= Math.EPSILON) { // Ray is parallel to the edge.\n    return false;\n  }\n\n  p2 = p2.set(v1).sub(p1);\n  var numerator = Vec2.dot(normal, p2);\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var rr = length * length;\n\n  // q = p1 + t * d\n  d = d.mul(t);\n  p1 = p1.add(d);\n  var q = p1;\n\n  q = q.sub(v1);\n  var s = Vec2.dot(q, r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = normal.rot(xf.q).neg(); // We are safe to return a reference as it's coppied in c# wrapper.\n  } else {\n    output.normal = normal.rot(xf.q); // We are safe to return a reference as it's coppied in c# wrapper.\n  }\n  return true;\n};\n\n/**\n * Used internally to do ray casts if current edge has positive radius.\n *\n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n */\nEdgeShape.prototype.rayCastWithRadius = function(output, input, xf) {\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n\n  var radius = this.m_edgeRadius;\n\n  // Put the ray into the edge's frame of reference.\n  p1 = this._alignPoint( p1.set(input.p1).sub(xf.p).rotT(xf.q) );\n  p2 = this._alignPoint( p2.set(input.p2).sub(xf.p).rotT(xf.q) );\n  d = d.set(p2).sub(p1);\n  var dx = d.x;\n\n  if (-Math.EPSILON <= dx && dx <= Math.EPSILON) { // The ray runs parallel to edge y axis.\n    var px = p1.x; // Intersection point x component.\n    if (px <= -radius || radius <= px) { // The ray runs parallel to the edge and fully outside of its radius.\n      return false;\n    }\n    var height = this.m_alignedV2.y;\n    var ry = Math.sqrt(radius * radius - px * px);\n    var py = height + ry; // Intersection point y component.\n\n    if (p1.y >= py) { // The ray starts above top.\n      if (p2.y >= py) { // The ray ends above top, it's fully outside.\n        return false;\n      }\n      output.fraction = (p1.y - py) / d.length();\n      output.normal = p.set(px, ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else if (p1.y <= -ry) { // The ray starts below bottom.\n      if (p2.y <= -ry) { // The ray ends below bottom, it's fully outside.\n        return false;\n      }\n      output.fraction = (-p1.y - ry) / d.length();\n      output.normal = p.set(px, -ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else { // The ray starts between top and bottom.\n      output.fraction = 0.0;\n      output.normal = Vec2.ZERO; // Will be coppied in c# wrapper.\n    }\n  } else { // The ray is not parallel to edge y axis.\n    var p1x = p1.x;\n    var t1 = (-radius - p1x) / dx; // Intersection points of the ray line and cylinder containing edge with radius.\n    var t2 = (radius - p1x) / dx;\n\n    if ( (t1 <= 0.0 && t2 <= 0.0) || (t1 >= 1.0 && t2 >= 1.0) ) { // Intersections are outside of the ray.\n      return false;\n    }\n\n    if (t1 > t2) {\n      var t = t1;\n      t1 = t2;\n      t2 = t;\n    }\n\n    var dy = d.y;\n    var p1y = p1.y;\n    var y1 = p1y + t1 * dy;\n    if (y1 > height) { // Line intersects cylinder above edge top.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n      var k = p1x * dx + dy * (p1y - height);\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect top circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and top circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy - height); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and top circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 >= height) { // Line and top circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects bottom semicircle of the top circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 < 0.0) { // Line intersects cylinder below edge bottom, i. e. intersects bottom circle.\n\n            c += height * (2 * p1y - height);\n            k += dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n              return null;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from bottom circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = Vec2.ZERO; // Will be coppied in c# wrapper.\n      }\n    } else if (y1 < 0.0) { // Line intersects cylinder below edge bottom.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + p1y * p1y - radius * radius;\n      var k = p1x * dx + p1y * dy;\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect bottom circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and bottom circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and bottom circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 <= 0.0) { // Line and bottom circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects top semicircle of the bottom circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 > height) { // Line intersects cylinder above edge bottom, i. e. intersects top circle.\n\n            c -= height * (2 * p1y - height);\n            k -= dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n              return null;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from top circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = Vec2.ZERO; // Will be coppied in c# wrapper.\n      }\n    } else if (t1 >= 0.0) { // The ray intersects cylinder between top and bottom (first intersection point).\n      output.fraction = t1;\n      output.normal = p.set(dx > 0.0 ? -1.0 : 1.0, 0.0); // Will be coppied in c# wrapper.\n    } else { // Start point is inside of cylinder and the ray is pointing away from first intersection point.\n      var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n\n      if (y2 > height) { // Line intersects cylinder above edge top.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n        var k = p1x * dx + dy * (p1y - height);\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and top circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the top circle.\n          return false;\n        }\n      } else if (y2 < 0.0) { // Line intersects cylinder below edge bottom.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + p1y * p1y - radius * radius;\n        var k = p1x * dx + p1y * dy;\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and bottom circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the bottom circle.\n          return false;\n        }\n      }\n      // The ray starts inside of the shape.\n      output.fraction = 0.0;\n      output.normal = Vec2.ZERO;\n    }\n  }\n\n  output.normal.rotT(this.m_alignRot).rot(xf.q);\n  return true;\n};\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an impulse to the center of mass. This immediately modifies the velocity.\n * This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulseToCenter = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.isActive()) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = fixture.isActive();\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n *\n * @param {Number} radius Radius extending around the chain.\n */\nfunction ChainShape(vertices, loop, radius) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_count = this.m_vertices.length = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count > 0 ? this.m_count - 1 : 0;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n  edge.m_edgeRadius = this.m_edgeRadius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0 || this.m_count < 2) {\n    return false;\n  }\n  var vertices = this.m_vertices;\n  var edgeShape = new EdgeShape(vertices[0], vertices[1], this.m_edgeRadius);\n  if (edgeShape.testPoint(xf, p)) {\n    return true;\n  }\n  for (var count = this.m_count, i = 2; i < count; ++i) {\n    edgeShape._set(vertices[i - 1], vertices[i]);\n    if (edgeShape.testPoint(xf, p)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1), this.m_edgeRadius);\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  if (this.m_activeFlag) {\n    var childCount = this.m_proxyCount = this.m_shape.getChildCount();\n    for (var i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  broadPhase = broadPhase || this.m_body.getWorld().m_broadPhase;\n  xf = xf || this.m_body.getTransform();\n\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = this.m_proxies.length - 1; i >= this.m_proxyCount; --i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxies.length = this.m_proxyCount;\n\n  // Create proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i] = this.m_proxies[i] || new FixtureProxy(this, i);\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null || !this.m_activeFlag) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\n/**\n * If this fixture is used in physics calculations.\n *\n * @return {boolean} True if active, false otherwise.\n */\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This fixture will be used in physics callculations if true, and skipped if false.\n */\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  World._reportFixtureCallback = reportFixtureCallback;\n  this.m_broadPhase.rayCast(null, this._raycastCallback, point1, point2, 1.0);\n  World._reportFixtureCallback = undefined;\n};\n\n/**\n * A function that is called for each proxy that is hit by the ray.\n * Used internally.\n */\nWorld.prototype._raycastCallback = function(input, proxyId, proxy) {\n  var fixture = proxy.fixture;\n  var index = proxy.childIndex;\n  var output = {}; // TODO GC\n  var hit = fixture.rayCast(output, input, index);\n  if (hit) {\n    var fraction = output.fraction;\n    var point = input.p1.mul(1.0 - fraction).add(input.p2.mul(fraction));\n    return World._reportFixtureCallback(fixture, point, output.normal, fraction);\n  }\n  return input.maxFraction;\n};\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyA = fixtureA.getBody();\n    if (!bodyA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyB = fixtureB.getBody();\n    if (!bodyB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  p1 = p1 || input.p1;\n  p2 = p2 || input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  maxFraction = maxFraction >= 0.0 ? maxFraction : input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(p1);\n      subInput.p2 = Vec2.clone(p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id, node.userData);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false,\n  active: true\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0,\n  active: true\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) {\n  this.m_tree.rayCast(input, rayCastCallback, p1, p2, maxFraction);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        var fixtureA = contact.m_fixtureA;\n        var fixtureB = contact.m_fixtureB;\n\n        if (!(fixtureA.isActive() && fixtureB.isActive())) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = fixtureA.m_isSensor;\n        var sensorB = fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true || je.joint.m_activeFlag == false) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        if (!(fA.isActive() && fB.isActive())) {\n          continue;\n        }\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n    var offset = Vec2.dot(n, v1);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - offset;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = edgeA.m_radius + polygonB.m_radius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n  active: true\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0,\n  active: true\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3,\n  active: true\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true,\n  active: true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n  active: true\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n"],"sourceRoot":""}