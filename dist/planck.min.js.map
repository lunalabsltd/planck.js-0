{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","push","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","stats","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","EdgeShape","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","active","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","setActive","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","string","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","body","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","createProxy","destroyProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","reset","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","height","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stack","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","h","Iterator","iterator","close","parents","states","root","timer","Timer","now","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","time","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","opts","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","size","item","shift","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","Date","BoxShape","CollideCircles","circleA","circleB","distSqr","radius","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy"],"mappings":"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","file":"planck.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    p2.set(this.m_outsidePoint);\n    d = d.set(p2).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set( v1.set(this.m_vertices[i]) ).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (denominator == 0.0) { // Ray is parallel to poligon's side.\n      continue;\n    } else {\n\n      var a = numerator / denominator;\n      p.set(d).mul(a).add(p1);\n\n      v2.set( this.m_vertices[ i + 1 < this.m_count  ? i + 1 : 0 ] ); // Set second vertex.\n      var intersects = Vec2.dot(v1.sub(p), v2.sub(p)) < 0.0; // If ray line intersects polygon side.\n      if (!intersects) {\n        continue;\n      }\n\n      lower = 0.0;\n      upper = maxFraction;\n\n      intersects = lower < a; // If half-line intersects polygon side.\n      if (intersects) {\n        ++count;\n      }\n\n      if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = a;\n      } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = a;\n      }\n\n    }\n\n    if (lower <= upper && lower < lowest) {\n      index = i; // Save closest intersection.\n    }\n\n  }\n\n  if (count & 1) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    output.normal = Vec2.ZERO;\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = Vec2.ZERO;\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n"],"sourceRoot":""}