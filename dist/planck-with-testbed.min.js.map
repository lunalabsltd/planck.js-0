{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","normal","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_activeFlag","active","m_userData","userData","isActive","setActive","flag","getType","getBodyA","setBodyA","body","getBodyB","setBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","testOverlap","shapeTransform","shapeChildIndex","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","EPSION","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","radiusSum","EdgeShape","radius","m_vertex1","m_vertex2","m_edgeRadius","m_noAlignRot","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","m_alignRot","_getAlignRot","m_alignedV2","_alignPoint","rayCastWithRadius","height","ry","p1x","p1y","y1","discr","k","t3","discrSqrt","t4","y2","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","scale","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","edgeShape","_textures","render","context","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","indexOf","splice","timeout","time","setTimeout","timer","clearTimeout","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","getProxyId","destroyProxy","createProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","queryOverlaps","_reportOverlap","_overlaps","_overlapCallback","_transform","_childIndex","queryAABB","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryCallback","_reportFixtureCallback","query","_queryAABBCallback","point1","point2","reportFixtureCallback","_raycastCallback","_hits","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","Iterator","iterator","close","parents","states","root","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","undefined","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","x2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","reverse","inversed","map","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","ctx","save","lineCap","drawing","restore","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","str","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","self","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","join","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":"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","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\n/**\n * Creates zero vector.\n *\n * @return {Vec2} Zero vector.\n */\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\n/**\n * Zero vector for internal usage. Must not be modified.\n */\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns this vector.\n */\nVec2.prototype.normal = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return this;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return this;\n};\n\n/**\n * Rotates current vector inline by specified rotation angle.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Rotates current vector inline by rotation angle negative to the specified one.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_activeFlag = def.active;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive or joint itself is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_activeFlag && this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This joint will be used in physics callculations if true, and skipped if false.\n */\nJoint.prototype.setActive = function(flag) {\n  this.m_activeFlag = flag;\n};\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Set the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.setBodyA = function(body) {\n  this.m_bodyA = body;\n};\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Set the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.setBodyB = function(body) {\n  this.m_bodyB = body;\n};\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n\n/**\n * Tests if current shape overlaps with a provided shape.\n *\n * @param {planck.Shape} shape A shape to test for overlapping with a current one.\n * @param {Transform} transform The transform applied to the shape.\n * @param {Number} childIndex The child shape index\n * @return {Boolean} True if shapes overlap, false otherwise.\n */\nShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2(), rot = new Rot();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  /*if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }*/\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  if (this.m_vertices[3]) {\n    this.m_vertices[0].set(-hx, -hy);\n    this.m_vertices[1].set(hx, -hy);\n    this.m_vertices[2].set(hx, hy);\n    this.m_vertices[3].set(-hx, hy);\n  } else {\n    this.m_vertices[0] = Vec2.neo(-hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, -hy);\n    this.m_vertices[2] = Vec2.neo(hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, hy);\n  }\n  if (this.m_normals[3]) {\n    this.m_normals[0].set(0.0, -1.0);\n    this.m_normals[1].set(1.0, 0.0);\n    this.m_normals[2].set(0.0, 1.0);\n    this.m_normals[3].set(-1.0, 0.0);\n  } else {\n    this.m_normals[0] = Vec2.neo(0.0, -1.0);\n    this.m_normals[1] = Vec2.neo(1.0, 0.0);\n    this.m_normals[2] = Vec2.neo(0.0, 1.0);\n    this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n  }\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center) &&\n    (center.x < -Math.EPSILON || Math.EPSILON < center.x ||\n    center.y < -Math.EPSILON || Math.EPSILON < center.y)) {\n    \n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n    rot.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = this.m_vertices[i].rot(rot).add(center);\n      this.m_normals[i] = this.m_normals[i].rot(rot);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    d = d.set(this.m_outsidePoint).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    v1.set(this.m_vertices[i]);\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set(v1).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (-Math.EPSION <= denominator && denominator <= Math.EPSION) { // Ray is parallel to poligon's side.\n      continue;\n    }\n\n    var a = numerator / denominator;\n    p.set(d).mul(a).add(p1);\n\n    v2.set( this.m_vertices[ i + 1 < this.m_count ? i + 1 : 0 ] ); // Set second vertex.\n    var intersects = Vec2.dot(v1.sub(p), v2.sub(p)) < 0.0; // If ray line intersects polygon side.\n    if (!intersects) {\n      continue;\n    }\n\n    lower = 0.0;\n    upper = maxFraction;\n\n    intersects = lower <= a; // If half-line intersects polygon side.\n    if (intersects) {\n      ++count;\n    }\n\n    if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n      // Increase lower.\n      // The segment enters this half-space.\n      lower = a;\n    } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n      // Decrease upper.\n      // The segment exits this half-space.\n      upper = a;\n    } else { // No intersection.\n      continue;\n    }\n\n    if (lower <= upper) {\n      index = i; // Save closest intersection.\n      if (a < lowest) {\n        lowest = a;\n      }\n    }\n\n  }\n\n  if (count & 1) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = isPoint ? Vec2.ZERO : d.neg().normal().rot(xf.q);\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = d.set(this.m_normals[index]).rot(xf.q);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), r = new Vec2();\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n  var r = Vec2.sub(input.p2, input.p1);\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = r.neg().normal();\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r)).normal();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n\nCircleShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n  if (shape.m_type != CircleShape.TYPE) {\n    return; // Only circles are supported.\n  }\n\n  p = p.set(this.m_p).rot(transform.q).add(transform.p);\n  r = r.set(shape.m_p).rot(shapeTransform.q).add(shapeTransform.p);\n\n  var lengthSquared = p.sub(r).lengthSquared();\n  var radiusSum = this.m_radius + shape.m_radius;\n\n  return radiusSum * radiusSum > lengthSquared\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n *\n * @param {Number} radius Radius extending around the edge.\n */\nfunction EdgeShape(v1, v2, radius) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n    this.m_noAlignRot = true; // This rotation is used to align the edge to y axis,\n                              // so v1 is in origin and (v1, v2) is codirectional with y.\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  this.m_noAlignRot = true;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  clone.m_edgeRadius = this.m_edgeRadius;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nEdgeShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0) { // No radius => we never inside.\n    return false;\n  }\n  // Put the point into the edge's frame of reference.\n  p = p1.set(p).sub(xf.p).rotT(xf.q);\n\n  // Transform all points so v2 is on y axis, positive half-space, v1 is in (0, 0).\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n  p = this._alignPoint(p);\n  var v2 = this.m_alignedV2;\n\n  var radius = this.m_edgeRadius;\n  if (p.y > v2.y) {\n    var dx = p.x - v2.x, dy = p.y - v2.y;\n    return dx * dx + dy * dy < radius * radius;\n  }\n  if (p.y < 0.0) {\n    return p.x * p.x + p.y * p.y < radius * radius;\n  }\n  return -radius < p.x && p.x < radius;\n};\n\n/**\n * Creates a rotation to be used to align the edge to y axis.\n *\n * @return {Rot} Rotation used to align points.\n */\nEdgeShape.prototype._getAlignRot = function() {\n  var rot = this.m_alignRot = this.m_alignRot || new Rot();\n  this.m_noAlignRot = false;\n\n  var v1 = this.m_vertex1, v2 = this.m_vertex2;\n  var length = d.set(v2).sub(v1).length();\n\n  if (length <= Math.EPSILON) {\n    return rot;\n  }\n\n  // cos = ( x1 * x2 + y1 * y2 ) / ( length1 * length2 )\n  // sin = ( x1 * y2 - x2 * y1 ) / ( length1 * length2 )\n  // x1 = d.x, y1 = d.y\n  // x2 = 0, y2 = 1\n  // length1 = length, length2 = 1\n  rot.c = d.y / length;\n  rot.s = d.x / length;\n\n  return rot;\n};\n\n/**\n * Inline-transforms provided point so it's in coordinate system where current edge is aligned to y axis.\n *\n * @param {Vec2} p Point.\n * @return {Vec2} The transformed point.\n */\nEdgeShape.prototype._alignPoint = function(p) {\n  return p.sub(this.m_vertex1).rot(this.m_alignRot);\n};\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  if (this.m_edgeRadius > 0.0) {\n    return this.rayCastWithRadius(output, input, xf);\n  }\n\n  v1 = v1.set(this.m_vertex1);\n  v2 = v2.set(this.m_vertex2);\n  v2 = v2.sub(v1);\n  var r = v2;\n  p = p.set(r.y, -r.x);\n  var normal = p;\n  var length = normal.normalize();\n\n  if (length <= Math.EPSILON) { // The edge is a point, can't intersect.\n    return false;\n  }\n\n  // Put the ray into the edge's frame of reference.\n  p1 = p1.set(input.p1).sub(xf.p).rotT(xf.q);\n  p2 = p2.set(input.p2).sub(xf.p).rotT(xf.q);\n  d = d.set(p2).sub(p1);\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator <= Math.EPSILON) { // Ray is parallel to the edge.\n    return false;\n  }\n\n  p2 = p2.set(v1).sub(p1);\n  var numerator = Vec2.dot(normal, p2);\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var rr = length * length;\n\n  // q = p1 + t * d\n  d = d.mul(t);\n  p1 = p1.add(d);\n  var q = p1;\n\n  q = q.sub(v1);\n  var s = Vec2.dot(q, r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = normal.rot(xf.q).neg(); // We are safe to return a reference as it's coppied in c# wrapper.\n  } else {\n    output.normal = normal.rot(xf.q); // We are safe to return a reference as it's coppied in c# wrapper.\n  }\n  return true;\n};\n\n/**\n * Used internally to do ray casts if current edge has positive radius.\n *\n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n */\nEdgeShape.prototype.rayCastWithRadius = function(output, input, xf) {\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n\n  var radius = this.m_edgeRadius;\n\n  // Put the ray into the edge's frame of reference.\n  p1 = this._alignPoint( p1.set(input.p1).sub(xf.p).rotT(xf.q) );\n  p2 = this._alignPoint( p2.set(input.p2).sub(xf.p).rotT(xf.q) );\n  d = d.set(p2).sub(p1);\n  var dx = d.x;\n\n  if (-Math.EPSILON <= dx && dx <= Math.EPSILON) { // The ray runs parallel to edge y axis.\n    var px = p1.x; // Intersection point x component.\n    if (px <= -radius || radius <= px) { // The ray runs parallel to the edge and fully outside of its radius.\n      return false;\n    }\n    var height = this.m_alignedV2.y;\n    var ry = Math.sqrt(radius * radius - px * px);\n    var py = height + ry; // Intersection point y component.\n\n    if (p1.y >= py) { // The ray starts above top.\n      if (p2.y >= py) { // The ray ends above top, it's fully outside.\n        return false;\n      }\n      output.fraction = (p1.y - py) / d.length();\n      output.normal = p.set(px, ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else if (p1.y <= -ry) { // The ray starts below bottom.\n      if (p2.y <= -ry) { // The ray ends below bottom, it's fully outside.\n        return false;\n      }\n      output.fraction = (-p1.y - ry) / d.length();\n      output.normal = p.set(px, -ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else { // The ray starts between top and bottom.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n    }\n  } else { // The ray is not parallel to edge y axis.\n    var p1x = p1.x;\n    var t1 = (-radius - p1x) / dx; // Intersection points of the ray line and cylinder containing edge with radius.\n    var t2 = (radius - p1x) / dx;\n\n    if ( (t1 <= 0.0 && t2 <= 0.0) || (t1 >= 1.0 && t2 >= 1.0) ) { // Intersections are outside of the ray.\n      return false;\n    }\n\n    if (t1 > t2) {\n      var t = t1;\n      t1 = t2;\n      t2 = t;\n    }\n\n    var dy = d.y;\n    var p1y = p1.y;\n    var y1 = p1y + t1 * dy;\n    if (y1 > height) { // Line intersects cylinder above edge top.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n      var k = p1x * dx + dy * (p1y - height);\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect top circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and top circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy - height); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and top circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 >= height) { // Line and top circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects bottom semicircle of the top circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 < 0.0) { // Line intersects cylinder below edge bottom, i. e. intersects bottom circle.\n\n            c += height * (2 * p1y - height);\n            k += dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from bottom circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (y1 < 0.0) { // Line intersects cylinder below edge bottom.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + p1y * p1y - radius * radius;\n      var k = p1x * dx + p1y * dy;\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect bottom circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and bottom circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and bottom circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 <= 0.0) { // Line and bottom circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects top semicircle of the bottom circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 > height) { // Line intersects cylinder above edge bottom, i. e. intersects top circle.\n\n            c -= height * (2 * p1y - height);\n            k -= dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from top circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (t1 >= 0.0) { // The ray intersects cylinder between top and bottom (first intersection point).\n      output.fraction = t1;\n      output.normal = p.set(dx > 0.0 ? -1.0 : 1.0, 0.0); // Will be coppied in c# wrapper.\n    } else { // Start point is inside of cylinder and the ray is pointing away from first intersection point.\n      var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n\n      if (y2 > height) { // Line intersects cylinder above edge top.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n        var k = p1x * dx + dy * (p1y - height);\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and top circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the top circle.\n          return false;\n        }\n      } else if (y2 < 0.0) { // Line intersects cylinder below edge bottom.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + p1y * p1y - radius * radius;\n        var k = p1x * dx + p1y * dy;\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and bottom circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the bottom circle.\n          return false;\n        }\n      }\n      // The ray starts inside of the shape.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal();\n    }\n  }\n\n  output.normal.rotT(this.m_alignRot).rot(xf.q);\n  return true;\n};\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an impulse to the center of mass. This immediately modifies the velocity.\n * This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulseToCenter = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.isActive()) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = fixture.isActive();\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n *\n * @param {Number} radius Radius extending around the chain.\n */\nfunction ChainShape(vertices, loop, radius) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_count = this.m_vertices.length = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count > 0 ? this.m_count - 1 : 0;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n  edge.m_edgeRadius = this.m_edgeRadius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0 || this.m_count < 2) {\n    return false;\n  }\n  var vertices = this.m_vertices;\n  var edgeShape = new EdgeShape(vertices[0], vertices[1], this.m_edgeRadius);\n  if (edgeShape.testPoint(xf, p)) {\n    return true;\n  }\n  for (var count = this.m_count, i = 2; i < count; ++i) {\n    edgeShape._set(vertices[i - 1], vertices[i]);\n    if (edgeShape.testPoint(xf, p)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1), this.m_edgeRadius);\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  if (this.m_activeFlag) {\n    var childCount = this.m_proxyCount = this.m_shape.getChildCount();\n    for (var i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * Gets aabb proxy id.\n *\n * @param {Number} childIndex Child index to get proxy id for.\n */\nFixture.prototype.getProxyId = function(childIndex) {\n  return this.m_proxies[childIndex].proxyId;\n};\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  broadPhase = broadPhase || this.m_body.getWorld().m_broadPhase;\n  xf = xf || this.m_body.getTransform();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxies.length = this.m_proxyCount = this.m_shape.getChildCount();\n\n  // Create proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i] = this.m_proxies[i] || new FixtureProxy(this, i);\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null || !this.m_activeFlag) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\n/**\n * If this fixture is used in physics calculations.\n *\n * @return {boolean} True if active, false otherwise.\n */\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This fixture will be used in physics callculations if true, and skipped if false.\n */\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n\n/**\n * @function Fixture~overlapCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap current fixture.\n *\n * @param {Fixture~overlapCallback} callback Called for each fixture found.\n */\nFixture.prototype.queryOverlaps = function(callback) {\n  if (!this.m_activeFlag || this.m_proxyCount == 0) {\n    return;\n  }\n  var world = this.m_body.getWorld();\n  if (world == null) {\n    return;\n  }\n  if (this._reportOverlap == Fixture.prototype._reportOverlap) {\n    this._reportOverlap = this._reportOverlap.bind(this);\n  }\n  this._overlaps = {};\n  this._overlapCallback = callback;\n  this._transform = this.m_body.getTransform();\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    this._childIndex = i;\n    world.queryAABB(this.m_proxies[i].aabb, this._reportOverlap);\n  }\n  this._transform = this._childIndex = this._overlaps = this._overlapCallback = callback = null;\n};\n\n/**\n * Called for each overlapping fixture. Used internally.\n */\nFixture.prototype._reportOverlap = function(fixture, proxy) {\n  if (fixture == this) {\n    return true;\n  }\n  var id = fixture.m_proxies[0].proxyId;\n  if (this._overlaps[id] ||\n    !this.m_shape.testOverlap(this._transform, this._childIndex, fixture.m_shape, fixture.m_body.getTransform(), proxy.childIndex)) {\n    return true;\n  }\n  this._overlaps[id] = true;\n  return this._overlapCallback(fixture); // Dynamic tree must not be modified here.\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n * @param proxy\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  World._reportFixtureCallback = queryCallback;\n  this.m_broadPhase.query(aabb, this._queryAABBCallback);\n  World._reportFixtureCallback = null;\n};\n\n/**\n * Called for each fixture found in the query AABB.\n * Used internally.\n */\nWorld.prototype._queryAABBCallback = function(proxyId, proxy) {\n  return World._reportFixtureCallback(proxy.fixture, proxy);\n};\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  if (this._raycastCallback == World.prototype._raycastCallback) {\n    this._raycastCallback = this._raycastCallback.bind(this);\n  }\n  this._hits = {};\n  this._reportFixtureCallback = reportFixtureCallback;\n  this.m_broadPhase.rayCast(null, this._raycastCallback, point1, point2, 1.0);\n  this._hits = this._reportFixtureCallback = reportFixtureCallback = null;\n};\n\n/**\n * A function that is called for each proxy that is hit by the ray.\n * Used internally.\n */\nWorld.prototype._raycastCallback = function(input, proxyId, proxy) {\n  var fixture = proxy.fixture;\n  var id = fixture.getProxyId(0);\n  if (this._hits[id]) {\n    return input.maxFraction;\n  }\n  var index = proxy.childIndex;\n  var output = {}; // TODO GC\n  var hit = fixture.rayCast(output, input, index);\n  if (hit) {\n    this._hits[id] = true;\n    var fraction = output.fraction;\n    var point = input.p1.mul(1.0 - fraction).add(input.p2.mul(fraction));\n    return this._reportFixtureCallback(fixture, point, output.normal, fraction);\n  }\n  return input.maxFraction;\n};\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyA = fixtureA.getBody();\n    if (!bodyA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyB = fixtureB.getBody();\n    if (!bodyB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id, node.userData);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  p1 = p1 || input.p1;\n  p2 = p2 || input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  maxFraction = maxFraction >= 0.0 ? maxFraction : input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(p1);\n      subInput.p2 = Vec2.clone(p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id, node.userData);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false,\n  active: true\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0,\n  active: true\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) {\n  this.m_tree.rayCast(input, rayCastCallback, p1, p2, maxFraction);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        var fixtureA = contact.m_fixtureA;\n        var fixtureB = contact.m_fixtureB;\n\n        if (!(fixtureA.isActive() && fixtureB.isActive())) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = fixtureA.m_isSensor;\n        var sensorB = fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true || je.joint.m_activeFlag == false) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        if (!(fA.isActive() && fB.isActive())) {\n          continue;\n        }\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n    var offset = Vec2.dot(n, v1);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - offset;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = edgeA.m_radius + polygonB.m_radius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n  active: true\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0,\n  active: true\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3,\n  active: true\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true,\n  active: true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n  active: true\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setLength = function(length) {\n  this.m_maxLength = length;\n};\n\nRopeJoint.prototype.getLength = function() {\n  return this.m_maxLength;\n};\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, -1, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          this._options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          this._options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          this._options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          this._options.fillStyle = b.render.fill;\n        } else {\n          this._options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, this._options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, this._options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, this._options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, this._options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, -p.y);\n          f.ui.rotate(-r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      this._options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, this._options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = (-a.y + -b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = -a.y - -b.y;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, -shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(-v1.y, -v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(-Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}