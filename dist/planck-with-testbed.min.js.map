{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","normal","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","res","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Transform","Rot","position","rotation","q","identity","xf","setIdentity","Array","isArray","arr","mulRot","mulVec2","mulAll","mulFn","mulXf","mulT","px","py","mulTRot","mulTVec2","mulTXf","angle","setAngle","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulSub","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_activeFlag","active","m_userData","userData","isActive","setActive","flag","getType","getBodyA","setBodyA","body","setAwake","getBodyB","setBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","AABB","lowerBound","upperBound","aabb","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","rayCast","output","input","tmin","Infinity","tmax","p1","p2","absD","f","inv_d","t1","t2","temp","maxFraction","fraction","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","transform","childIndex","computeAABB","computeMass","massData","density","computeDistanceProxy","proxy","shapeTransform","shapeChildIndex","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","CircleShape","ChainShape","EdgeShape","m_p","setRadius","radius","getVertexCount","rr","sigma","circlesOverlap","polygonCircleOverlap","chainCircleOverlap","edgeCircleOverlap","m_vertex1","m_vertex2","m_edgeRadius","m_noAlignRot","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","m_alignRot","_getAlignRot","m_alignedV2","_alignPoint","rayCastWithRadius","height","ry","p1x","p1y","y1","discr","k","t3","discrSqrt","t4","y2","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","edgeShape","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","scale","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","_textures","render","context","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","indexOf","splice","timeout","time","setTimeout","timer","clearTimeout","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","getProxyId","destroyProxy","createProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","queryOverlaps","_reportOverlap","_overlaps","_overlapCallback","_transform","_childIndex","queryAABB","World","_aabb","_circle","_reportFixtureAABBCallback","_reportFixtureCallback","_hits","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryCallback","query","_queryAABBCallback","queryCircle","_queryCircleCallback","point1","point2","_raycastCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","Iterator","iterator","close","parents","states","root","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","setLocalAnchorA","getLocalAnchorB","setLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","undefined","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","BoxShape","CollideCircles","circleA","circleB","distSqr","Q","CollideEdgeCircle","edgeA","A1","B1","u","B2","A2","den","chain","chainA","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","cLocal","polygonA","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","x2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","reverse","inversed","map","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","ctx","save","lineCap","drawing","restore","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","str","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","self","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","join","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":"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","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\n/**\n * Creates zero vector.\n *\n * @return {Vec2} Zero vector.\n */\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\n/**\n * Zero vector for internal usage. Must not be modified.\n */\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns this vector.\n */\nVec2.prototype.normal = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return this;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return this;\n};\n\n/**\n * Rotates current vector inline by specified rotation angle.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Rotates current vector inline by rotation angle negative to the specified one.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w, res) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var x = (v.x + w.x) * 0.5;\n  var y = (v.y + w.y) * 0.5;\n  return res ? res.set(x, y) : Vec2.neo(x, y);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b, res) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return res ? res.set(x, y) : Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b, res) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return res ? res.set(x, y) : Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_activeFlag = def.active;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive or joint itself is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_activeFlag && this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This joint will be used in physics callculations if true, and skipped if false.\n */\nJoint.prototype.setActive = function(flag) {\n  this.m_activeFlag = flag;\n};\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Set the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.setBodyA = function(body) {\n  this.m_bodyA = body;\n  body.setAwake(true);\n};\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Set the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.setBodyB = function(body) {\n  this.m_bodyB = body;\n  body.setAwake(true);\n};\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n\n/**\n * Tests if current shape overlaps with a provided shape.\n *\n * @param {planck.Shape} shape A shape to test for overlapping with a current one.\n * @param {Transform} transform The transform applied to the shape.\n * @param {Number} childIndex The child shape index\n * @return {Boolean} True if shapes overlap, false otherwise.\n */\nShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2(), rot = new Rot();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  /*if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }*/\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  if (this.m_vertices[3]) {\n    this.m_vertices[0].set(-hx, -hy);\n    this.m_vertices[1].set(hx, -hy);\n    this.m_vertices[2].set(hx, hy);\n    this.m_vertices[3].set(-hx, hy);\n  } else {\n    this.m_vertices[0] = Vec2.neo(-hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, -hy);\n    this.m_vertices[2] = Vec2.neo(hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, hy);\n  }\n  if (this.m_normals[3]) {\n    this.m_normals[0].set(0.0, -1.0);\n    this.m_normals[1].set(1.0, 0.0);\n    this.m_normals[2].set(0.0, 1.0);\n    this.m_normals[3].set(-1.0, 0.0);\n  } else {\n    this.m_normals[0] = Vec2.neo(0.0, -1.0);\n    this.m_normals[1] = Vec2.neo(1.0, 0.0);\n    this.m_normals[2] = Vec2.neo(0.0, 1.0);\n    this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n  }\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center) &&\n    (center.x < -Math.EPSILON || Math.EPSILON < center.x ||\n    center.y < -Math.EPSILON || Math.EPSILON < center.y)) {\n    \n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n    rot.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = this.m_vertices[i].rot(rot).add(center);\n      this.m_normals[i] = this.m_normals[i].rot(rot);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    d = d.set(this.m_outsidePoint).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    v1.set(this.m_vertices[i]);\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set(v1).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (-Math.EPSILON <= denominator && denominator <= Math.EPSILON) { // Ray is parallel to poligon's side.\n      continue;\n    }\n\n    var a = numerator / denominator;\n    p.set(d).mul(a).add(p1);\n\n    v2.set( this.m_vertices[ i + 1 < this.m_count ? i + 1 : 0 ] ); // Set second vertex.\n    var dot = Vec2.dot(v1.sub(p), v2.sub(p));\n    var intersects = dot < Math.EPSILON; // If ray line intersects polygon side.\n    if (!intersects) {\n      continue;\n    }\n\n    lower = 0.0;\n    upper = maxFraction;\n\n    intersects = lower <= a; // If half-line intersects polygon side.\n    if (intersects) {\n      if (dot > -Math.EPSILON) { // If it intersects end of the side.\n        if (denominator < 0.0) { // denominator < 0 <=> ray and normal are opposite.\n          count -= 0.5;\n        } else { // denominator > 0 <=> ray and normal are codirectional.\n          count += 0.5;\n        }\n      } else {\n        count += 1;\n      }\n    }\n\n    if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n      // Increase lower.\n      // The segment enters this half-space.\n      lower = a;\n    } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n      // Decrease upper.\n      // The segment exits this half-space.\n      upper = a;\n    } else { // No intersection.\n      continue;\n    }\n\n    if (lower <= upper && a <= lowest) {\n      index = i; // Save closest intersection.\n      lowest = a;\n    }\n\n  }\n\n  if (count < 0.0) {\n    count = -count;\n  }\n\n  if (Math.abs(count % 2 - 1) < Math.EPSILON) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = isPoint ? Vec2.ZERO : d.neg().normal().rot(xf.q);\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = d.set(this.m_normals[index]).rot(xf.q);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar PolygonShape = require('./PolygonShape');\nvar ChainShape = require('./ChainShape');\nvar EdgeShape = require('./EdgeShape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\nCircleShape.prototype.setRadius = function(radius) {\n  this.m_radius = radius;\n};\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n  var r = Vec2.sub(input.p2, input.p1);\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = r.neg().normal();\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r)).normal();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n\nCircleShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n  if (shape.m_type == CircleShape.TYPE) {\n    return Contact.circlesOverlap(this, transform, shape, shapeTransform);\n  } else if (shape.m_type == PolygonShape.TYPE) {\n    return Contact.polygonCircleOverlap(shape, shapeTransform, this, transform);\n  } else if (shape.m_type == ChainShape.TYPE) {\n    return Contact.chainCircleOverlap(shape, shapeChildIndex, shapeTransform, this, transform);\n  } else if (shape.m_type == EdgeShape.TYPE) {\n    return Contact.edgeCircleOverlap(shape, shapeTransform, this, transform);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n *\n * @param {Number} radius Radius extending around the edge.\n */\nfunction EdgeShape(v1, v2, radius) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n    this.m_noAlignRot = true; // This rotation is used to align the edge to y axis,\n                              // so v1 is in origin and (v1, v2) is codirectional with y.\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  this.m_noAlignRot = true;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  clone.m_edgeRadius = this.m_edgeRadius;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nEdgeShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0) { // No radius => we never inside.\n    return false;\n  }\n  // Put the point into the edge's frame of reference.\n  p = p1.set(p).sub(xf.p).rotT(xf.q);\n\n  // Transform all points so v2 is on y axis, positive half-space, v1 is in (0, 0).\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n  p = this._alignPoint(p);\n  var v2 = this.m_alignedV2;\n\n  var radius = this.m_edgeRadius;\n  if (p.y > v2.y) {\n    var dx = p.x - v2.x, dy = p.y - v2.y;\n    return dx * dx + dy * dy < radius * radius;\n  }\n  if (p.y < 0.0) {\n    return p.x * p.x + p.y * p.y < radius * radius;\n  }\n  return -radius < p.x && p.x < radius;\n};\n\n/**\n * Creates a rotation to be used to align the edge to y axis.\n *\n * @return {Rot} Rotation used to align points.\n */\nEdgeShape.prototype._getAlignRot = function() {\n  var rot = this.m_alignRot = this.m_alignRot || new Rot();\n  this.m_noAlignRot = false;\n\n  var v1 = this.m_vertex1, v2 = this.m_vertex2;\n  var length = d.set(v2).sub(v1).length();\n\n  if (length <= Math.EPSILON) {\n    return rot;\n  }\n\n  // cos = ( x1 * x2 + y1 * y2 ) / ( length1 * length2 )\n  // sin = ( x1 * y2 - x2 * y1 ) / ( length1 * length2 )\n  // x1 = d.x, y1 = d.y\n  // x2 = 0, y2 = 1\n  // length1 = length, length2 = 1\n  rot.c = d.y / length;\n  rot.s = d.x / length;\n\n  return rot;\n};\n\n/**\n * Inline-transforms provided point so it's in coordinate system where current edge is aligned to y axis.\n *\n * @param {Vec2} p Point.\n * @return {Vec2} The transformed point.\n */\nEdgeShape.prototype._alignPoint = function(p) {\n  return p.sub(this.m_vertex1).rot(this.m_alignRot);\n};\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  if (this.m_edgeRadius > 0.0) {\n    return this.rayCastWithRadius(output, input, xf);\n  }\n\n  v1 = v1.set(this.m_vertex1);\n  v2 = v2.set(this.m_vertex2);\n  v2 = v2.sub(v1);\n  var r = v2;\n  p = p.set(r.y, -r.x);\n  var normal = p;\n  var length = normal.normalize();\n\n  if (length <= Math.EPSILON) { // The edge is a point, can't intersect.\n    return false;\n  }\n\n  // Put the ray into the edge's frame of reference.\n  p1 = p1.set(input.p1).sub(xf.p).rotT(xf.q);\n  p2 = p2.set(input.p2).sub(xf.p).rotT(xf.q);\n  d = d.set(p2).sub(p1);\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator <= Math.EPSILON) { // Ray is parallel to the edge.\n    return false;\n  }\n\n  p2 = p2.set(v1).sub(p1);\n  var numerator = Vec2.dot(normal, p2);\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var rr = length * length;\n\n  // q = p1 + t * d\n  d = d.mul(t);\n  p1 = p1.add(d);\n  var q = p1;\n\n  q = q.sub(v1);\n  var s = Vec2.dot(q, r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = normal.rot(xf.q).neg(); // We are safe to return a reference as it's coppied in c# wrapper.\n  } else {\n    output.normal = normal.rot(xf.q); // We are safe to return a reference as it's coppied in c# wrapper.\n  }\n  return true;\n};\n\n/**\n * Used internally to do ray casts if current edge has positive radius.\n *\n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n */\nEdgeShape.prototype.rayCastWithRadius = function(output, input, xf) {\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n\n  var radius = this.m_edgeRadius;\n\n  // Put the ray into the edge's frame of reference.\n  p1 = this._alignPoint( p1.set(input.p1).sub(xf.p).rotT(xf.q) );\n  p2 = this._alignPoint( p2.set(input.p2).sub(xf.p).rotT(xf.q) );\n  d = d.set(p2).sub(p1);\n  var dx = d.x;\n\n  if (-Math.EPSILON <= dx && dx <= Math.EPSILON) { // The ray runs parallel to edge y axis.\n    var px = p1.x; // Intersection point x component.\n    if (px <= -radius || radius <= px) { // The ray runs parallel to the edge and fully outside of its radius.\n      return false;\n    }\n    var height = this.m_alignedV2.y;\n    var ry = Math.sqrt(radius * radius - px * px);\n    var py = height + ry; // Intersection point y component.\n\n    if (p1.y >= py) { // The ray starts above top.\n      if (p2.y >= py) { // The ray ends above top, it's fully outside.\n        return false;\n      }\n      output.fraction = (p1.y - py) / d.length();\n      output.normal = p.set(px, ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else if (p1.y <= -ry) { // The ray starts below bottom.\n      if (p2.y <= -ry) { // The ray ends below bottom, it's fully outside.\n        return false;\n      }\n      output.fraction = (-p1.y - ry) / d.length();\n      output.normal = p.set(px, -ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else { // The ray starts between top and bottom.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n    }\n  } else { // The ray is not parallel to edge y axis.\n    var p1x = p1.x;\n    var t1 = (-radius - p1x) / dx; // Intersection points of the ray line and cylinder containing edge with radius.\n    var t2 = (radius - p1x) / dx;\n\n    if ( (t1 <= 0.0 && t2 <= 0.0) || (t1 >= 1.0 && t2 >= 1.0) ) { // Intersections are outside of the ray.\n      return false;\n    }\n\n    if (t1 > t2) {\n      var t = t1;\n      t1 = t2;\n      t2 = t;\n    }\n\n    var dy = d.y;\n    var p1y = p1.y;\n    var y1 = p1y + t1 * dy;\n    if (y1 > height) { // Line intersects cylinder above edge top.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n      var k = p1x * dx + dy * (p1y - height);\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect top circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and top circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy - height); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and top circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 >= height) { // Line and top circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects bottom semicircle of the top circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 < 0.0) { // Line intersects cylinder below edge bottom, i. e. intersects bottom circle.\n\n            c += height * (2 * p1y - height);\n            k += dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from bottom circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (y1 < 0.0) { // Line intersects cylinder below edge bottom.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + p1y * p1y - radius * radius;\n      var k = p1x * dx + p1y * dy;\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect bottom circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and bottom circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and bottom circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 <= 0.0) { // Line and bottom circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects top semicircle of the bottom circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 > height) { // Line intersects cylinder above edge bottom, i. e. intersects top circle.\n\n            c -= height * (2 * p1y - height);\n            k -= dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from top circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (t1 >= 0.0) { // The ray intersects cylinder between top and bottom (first intersection point).\n      output.fraction = t1;\n      output.normal = p.set(dx > 0.0 ? -1.0 : 1.0, 0.0); // Will be coppied in c# wrapper.\n    } else { // Start point is inside of cylinder and the ray is pointing away from first intersection point.\n      var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n\n      if (y2 > height) { // Line intersects cylinder above edge top.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n        var k = p1x * dx + dy * (p1y - height);\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and top circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the top circle.\n          return false;\n        }\n      } else if (y2 < 0.0) { // Line intersects cylinder below edge bottom.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + p1y * p1y - radius * radius;\n        var k = p1x * dx + p1y * dy;\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and bottom circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the bottom circle.\n          return false;\n        }\n      }\n      // The ray starts inside of the shape.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal();\n    }\n  }\n\n  output.normal.rotT(this.m_alignRot).rot(xf.q);\n  return true;\n};\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n *\n * @param {Number} radius Radius extending around the chain.\n */\nfunction ChainShape(vertices, loop, radius) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_count = this.m_vertices.length = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count > 0 ? this.m_count - 1 : 0;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n  edge.m_edgeRadius = this.m_edgeRadius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0 || this.m_count < 2) {\n    return false;\n  }\n  var vertices = this.m_vertices;\n  var edgeShape = new EdgeShape(vertices[0], vertices[1], this.m_edgeRadius);\n  if (edgeShape.testPoint(xf, p)) {\n    return true;\n  }\n  for (var count = this.m_count, i = 2; i < count; ++i) {\n    edgeShape._set(vertices[i - 1], vertices[i]);\n    if (edgeShape.testPoint(xf, p)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1), this.m_edgeRadius);\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an impulse to the center of mass. This immediately modifies the velocity.\n * This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulseToCenter = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.isActive()) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = fixture.isActive();\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint, res) {\n  return Transform.mulVec2(this.m_xf, localPoint, res);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  if (this.m_activeFlag) {\n    var childCount = this.m_proxyCount = this.m_shape.getChildCount();\n    for (var i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * Gets aabb proxy id.\n *\n * @param {Number} childIndex Child index to get proxy id for.\n */\nFixture.prototype.getProxyId = function(childIndex) {\n  return this.m_proxies[childIndex].proxyId;\n};\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  broadPhase = broadPhase || this.m_body.getWorld().m_broadPhase;\n  xf = xf || this.m_body.getTransform();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxies.length = this.m_proxyCount = this.m_shape.getChildCount();\n\n  // Create proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i] = this.m_proxies[i] || new FixtureProxy(this, i);\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null || !this.m_activeFlag) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\n/**\n * If this fixture is used in physics calculations.\n *\n * @return {boolean} True if active, false otherwise.\n */\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This fixture will be used in physics callculations if true, and skipped if false.\n */\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n\n/**\n * @function Fixture~overlapCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap current fixture.\n *\n * @param {Fixture~overlapCallback} callback Called for each fixture found.\n */\nFixture.prototype.queryOverlaps = function(callback) {\n  if (!this.m_activeFlag || this.m_proxyCount == 0) {\n    return;\n  }\n  var world = this.m_body.getWorld();\n  if (world == null) {\n    return;\n  }\n  if (this._reportOverlap == Fixture.prototype._reportOverlap) {\n    this._reportOverlap = this._reportOverlap.bind(this);\n  }\n  this._overlaps = {};\n  this._overlapCallback = callback;\n  this._transform = this.m_body.getTransform();\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    this._childIndex = i;\n    world.queryAABB(this.m_proxies[i].aabb, this._reportOverlap);\n  }\n  this._transform = this._childIndex = this._overlaps = this._overlapCallback = callback = null;\n};\n\n/**\n * Called for each overlapping fixture. Used internally.\n */\nFixture.prototype._reportOverlap = function(fixture, proxy) {\n  if (fixture == this) {\n    return true;\n  }\n  var id = fixture.m_proxies[0].proxyId;\n  if (this._overlaps[id] ||\n    !this.m_shape.testOverlap(this._transform, this._childIndex, fixture.m_shape, fixture.m_body.getTransform(), proxy.childIndex)) {\n    return true;\n  }\n  this._overlaps[id] = true;\n  return this._overlapCallback(fixture); // Dynamic tree must not be modified here.\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar AABB = require('./collision/AABB');\nvar CircleShape = require('./shape/CircleShape');\n\nvar _aabb, _transform, _circle;\nvar _reportFixtureAABBCallback, _reportFixtureCallback, _hits;\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param aabb The query box.\n *\n * @param {function} queryCallback Called for each fixture\n *          found in the query. It may return `false` to terminate the query.\n *\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  _reportFixtureAABBCallback = queryCallback;\n  this.m_broadPhase.query(aabb, this._queryAABBCallback);\n  _reportFixtureAABBCallback = null;\n};\n\n/**\n * Called for each fixture found in the query AABB.\n * Used internally.\n */\nWorld.prototype._queryAABBCallback = function(proxyId, proxy) {\n  return _reportFixtureAABBCallback(proxy.fixture, proxy);\n};\n\n/**\n * Query the world for all fixtures that potentially overlap the provided circle.\n *\n * @param {planck.Vec2} center The circle center.\n * @param {float} radius The circle radius.\n * @param {function} queryCallback Called for each fixture\n *          found in the query. It may return `false` to terminate the query.\n *\n */\nWorld.prototype.queryCircle = function(center, radius, queryCallback) {\n  _circle = _circle || new CircleShape();\n  _circle.setRadius(radius);\n\n  _transform = _transform || new Transform();\n  _transform.p.set(center);\n\n  _aabb = _aabb || new AABB();\n  _circle.computeAABB(_aabb, _transform);\n\n  _hits = {};\n  _reportFixtureCallback = queryCallback;\n  this.queryAABB(_aabb, this._queryCircleCallback);\n  _hits = _reportFixtureCallback = null;\n};\n\n/**\n * Called for each fixture found in the circle query.\n * Used internally.\n */\nWorld.prototype._queryCircleCallback = function(fixture, proxy) {\n  var id = fixture.m_proxies[0].proxyId;\n\n  if (_hits[id] || !_circle.testOverlap(_transform, 0, fixture.m_shape, fixture.m_body.getTransform(), proxy.childIndex)) {\n    return true;\n  }\n\n  _hits[id] = true;\n  return _reportFixtureCallback(fixture); // Dynamic tree must not be modified here.\n};\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} callback A user implemented callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, callback) {\n  _hits = {};\n  _reportFixtureCallback = callback;\n  this.m_broadPhase.rayCast(null, this._raycastCallback, point1, point2, 1.0);\n  _hits = _reportFixtureCallback = null;\n};\n\n/**\n * A function that is called for each proxy that is hit by the ray.\n * Used internally.\n */\nWorld.prototype._raycastCallback = function(input, proxyId, proxy) {\n  var fixture = proxy.fixture;\n  var id = fixture.getProxyId(0);\n  if (_hits[id]) {\n    return input.maxFraction;\n  }\n  var index = proxy.childIndex;\n  var output = {}; // TODO GC\n  var hit = fixture.rayCast(output, input, index);\n  if (hit) {\n    _hits[id] = true;\n    var fraction = output.fraction;\n    var point = input.p1.mul(1.0 - fraction).add(input.p2.mul(fraction));\n    return _reportFixtureCallback(fixture, point, output.normal, fraction);\n  }\n  return input.maxFraction;\n};\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyA = fixtureA.getBody();\n    if (!bodyA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyB = fixtureB.getBody();\n    if (!bodyB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id, node.userData);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  p1 = p1 || input.p1;\n  p2 = p2 || input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  maxFraction = maxFraction >= 0.0 ? maxFraction : input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(p1);\n      subInput.p2 = Vec2.clone(p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id, node.userData);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false,\n  active: true\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * Sets the local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.setLocalAnchorA = function(anchor) {\n  return this.m_localAnchorA = anchor;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Sets the local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.setLocalAnchorB = function(anchor) {\n  return this.m_localAnchorB = anchor;\n};\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0,\n  active: true\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) {\n  this.m_tree.rayCast(input, rayCastCallback, p1, p2, maxFraction);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        var fixtureA = contact.m_fixtureA;\n        var fixtureB = contact.m_fixtureB;\n\n        if (!(fixtureA.isActive() && fixtureB.isActive())) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = fixtureA.m_isSensor;\n        var sensorB = fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true || je.joint.m_activeFlag == false) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        if (!(fA.isActive() && fB.isActive())) {\n          continue;\n        }\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nvar pA = new Vec2(), pB = new Vec2();\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  pA = Transform.mulVec2(xfA, circleA.m_p, pA);\n  pB = Transform.mulVec2(xfB, circleB.m_p, pB);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n};\n\nexports.CollideCircles = CollideCircles;\n\nContact.circlesOverlap = function(circleA, xfA, circleB, xfB) {\n  pA = Transform.mulVec2(xfA, circleA.m_p, pA);\n  pB = Transform.mulVec2(xfB, circleB.m_p, pB);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  return radius * radius > distSqr;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nvar Q = new Vec2(), e = new Vec2(), d = new Vec2(), edge;\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  edge = edge || new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p, Q), Q);\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  e = e.set(B).sub(A);\n\n  // Barycentric coordinates\n  var v = Vec2.dot(e, d.set(Q).sub(A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = A;\n    d = d.set(Q).sub(P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = e.set(B1).sub(A1);\n      var u1 = Vec2.dot(e1, d.set(B1).sub(Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n\n  // Region B\n  if (u <= 0.0) {\n    var P = B;\n    d = d.set(Q).sub(P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = e.set(B2).sub(A2);\n      var v2 = Vec2.dot(e2, d.set(Q).sub(A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = d.setCombine(u / den, A, v / den, B);\n  d = d.set(-P.x, -P.y).add(Q); // reusing d vector, <=> Vec2.sub(Q, P)\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = e.set(-e.y, e.x);\n  if (Vec2.dot(n, d.set(Q).sub(A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal.set(n);\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n};\n\nContact.chainCircleOverlap = function(chainA, indexA, xfA, circleB, xfB) {\n  edge = edge || new EdgeShape();\n  chainA.getChildEdge(edge, indexA);\n  return Contact.edgeCircleOverlap(edge, xfA, circleB, xfB);\n};\n\nContact.edgeCircleOverlap = function(edgeA, xfA, circleB, xfB) {\n  // Compute circle in frame of edge\n  Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p, Q), Q);\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  e = e.set(B).sub(A);\n\n  // Barycentric coordinates\n  var v = Vec2.dot(e, d.set(Q).sub(A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = A;\n    d = d.set(Q).sub(P);\n    var dd = Vec2.dot(d, d);\n    if (dd >= radius * radius) {\n      return false;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = e.set(B1).sub(A1);\n      var u1 = Vec2.dot(e1, d.set(B1).sub(Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, d.set(B).sub(Q));\n\n  // Region B\n  if (u <= 0.0) {\n    var P = B;\n    d = d.set(Q).sub(P);\n    var dd = Vec2.dot(d, d);\n    if (dd >= radius * radius) {\n      return false;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = e.set(B2).sub(A2);\n      var v2 = Vec2.dot(e2, d.set(Q).sub(A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  var P = den > 0.0 ? e.setCombine(u / den, A, v / den, B) : A;\n  d = d.set(Q).sub(P);\n  var dd = Vec2.dot(d, d);\n  return dd < radius * radius;\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n    var offset = Vec2.dot(n, v1);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - offset;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nvar cLocal = new Vec2(), d = new Vec2(), r = new Vec2();\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  cLocal = Transform.mulVec2(xfB, circleB.m_p, cLocal);\n  cLocal = Transform.mulTVec2(xfA, cLocal, cLocal);\n\n  // Find the separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], d.set(cLocal).sub(vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  if (Vec2.dot(d.set(cLocal).sub(v1), r.set(v2).sub(v1)) <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (Vec2.dot(d.set(cLocal).sub(v2), r.set(v1).sub(v2)) <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2, r);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n};\n\nContact.polygonCircleOverlap = function(polygonA, xfA, circleB, xfB) {\n  // Compute circle position in the frame of the polygon.\n  cLocal = Transform.mulVec2(xfB, circleB.m_p, cLocal);\n  cLocal = Transform.mulTVec2(xfA, cLocal, cLocal);\n\n  // Find the separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], d.set(cLocal).sub(vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    return true;\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  if        (Vec2.dot(d.set(cLocal).sub(v1), r.set(v2).sub(v1)) <= 0.0) { return Vec2.distanceSquared(cLocal, v1) < radius * radius;\n  } else if (Vec2.dot(d.set(cLocal).sub(v2), r.set(v1).sub(v2)) <= 0.0) { return Vec2.distanceSquared(cLocal, v2) < radius * radius;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2, r);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1]) - Vec2.dot(faceCenter, normals[vertIndex1]);\n    return separation < radius;\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = edgeA.m_radius + polygonB.m_radius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * Sets the local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.setLocalAnchorA = function(anchor) {\n  return this.m_localAnchorA = anchor;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Sets the local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.setLocalAnchorB = function(anchor) {\n  return this.m_localAnchorB = anchor;\n};\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n  active: true\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0,\n  active: true\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3,\n  active: true\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true,\n  active: true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n  active: true\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * Sets the local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.setLocalAnchorA = function(anchor) {\n  return this.m_localAnchorA = anchor;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Sets the local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.setLocalAnchorB = function(anchor) {\n  return this.m_localAnchorB = anchor;\n};\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setLength = function(length) {\n  this.m_maxLength = length;\n};\n\nRopeJoint.prototype.getLength = function() {\n  return this.m_maxLength;\n};\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * Sets the local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.setLocalAnchorA = function(anchor) {\n  return this.m_localAnchorA = anchor;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Sets the local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.setLocalAnchorB = function(anchor) {\n  return this.m_localAnchorB = anchor;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, -1, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          this._options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          this._options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          this._options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          this._options.fillStyle = b.render.fill;\n        } else {\n          this._options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, this._options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, this._options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, this._options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, this._options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, -p.y);\n          f.ui.rotate(-r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      this._options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, this._options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = (-a.y + -b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = -a.y - -b.y;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, -shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(-v1.y, -v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(-Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}