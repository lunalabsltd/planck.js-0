{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","rot","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","body","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","PolygonShape","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","numerator","denominator","minX","minY","maxX","maxY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","EdgeShape","v1","v2","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","scale","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","height","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","active","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","setActive","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","_textures","render","context","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","indexOf","splice","timeout","time","setTimeout","timer","clearTimeout","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","createProxy","destroyProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","Iterator","iterator","close","parents","states","root","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","undefined","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","BoxShape","CollideCircles","circleA","circleB","distSqr","radius","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","y1","x2","y2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","reverse","inversed","map","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","ctx","save","lineCap","drawing","restore","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","str","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","self","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","join","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":"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","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  // Copy vertices.\n  for (var i = 0; i < m; ++i) {\n    this.m_vertices[i] = ps[hull[i]];\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    // Transform vertices and normals.\n    for (var i = 0; i < this.m_count; ++i) {\n      this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n    }\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  // Put the ray into the polygon's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var lower = 0.0;\n  var upper = input.maxFraction;\n\n  var index = -1;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    var numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n    var denominator = Vec2.dot(this.m_normals[i], d);\n\n    if (denominator == 0.0) {\n      if (numerator < 0.0) {\n        return false;\n      }\n    } else {\n      // Note: we want this predicate without division:\n      // lower < numerator / denominator, where denominator < 0\n      // Since denominator < 0, we have to flip the inequality:\n      // lower < numerator / denominator <==> denominator * lower > numerator.\n      if (denominator < 0.0 && numerator < lower * denominator) {\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = numerator / denominator;\n        index = i;\n      } else if (denominator > 0.0 && numerator < upper * denominator) {\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = numerator / denominator;\n      }\n    }\n\n    // The use of epsilon here causes the assert on lower to trip\n    // in some cases. Apparently the use of epsilon was to make edge\n    // shapes work, but now those are handled separately.\n    // if (upper < lower - Math.EPSILON)\n    if (upper < lower) {\n      return false;\n    }\n  }\n\n  _ASSERT && common.assert(0.0 <= lower && lower <= input.maxFraction);\n\n  if (index >= 0) {\n    output.fraction = lower;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var rr = Vec2.dot(r, r);\n\n  if (rr < Math.EPSILON) {\n    return b < 0;\n  }\n\n  var c = Vec2.dot(s, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, -1, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          this._options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          this._options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          this._options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          this._options.fillStyle = b.render.fill;\n        } else {\n          this._options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, this._options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, this._options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, this._options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, this._options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, -p.y);\n          f.ui.rotate(-r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      this._options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, this._options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = (-a.y + -b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = -a.y - -b.y;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, -shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(-v1.y, -v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(-Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}