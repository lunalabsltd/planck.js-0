{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","normal","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_activeFlag","active","m_userData","userData","isActive","setActive","flag","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","testOverlap","shapeTransform","shapeChildIndex","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","body","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","EPSION","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","radiusSum","EdgeShape","radius","m_vertex1","m_vertex2","m_edgeRadius","m_noAlignRot","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","m_alignRot","_getAlignRot","m_alignedV2","_alignPoint","rayCastWithRadius","height","ry","p1x","p1y","y1","discr","k","t3","discrSqrt","t4","y2","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","scale","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","edgeShape","_textures","render","context","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","indexOf","splice","timeout","time","setTimeout","timer","clearTimeout","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","getProxyId","destroyProxy","createProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","queryOverlaps","_reportOverlap","self","_overlaps","_overlapCallback","_transform","_childIndex","queryAABB","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryCallback","_reportFixtureCallback","query","_queryAABBCallback","point1","point2","reportFixtureCallback","_raycastCallback","_hits","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","Iterator","iterator","close","parents","states","root","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","undefined","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","x2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","reverse","inversed","map","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","ctx","save","lineCap","drawing","restore","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","str","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","join","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;uBACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,sBC5DanC,EAAQ,GAHrB,IAIA0B,EAAa1B,EAAQ,GACrBoC,EAAAC,KACAC,EAAAnC,EAAAD,QAAAwB,EAAAU,GAEAE,EAAAC,QAAA,KAMAD,EAAAE,SAAA,SAAAC,GACA,uBAAAA,GAAAD,SAAAC,KAAAC,MAAAD,IAGAH,EAAAK,OAAA,SAAAF,KAWAH,EAAAM,QAAA,SAAAH,GAEA,SAAAL,EAAAS,KAAAJ,IAUAH,EAAAQ,eAAA,SAAAL,GAOA,OALAA,MAAA,EACAA,MAAA,EACAA,MAAA,EACAA,MAAA,GACAA,MAAA,IACA,GAGAH,EAAAS,aAAA,SAAAN,GACA,OAAAA,EAAA,OAAAA,IAAA,IAGAH,EAAAU,IAAA,SAAAC,EAAAC,EAAAC,GAMA,YALA,IAAAD,GACAC,EAAA,EAAAD,EAAA,QACG,IAAAC,IACHA,EAAAD,IAAA,GAEAC,EAAAD,GACAD,KAAAC,IAAAC,EAAAD,KACAD,EAAA,EAAAE,EAAAD,IAEAD,KAAAE,IAAAD,EAAAC,KACAF,GAAA,EAAAC,EAAAC,IAIAb,EAAAc,MAAA,SAAAH,EAAAC,EAAAC,GACA,OAAAF,EAAAC,EACAA,EACGD,EAAAE,EACHA,EAEAF,GAIAX,EAAAe,OAAA,SAAAH,EAAAC,GAQA,YAPA,IAAAD,GACAC,EAAA,EACAD,EAAA,QACG,IAAAC,IACHA,EAAAD,EACAA,EAAA,GAEAA,GAAAC,EAAAD,EAAAd,EAAAiB,UAAAF,EAAAD,uBCxFA,IACAI,GAAsD,EAEtDnD,EAAAD,QAAAqD,EAEA,IAAAC,EAAaxD,EAAQ,GACrBqC,EAAWrC,EAAQ,GAEnB,SAAAuD,EAAAd,EAAAgB,GACA,KAAAC,gBAAAH,GACA,WAAAA,EAAAd,EAAAgB,QAEA,IAAAhB,GACAiB,KAAAjB,EAAA,EACAiB,KAAAD,EAAA,GACG,iBAAAhB,GACHiB,KAAAjB,MACAiB,KAAAD,EAAAhB,EAAAgB,IAEAC,KAAAjB,IACAiB,KAAAD,KAEAH,GAAAC,EAAAZ,OAAAe,MAQAH,EAAAI,KAAA,WACA,IAAAC,EAAA9C,OAAAY,OAAA6B,EAAAvB,WAGA,OAFA4B,EAAAnB,EAAA,EACAmB,EAAAH,EAAA,EACAG,GAMAL,EAAAM,KAAAN,EAAAI,OAEAJ,EAAAO,IAAA,SAAArB,EAAAgB,GACA,IAAAG,EAAA9C,OAAAY,OAAA6B,EAAAvB,WAGA,OAFA4B,EAAAnB,IACAmB,EAAAH,IACAG,GAGAL,EAAAQ,MAAA,SAAAC,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAT,EAAAO,IAAAE,EAAAvB,EAAAuB,EAAAP,IAGAF,EAAAvB,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,OAMAH,EAAAa,QAAA,SAAAJ,GACA,OAAAA,GAAA3B,EAAAG,SAAAwB,EAAAvB,IAAAJ,EAAAG,SAAAwB,EAAAP,IAGAF,EAAAZ,OAAA,SAAA9B,GACA,GAAAyC,IACAC,EAAAa,QAAAvD,GAEA,UAAAwD,MAAA,kBAIAd,EAAAvB,UAAA+B,MAAA,WACA,OAAAR,EAAAQ,MAAAL,OAQAH,EAAAvB,UAAAsC,QAAA,WAGA,OAFAZ,KAAAjB,EAAA,EACAiB,KAAAD,EAAA,EACAC,MAQAH,EAAAvB,UAAAuC,IAAA,SAAA9B,EAAAgB,GAWA,MAVA,iBAAAhB,GACAa,GAAAC,EAAAZ,OAAAF,GACAiB,KAAAjB,MACAiB,KAAAD,EAAAhB,EAAAgB,IAEAH,GAAAjB,EAAAM,OAAAF,GACAa,GAAAjB,EAAAM,OAAAc,GACAC,KAAAjB,IACAiB,KAAAD,KAEAC,MAMAH,EAAAvB,UAAAwC,KAAA,SAAAC,EAAAT,EAAAU,EAAAC,GACA,gBAAAD,QAAA,IAAAC,EACAjB,KAAAkB,WAAAH,EAAAT,EAAAU,EAAAC,GAEAjB,KAAAmB,OAAAJ,EAAAT,IAOAT,EAAAvB,UAAA4C,WAAA,SAAAH,EAAAT,EAAAU,EAAAC,GACArB,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAA+B,GACApB,GAAAC,EAAAZ,OAAAgC,GACA,IAAAlC,EAAAgC,EAAAT,EAAAvB,EAAAiC,EAAAC,EAAAlC,EACAgB,EAAAgB,EAAAT,EAAAP,EAAAiB,EAAAC,EAAAlB,EAKA,OAFAC,KAAAjB,IACAiB,KAAAD,IACAC,MAGAH,EAAAvB,UAAA6C,OAAA,SAAAJ,EAAAT,GACAV,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACA,IAAAvB,EAAAgC,EAAAT,EAAAvB,EACAgB,EAAAgB,EAAAT,EAAAP,EAIA,OAFAC,KAAAjB,IACAiB,KAAAD,IACAC,MAQAH,EAAAvB,UAAA8C,IAAA,SAAAH,GAIA,OAHArB,GAAAC,EAAAZ,OAAAgC,GACAjB,KAAAjB,GAAAkC,EAAAlC,EACAiB,KAAAD,GAAAkB,EAAAlB,EACAC,MAMAH,EAAAvB,UAAA+C,KAAA,SAAAN,EAAAT,EAAAU,EAAAC,GACA,gBAAAD,QAAA,IAAAC,EACAjB,KAAAsB,WAAAP,EAAAT,EAAAU,EAAAC,GAEAjB,KAAAuB,OAAAR,EAAAT,IAOAT,EAAAvB,UAAAgD,WAAA,SAAAP,EAAAT,EAAAU,EAAAC,GACArB,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAA+B,GACApB,GAAAC,EAAAZ,OAAAgC,GAEA,IAAAlC,EAAAgC,EAAAT,EAAAvB,EAAAiC,EAAAC,EAAAlC,EACAgB,EAAAgB,EAAAT,EAAAP,EAAAiB,EAAAC,EAAAlB,EAKA,OAFAC,KAAAjB,KACAiB,KAAAD,KACAC,MAGAH,EAAAvB,UAAAiD,OAAA,SAAAR,EAAAT,GACAV,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACA,IAAAvB,EAAAgC,EAAAT,EAAAvB,EACAgB,EAAAgB,EAAAT,EAAAP,EAIA,OAFAC,KAAAjB,KACAiB,KAAAD,KACAC,MAMAH,EAAAvB,UAAAkD,KAAA,SAAAT,EAAAT,EAAAU,EAAAC,GACA,gBAAAD,QAAA,IAAAC,EACAjB,KAAAyB,WAAAV,EAAAT,EAAAU,EAAAC,GAEAjB,KAAA0B,OAAAX,EAAAT,IAMAT,EAAAvB,UAAAmD,WAAA,SAAAV,EAAAT,EAAAU,EAAAC,GACArB,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAA+B,GACApB,GAAAC,EAAAZ,OAAAgC,GACA,IAAAlC,EAAAgC,EAAAT,EAAAvB,EAAAiC,EAAAC,EAAAlC,EACAgB,EAAAgB,EAAAT,EAAAP,EAAAiB,EAAAC,EAAAlB,EAKA,OAFAC,KAAAjB,KACAiB,KAAAD,KACAC,MAGAH,EAAAvB,UAAAoD,OAAA,SAAAX,EAAAT,GACAV,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACA,IAAAvB,EAAAgC,EAAAT,EAAAvB,EACAgB,EAAAgB,EAAAT,EAAAP,EAIA,OAFAC,KAAAjB,KACAiB,KAAAD,KACAC,MAQAH,EAAAvB,UAAAqD,IAAA,SAAAV,GAIA,OAHArB,GAAAC,EAAAZ,OAAAgC,GACAjB,KAAAjB,GAAAkC,EAAAlC,EACAiB,KAAAD,GAAAkB,EAAAlB,EACAC,MAQAH,EAAAvB,UAAAsD,IAAA,SAAA9E,GAIA,OAHA8C,GAAAjB,EAAAM,OAAAnC,GACAkD,KAAAjB,GAAAjC,EACAkD,KAAAD,GAAAjD,EACAkD,MAQAH,EAAAvB,UAAAuD,OAAA,WACA,OAAAhC,EAAAiC,SAAA9B,OAMAH,EAAAvB,UAAAyD,cAAA,WACA,OAAAlC,EAAAkC,cAAA/B,OAQAH,EAAAvB,UAAA0D,UAAA,WACA,IAAAH,EAAA7B,KAAA6B,SACA,GAAAA,EAAAlD,EAAAE,QACA,SAEA,IAAAoD,EAAA,EAAAJ,EAGA,OAFA7B,KAAAjB,GAAAkD,EACAjC,KAAAD,GAAAkC,EACAJ,GAQAhC,EAAAvB,UAAA4D,OAAA,WACA,IAAAL,EAAA7B,KAAA6B,SACA,GAAAA,EAAAlD,EAAAE,QACA,OAAAmB,KAEA,IAAAiC,EAAA,EAAAJ,EAGA,OAFA7B,KAAAjB,GAAAkD,EACAjC,KAAAD,GAAAkC,EACAjC,MASAH,EAAAvB,UAAA6D,IAAA,SAAAA,GACA,IAAApD,EAAAiB,KAAAjB,EACAgB,EAAAC,KAAAD,EAGA,OAFAC,KAAAjB,EAAAoD,EAAApF,EAAAgC,EAAAoD,EAAA1D,EAAAsB,EACAC,KAAAD,EAAAoC,EAAA1D,EAAAM,EAAAoD,EAAApF,EAAAgD,EACAC,MASAH,EAAAvB,UAAA8D,KAAA,SAAAD,GACA,IAAApD,EAAAiB,KAAAjB,EACAgB,EAAAC,KAAAD,EAGA,OAFAC,KAAAjB,EAAAoD,EAAApF,EAAAgC,EAAAoD,EAAA1D,EAAAsB,EACAC,KAAAD,GAAAoC,EAAA1D,EAAAM,EAAAoD,EAAApF,EAAAgD,EACAC,MAQAH,EAAAiC,SAAA,SAAAxB,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACA3B,EAAAQ,KAAAmB,EAAAvB,EAAAuB,EAAAvB,EAAAuB,EAAAP,EAAAO,EAAAP,IAMAF,EAAAkC,cAAA,SAAAzB,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAA,EAAAvB,EAAAuB,EAAAvB,EAAAuB,EAAAP,EAAAO,EAAAP,GAGAF,EAAAwC,SAAA,SAAA/B,EAAAW,GACArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACA,IAAAqB,EAAAhC,EAAAvB,EAAAkC,EAAAlC,EAAAwD,EAAAjC,EAAAP,EAAAkB,EAAAlB,EACA,OAAApB,EAAAQ,KAAAmD,IAAAC,MAGA1C,EAAA2C,gBAAA,SAAAlC,EAAAW,GACArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACA,IAAAqB,EAAAhC,EAAAvB,EAAAkC,EAAAlC,EAAAwD,EAAAjC,EAAAP,EAAAkB,EAAAlB,EACA,OAAAuC,IAAAC,KAGA1C,EAAA4C,SAAA,SAAAnC,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACAX,GAAAW,GAAA,iBAAAA,GAAA,OAAAA,GAAAX,EAAAvB,IAAAkC,EAAAlC,GAAAuB,EAAAP,IAAAkB,EAAAlB,GAMAF,EAAA6C,KAAA,SAAApC,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAT,EAAAO,KAAAE,EAAAP,EAAAO,EAAAvB,IAMAc,EAAA8C,IAAA,SAAArC,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACAX,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,GASAF,EAAA+C,MAAA,SAAAtC,EAAAW,GACA,uBAAAA,GACArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAAgC,GACApB,EAAAO,IAAAa,EAAAX,EAAAP,GAAAkB,EAAAX,EAAAvB,IAEG,iBAAAuB,GACHV,GAAAjB,EAAAM,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,KAAAE,EAAAW,EAAAlB,EAAAO,EAAAW,EAAAlC,KAGAa,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACAX,EAAAvB,EAAAkC,EAAAlB,EAAAO,EAAAP,EAAAkB,EAAAlC,IAOAc,EAAAgD,SAAA,SAAA9B,EAAAT,EAAAW,GACA,uBAAAA,GACArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAAgC,GACApB,EAAAO,IAAAa,EAAAX,EAAAP,EAAAgB,EAAAhC,GAAAkC,EAAAX,EAAAvB,EAAAgC,EAAAhB,IAEG,iBAAAO,GACHV,GAAAjB,EAAAM,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,KAAAE,EAAAW,EAAAlB,EAAAgB,EAAAhC,EAAAuB,EAAAW,EAAAlC,EAAAgC,EAAAhB,SAGAH,GAAAE,EAAAb,QAAA,KAGAY,EAAAuB,IAAA,SAAAd,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAAE,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,IAMAF,EAAAwB,KAAA,SAAAN,EAAAT,EAAAU,EAAAC,GACA,gBAAAD,QAAA,IAAAC,EACApB,EAAAiD,QAAA/B,EAAAT,EAAAU,EAAAC,GAEApB,EAAA+B,IAAAb,EAAAT,IAIAT,EAAAiD,QAAA,SAAA/B,EAAAT,EAAAU,EAAAC,GACA,OAAApB,EAAAI,OAAAiB,WAAAH,EAAAT,EAAAU,EAAAC,IAGApB,EAAA8B,IAAA,SAAArB,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAAE,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,IAGAF,EAAA+B,IAAA,SAAAb,EAAAC,GACA,uBAAAD,GACAnB,GAAAC,EAAAZ,OAAA8B,GACAnB,GAAAjB,EAAAM,OAAA+B,GACAnB,EAAAO,IAAAW,EAAAhC,EAAAiC,EAAAD,EAAAhB,EAAAiB,IAEG,iBAAAA,GACHpB,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAA+B,GACAnB,EAAAO,IAAAW,EAAAC,EAAAjC,EAAAgC,EAAAC,EAAAjB,SAHG,GAOHF,EAAAvB,UAAAyE,IAAA,WAGA,OAFA/C,KAAAjB,GAAAiB,KAAAjB,EACAiB,KAAAD,GAAAC,KAAAD,EACAC,MAGAH,EAAAkD,IAAA,SAAAzC,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAT,EAAAO,KAAAE,EAAAvB,GAAAuB,EAAAP,IAGAF,EAAAmD,IAAA,SAAA1C,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAT,EAAAO,IAAAzB,EAAAqE,IAAA1C,EAAAvB,GAAAJ,EAAAqE,IAAA1C,EAAAP,KAGAF,EAAAoD,IAAA,SAAA3C,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAA,IAAAE,EAAAvB,EAAAkC,EAAAlC,GAAA,IAAAuB,EAAAP,EAAAkB,EAAAlB,KAGAF,EAAAqD,MAAA,SAAA5C,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAAzB,EAAAc,IAAAa,EAAAvB,EAAAkC,EAAAlC,GAAAJ,EAAAc,IAAAa,EAAAP,EAAAkB,EAAAlB,KAGAF,EAAAsD,MAAA,SAAA7C,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAAzB,EAAAa,IAAAc,EAAAvB,EAAAkC,EAAAlC,GAAAJ,EAAAa,IAAAc,EAAAP,EAAAkB,EAAAlB,KAGAF,EAAAvB,UAAAoB,MAAA,SAAAD,GACA,IAAA2D,EAAApD,KAAAjB,EAAAiB,KAAAjB,EAAAiB,KAAAD,EAAAC,KAAAD,EACA,GAAAqD,EAAA3D,IAAA,CACA,IAAAwC,EAAAtD,EAAAO,QAAAkE,GACApD,KAAAjB,GAAAkD,EAAAxC,EACAO,KAAAD,GAAAkC,EAAAxC,EAEA,OAAAO,MAGAH,EAAAH,MAAA,SAAAY,EAAAb,GAGA,OAFAa,EAAAT,EAAAO,IAAAE,EAAAvB,EAAAuB,EAAAP,IACAL,MAAAD,GACAa,GAMAT,EAAAwD,QAAA,SAAAtE,EAAAgB,GACA,gBAAAO,GACA,OAAAT,EAAAO,IAAAE,EAAAvB,IAAAuB,EAAAP,OAOAF,EAAAyD,YAAA,SAAAvE,EAAAgB,GACA,gBAAAO,GACA,OAAAT,EAAAO,IAAAE,EAAAvB,IAAAuB,EAAAP,wBCziBAvD,EAAA+G,MAAA,aAKA/G,EAAAyC,OAAA,SAAAuE,EAAAC,EAAAC,sBCcAjH,EAAAD,QAAAmH,EAEarH,EAAQ,GAArB,IACAuD,EAAWvD,EAAQ,GACnBqC,EAAWrC,EAAQ,GAOnB,SAAAqH,EAAAC,GACA,KAAA5D,gBAAA2D,GACA,WAAAA,EAAAC,GAEA,iBAAAA,EACA5D,KAAA6D,SAAAD,GACG,iBAAAA,EACH5D,KAAAa,IAAA+C,GAEA5D,KAAA8D,cAIAH,EAAAvD,IAAA,SAAAwD,GACA,IAAA1D,EAAA9C,OAAAY,OAAA2F,EAAArF,WAEA,OADA4B,EAAA2D,SAAAD,GACA1D,GAGAyD,EAAAtD,MAAA,SAAA8B,GAEA,IAAAjC,EAAA9C,OAAAY,OAAA2F,EAAArF,WAGA,OAFA4B,EAAAzB,EAAA0D,EAAA1D,EACAyB,EAAAnD,EAAAoF,EAAApF,EACAmD,GAGAyD,EAAAI,SAAA,WACA,IAAA7D,EAAA9C,OAAAY,OAAA2F,EAAArF,WAGA,OAFA4B,EAAAzB,EAAA,EACAyB,EAAAnD,EAAA,EACAmD,GAGAyD,EAAAjD,QAAA,SAAAvD,GACA,OAAAA,GAAAwB,EAAAG,SAAA3B,EAAAsB,IAAAE,EAAAG,SAAA3B,EAAAJ,IAGA4G,EAAA1E,OAAA,SAAA9B,KAWAwG,EAAArF,UAAAwF,YAAA,WACA9D,KAAAvB,EAAA,EACAuB,KAAAjD,EAAA,GAGA4G,EAAArF,UAAAuC,IAAA,SAAA+C,GACA,iBAAAA,GAEA5D,KAAAvB,EAAAmF,EAAAnF,EACAuB,KAAAjD,EAAA6G,EAAA7G,IAKAiD,KAAAvB,EAAAE,EAAAqF,IAAAJ,GACA5D,KAAAjD,EAAA4B,EAAAsF,IAAAL,KAOAD,EAAArF,UAAAuF,SAAA,SAAAD,GAGA5D,KAAAvB,EAAAE,EAAAqF,IAAAJ,GACA5D,KAAAjD,EAAA4B,EAAAsF,IAAAL,IAMAD,EAAArF,UAAA4F,SAAA,WACA,OAAAvF,EAAAwF,MAAAnE,KAAAvB,EAAAuB,KAAAjD,IAMA4G,EAAArF,UAAA8F,SAAA,WACA,OAAAvE,EAAAO,IAAAJ,KAAAjD,EAAAiD,KAAAvB,IAMAkF,EAAArF,UAAA+F,SAAA,WACA,OAAAxE,EAAAO,KAAAJ,KAAAvB,EAAAuB,KAAAjD,IAYA4G,EAAA/B,IAAA,SAAAO,EAAArF,GAEA,SAAAA,GAAA,MAAAA,EAAA,CAMA,IAAAwH,EAAAX,EAAAI,WAGA,OAFAO,EAAA7F,EAAA0D,EAAA1D,EAAA3B,EAAAC,EAAAoF,EAAApF,EAAAD,EAAA2B,EACA6F,EAAAvH,EAAAoF,EAAApF,EAAAD,EAAAC,EAAAoF,EAAA1D,EAAA3B,EAAA2B,EACA6F,EAEG,SAAAxH,GAAA,MAAAA,EAEH,OAAA+C,EAAAO,IAAA+B,EAAApF,EAAAD,EAAAiC,EAAAoD,EAAA1D,EAAA3B,EAAAiD,EAAAoC,EAAA1D,EAAA3B,EAAAiC,EAAAoD,EAAApF,EAAAD,EAAAiD,IAIA4D,EAAAY,OAAA,SAAApC,EAAArF,GAOA,IAAAwH,EAAAX,EAAAI,WAGA,OAFAO,EAAA7F,EAAA0D,EAAA1D,EAAA3B,EAAAC,EAAAoF,EAAApF,EAAAD,EAAA2B,EACA6F,EAAAvH,EAAAoF,EAAApF,EAAAD,EAAAC,EAAAoF,EAAA1D,EAAA3B,EAAA2B,EACA6F,GAGAX,EAAAa,QAAA,SAAArC,EAAArF,GAGA,OAAA+C,EAAAO,IAAA+B,EAAApF,EAAAD,EAAAiC,EAAAoD,EAAA1D,EAAA3B,EAAAiD,EAAAoC,EAAA1D,EAAA3B,EAAAiC,EAAAoD,EAAApF,EAAAD,EAAAiD,IAGA4D,EAAAc,OAAA,SAAAtC,EAAA7B,EAAAW,GACA,IAAAlC,EAAAoD,EAAApF,GAAAuD,EAAAvB,EAAAkC,EAAAlC,GAAAoD,EAAA1D,GAAA6B,EAAAP,EAAAkB,EAAAlB,GACAA,EAAAoC,EAAA1D,GAAA6B,EAAAvB,EAAAkC,EAAAlB,GAAAoC,EAAApF,GAAAuD,EAAAP,EAAAkB,EAAAlB,GACA,OAAAF,EAAAO,IAAArB,EAAAgB,IAYA4D,EAAAe,KAAA,SAAAvC,EAAArF,GACA,SAAAA,GAAA,MAAAA,EAAA,CAMA,IAAAwH,EAAAX,EAAAI,WAGA,OAFAO,EAAA7F,EAAA0D,EAAApF,EAAAD,EAAA2B,EAAA0D,EAAA1D,EAAA3B,EAAAC,EACAuH,EAAAvH,EAAAoF,EAAApF,EAAAD,EAAAC,EAAAoF,EAAA1D,EAAA3B,EAAA2B,EACA6F,EAEG,SAAAxH,GAAA,MAAAA,EAEH,OAAA+C,EAAAO,IAAA+B,EAAApF,EAAAD,EAAAiC,EAAAoD,EAAA1D,EAAA3B,EAAAiD,GAAAoC,EAAA1D,EAAA3B,EAAAiC,EAAAoD,EAAApF,EAAAD,EAAAiD,IAIA4D,EAAAgB,QAAA,SAAAxC,EAAArF,GAMA,IAAAwH,EAAAX,EAAAI,WAGA,OAFAO,EAAA7F,EAAA0D,EAAApF,EAAAD,EAAA2B,EAAA0D,EAAA1D,EAAA3B,EAAAC,EACAuH,EAAAvH,EAAAoF,EAAApF,EAAAD,EAAAC,EAAAoF,EAAA1D,EAAA3B,EAAA2B,EACA6F,GAGAX,EAAAiB,SAAA,SAAAzC,EAAArF,GAEA,OAAA+C,EAAAO,IAAA+B,EAAApF,EAAAD,EAAAiC,EAAAoD,EAAA1D,EAAA3B,EAAAiD,GAAAoC,EAAA1D,EAAA3B,EAAAiC,EAAAoD,EAAApF,EAAAD,EAAAiD,qBC5MAtD,EAAAD,QAAAqI,EAEavI,EAAQ,GAArB,IACAuD,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAYlB,SAAAuI,EAAAC,EAAAC,GACA,KAAA/E,gBAAA6E,GACA,WAAAA,EAAAC,EAAAC,GAEA/E,KAAAxB,EAAAqB,EAAAI,OACAD,KAAAgF,EAAArB,EAAAI,gBACA,IAAAe,GACA9E,KAAAxB,EAAAqC,IAAAiE,QAEA,IAAAC,GACA/E,KAAAgF,EAAAnE,IAAAkE,GAIAF,EAAAxE,MAAA,SAAA4E,GACA,IAAA/E,EAAA9C,OAAAY,OAAA6G,EAAAvG,WAGA,OAFA4B,EAAA1B,EAAAqB,EAAAQ,MAAA4E,EAAAzG,GACA0B,EAAA8E,EAAArB,EAAAtD,MAAA4E,EAAAD,GACA9E,GAGA2E,EAAAzE,IAAA,SAAA0E,EAAAC,GACA,IAAA7E,EAAA9C,OAAAY,OAAA6G,EAAAvG,WAGA,OAFA4B,EAAA1B,EAAAqB,EAAAQ,MAAAyE,GACA5E,EAAA8E,EAAArB,EAAAtD,MAAA0E,GACA7E,GAGA2E,EAAAd,SAAA,WACA,IAAA7D,EAAA9C,OAAAY,OAAA6G,EAAAvG,WAGA,OAFA4B,EAAA1B,EAAAqB,EAAAI,OACAC,EAAA8E,EAAArB,EAAAI,WACA7D,GAMA2E,EAAAvG,UAAAwF,YAAA,WACA9D,KAAAxB,EAAAoC,UACAZ,KAAAgF,EAAAlB,eAMAe,EAAAvG,UAAAuC,IAAA,SAAAE,EAAAC,QACA,IAAAA,GACAhB,KAAAxB,EAAAqC,IAAAE,EAAAvC,GACAwB,KAAAgF,EAAAnE,IAAAE,EAAAiE,KAEAhF,KAAAxB,EAAAqC,IAAAE,GACAf,KAAAgF,EAAAnE,IAAAG,KAIA6D,EAAAnE,QAAA,SAAAvD,GACA,OAAAA,GAAA0C,EAAAa,QAAAvD,EAAAqB,IAAAmF,EAAAjD,QAAAvD,EAAA6H,IAGAH,EAAA5F,OAAA,SAAA9B,KAiBA0H,EAAAjD,IAAA,SAAAb,EAAAC,GAEA,GAAAkE,MAAAC,QAAAnE,GAAA,CAEA,IADA,IAAAoE,EAAA,GACA1I,EAAA,EAAmBA,EAAAsE,EAAAa,OAAcnF,IACjC0I,EAAA1I,GAAAmI,EAAAjD,IAAAb,EAAAC,EAAAtE,IAEA,OAAA0I,EAEG,SAAApE,GAAA,MAAAA,EAAA,CAEH,IAAAjC,EAAAgC,EAAAiE,EAAAjI,EAAAiE,EAAAjC,EAAAgC,EAAAiE,EAAAvG,EAAAuC,EAAAjB,EAAAgB,EAAAvC,EAAAO,EACAgB,EAAAgB,EAAAiE,EAAAvG,EAAAuC,EAAAjC,EAAAgC,EAAAiE,EAAAjI,EAAAiE,EAAAjB,EAAAgB,EAAAvC,EAAAuB,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,GAEG,SAAAiB,GAAA,MAAAA,EAAA,CAIH,IAAAiE,EAAAJ,EAAAd,WAGA,OAFAkB,EAAAD,EAAArB,EAAAY,OAAAxD,EAAAiE,EAAAhE,EAAAgE,GACAC,EAAAzG,EAAAqB,EAAAuB,IAAAuC,EAAAa,QAAAzD,EAAAiE,EAAAhE,EAAAxC,GAAAuC,EAAAvC,GACAyG,IAOAJ,EAAAQ,OAAA,SAAAtE,EAAAC,GAGA,IADA,IAAAoE,EAAA,GACA1I,EAAA,EAAiBA,EAAAsE,EAAAa,OAAcnF,IAC/B0I,EAAA1I,GAAAmI,EAAAjD,IAAAb,EAAAC,EAAAtE,IAEA,OAAA0I,GAMAP,EAAAS,MAAA,SAAAvE,GAEA,gBAAAC,GACA,OAAA6D,EAAAjD,IAAAb,EAAAC,KAIA6D,EAAAL,QAAA,SAAAzD,EAAAC,GAGA,IAAAjC,EAAAgC,EAAAiE,EAAAjI,EAAAiE,EAAAjC,EAAAgC,EAAAiE,EAAAvG,EAAAuC,EAAAjB,EAAAgB,EAAAvC,EAAAO,EACAgB,EAAAgB,EAAAiE,EAAAvG,EAAAuC,EAAAjC,EAAAgC,EAAAiE,EAAAjI,EAAAiE,EAAAjB,EAAAgB,EAAAvC,EAAAuB,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,IAGA8E,EAAAU,MAAA,SAAAxE,EAAAC,GAKA,IAAAiE,EAAAJ,EAAAd,WAGA,OAFAkB,EAAAD,EAAArB,EAAAY,OAAAxD,EAAAiE,EAAAhE,EAAAgE,GACAC,EAAAzG,EAAAqB,EAAAuB,IAAAuC,EAAAa,QAAAzD,EAAAiE,EAAAhE,EAAAxC,GAAAuC,EAAAvC,GACAyG,GAYAJ,EAAAH,KAAA,SAAA3D,EAAAC,GAEA,SAAAA,GAAA,MAAAA,EAAA,CAEA,IAAAwE,EAAAxE,EAAAjC,EAAAgC,EAAAvC,EAAAO,EACA0G,EAAAzE,EAAAjB,EAAAgB,EAAAvC,EAAAuB,EACAhB,EAAAgC,EAAAiE,EAAAjI,EAAAyI,EAAAzE,EAAAiE,EAAAvG,EAAAgH,EACA1F,GAAAgB,EAAAiE,EAAAvG,EAAA+G,EAAAzE,EAAAiE,EAAAjI,EAAA0I,EACA,OAAA5F,EAAAO,IAAArB,EAAAgB,GAEG,SAAAiB,GAAA,MAAAA,EAAA,CAIH,IAAAiE,EAAAJ,EAAAd,WAGA,OAFAkB,EAAAD,EAAAnE,IAAA8C,EAAAgB,QAAA5D,EAAAiE,EAAAhE,EAAAgE,IACAC,EAAAzG,EAAAqC,IAAA8C,EAAAiB,SAAA7D,EAAAiE,EAAAnF,EAAA8B,IAAAX,EAAAxC,EAAAuC,EAAAvC,KACAyG,IAIAJ,EAAAD,SAAA,SAAA7D,EAAAC,GAGA,IAAAwE,EAAAxE,EAAAjC,EAAAgC,EAAAvC,EAAAO,EACA0G,EAAAzE,EAAAjB,EAAAgB,EAAAvC,EAAAuB,EACAhB,EAAAgC,EAAAiE,EAAAjI,EAAAyI,EAAAzE,EAAAiE,EAAAvG,EAAAgH,EACA1F,GAAAgB,EAAAiE,EAAAvG,EAAA+G,EAAAzE,EAAAiE,EAAAjI,EAAA0I,EACA,OAAA5F,EAAAO,IAAArB,EAAAgB,IAGA8E,EAAAa,OAAA,SAAA3E,EAAAC,GAKA,IAAAiE,EAAAJ,EAAAd,WAGA,OAFAkB,EAAAD,EAAAnE,IAAA8C,EAAAgB,QAAA5D,EAAAiE,EAAAhE,EAAAgE,IACAC,EAAAzG,EAAAqC,IAAA8C,EAAAiB,SAAA7D,EAAAiE,EAAAnF,EAAA8B,IAAAX,EAAAxC,EAAAuC,EAAAvC,KACAyG,oBCnNA,IAKAU,EAAAnJ,EAWAmJ,EAAAC,kBAAA,EAMAD,EAAAE,mBAAA,GAMAF,EAAAG,cAAA,GAOAH,EAAAI,eAAA,EAMAJ,EAAAK,WAAA,KACAL,EAAAM,kBAAAN,EAAAK,WAAAL,EAAAK,WAMAL,EAAAO,YAAA,MAAAvH,KAAAwH,GAQAR,EAAAS,cAAA,EAAAT,EAAAK,WAKAL,EAAAU,YAAA,EAOAV,EAAAW,eAAA,GAKAX,EAAAY,iBAAA,GAKAZ,EAAAa,qBAAA,GAMAb,EAAAc,kBAAA,EAMAd,EAAAe,oBAAA,GAMAf,EAAAgB,qBAAA,MAAAhI,KAAAwH,GAMAR,EAAAiB,eAAA,EACAjB,EAAAkB,sBAAAlB,EAAAiB,eAAAjB,EAAAiB,eAMAjB,EAAAmB,YAAA,GAAAnI,KAAAwH,GACAR,EAAAoB,mBAAApB,EAAAmB,YAAAnB,EAAAmB,YAOAnB,EAAAqB,UAAA,GACArB,EAAAsB,YAAA,IAOAtB,EAAAuB,YAAA,GAKAvB,EAAAwB,qBAAA,IAEAxB,EAAAyB,wBAAAzI,KAAA0I,IAAA1B,EAAAwB,qBAAA,GAKAxB,EAAA2B,sBAAA,MAAA3I,KAAAwH,GAEAR,EAAA4B,yBAAA5I,KAAA0I,IAAA1B,EAAA2B,sBAAA,kBC9JA,sBAAAlK,OAAAY,OACAvB,EAAAD,QAAA,SAAAgL,EAAAC,GACA,OAAArK,OAAAY,OAAAnB,KAAAO,OAAAoK,EAAAC,QAEC,CASD,SAAAC,KARAjL,EAAAD,QAAA,SAAAgL,EAAAC,GACA,GAAAA,EACA,MAAA9G,MAAA,qCACA,oBAAA6G,GAAA,OAAAA,EACA,MAAA7G,MAAA,sBAEA,OADA+G,EAAApJ,UAAAkJ,EACA,IAAAE,qBCRAtK,OAAAkB,UAAAqJ,qBAEAlL,EAAAD,QAAA,SAAAoL,EAAAC,GAKA,QAAA5J,KAJA2J,UACAA,EAAA,IAGAC,EACAA,EAAAtJ,eAAAN,SAAA,IAAA2J,EAAA3J,KACA2J,EAAA3J,GAAA4J,EAAA5J,IAIA,sBAAAb,OAAA0K,sBAEA,IADA,IAAAC,EAAA3K,OAAA0K,sBAAAD,GACAnL,EAAA,EAAmBA,EAAAqL,EAAAlG,OAAoBnF,IAAA,CACvC,IAAAsL,EAAAD,EAAArL,GACAmL,EAAAF,qBAAAK,SAAA,IAAAJ,EAAA3J,KACA2J,EAAAI,GAAAH,EAAAG,IAIA,OAAAJ,oBCNA,IACAhI,GAAsD,EAEtDnD,EAAAD,QAAAyL,EAEa3L,EAAQ,GAArB,IACAqC,EAAWrC,EAAQ,GAEnB,SAAA2L,EAAAlJ,EAAAgB,EAAAmI,GACA,KAAAlI,gBAAAiI,GACA,WAAAA,EAAAlJ,EAAAgB,EAAAmI,QAEA,IAAAnJ,GACAiB,KAAAjB,EAAA,EAAAiB,KAAAD,EAAA,EAAAC,KAAAkI,EAAA,GACG,iBAAAnJ,GACHiB,KAAAjB,MAAAiB,KAAAD,EAAAhB,EAAAgB,EAAAC,KAAAkI,EAAAnJ,EAAAmJ,IAEAlI,KAAAjB,IAAAiB,KAAAD,IAAAC,KAAAkI,KAEAtI,GAAAqI,EAAAhJ,OAAAe,MAGAiI,EAAA7H,IAAA,SAAArB,EAAAgB,EAAAmI,GACA,IAAAhI,EAAA9C,OAAAY,OAAAiK,EAAA3J,WAIA,OAHA4B,EAAAnB,IACAmB,EAAAH,IACAG,EAAAgI,IACAhI,GAGA+H,EAAA5H,MAAA,SAAAC,GAEA,OADAV,GAAAqI,EAAAhJ,OAAAqB,GACA2H,EAAA7H,IAAAE,EAAAvB,EAAAuB,EAAAP,EAAAO,EAAA4H,IAGAD,EAAA3J,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,OAMAiI,EAAAvH,QAAA,SAAAJ,GACA,OAAAA,GAAA3B,EAAAG,SAAAwB,EAAAvB,IAAAJ,EAAAG,SAAAwB,EAAAP,IAAApB,EAAAG,SAAAwB,EAAA4H,IAGAD,EAAAhJ,OAAA,SAAA9B,GACA,GAAAyC,IACAqI,EAAAvH,QAAAvD,GAEA,UAAAwD,MAAA,kBAIAsH,EAAA3J,UAAAsC,QAAA,WAIA,OAHAZ,KAAAjB,EAAA,EACAiB,KAAAD,EAAA,EACAC,KAAAkI,EAAA,EACAlI,MAGAiI,EAAA3J,UAAAuC,IAAA,SAAA9B,EAAAgB,EAAAmI,GAIA,OAHAlI,KAAAjB,IACAiB,KAAAD,IACAC,KAAAkI,IACAlI,MAGAiI,EAAA3J,UAAA8C,IAAA,SAAAH,GAIA,OAHAjB,KAAAjB,GAAAkC,EAAAlC,EACAiB,KAAAD,GAAAkB,EAAAlB,EACAC,KAAAkI,GAAAjH,EAAAiH,EACAlI,MAGAiI,EAAA3J,UAAAqD,IAAA,SAAAV,GAIA,OAHAjB,KAAAjB,GAAAkC,EAAAlC,EACAiB,KAAAD,GAAAkB,EAAAlB,EACAC,KAAAkI,GAAAjH,EAAAiH,EACAlI,MAGAiI,EAAA3J,UAAAsD,IAAA,SAAA9E,GAIA,OAHAkD,KAAAjB,GAAAjC,EACAkD,KAAAD,GAAAjD,EACAkD,KAAAkI,GAAApL,EACAkD,MAGAiI,EAAAxF,SAAA,SAAAnC,EAAAW,GAGA,OAFArB,GAAAqI,EAAAhJ,OAAAqB,GACAV,GAAAqI,EAAAhJ,OAAAgC,GACAX,GAAAW,GACA,iBAAAX,GAAA,OAAAA,GACA,iBAAAW,GAAA,OAAAA,GACAX,EAAAvB,IAAAkC,EAAAlC,GAAAuB,EAAAP,IAAAkB,EAAAlB,GAAAO,EAAA4H,IAAAjH,EAAAiH,GAMAD,EAAAtF,IAAA,SAAArC,EAAAW,GACA,OAAAX,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,EAAAO,EAAA4H,EAAAjH,EAAAiH,GAMAD,EAAArF,MAAA,SAAAtC,EAAAW,GACA,WAAAgH,EACA3H,EAAAP,EAAAkB,EAAAiH,EAAA5H,EAAA4H,EAAAjH,EAAAlB,EACAO,EAAA4H,EAAAjH,EAAAlC,EAAAuB,EAAAvB,EAAAkC,EAAAiH,EACA5H,EAAAvB,EAAAkC,EAAAlB,EAAAO,EAAAP,EAAAkB,EAAAlC,IAIAkJ,EAAA7G,IAAA,SAAAd,EAAAW,GACA,WAAAgH,EAAA3H,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,EAAAO,EAAA4H,EAAAjH,EAAAiH,IAGAD,EAAAtG,IAAA,SAAArB,EAAAW,GACA,WAAAgH,EAAA3H,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,EAAAO,EAAA4H,EAAAjH,EAAAiH,IAGAD,EAAArG,IAAA,SAAAtB,EAAAxD,GACA,WAAAmL,EAAAnL,EAAAwD,EAAAvB,EAAAjC,EAAAwD,EAAAP,EAAAjD,EAAAwD,EAAA4H,IAGAD,EAAA3J,UAAAyE,IAAA,WAIA,OAHA/C,KAAAjB,GAAAiB,KAAAjB,EACAiB,KAAAD,GAAAC,KAAAD,EACAC,KAAAkI,GAAAlI,KAAAkI,EACAlI,MAGAiI,EAAAlF,IAAA,SAAAzC,GACA,WAAA2H,GAAA3H,EAAAvB,GAAAuB,EAAAP,GAAAO,EAAA4H,qBCrIAzL,EAAAD,QAAA2L,EAEa7L,EAAQ,GACVA,EAAQ,GADnB,IAEAuD,EAAWvD,EAAQ,GAKnB,SAAA6L,EAAApH,EAAAC,EAAAjE,EAAAC,GACA,iBAAA+D,GAAA,OAAAA,GACAf,KAAAoI,GAAAvI,EAAAQ,MAAAU,GACAf,KAAAqI,GAAAxI,EAAAQ,MAAAW,IACG,iBAAAD,GACHf,KAAAoI,GAAAvI,EAAAO,IAAAW,EAAAhE,GACAiD,KAAAqI,GAAAxI,EAAAO,IAAAY,EAAAhE,KAEAgD,KAAAoI,GAAAvI,EAAAI,OACAD,KAAAqI,GAAAxI,EAAAI,QAIAkI,EAAA7J,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,OAGAmI,EAAAzH,QAAA,SAAAvD,GACA,OAAAA,GAAA0C,EAAAa,QAAAvD,EAAAiL,KAAAvI,EAAAa,QAAAvD,EAAAkL,KAGAF,EAAAlJ,OAAA,SAAA9B,KAQAgL,EAAA7J,UAAAuC,IAAA,SAAAE,EAAAC,EAAAjE,EAAAC,GACA,iBAAA+D,GAAA,iBAAAC,GAAA,iBAAAjE,GACA,iBAAAC,GACAgD,KAAAoI,GAAAvH,IAAAE,EAAAhE,GACAiD,KAAAqI,GAAAxH,IAAAG,EAAAhE,IAEG,iBAAA+D,GAAA,iBAAAC,GACHhB,KAAAoI,GAAAvH,IAAAE,GACAf,KAAAqI,GAAAxH,IAAAG,IAEG,iBAAAD,IAEHf,KAAAoI,GAAAvH,IAAAE,EAAAqH,IACApI,KAAAqI,GAAAxH,IAAAE,EAAAsH,MAOAF,EAAA7J,UAAAwF,YAAA,WACA9D,KAAAoI,GAAArJ,EAAA,EACAiB,KAAAqI,GAAAtJ,EAAA,EACAiB,KAAAoI,GAAArI,EAAA,EACAC,KAAAqI,GAAAtI,EAAA,GAGAoI,EAAA7J,UAAAsC,QAAA,WACAZ,KAAAoI,GAAArJ,EAAA,EACAiB,KAAAqI,GAAAtJ,EAAA,EACAiB,KAAAoI,GAAArI,EAAA,EACAC,KAAAqI,GAAAtI,EAAA,GAGAoI,EAAA7J,UAAAgK,WAAA,WACA,IAAAvH,EAAAf,KAAAoI,GAAArJ,EACAiC,EAAAhB,KAAAqI,GAAAtJ,EACAhC,EAAAiD,KAAAoI,GAAArI,EACA/C,EAAAgD,KAAAqI,GAAAtI,EACAwI,EAAAxH,EAAA/D,EAAAgE,EAAAjE,EACA,GAAAwL,IACAA,EAAA,EAAAA,GAEA,IAAAC,EAAA,IAAAL,EAKA,OAJAK,EAAAJ,GAAArJ,EAAAwJ,EAAAvL,EACAwL,EAAAH,GAAAtJ,GAAAwJ,EAAAvH,EACAwH,EAAAJ,GAAArI,GAAAwI,EAAAxL,EACAyL,EAAAH,GAAAtI,EAAAwI,EAAAxH,EACAyH,GAOAL,EAAA7J,UAAAmK,MAAA,SAAAnI,GAEA,IAAAS,EAAAf,KAAAoI,GAAArJ,EACAiC,EAAAhB,KAAAqI,GAAAtJ,EACAhC,EAAAiD,KAAAoI,GAAArI,EACA/C,EAAAgD,KAAAqI,GAAAtI,EACAwI,EAAAxH,EAAA/D,EAAAgE,EAAAjE,EACA,GAAAwL,IACAA,EAAA,EAAAA,GAEA,IAAAtH,EAAApB,EAAAI,OAGA,OAFAgB,EAAAlC,EAAAwJ,GAAAvL,EAAAsD,EAAAvB,EAAAiC,EAAAV,EAAAP,GACAkB,EAAAlB,EAAAwI,GAAAxH,EAAAT,EAAAP,EAAAhD,EAAAuD,EAAAvB,GACAkC,GAOAkH,EAAAvG,IAAA,SAAA8G,EAAApI,GACA,GAAAA,GAAA,MAAAA,GAAA,MAAAA,EAAA,CAEA,IAAAvB,EAAA2J,EAAAN,GAAArJ,EAAAuB,EAAAvB,EAAA2J,EAAAL,GAAAtJ,EAAAuB,EAAAP,EACAA,EAAA2I,EAAAN,GAAArI,EAAAO,EAAAvB,EAAA2J,EAAAL,GAAAtI,EAAAO,EAAAP,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,GAEG,GAAAO,GAAA,OAAAA,GAAA,OAAAA,EAEH,WAAA6H,EAAAtI,EAAA+B,IAAA8G,EAAApI,EAAA8H,IAAAvI,EAAA+B,IAAA8G,EAAApI,EAAA+H,MAMAF,EAAA3D,QAAA,SAAAkE,EAAApI,GAEA,IAAAvB,EAAA2J,EAAAN,GAAArJ,EAAAuB,EAAAvB,EAAA2J,EAAAL,GAAAtJ,EAAAuB,EAAAP,EACAA,EAAA2I,EAAAN,GAAArI,EAAAO,EAAAvB,EAAA2J,EAAAL,GAAAtI,EAAAO,EAAAP,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,IAGAoI,EAAAQ,SAAA,SAAAD,EAAApI,GAEA,WAAA6H,EAAAtI,EAAA+B,IAAA8G,EAAApI,EAAA8H,IAAAvI,EAAA+B,IAAA8G,EAAApI,EAAA+H,MASAF,EAAAzD,KAAA,SAAAgE,EAAApI,GACA,OAAAA,GAAA,MAAAA,GAAA,MAAAA,EAEAT,EAAAO,IAAAP,EAAA8C,IAAArC,EAAAoI,EAAAN,IAAAvI,EAAA8C,IAAArC,EAAAoI,EAAAL,KAEG/H,GAAA,OAAAA,GAAA,OAAAA,EAIH,IAAA6H,EAFAtI,EAAAO,IAAAP,EAAA8C,IAAA+F,EAAAN,GAAA9H,EAAA8H,IAAAvI,EAAA8C,IAAA+F,EAAAL,GAAA/H,EAAA8H,KACAvI,EAAAO,IAAAP,EAAA8C,IAAA+F,EAAAN,GAAA9H,EAAA+H,IAAAxI,EAAA8C,IAAA+F,EAAAL,GAAA/H,EAAA+H,WAHG,GAUHF,EAAAvD,SAAA,SAAA8D,EAAApI,GAGA,OAAAT,EAAAO,IAAAP,EAAA8C,IAAArC,EAAAoI,EAAAN,IAAAvI,EAAA8C,IAAArC,EAAAoI,EAAAL,MAGAF,EAAAS,UAAA,SAAAF,EAAApI,GAKA,WAAA6H,EAFAtI,EAAAO,IAAAP,EAAA8C,IAAA+F,EAAAN,GAAA9H,EAAA8H,IAAAvI,EAAA8C,IAAA+F,EAAAL,GAAA/H,EAAA8H,KACAvI,EAAAO,IAAAP,EAAA8C,IAAA+F,EAAAN,GAAA9H,EAAA+H,IAAAxI,EAAA8C,IAAA+F,EAAAL,GAAA/H,EAAA+H,OAIAF,EAAAnF,IAAA,SAAA0F,GAEA,WAAAP,EAAAtI,EAAAmD,IAAA0F,EAAAN,IAAAvI,EAAAmD,IAAA0F,EAAAL,MAGAF,EAAA/G,IAAA,SAAAyH,EAAAC,GAGA,WAAAX,EAAAtI,EAAAuB,IAAAyH,EAAAT,GAAAU,EAAAV,IAAAvI,EAAAuB,IAAAyH,EAAAR,GAAAS,EAAAT,uBC1LA,IACAzI,GAAsD,EAEtDnD,EAAAD,QAAAuM,EAEA,IAAAjJ,EAAaxD,EAAQ,GACrBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAClBuI,EAAgBvI,EAAQ,GAcxB,SAAAyM,EAAAhM,EAAAgE,GACAnB,GAAAE,EAAAb,YAAA,IAAAlC,GACA6C,GAAAE,EAAAb,YAAA,IAAA8B,GACAf,KAAAgJ,YAAAnJ,EAAAI,OACAD,KAAAjD,EAAA8C,EAAAI,OACAD,KAAAe,EAAA,EACAf,KAAAiJ,OAAA,EACAjJ,KAAAkJ,GAAArJ,EAAAI,OACAD,KAAAmJ,GAAA,EAGAJ,EAAAzK,UAAA8K,aAAA,SAAAnE,GACA,IAAAlI,EAAA8H,EAAAL,QAAAS,EAAAjF,KAAAgJ,aACAhJ,KAAAjD,EAAA8D,IAAA9D,GACAiD,KAAAkJ,GAAArI,IAAA9D,GAEAiD,KAAAe,EAAAkE,EAAAD,EAAAd,WACAlE,KAAAmJ,GAAAlE,EAAAD,EAAAd,YAGA6E,EAAAzK,UAAA+K,eAAA,SAAAL,EAAA/D,GACAjF,KAAAgJ,YAAAnI,IAAAmI,GAEA,IAAAjM,EAAA8H,EAAAL,QAAAS,EAAAjF,KAAAgJ,aACAhJ,KAAAjD,EAAA8D,IAAA9D,GACAiD,KAAAkJ,GAAArI,IAAA9D,IASAgM,EAAAzK,UAAAgL,aAAA,SAAArE,EAAAsE,GACAA,OAAA,IAAAA,EAAA,EAAAA,EACAtE,EAAAD,EAAAnB,UAAA,EAAA0F,GAAAvJ,KAAAmJ,GAAAI,EAAAvJ,KAAAe,GACAkE,EAAAzG,EAAA0C,WAAA,EAAAqI,EAAAvJ,KAAAkJ,GAAAK,EAAAvJ,KAAAjD,GAGAkI,EAAAzG,EAAAmD,IAAAgC,EAAAa,QAAAS,EAAAD,EAAAhF,KAAAgJ,eAQAD,EAAAzK,UAAAkL,QAAA,SAAAC,GACA7J,GAAAE,EAAAb,OAAAe,KAAAiJ,OAAA,GACA,IAAAM,GAAAE,EAAAzJ,KAAAiJ,SAAA,EAAAjJ,KAAAiJ,QACAjJ,KAAAkJ,GAAAhI,WAAAqI,EAAAvJ,KAAAjD,EAAA,EAAAwM,EAAAvJ,KAAAkJ,IACAlJ,KAAAmJ,GAAAI,EAAAvJ,KAAAe,GAAA,EAAAwI,GAAAvJ,KAAAmJ,GACAnJ,KAAAiJ,OAAAQ,GAGAV,EAAAzK,UAAAoL,QAAA,WACA1J,KAAAmJ,GAAAnJ,KAAAe,EACAf,KAAAkJ,GAAArI,IAAAb,KAAAjD,IAMAgM,EAAAzK,UAAA0D,UAAA,WACA,IAAAmH,EAAAxK,EAAAW,IAAAU,KAAAmJ,IAAAxK,EAAAwH,IAAAxH,EAAAwH,IACAnG,KAAAe,GAAAf,KAAAmJ,KACAnJ,KAAAmJ,MAGAJ,EAAAzK,UAAA+B,MAAA,WACA,IAAAA,EAAA,IAAA0I,EAOA,OANA1I,EAAA2I,YAAAnI,IAAAb,KAAAgJ,aACA3I,EAAA4I,OAAAjJ,KAAAiJ,OACA5I,EAAA8I,GAAAnJ,KAAAmJ,GACA9I,EAAAU,EAAAf,KAAAe,EACAV,EAAA6I,GAAArI,IAAAb,KAAAkJ,IACA7I,EAAAtD,EAAA8D,IAAAb,KAAAjD,GACAsD,GAGA0I,EAAAzK,UAAAuC,IAAA,SAAA8I,GACA3J,KAAAgJ,YAAAnI,IAAA8I,EAAAX,aACAhJ,KAAAiJ,OAAAU,EAAAV,OACAjJ,KAAAmJ,GAAAQ,EAAAR,GACAnJ,KAAAe,EAAA4I,EAAA5I,EACAf,KAAAkJ,GAAArI,IAAA8I,EAAAT,IACAlJ,KAAAjD,EAAA8D,IAAA8I,EAAA5M,qBC3GAN,EAAAD,QAAAoN,EAEatN,EAAQ,GACVA,EAAQ,GADnB,IAEAuD,EAAWvD,EAAQ,GACnB2L,EAAW3L,EAAQ,GAKnB,SAAAsN,EAAA7I,EAAAC,EAAAjE,GACA,iBAAAgE,GAAA,OAAAA,GACAf,KAAAoI,GAAAH,EAAA5H,MAAAU,GACAf,KAAAqI,GAAAJ,EAAA5H,MAAAW,GACAhB,KAAA6J,GAAA5B,EAAA5H,MAAAtD,KAEAiD,KAAAoI,GAAAH,IACAjI,KAAAqI,GAAAJ,IACAjI,KAAA6J,GAAA5B,KAIA2B,EAAAtL,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,OAGA4J,EAAAlJ,QAAA,SAAAvD,GACA,OAAAA,GAAA8K,EAAAvH,QAAAvD,EAAAiL,KAAAH,EAAAvH,QAAAvD,EAAAkL,KAAAJ,EAAAvH,QAAAvD,EAAA0M,KAGAD,EAAA3K,OAAA,SAAA9B,KAWAyM,EAAAtL,UAAAsC,QAAA,WAIA,OAHAZ,KAAAoI,GAAAxH,UACAZ,KAAAqI,GAAAzH,UACAZ,KAAA6J,GAAAjJ,UACAZ,MAUA4J,EAAAtL,UAAAwL,QAAA,SAAAxJ,GACA,IAAAiI,EAAAN,EAAAtF,IAAA3C,KAAAoI,GAAAH,EAAArF,MAAA5C,KAAAqI,GAAArI,KAAA6J,KACA,GAAAtB,IACAA,EAAA,EAAAA,GAEA,IAAA/K,EAAA,IAAAyK,EAIA,OAHAzK,EAAAuB,EAAAwJ,EAAAN,EAAAtF,IAAArC,EAAA2H,EAAArF,MAAA5C,KAAAqI,GAAArI,KAAA6J,KACArM,EAAAuC,EAAAwI,EAAAN,EAAAtF,IAAA3C,KAAAoI,GAAAH,EAAArF,MAAAtC,EAAAN,KAAA6J,KACArM,EAAA0K,EAAAK,EAAAN,EAAAtF,IAAA3C,KAAAoI,GAAAH,EAAArF,MAAA5C,KAAAqI,GAAA/H,IACA9C,GAYAoM,EAAAtL,UAAAyL,QAAA,SAAAzJ,GACA,IAAA0J,EAAAhK,KAAAoI,GAAArJ,EACAkL,EAAAjK,KAAAqI,GAAAtJ,EACAmL,EAAAlK,KAAAoI,GAAArI,EACAoK,EAAAnK,KAAAqI,GAAAtI,EACAwI,EAAAyB,EAAAG,EAAAF,EAAAC,EACA,GAAA3B,IACAA,EAAA,EAAAA,GAEA,IAAA/K,EAAAqC,EAAAI,OAGA,OAFAzC,EAAAuB,EAAAwJ,GAAA4B,EAAA7J,EAAAvB,EAAAkL,EAAA3J,EAAAP,GACAvC,EAAAuC,EAAAwI,GAAAyB,EAAA1J,EAAAP,EAAAmK,EAAA5J,EAAAvB,GACAvB,GASAoM,EAAAtL,UAAA8L,aAAA,SAAAC,GACA,IAAAtJ,EAAAf,KAAAoI,GAAArJ,EACAiC,EAAAhB,KAAAqI,GAAAtJ,EACAhC,EAAAiD,KAAAoI,GAAArI,EACA/C,EAAAgD,KAAAqI,GAAAtI,EACAwI,EAAAxH,EAAA/D,EAAAgE,EAAAjE,EACA,GAAAwL,IACAA,EAAA,EAAAA,GAEA8B,EAAAjC,GAAArJ,EAAAwJ,EAAAvL,EACAqN,EAAAhC,GAAAtJ,GAAAwJ,EAAAvH,EACAqJ,EAAAjC,GAAAF,EAAA,EACAmC,EAAAjC,GAAArI,GAAAwI,EAAAxL,EACAsN,EAAAhC,GAAAtI,EAAAwI,EAAAxH,EACAsJ,EAAAhC,GAAAH,EAAA,EACAmC,EAAAR,GAAA9K,EAAA,EACAsL,EAAAR,GAAA9J,EAAA,EACAsK,EAAAR,GAAA3B,EAAA,GASA0B,EAAAtL,UAAAgM,gBAAA,SAAAD,GACA,IAAA9B,EAAAN,EAAAtF,IAAA3C,KAAAoI,GAAAH,EAAArF,MAAA5C,KAAAqI,GAAArI,KAAA6J,KACA,GAAAtB,IACAA,EAAA,EAAAA,GAEA,IAAAyB,EAAAhK,KAAAoI,GAAArJ,EACAkL,EAAAjK,KAAAqI,GAAAtJ,EACAwL,EAAAvK,KAAA6J,GAAA9K,EACAoL,EAAAnK,KAAAqI,GAAAtI,EACAyK,EAAAxK,KAAA6J,GAAA9J,EACA0K,EAAAzK,KAAA6J,GAAA3B,EAEAmC,EAAAjC,GAAArJ,EAAAwJ,GAAA4B,EAAAM,EAAAD,KACAH,EAAAjC,GAAArI,EAAAwI,GAAAgC,EAAAC,EAAAP,EAAAQ,GACAJ,EAAAjC,GAAAF,EAAAK,GAAA0B,EAAAO,EAAAD,EAAAJ,GAEAE,EAAAhC,GAAAtJ,EAAAsL,EAAAjC,GAAArI,EACAsK,EAAAhC,GAAAtI,EAAAwI,GAAAyB,EAAAS,EAAAF,KACAF,EAAAhC,GAAAH,EAAAK,GAAAgC,EAAAN,EAAAD,EAAAQ,GAEAH,EAAAR,GAAA9K,EAAAsL,EAAAjC,GAAAF,EACAmC,EAAAR,GAAA9J,EAAAsK,EAAAhC,GAAAH,EACAmC,EAAAR,GAAA3B,EAAAK,GAAAyB,EAAAG,EAAAF,MAWAL,EAAAhI,IAAA,SAAAb,EAAAC,GAEA,GAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,EAAA,CAEA,IAAAjC,EAAAgC,EAAAqH,GAAArJ,EAAAiC,EAAAjC,EAAAgC,EAAAsH,GAAAtJ,EAAAiC,EAAAjB,EAAAgB,EAAA8I,GAAA9K,EAAAiC,EAAAkH,EACAnI,EAAAgB,EAAAqH,GAAArI,EAAAiB,EAAAjC,EAAAgC,EAAAsH,GAAAtI,EAAAiB,EAAAjB,EAAAgB,EAAA8I,GAAA9J,EAAAiB,EAAAkH,EACAA,EAAAnH,EAAAqH,GAAAF,EAAAlH,EAAAjC,EAAAgC,EAAAsH,GAAAH,EAAAlH,EAAAjB,EAAAgB,EAAA8I,GAAA3B,EAAAlH,EAAAkH,EACA,WAAAD,EAAAlJ,EAAAgB,EAAAmI,GAEG,GAAAlH,GAAA,MAAAA,GAAA,MAAAA,EAAA,CAEHjC,EAAAgC,EAAAqH,GAAArJ,EAAAiC,EAAAjC,EAAAgC,EAAAsH,GAAAtJ,EAAAiC,EAAAjB,EACAA,EAAAgB,EAAAqH,GAAArI,EAAAiB,EAAAjC,EAAAgC,EAAAsH,GAAAtI,EAAAiB,EAAAjB,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,KAMA6J,EAAAc,QAAA,SAAA3J,EAAAC,GAGA,IAAAjC,EAAAgC,EAAAqH,GAAArJ,EAAAiC,EAAAjC,EAAAgC,EAAAsH,GAAAtJ,EAAAiC,EAAAjB,EAAAgB,EAAA8I,GAAA9K,EAAAiC,EAAAkH,EACAnI,EAAAgB,EAAAqH,GAAArI,EAAAiB,EAAAjC,EAAAgC,EAAAsH,GAAAtI,EAAAiB,EAAAjB,EAAAgB,EAAA8I,GAAA9J,EAAAiB,EAAAkH,EACAA,EAAAnH,EAAAqH,GAAAF,EAAAlH,EAAAjC,EAAAgC,EAAAsH,GAAAH,EAAAlH,EAAAjB,EAAAgB,EAAA8I,GAAA3B,EAAAlH,EAAAkH,EACA,WAAAD,EAAAlJ,EAAAgB,EAAAmI,IAGA0B,EAAApF,QAAA,SAAAzD,EAAAC,GAGA,IAAAjC,EAAAgC,EAAAqH,GAAArJ,EAAAiC,EAAAjC,EAAAgC,EAAAsH,GAAAtJ,EAAAiC,EAAAjB,EACAA,EAAAgB,EAAAqH,GAAArI,EAAAiB,EAAAjC,EAAAgC,EAAAsH,GAAAtI,EAAAiB,EAAAjB,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,IAGA6J,EAAAxI,IAAA,SAAAL,EAAAC,GAGA,WAAA4I,EACA3B,EAAA7G,IAAAL,EAAAqH,GAAApH,EAAAoH,IACAH,EAAA7G,IAAAL,EAAAsH,GAAArH,EAAAqH,IACAJ,EAAA7G,IAAAL,EAAA8I,GAAA7I,EAAA6I,uBCtMApN,EAAAD,QAQA,WACAwD,KAAAM,EAAAT,EAAAI,OACAD,KAAAiB,EAAA,GARA,IAAApB,EAAWvD,EAAQ,oBCFnBG,EAAAD,QAAAmO,EAEA,IAAA9K,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAMlB,SAAAqO,IACA3K,KAAAjD,EAAA8C,EAAAI,OACAD,KAAAe,EAAA,EAGA4J,EAAArM,UAAAgL,aAAA,SAAArE,EAAAzG,GAGA,OAFAyG,EAAAD,EAAAnE,IAAAb,KAAAe,GACAkE,EAAAzG,EAAAqC,IAAAhB,EAAA8B,IAAA3B,KAAAjD,EAAA4G,EAAAa,QAAAS,EAAAD,EAAAxG,KACAyG,oBCpBA,IACArF,GAAsD,EAEtDnD,EAAAD,QAAAoO,EAEA,IAAA9K,EAAaxD,EAAQ,GAarB,SAAAuO,IACA7K,KAAA8K,MAAA,KACA9K,KAAA+K,MAAA,KACA/K,KAAAgL,KAAA,KACAhL,KAAAiL,KAAA,KA4BA,SAAAL,EAAAM,EAAAC,EAAAC,GACAD,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,SAEAxL,GAAAE,EAAAb,OAAAkM,GACAvL,GAAAE,EAAAb,OAAAmM,GACAxL,GAAAE,EAAAb,OAAAkM,GAAAC,GAEApL,KAAAqL,OAAA,gBAEArL,KAAAsL,QAAAH,EACAnL,KAAAuL,QAAAH,EAEApL,KAAAwL,QAAA,EACAxL,KAAAyL,qBAAAP,EAAAQ,iBAEA1L,KAAA2L,OAAA,KACA3L,KAAA4L,OAAA,KAEA5L,KAAA6L,QAAA,IAAAhB,EACA7K,KAAA8L,QAAA,IAAAjB,EAEA7K,KAAA+L,cAAA,EACA/L,KAAAgM,aAAAd,EAAAe,OACAjM,KAAAkM,WAAAhB,EAAAiB,SAQAvB,EAAAtM,UAAA8N,SAAA,WACA,OAAApM,KAAAgM,cAAAhM,KAAAsL,QAAAc,YAAApM,KAAAuL,QAAAa,YAQAxB,EAAAtM,UAAA+N,UAAA,SAAAC,GACAtM,KAAAgM,aAAAM,GAQA1B,EAAAtM,UAAAiO,QAAA,WACA,OAAAvM,KAAAqL,QAQAT,EAAAtM,UAAAkO,SAAA,WACA,OAAAxM,KAAAsL,SAQAV,EAAAtM,UAAAmO,SAAA,WACA,OAAAzM,KAAAuL,SAQAX,EAAAtM,UAAAoO,QAAA,WACA,OAAA1M,KAAA4L,QAGAhB,EAAAtM,UAAAqO,YAAA,WACA,OAAA3M,KAAAkM,YAGAtB,EAAAtM,UAAAsO,YAAA,SAAAC,GACA7M,KAAAkM,WAAAW,GAUAjC,EAAAtM,UAAAwO,oBAAA,WACA,OAAA9M,KAAAyL,oBAQAb,EAAAtM,UAAAyO,WAAA,aAQAnC,EAAAtM,UAAA0O,WAAA,aASApC,EAAAtM,UAAA2O,iBAAA,SAAAC,KASAtC,EAAAtM,UAAA6O,kBAAA,SAAAD,KAQAtC,EAAAtM,UAAA8O,YAAA,SAAAC,KAKAzC,EAAAtM,UAAAgP,wBAAA,SAAAC,KAKA3C,EAAAtM,UAAAkP,yBAAA,SAAAD,KAMA3C,EAAAtM,UAAAmP,yBAAA,SAAAF,sBC1MA9Q,EAAAD,QAAAkR,EAEWpR,EAAQ,GAOnB,SAAAoR,IACA1N,KAAAqL,OACArL,KAAA2N,SAGAD,EAAAhN,QAAA,SAAAkN,GACA,QAAAA,GAGAF,EAAApP,UAAAuP,UAAA,WACA,OAAA7N,KAAA2N,UASAD,EAAApP,UAAAiO,QAAA,WACA,OAAAvM,KAAAqL,QAQAqC,EAAApP,UAAAwP,OAAA,aAMAJ,EAAApP,UAAAyP,cAAA,aAUAL,EAAApP,UAAA0P,UAAA,SAAA/I,EAAAzG,KAWAkP,EAAApP,UAAA2P,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,KAWAX,EAAApP,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,KAUAX,EAAApP,UAAAkQ,YAAA,SAAAC,EAAAC,KAMAhB,EAAApP,UAAAqQ,qBAAA,SAAAC,KAWAlB,EAAApP,UAAAuQ,YAAA,SAAAT,EAAAC,EAAAT,EAAAkB,EAAAC,sBCtGezS,EAAQ,GAHvB,IAIAqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInB,SAAA0S,EAAA7L,EAAAD,GACA,KAAAlD,gBAAAgP,GACA,WAAAA,EAAA7L,EAAAD,GAGAlD,KAAAiP,WAAApP,EAAAI,OACAD,KAAAkP,WAAArP,EAAAI,OAEA,iBAAAkD,GACAnD,KAAAiP,WAAApO,IAAAsC,GAEA,iBAAAD,GACAlD,KAAAkP,WAAArO,IAAAqC,GAdAzG,EAAAD,QAAAwS,EAqBAA,EAAA1Q,UAAAoC,QAAA,WACA,OAAAsO,EAAAtO,QAAAV,OAGAgP,EAAAtO,QAAA,SAAA6N,GACA,IAAAvR,EAAA6C,EAAA8B,IAAA4M,EAAAW,WAAAX,EAAAU,YAEA,OADAjS,EAAA+B,GAAA,GAAA/B,EAAA+C,GAAA,GAAAF,EAAAa,QAAA6N,EAAAU,aAAApP,EAAAa,QAAA6N,EAAAW,aAIAF,EAAA/P,OAAA,SAAA9B,KAWA6R,EAAA1Q,UAAA6Q,UAAA,WACA,OAAAtP,EAAAO,IAAA,IAAAJ,KAAAiP,WAAAlQ,EAAAiB,KAAAkP,WAAAnQ,GAAA,IAAAiB,KAAAiP,WAAAlP,EAAAC,KAAAkP,WAAAnP,KAMAiP,EAAA1Q,UAAA8Q,WAAA,WACA,OAAAvP,EAAAO,IAAA,IAAAJ,KAAAkP,WAAAnQ,EAAAiB,KAAAiP,WAAAlQ,GAAA,IAAAiB,KAAAkP,WAAAnP,EAAAC,KAAAiP,WAAAlP,KAMAiP,EAAA1Q,UAAA+Q,aAAA,WACA,UAAArP,KAAAkP,WAAAnQ,EAAAiB,KAAAiP,WAAAlQ,EAAAiB,KAAAkP,WAAAnP,EAAAC,KAAAiP,WAAAlP,IAMAiP,EAAA1Q,UAAAwE,QAAA,SAAA/B,EAAAC,GACA,IAAAsO,EAAAvO,EAAAkO,WACAM,EAAAxO,EAAAmO,WACAM,EAAAxO,EAAAiO,WACAQ,EAAAzO,EAAAkO,WAEAQ,EAAA/Q,EAAAa,IAAA8P,EAAAvQ,EAAAyQ,EAAAzQ,GACA4Q,EAAAhR,EAAAa,IAAA8P,EAAAvP,EAAAyP,EAAAzP,GACA6P,EAAAjR,EAAAc,IAAAgQ,EAAA1Q,EAAAwQ,EAAAxQ,GACA8Q,EAAAlR,EAAAc,IAAAgQ,EAAA1P,EAAAwP,EAAAxP,GAEAC,KAAAiP,WAAApO,IAAA6O,EAAAC,GACA3P,KAAAkP,WAAArO,IAAA+O,EAAAC,IAGAb,EAAA1Q,UAAAwR,cAAA,SAAA/O,EAAAC,GACAhB,KAAAiP,WAAApO,IAAAlC,EAAAa,IAAAuB,EAAAhC,EAAAiC,EAAAjC,GAAAJ,EAAAa,IAAAuB,EAAAhB,EAAAiB,EAAAjB,IACAC,KAAAkP,WAAArO,IAAAlC,EAAAc,IAAAsB,EAAAhC,EAAAiC,EAAAjC,GAAAJ,EAAAc,IAAAsB,EAAAhB,EAAAiB,EAAAjB,KAGAiP,EAAA1Q,UAAAuC,IAAA,SAAA0N,GACAvO,KAAAiP,WAAApO,IAAA0N,EAAAU,WAAAlQ,EAAAwP,EAAAU,WAAAlP,GACAC,KAAAkP,WAAArO,IAAA0N,EAAAW,WAAAnQ,EAAAwP,EAAAW,WAAAnP,IAGAiP,EAAA1Q,UAAAyR,SAAA,SAAAxB,GACA,IAAAyB,GAAA,EAKA,OADAA,GADAA,GADAA,GADAA,KAAAhQ,KAAAiP,WAAAlQ,GAAAwP,EAAAU,WAAAlQ,IACAiB,KAAAiP,WAAAlP,GAAAwO,EAAAU,WAAAlP,IACAwO,EAAAW,WAAAnQ,GAAAiB,KAAAkP,WAAAnQ,IACAwP,EAAAW,WAAAnP,GAAAC,KAAAkP,WAAAnP,GAIAiP,EAAA1Q,UAAA2R,OAAA,SAAAtS,GACAqR,EAAAiB,OAAAjQ,KAAArC,IAGAqR,EAAAiB,OAAA,SAAA1B,EAAA5Q,GACA4Q,EAAAU,WAAAlQ,GAAApB,EACA4Q,EAAAU,WAAAlP,GAAApC,EACA4Q,EAAAW,WAAAnQ,GAAApB,EACA4Q,EAAAW,WAAAnP,GAAApC,GAGAqR,EAAAH,YAAA,SAAA9N,EAAAC,GACA,IAAAkP,EAAAlP,EAAAiO,WAAAlQ,EAAAgC,EAAAmO,WAAAnQ,EACAoR,EAAApP,EAAAkO,WAAAlQ,EAAAiC,EAAAkO,WAAAnQ,EAEAqR,EAAApP,EAAAiO,WAAAlP,EAAAgB,EAAAmO,WAAAnP,EACAsQ,EAAAtP,EAAAkO,WAAAlP,EAAAiB,EAAAkO,WAAAnP,EAEA,QAAAmQ,EAAA,GAAAE,EAAA,GAAAD,EAAA,GAAAE,EAAA,IAMArB,EAAAvM,SAAA,SAAA1B,EAAAC,GACA,OAAAnB,EAAA4C,SAAA1B,EAAAkO,WAAAjO,EAAAiO,aAAApP,EAAA4C,SAAA1B,EAAAmO,WAAAlO,EAAAkO,aAGAF,EAAAsB,KAAA,SAAAvP,EAAAC,GACA,IAAAuP,EAAA5R,EAAAc,IAAA,EAAAd,EAAAa,IAAAuB,EAAAmO,WAAAnQ,EAAAiC,EAAAkO,WAAAnQ,GAAAJ,EAAAc,IAAAuB,EAAAiO,WAAAlQ,EAAAgC,EAAAkO,WAAAlQ,IACAyR,EAAA7R,EAAAc,IAAA,EAAAd,EAAAa,IAAAuB,EAAAmO,WAAAnP,EAAAiB,EAAAkO,WAAAnP,GAAApB,EAAAc,IAAAuB,EAAAiO,WAAAlP,EAAAgB,EAAAkO,WAAAlP,IAQA,OANAgB,EAAAmO,WAAAnQ,EAAAgC,EAAAkO,WAAAlQ,IACAgC,EAAAmO,WAAAnP,EAAAgB,EAAAkO,WAAAlP,IAEAiB,EAAAkO,WAAAnQ,EAAAiC,EAAAiO,WAAAlQ,IACAiC,EAAAkO,WAAAnP,EAAAiB,EAAAiO,WAAAlP,GAEAwQ,EAAAC,GA4BAxB,EAAA1Q,UAAA2P,QAAA,SAAAC,EAAAC,GAYA,IATA,IAAAsC,GAAAC,IACAC,EAAAD,IAEAlS,EAAA2P,EAAAyC,GACA5T,EAAA6C,EAAA8B,IAAAwM,EAAA0C,GAAA1C,EAAAyC,IACAE,EAAAjR,EAAAmD,IAAAhG,GAEAkF,EAAArC,EAAAI,OAEA8Q,EAAA,IAAmB,OAAAA,EAAYA,EAAA,MAAAA,EAAA,SAC/B,GAAAD,EAAA/R,EAAAJ,EAAAE,SAEA,GAAAL,EAAAuS,GAAA/Q,KAAAiP,WAAA8B,IAAA/Q,KAAAkP,WAAA6B,GAAAvS,EAAAuS,GACA,aAEK,CACL,IAAAC,EAAA,EAAAhU,EAAA+T,GACAE,GAAAjR,KAAAiP,WAAA8B,GAAAvS,EAAAuS,IAAAC,EACAE,GAAAlR,KAAAkP,WAAA6B,GAAAvS,EAAAuS,IAAAC,EAGAvS,GAAA,EAEA,GAAAwS,EAAAC,EAAA,CACA,IAAAC,EAAAF,EACAA,EAAAC,IAAAC,EACA1S,EAAA,EAaA,GATAwS,EAAAR,IACAvO,EAAAtB,UACAsB,EAAA6O,GAAAtS,EACAgS,EAAAQ,GAMAR,GAFAE,EAAAhS,EAAAa,IAAAmR,EAAAO,IAGA,SAOA,QAAAT,EAAA,GAAAtC,EAAAiD,YAAAX,KAKAvC,EAAAmD,SAAAZ,EACAvC,EAAAhM,UACA,IAGA8M,EAAA1Q,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,wBClOa1D,EAAQ,GALrB,IAOAqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnBuI,EAAgBvI,EAAQ,GACxB6L,EAAY7L,EAAQ,GACpBqH,EAAUrH,EAAQ,GAElBqJ,EAAerJ,EAAQ,GACvBgV,EAAehV,EAAQ,IACvBiV,EAAejV,EAAQ,IAevB,SAAAkV,EAAAC,GACAzR,KAAAyR,UACAzR,KAAAgL,KACAhL,KAAAiL,KACAjL,KAAA8K,MA0BA,SAAA4G,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA/R,KAAAgS,QAAA,IAAAR,EAAAxR,MACAA,KAAAiS,QAAA,IAAAT,EAAAxR,MAEAA,KAAAkS,WAAAP,EACA3R,KAAAmS,WAAAN,EAEA7R,KAAAoS,SAAAR,EACA5R,KAAAqS,SAAAP,EAEA9R,KAAAsS,cAAAP,EAEA/R,KAAAuS,WAAA,IAAAjB,EAEAtR,KAAA2L,OAAA,KACA3L,KAAA4L,OAAA,KAEA5L,KAAAwS,MAAA,EACAxS,KAAAyS,WAAA,EAEAzS,KAAA0S,WAAA,EAEA1S,KAAA2S,WAAAC,EAAA5S,KAAAkS,WAAAS,WACA3S,KAAAmS,WAAAQ,YACA3S,KAAA6S,cAAAC,EAAA9S,KAAAkS,WAAAW,cACA7S,KAAAmS,WAAAU,eAEA7S,KAAA+S,eAAA,EAGA/S,KAAAgT,eAAA,EAGAhT,KAAA+L,cAAA,EAGA/L,KAAAiT,gBAAA,EAGAjT,KAAAkT,cAAA,EAGAlT,KAAAmT,iBAAA,EAEAnT,KAAAoT,SAAA,GACApT,KAAAqT,SAAAxT,EAAAI,OACAD,KAAAsT,aAAA,IAAAnL,EACAnI,KAAAuT,IAAA,IAAApL,EACAnI,KAAAwT,aAEAxT,KAAAyT,eACAzT,KAAA0T,WACA1T,KAAA2T,cAEA3T,KAAA4T,WACA5T,KAAA6T,WACA7T,KAAA8T,QACA9T,KAAA+T,QAEA/T,KAAAgU,cAAA,GACAhU,KAAAiU,cAAApU,EAAAI,OACAD,KAAAkU,aAAArU,EAAAI,OACAD,KAAAmU,eAAAtU,EAAAI,OACAD,KAAAoU,eAAAvU,EAAAI,OACAD,KAAAqU,OACArU,KAAAsU,UACAtU,KAAAuU,UACAvU,KAAAwU,aAEAxU,KAAAyU,WACAzU,KAAA0U,WACA1U,KAAA2U,QACA3U,KAAA4U,QAybA,SAAAC,IACA7U,KAAA8U,GAAAjV,EAAAI,OACAD,KAAA+U,GAAAlV,EAAAI,OACAD,KAAAgV,cAAA,EACAhV,KAAAiV,eAAA,EACAjV,KAAAkV,WAAA,EACAlV,KAAAmV,YAAA,EACAnV,KAAAoV,aAAA,EAifA,SAAAxC,EAAAyC,EAAAC,GACA,OAAA3W,EAAAQ,KAAAkW,EAAAC,GAOA,SAAAxC,EAAAyC,EAAAC,GACA,OAAAD,EAAAC,EAAAD,EAAAC,EA9iCA/Y,EAAAD,QAAAkV,EAuHAA,EAAApT,UAAAmX,eAAA,SAAAlI,GACA,IAAAmI,EAAA1V,KAAAkS,WACAyD,EAAA3V,KAAAmS,WAEAyD,EAAAF,EAAAG,WACAC,EAAAH,EAAAE,WAEA1K,EAAAuK,EAAAK,UACA3K,EAAAuK,EAAAI,UAEAC,EAAAhW,KAAAiW,cAEAC,EAAAF,EAAAE,WAGAlW,KAAA4T,WAAAzI,EAAAgL,UACAnW,KAAA6T,WAAAzI,EAAA+K,UACAnW,KAAA8T,QAAA3I,EAAAiL,OACApW,KAAA+T,QAAA3I,EAAAgL,OAEApW,KAAA0T,WAAA1T,KAAA2S,WACA3S,KAAA2T,cAAA3T,KAAA6S,cACA7S,KAAAyT,eAAAzT,KAAA+S,eAEA/S,KAAAwT,aAAA0C,EAEAlW,KAAAuT,IAAA3S,UACAZ,KAAAsT,aAAA1S,UAEAZ,KAAAyU,WAAAtJ,EAAAgL,UACAnW,KAAA0U,WAAAtJ,EAAA+K,UACAnW,KAAA2U,QAAAxJ,EAAAiL,OACApW,KAAA4U,QAAAxJ,EAAAgL,OACApW,KAAAmU,eAAAtU,EAAAQ,MAAA8K,EAAAkL,QAAArN,aACAhJ,KAAAoU,eAAAvU,EAAAQ,MAAA+K,EAAAiL,QAAArN,aAEAhJ,KAAAsU,UAAAsB,EAAAjI,SACA3N,KAAAuU,UAAAuB,EAAAnI,SAEA3N,KAAAqU,OAAA2B,EAAAM,KACAtW,KAAAiU,cAAApU,EAAAQ,MAAA2V,EAAAO,aACAvW,KAAAkU,aAAArU,EAAAQ,MAAA2V,EAAAQ,YACAxW,KAAAwU,aAAA0B,EAEA,QAAAO,EAAA,EAAiBA,EAAAP,IAAgBO,EAAA,CACjC,IAAAC,EAAAV,EAAAW,OAAAF,GACAG,EAAA5W,KAAAoT,SAAAqD,GAAA,IAAA5B,EAEAtH,EAAAsJ,cACAD,EAAA5B,cAAAzH,EAAAuJ,QAAAJ,EAAA1B,cACA4B,EAAA3B,eAAA1H,EAAAuJ,QAAAJ,EAAAzB,iBAGA2B,EAAA5B,cAAA,EACA4B,EAAA3B,eAAA,GAGA2B,EAAA9B,GAAAlU,UACAgW,EAAA7B,GAAAnU,UACAgW,EAAA1B,WAAA,EACA0B,EAAAzB,YAAA,EACAyB,EAAAxB,aAAA,EAEApV,KAAAgU,cAAAyC,GAAA5W,EAAAQ,MAAAqW,EAAAF,cASA9E,EAAApT,UAAA2X,YAAA,WACA,OAAAjW,KAAAuS,YAQAb,EAAApT,UAAAyY,iBAAA,SAAAC,GACA,IAAA7L,EAAAnL,KAAAkS,WAAA6D,UACA3K,EAAApL,KAAAmS,WAAA4D,UACAH,EAAA5V,KAAAkS,WAAA2D,WACAC,EAAA9V,KAAAmS,WAAA0D,WAEA,OAAA7V,KAAAuS,WAAAwE,iBAAAC,EAAA7L,EAAA7B,eACAsM,EAAAjI,SAAAvC,EAAA9B,eAAAwM,EAAAnI,WAQA+D,EAAApT,UAAA2Y,WAAA,SAAA3K,GACAtM,KAAAgT,gBAAA1G,GAMAoF,EAAApT,UAAA4Y,UAAA,WACA,OAAAlX,KAAAgT,eAMAtB,EAAApT,UAAA6Y,WAAA,WACA,OAAAnX,KAAAiT,gBAMAvB,EAAApT,UAAAoO,QAAA,WACA,OAAA1M,KAAA4L,QAMA8F,EAAApT,UAAA8Y,YAAA,WACA,OAAApX,KAAAkS,YAMAR,EAAApT,UAAA+Y,YAAA,WACA,OAAArX,KAAAmS,YAMAT,EAAApT,UAAAgZ,eAAA,WACA,OAAAtX,KAAAoS,UAMAV,EAAApT,UAAAiZ,eAAA,WACA,OAAAvX,KAAAqS,UAMAX,EAAApT,UAAAkZ,iBAAA,WACAxX,KAAAkT,cAAA,GAOAxB,EAAApT,UAAAmZ,YAAA,SAAAC,GACA1X,KAAA2S,WAAA+E,GAMAhG,EAAApT,UAAAqZ,YAAA,WACA,OAAA3X,KAAA2S,YAMAjB,EAAApT,UAAAsZ,cAAA,WACA5X,KAAA2S,WAAAC,EAAA5S,KAAAkS,WAAAS,WACA3S,KAAAmS,WAAAQ,aAOAjB,EAAApT,UAAAuZ,eAAA,SAAAC,GACA9X,KAAA6S,cAAAiF,GAMApG,EAAApT,UAAAyZ,eAAA,WACA,OAAA/X,KAAA6S,eAMAnB,EAAApT,UAAA0Z,iBAAA,WACAhY,KAAA6S,cAAAC,EAAA9S,KAAAkS,WAAAW,cACA7S,KAAAmS,WAAAU,gBAOAnB,EAAApT,UAAA2Z,gBAAA,SAAAC,GACAlY,KAAA+S,eAAAmF,GAMAxG,EAAApT,UAAA6Z,gBAAA,WACA,OAAAnY,KAAA+S,gBAMArB,EAAApT,UAAA8Z,SAAA,SAAApC,EAAAqC,EAAAC,GACAtY,KAAAsS,cAAA0D,EAAAqC,EAAArY,KAAAkS,WAAAlS,KAAAoS,SAAAkG,EACAtY,KAAAmS,WAAAnS,KAAAqS,WAYAX,EAAApT,UAAAia,OAAA,SAAAC,GAGAxY,KAAAgT,eAAA,EAEA,IAAAyF,GAAA,EACAC,EAAA1Y,KAAAiT,eAEA0F,EAAA3Y,KAAAkS,WAAA0G,WACAC,EAAA7Y,KAAAmS,WAAAyG,WACAE,EAAAH,GAAAE,EAEA1N,EAAAnL,KAAAkS,WAAA6D,UACA3K,EAAApL,KAAAmS,WAAA4D,UACAsC,EAAAlN,EAAA7B,eACAgP,EAAAlN,EAAA9B,eAGA,GAAAwP,EAAA,CACA,IAAAlD,EAAA5V,KAAAkS,WAAA2D,WACAC,EAAA9V,KAAAmS,WAAA0D,WACA4C,EAAAlH,EAAA1C,YAAA+G,EAAA5V,KAAAoS,SAAA0D,EACA9V,KAAAqS,SAAAgG,EAAAC,GAGAtY,KAAAuS,WAAA2D,WAAA,MACG,CAGH,IAAA6C,EAAA/Y,KAAAuS,WACAvS,KAAAuS,WAAA,IAAAjB,EAEAtR,KAAAoY,SAAApY,KAAAuS,WAAA8F,EAAAC,GACAG,EAAAzY,KAAAuS,WAAA2D,WAAA,EAIA,QAAAxZ,EAAA,EAAmBA,EAAAsD,KAAAuS,WAAA2D,aAAgCxZ,EAAA,CACnD,IAAAsc,EAAAhZ,KAAAuS,WAAAoE,OAAAja,GACAsc,EAAAhE,cAAA,EACAgE,EAAA/D,eAAA,EAEA,QAAAwB,EAAA,EAAqBA,EAAAsC,EAAA7C,aAA4BO,EAAA,CACjD,IAAAwC,EAAAF,EAAApC,OAAAF,GACA,GAAAwC,EAAAC,GAAAjb,KAAA+a,EAAAE,GAAAjb,IAAA,CACA+a,EAAAhE,cAAAiE,EAAAjE,cACAgE,EAAA/D,eAAAgE,EAAAhE,eACA,QAKAwD,GAAAC,IACAvN,EAAAgO,UAAA,GACA/N,EAAA+N,UAAA,IAIAnZ,KAAAiT,eAAAwF,EAEA,GAAAC,GAAA,GAAAD,GAAAD,GACAA,EAAAY,aAAApZ,MAGA,GAAA0Y,GAAA,GAAAD,GAAAD,GACAA,EAAAa,WAAArZ,MAGA,GAAA8Y,GAAAL,GAAAD,GACAA,EAAAc,SAAAtZ,KAAA+Y,IAIArH,EAAApT,UAAAib,wBAAA,SAAAhM,GACA,OAAAvN,KAAAwZ,yBAAAjM,GAAA,IAGAmE,EAAApT,UAAAmb,2BAAA,SAAAlM,EAAAmM,EAAAC,GACA,OAAA3Z,KAAAwZ,yBAAAjM,GAAA,EAAAmM,EAAAC,IAGAjI,EAAApT,UAAAkb,yBAAA,SAAAjM,EAAAqM,EAAAF,EAAAC,GAEA,IAAAjE,EAAA1V,KAAAkS,WACAyD,EAAA3V,KAAAmS,WAEAhH,EAAAuK,EAAAK,UACA3K,EAAAuK,EAAAI,UAIA8D,GAFA1O,EAAA2O,WACA1O,EAAA0O,WACA3O,EAAA4O,YACAC,EAAA5O,EAAA2O,WAEAE,EAAApa,EAAAQ,MAAAL,KAAAmU,gBACA+F,EAAAra,EAAAQ,MAAAL,KAAAoU,gBAEA+F,EAAA,EACAC,EAAA,EACAR,GAAAzO,GAAAuO,GAAAvO,GAAAwO,IACAQ,EAAAna,KAAAyU,WACA2F,EAAApa,KAAA2U,SAGA,IAAA0F,EAAA,EACAC,EAAA,EACAV,GAAAxO,GAAAsO,GAAAtO,GAAAuO,IACAU,EAAAra,KAAA0U,WACA4F,EAAAta,KAAA4U,SAYA,IATA,IAAA2F,EAAA1a,EAAAQ,MAAAwZ,EAAA9c,GACAyd,EAAAX,EAAA9Y,EAEA0Z,EAAA5a,EAAAQ,MAAA2Z,EAAAjd,GACA2d,EAAAV,EAAAjZ,EAEA4Z,EAAA,EAGAlE,EAAA,EAAiBA,EAAAzW,KAAAwU,eAAuBiC,EAAA,CACxC,IAQAvU,EAAA0Y,EAAAC,EARAxC,EAAAxT,EAAAd,WACAuU,EAAAzT,EAAAd,WAQA,OAPAsU,EAAArT,EAAAnE,IAAA2Z,GACAlC,EAAAtT,EAAAnE,IAAA6Z,GACArC,EAAA7Z,EAAAqB,EAAA8B,IAAA4Y,EAAA5W,EAAAa,QAAA6T,EAAArT,EAAAiV,IACA3B,EAAA9Z,EAAAqB,EAAA8B,IAAA8Y,EAAA9W,EAAAa,QAAA8T,EAAAtT,EAAAkV,IAIAla,KAAAqU,QACA,KAAA/C,EAAAwJ,UACA,IAAAC,EAAAlW,EAAAL,QAAA6T,EAAArY,KAAAkU,cACA8G,EAAAnW,EAAAL,QAAA8T,EAAAtY,KAAAgU,cAAA,KACA9R,EAAArC,EAAA8B,IAAAqZ,EAAAD,IACA/Y,YACA4Y,EAAA/a,EAAAiD,QAAA,GAAAiY,EAAA,GAAAC,GACAH,EAAAhb,EAAA8C,IAAA9C,EAAA8B,IAAAqZ,EAAAD,GAAA7Y,GAAAlC,KAAAsU,UACAtU,KAAAuU,UACA,MAEA,KAAAjD,EAAA2J,QACA/Y,EAAAyB,EAAAa,QAAA6T,EAAArT,EAAAhF,KAAAiU,eACA,IAAAiH,EAAArW,EAAAL,QAAA6T,EAAArY,KAAAkU,cACAiH,EAAAtW,EAAAL,QAAA8T,EAAAtY,KAAAgU,cAAAyC,IACAoE,EAAAhb,EAAA8C,IAAA9C,EAAA8B,IAAAwZ,EAAAD,GAAAhZ,GACAlC,KAAAsU,UAAAtU,KAAAuU,UACAqG,EAAAO,EACA,MAEA,KAAA7J,EAAA8J,QACAlZ,EAAAyB,EAAAa,QAAA8T,EAAAtT,EAAAhF,KAAAiU,eACAiH,EAAArW,EAAAL,QAAA8T,EAAAtY,KAAAkU,cACAiH,EAAAtW,EAAAL,QAAA6T,EAAArY,KAAAgU,cAAAyC,IACAoE,EAAAhb,EAAA8C,IAAA9C,EAAA8B,IAAAwZ,EAAAD,GAAAhZ,GACAlC,KAAAsU,UAAAtU,KAAAuU,UACAqG,EAAAO,EAGAjZ,EAAAN,KAAA,GAIA,IAAAkT,EAAAjV,EAAA8B,IAAAiZ,EAAAL,GACAxF,EAAAlV,EAAA8B,IAAAiZ,EAAAH,GAGAE,EAAAhc,EAAAa,IAAAmb,EAAAE,GAEA,IAAA7T,EAAA4S,EAAAjU,EAAAsB,YAAAtB,EAAAqB,UACAhB,EAAAL,EAAAK,WACAU,EAAAf,EAAAe,oBAGA2U,EAAA1c,EAAAe,MAAAsH,GAAA6T,EAAA7U,IACAU,EAAA,GAGA4U,EAAAzb,EAAA+C,MAAAkS,EAAA5S,GACAqZ,EAAA1b,EAAA+C,MAAAmS,EAAA7S,GACAsZ,EAAArB,EAAAE,EAAAD,EAAAkB,IAAAhB,EAAAiB,IAGAE,EAAAD,EAAA,GAAAH,EAAAG,EAAA,EAEAE,EAAA7b,EAAA+B,IAAA6Z,EAAAvZ,GAEAqY,EAAA7Y,OAAAyY,EAAAuB,GACAlB,GAAAJ,EAAAva,EAAA+C,MAAAkS,EAAA4G,GAEAjB,EAAAlZ,OAAA8Y,EAAAqB,GACAhB,GAAAJ,EAAAza,EAAA+C,MAAAmS,EAAA2G,GASA,OANA7B,EAAA9c,EAAA8D,IAAA0Z,GACAV,EAAA9Y,EAAAyZ,EAEAR,EAAAjd,EAAA8D,IAAA4Z,GACAT,EAAAjZ,EAAA2Z,EAEAC,GAcAjJ,EAAApT,UAAAqd,uBAAA,SAAApO,GACA,IAAAmI,EAAA1V,KAAAkS,WACAyD,EAAA3V,KAAAmS,WAEAhH,EAAAuK,EAAAK,UACA3K,EAAAuK,EAAAI,UAEA6F,EAAAzQ,EAAA2O,WACA+B,EAAAzQ,EAAA0O,WAEAD,EAAA1O,EAAA4O,WACAC,EAAA5O,EAAA2O,WAEA+B,EAAA9b,KAAAsU,UACAyH,EAAA/b,KAAAuU,UACAyB,EAAAhW,KAAAiW,cAEAkE,EAAAna,KAAA4T,WACAyG,EAAAra,KAAA6T,WACAuG,EAAApa,KAAA8T,QACAwG,EAAAta,KAAA+T,QACAkG,EAAApa,EAAAQ,MAAAL,KAAAmU,gBACA+F,EAAAra,EAAAQ,MAAAL,KAAAoU,gBAEAmG,EAAA1a,EAAAQ,MAAAwZ,EAAA9c,GACAyd,EAAAX,EAAA9Y,EACAib,EAAAnc,EAAAQ,MAAAub,EAAAtb,GACA2b,EAAAL,EAAA3a,EAEAwZ,EAAA5a,EAAAQ,MAAA2Z,EAAAjd,GACA2d,EAAAV,EAAAjZ,EACAmb,EAAArc,EAAAQ,MAAAwb,EAAAvb,GACA6b,EAAAN,EAAA5a,EAIAoX,EAAAxT,EAAAd,WACAuU,EAAAzT,EAAAd,WACAsU,EAAArT,EAAAnE,IAAA2Z,GACAlC,EAAAtT,EAAAnE,IAAA6Z,GACArC,EAAA7Z,EAAA0C,WAAA,EAAAqZ,GAAA,EAAA5W,EAAAa,QAAA6T,EAAArT,EAAAiV,IACA3B,EAAA9Z,EAAA0C,WAAA,EAAAuZ,GAAA,EAAA9W,EAAAa,QAAA8T,EAAAtT,EAAAkV,IAEA,IAAAlD,EAAAhB,EAAAe,iBAAA,KAAAsB,EAAAyD,EAAAxD,EAAAyD,GAEA/b,KAAAqT,SAAAxS,IAAAmW,EAAA9U,QAEA,QAAAuU,EAAA,EAAiBA,EAAAzW,KAAAwT,eAAuBiD,EAAA,CACxC,IAAAG,EAAA5W,KAAAoT,SAAAqD,GAEAG,EAAA9B,GAAAjU,IAAAhB,EAAA8B,IAAAqV,EAAAL,OAAAF,GAAA8D,IACA3D,EAAA7B,GAAAlU,IAAAhB,EAAA8B,IAAAqV,EAAAL,OAAAF,GAAAgE,IAEA,IAAAa,EAAAzb,EAAA+C,MAAAgU,EAAA9B,GAAA9U,KAAAqT,UACAkI,EAAA1b,EAAA+C,MAAAgU,EAAA7B,GAAA/U,KAAAqT,UAEA+I,EAAAjC,EAAAE,EAAAD,EAAAkB,IAAAhB,EAAAiB,IAEA3E,EAAA1B,WAAAkH,EAAA,IAAAA,EAAA,EAEA,IAAAC,EAAAxc,EAAA+C,MAAA5C,KAAAqT,SAAA,GAEAiJ,EAAAzc,EAAA+C,MAAAgU,EAAA9B,GAAAuH,GACAE,EAAA1c,EAAA+C,MAAAgU,EAAA7B,GAAAsH,GAEAG,EAAArC,EAAAE,EAAAD,EAAAkC,IAAAhC,EAAAiC,IAEA3F,EAAAzB,YAAAqH,EAAA,IAAAA,EAAA,EAGA5F,EAAAxB,aAAA,EACA,IAAAqH,EAAA5c,EAAA8C,IAAA3C,KAAAqT,SAAA6I,GACArc,EAAA8C,IAAA3C,KAAAqT,SAAAxT,EAAA+C,MAAAuZ,EAAAvF,EAAA7B,KACAlV,EAAA8C,IAAA3C,KAAAqT,SAAA2I,GACAnc,EAAA8C,IAAA3C,KAAAqT,SAAAxT,EAAA+C,MAAAqZ,EAAArF,EAAA9B,KACA2H,GAAA9W,EAAAc,oBACAmQ,EAAAxB,cAAApV,KAAA2T,cAAA8I,GAKA,MAAAzc,KAAAwT,cAAAjG,EAAAmP,WAAA,CACA,IAAAC,EAAA3c,KAAAoT,SAAA,GACAwJ,EAAA5c,KAAAoT,SAAA,GAEAyJ,EAAAhd,EAAA+C,MAAA+Z,EAAA7H,GAAA9U,KAAAqT,UACAyJ,EAAAjd,EAAA+C,MAAA+Z,EAAA5H,GAAA/U,KAAAqT,UACA0J,EAAAld,EAAA+C,MAAAga,EAAA9H,GAAA9U,KAAAqT,UACA2J,EAAAnd,EAAA+C,MAAAga,EAAA7H,GAAA/U,KAAAqT,UAEA4J,EAAA9C,EAAAE,EAAAD,EAAAyC,IAAAvC,EAAAwC,IACAI,EAAA/C,EAAAE,EAAAD,EAAA2C,IAAAzC,EAAA0C,IACAG,EAAAhD,EAAAE,EAAAD,EAAAyC,EAAAE,EAAAzC,EAAAwC,EAAAE,EAIAC,IADA,KACAA,EAAAC,EAAAC,MAEAnd,KAAAuT,IAAAnL,GAAAvH,IAAAoc,EAAAE,GACAnd,KAAAuT,IAAAlL,GAAAxH,IAAAsc,EAAAD,GACAld,KAAAsT,aAAAzS,IAAAb,KAAAuT,IAAAjL,eAIAtI,KAAAwT,aAAA,EAIAqG,EAAA9c,EAAA8D,IAAA0Z,GACAV,EAAA9Y,EAAAyZ,EACAoB,EAAAtb,EAAAO,IAAAmb,GACAJ,EAAA3a,EAAAgb,EAEAjC,EAAAjd,EAAA8D,IAAA4Z,GACAT,EAAAjZ,EAAA2Z,EACAmB,EAAAvb,EAAAO,IAAAqb,GACAL,EAAA5a,EAAAkb,GAGAzK,EAAApT,UAAA8e,oBAAA,SAAA7P,GAyBA,IAxBA,IAAAmI,EAAA1V,KAAAkS,WACAyD,EAAA3V,KAAAmS,WAEAhH,EAAAuK,EAAAK,UACA3K,EAAAuK,EAAAI,UAEA6F,EAAAzQ,EAAA2O,WACA+B,EAAAzQ,EAAA0O,WAIAK,GAHAhP,EAAA4O,WACA3O,EAAA2O,WAEA/Z,KAAA4T,YACAwG,EAAApa,KAAA8T,QACAuG,EAAAra,KAAA6T,WACAyG,EAAAta,KAAA+T,QAEAiI,EAAAnc,EAAAQ,MAAAub,EAAAtb,GACA2b,EAAAL,EAAA3a,EACAib,EAAArc,EAAAQ,MAAAwb,EAAAvb,GACA6b,EAAAN,EAAA5a,EAEAiB,EAAAlC,KAAAqT,SACAgJ,EAAAxc,EAAA+C,MAAAV,EAAA,GAEAuU,EAAA,EAAiBA,EAAAzW,KAAAwT,eAAuBiD,EAAA,CACxC,IAAAG,EAAA5W,KAAAoT,SAAAqD,GAEAiF,EAAA7b,EAAAiD,QAAA8T,EAAA5B,cAAA9S,EAAA0U,EAAA3B,eAAAoH,GACAJ,GAAA7B,EAAAva,EAAA+C,MAAAgU,EAAA9B,GAAA4G,GACAM,EAAAta,OAAAyY,EAAAuB,GACAS,GAAA7B,EAAAza,EAAA+C,MAAAgU,EAAA7B,GAAA2G,GACAQ,EAAA3a,OAAA8Y,EAAAqB,GAGAE,EAAAtb,EAAAO,IAAAmb,GACAJ,EAAA3a,EAAAgb,EACAJ,EAAAvb,EAAAO,IAAAqb,GACAL,EAAA5a,EAAAkb,GAGAzK,EAAApT,UAAA+e,wBAAA,SAAA9P,GAEA,IADA,IAAAyI,EAAAhW,KAAAuS,WACAkE,EAAA,EAAiBA,EAAAzW,KAAAwT,eAAuBiD,EACxCT,EAAAW,OAAAF,GAAAzB,cAAAhV,KAAAoT,SAAAqD,GAAAzB,cACAgB,EAAAW,OAAAF,GAAAxB,eAAAjV,KAAAoT,SAAAqD,GAAAxB,gBAIAvD,EAAApT,UAAAgf,wBAAA,SAAA/P,GA4BA,IA3BA,IAAApC,EAAAnL,KAAAkS,WAAAqL,OACAnS,EAAApL,KAAAmS,WAAAoL,OAEA3B,EAAAzQ,EAAA2O,WAGA+B,GAFA1Q,EAAA4O,WAEA3O,EAAA0O,YAGAK,GAFA/O,EAAA2O,WAEA/Z,KAAA4T,YACAwG,EAAApa,KAAA8T,QACAuG,EAAAra,KAAA6T,WACAyG,EAAAta,KAAA+T,QAEAiI,EAAAnc,EAAAQ,MAAAub,EAAAtb,GACA2b,EAAAL,EAAA3a,EACAib,EAAArc,EAAAQ,MAAAwb,EAAAvb,GACA6b,EAAAN,EAAA5a,EAEAiB,EAAAlC,KAAAqT,SACAgJ,EAAAxc,EAAA+C,MAAAV,EAAA,GACAwV,EAAA1X,KAAA0T,WAMA+C,EAAA,EAAiBA,EAAAzW,KAAAwT,eAAuBiD,EAAA,CACxC,IAAAG,EAAA5W,KAAAoT,SAAAqD,IAGA+G,EAAA3d,EAAAI,QACAqB,WAAA,EAAA4a,EAAA,EAAArc,EAAA+C,MAAAuZ,EAAAvF,EAAA7B,KACAyI,EAAA/b,WAAA,EAAAua,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAArF,EAAA9B,KAGA,IAAA2I,EAAA5d,EAAA8C,IAAA6a,EAAAnB,GAAArc,KAAAyT,eACAiK,EAAA9G,EAAAzB,aAAAsI,EAGAE,EAAAjG,EAAAd,EAAA5B,cAGA0I,GAFAE,EAAAjf,EAAAe,MAAAkX,EAAA3B,eAAAyI,GAAAC,EACAA,IACA/G,EAAA3B,eACA2B,EAAA3B,eAAA2I,EAGA,IAAAlC,EAAA7b,EAAA+B,IAAA8b,EAAArB,GAEAL,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAAva,EAAA+C,MAAAgU,EAAA9B,GAAA4G,GAEAQ,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,EAAAza,EAAA+C,MAAAgU,EAAA7B,GAAA2G,GAIA,MAAA1b,KAAAwT,cAAA,GAAAjG,EAAAmP,WACA,QAAAhgB,EAAA,EAAmBA,EAAAsD,KAAAwT,eAAuB9W,EAAA,CAC1C,IAGA8gB,EAHA5G,EAAA5W,KAAAoT,SAAA1W,IAGA8gB,EAAA3d,EAAAI,QACAqB,WAAA,EAAA4a,EAAA,EAAArc,EAAA+C,MAAAuZ,EAAAvF,EAAA7B,KACAyI,EAAA/b,WAAA,EAAAua,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAArF,EAAA9B,KAGA,IAIA8I,EAJAC,EAAAhe,EAAA8C,IAAA6a,EAAAtb,GACAwb,GAAA9G,EAAA1B,YAAA2I,EAAAjH,EAAAxB,cAIAsI,GADAE,EAAAjf,EAAAc,IAAAmX,EAAA5B,cAAA0I,EAAA,IACA9G,EAAA5B,cACA4B,EAAA5B,cAAA4I,EAGAlC,EAAA7b,EAAA+B,IAAA8b,EAAAxb,GAEA8Z,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAAva,EAAA+C,MAAAgU,EAAA9B,GAAA4G,GAEAQ,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,EAAAza,EAAA+C,MAAAgU,EAAA7B,GAAA2G,OAEG,CA0CH,IAAAiB,EAAA3c,KAAAoT,SAAA,GACAwJ,EAAA5c,KAAAoT,SAAA,GAEArS,EAAAlB,EAAAO,IAAAuc,EAAA3H,cAAA4H,EAAA5H,eAIA8I,EAAAje,EAAAI,OAAAmB,IAAA8a,GAAA9a,IAAAvB,EAAA+C,MAAAuZ,EAAAQ,EAAA5H,KAAApT,IAAAqa,GAAAra,IAAA9B,EAAA+C,MAAAqZ,EAAAU,EAAA7H,KACAiJ,EAAAle,EAAAI,OAAAmB,IAAA8a,GAAA9a,IAAAvB,EAAA+C,MAAAuZ,EAAAS,EAAA7H,KAAApT,IAAAqa,GAAAra,IAAA9B,EAAA+C,MAAAqZ,EAAAW,EAAA9H,KAGAkJ,EAAAne,EAAA8C,IAAAmb,EAAA5b,GACA+b,EAAApe,EAAA8C,IAAAob,EAAA7b,GAEAlB,EAAAnB,EAAAO,IAAA4d,EAAArB,EAAAvH,aAAA6I,EAAArB,EAAAxH,cAGApU,EAAAW,IAAAwG,EAAA3D,QAAAxE,KAAAuT,IAAAxS,IAKA,OAAW,CAUX,IAAAhC,EAAAoJ,EAAA3D,QAAAxE,KAAAsT,aAAAtS,GAAA+B,MAEA,GAAAhE,KAAA,GAAAA,EAAAgB,GAAA,GAEA,IAAA/C,EAAA6C,EAAA8B,IAAA5C,EAAAgC,GAGAmd,EAAAre,EAAA+B,IAAA5E,EAAA+B,EAAAmD,GACAic,EAAAte,EAAA+B,IAAA5E,EAAA+C,EAAAmC,GAEA8Z,EAAAva,WAAA0Y,EAAA+D,EAAA/D,EAAAgE,GACAlC,GAAA7B,GAAAva,EAAA+C,MAAA+Z,EAAA7H,GAAAoJ,GAAAre,EAAA+C,MAAAga,EAAA9H,GAAAqJ,IAEAjC,EAAA5a,WAAA+Y,EAAA6D,EAAA7D,EAAA8D,GACAhC,GAAA7B,GAAAza,EAAA+C,MAAA+Z,EAAA5H,GAAAmJ,GAAAre,EAAA+C,MAAAga,EAAA7H,GAAAoJ,IAGAxB,EAAA3H,cAAAjW,IACA6d,EAAA5H,cAAAjW,EAAAgB,EAcA,MAcA,GALAhB,KAAA4d,EAAAzH,WAAAlU,EAAAjC,EACAA,EAAAgB,EAAA,EACAie,EAAA,EACAC,EAAAje,KAAAuT,IAAAnL,GAAArI,EAAAhB,IAAAiC,EAAAjB,EAEAhB,KAAA,GAAAkf,GAAA,GAEAjhB,EAAA6C,EAAA8B,IAAA5C,EAAAgC,GAGAmd,EAAAre,EAAA+B,IAAA5E,EAAA+B,EAAAmD,GACAic,EAAAte,EAAA+B,IAAA5E,EAAA+C,EAAAmC,GACA8Z,EAAAva,WAAA0Y,EAAA+D,EAAA/D,EAAAgE,GACAlC,GAAA7B,GAAAva,EAAA+C,MAAA+Z,EAAA7H,GAAAoJ,GAAAre,EAAA+C,MAAAga,EAAA9H,GAAAqJ,IAEAjC,EAAA5a,WAAA+Y,EAAA6D,EAAA7D,EAAA8D,GACAhC,GAAA7B,GAAAza,EAAA+C,MAAA+Z,EAAA5H,GAAAmJ,GAAAre,EAAA+C,MAAAga,EAAA7H,GAAAoJ,IAGAxB,EAAA3H,cAAAjW,IACA6d,EAAA5H,cAAAjW,EAAAgB,EAaA,MAcA,GALAhB,IAAA,EACAA,EAAAgB,GAAA6c,EAAA1H,WAAAlU,EAAAjB,EACAie,EAAAhe,KAAAuT,IAAAlL,GAAAtJ,IAAAgB,EAAAiB,EAAAjC,EACAkf,EAAA,EAEAlf,EAAAgB,GAAA,GAAAie,GAAA,GAEAhhB,EAAA6C,EAAA8B,IAAA5C,EAAAgC,GAGAmd,EAAAre,EAAA+B,IAAA5E,EAAA+B,EAAAmD,GACAic,EAAAte,EAAA+B,IAAA5E,EAAA+C,EAAAmC,GACA8Z,EAAAva,WAAA0Y,EAAA+D,EAAA/D,EAAAgE,GACAlC,GAAA7B,GAAAva,EAAA+C,MAAA+Z,EAAA7H,GAAAoJ,GAAAre,EAAA+C,MAAAga,EAAA9H,GAAAqJ,IAEAjC,EAAA5a,WAAA+Y,EAAA6D,EAAA7D,EAAA8D,GACAhC,GAAA7B,GAAAza,EAAA+C,MAAA+Z,EAAA5H,GAAAmJ,GAAAre,EAAA+C,MAAAga,EAAA7H,GAAAoJ,IAGAxB,EAAA3H,cAAAjW,IACA6d,EAAA5H,cAAAjW,EAAAgB,EAaA,MAcA,GALAhB,IAAA,EACAA,EAAAgB,EAAA,EACAie,EAAAhd,EAAAjC,EACAkf,EAAAjd,EAAAjB,EAEAie,GAAA,GAAAC,GAAA,GAEAjhB,EAAA6C,EAAA8B,IAAA5C,EAAAgC,GAGAmd,EAAAre,EAAA+B,IAAA5E,EAAA+B,EAAAmD,GACAic,EAAAte,EAAA+B,IAAA5E,EAAA+C,EAAAmC,GACA8Z,EAAAva,WAAA0Y,EAAA+D,EAAA/D,EAAAgE,GACAlC,GAAA7B,GAAAva,EAAA+C,MAAA+Z,EAAA7H,GAAAoJ,GAAAre,EAAA+C,MAAAga,EAAA9H,GAAAqJ,IAEAjC,EAAA5a,WAAA+Y,EAAA6D,EAAA7D,EAAA8D,GACAhC,GAAA7B,GAAAza,EAAA+C,MAAA+Z,EAAA5H,GAAAmJ,GAAAre,EAAA+C,MAAAga,EAAA7H,GAAAoJ,IAGAxB,EAAA3H,cAAAjW,IACA6d,EAAA5H,cAAAjW,EAAAgB,EAEA,MAKA,OAIA6b,EAAAtb,EAAAO,IAAAmb,GACAJ,EAAA3a,EAAAgb,EAEAJ,EAAAvb,EAAAO,IAAAqb,GACAL,EAAA5a,EAAAkb,GAmBA,IAAAiC,EAAA,GAKA1M,EAAA2M,QAAA,SAAAC,EAAAC,EAAAC,GAEAJ,EAAAE,GAAAF,EAAAE,IAAA,GACAF,EAAAE,GAAAC,GAAAC,GAGA9M,EAAA1T,OAAA,SAAA0X,EAAA9D,EAAA+D,EAAA7D,GACA,IAIAL,EAAAM,EAJA0M,EAAA/I,EAAAnJ,UACAmS,EAAA/I,EAAApJ,UAIA,GAAAwF,EAAAqM,EAAAK,IAAAL,EAAAK,GAAAC,GACAjN,EAAA,IAAAC,EAAAgE,EAAA9D,EAAA+D,EAAA7D,EAAAC,OACG,MAAAA,EAAAqM,EAAAM,IAAAN,EAAAM,GAAAD,IAGH,YAFAhN,EAAA,IAAAC,EAAAiE,EAAA7D,EAAA4D,EAAA9D,EAAAG,GAMA2D,EAAAjE,EAAA2F,cACAzB,EAAAlE,EAAA4F,cACAzF,EAAAH,EAAA6F,iBACAxF,EAAAL,EAAA8F,iBACA,IAAApM,EAAAuK,EAAAK,UACA3K,EAAAuK,EAAAI,UA8BA,OA3BAtE,EAAAO,QAAAP,UACAA,EAAAO,QAAAlH,MAAAM,EAEAqG,EAAAO,QAAAhH,KAAA,KACAyG,EAAAO,QAAA/G,KAAAE,EAAAwT,cACA,MAAAxT,EAAAwT,gBACAxT,EAAAwT,cAAA3T,KAAAyG,EAAAO,SAEA7G,EAAAwT,cAAAlN,EAAAO,QAGAP,EAAAQ,QAAAR,UACAA,EAAAQ,QAAAnH,MAAAK,EAEAsG,EAAAQ,QAAAjH,KAAA,KACAyG,EAAAQ,QAAAhH,KAAAG,EAAAuT,cACA,MAAAvT,EAAAuT,gBACAvT,EAAAuT,cAAA3T,KAAAyG,EAAAQ,SAEA7G,EAAAuT,cAAAlN,EAAAQ,QAGA,GAAAyD,EAAAkD,YAAA,GAAAjD,EAAAiD,aACAzN,EAAAgO,UAAA,GACA/N,EAAA+N,UAAA,IAGA1H,GAGAC,EAAAkN,QAAA,SAAAnN,EAAA+G,GACA,IAAA9C,EAAAjE,EAAAS,WACAyD,EAAAlE,EAAAU,WAEAhH,EAAAuK,EAAAK,UACA3K,EAAAuK,EAAAI,UAEAtE,EAAA0F,cACAqB,EAAAa,WAAA5H,GAIAA,EAAAO,QAAAhH,OACAyG,EAAAO,QAAAhH,KAAAC,KAAAwG,EAAAO,QAAA/G,MAGAwG,EAAAO,QAAA/G,OACAwG,EAAAO,QAAA/G,KAAAD,KAAAyG,EAAAO,QAAAhH,MAGAyG,EAAAO,SAAA7G,EAAAwT,gBACAxT,EAAAwT,cAAAlN,EAAAO,QAAA/G,MAIAwG,EAAAQ,QAAAjH,OACAyG,EAAAQ,QAAAjH,KAAAC,KAAAwG,EAAAQ,QAAAhH,MAGAwG,EAAAQ,QAAAhH,OACAwG,EAAAQ,QAAAhH,KAAAD,KAAAyG,EAAAQ,QAAAjH,MAGAyG,EAAAQ,SAAA7G,EAAAuT,gBACAvT,EAAAuT,cAAAlN,EAAAQ,QAAAhH,MAGAwG,EAAAc,WAAA2D,WAAA,MAAAR,EAAAkD,YACA,GAAAjD,EAAAiD,aACAzN,EAAAgO,UAAA,GACA/N,EAAA+N,UAAA,IAGA,IAAAsF,EAAA/I,EAAAnJ,UACAmS,EAAA/I,EAAApJ,UAEAsS,EAAAT,EAAAK,GAAAC,GAAAG,WACA,mBAAAA,GACAA,EAAApN,qBC/qCanV,EAAQ,GAHrB,IAKAuD,EAAWvD,EAAQ,GACnBuI,EAAgBvI,EAAQ,GACxBqC,EAAWrC,EAAQ,GACnBqH,EAAUrH,EAAQ,GAyClB,SAAAgV,IACAtR,KAAAsW,KACAtW,KAAAuW,YAAA1W,EAAAI,OACAD,KAAAwW,WAAA3W,EAAAI,OACAD,KAAA2W,OAAA,KAAAmI,EAAA,IAAAA,GACA9e,KAAAkW,WAAA,EAqBA,SAAA4I,IACA9e,KAAAwW,WAAA3W,EAAAI,OACAD,KAAAgV,cAAA,EACAhV,KAAAiV,eAAA,EACAjV,KAAAkZ,GAAA,IAAA6F,EAUA,SAAAA,IACA/e,KAAAgf,GAAA,IAAAC,EAwBA,SAAAA,IACAjf,KAAA4R,OACA5R,KAAA8R,OACA9R,KAAAye,MACAze,KAAA0e,MAiBA,SAAAQ,IACAlf,KAAAkC,OACAlC,KAAA2W,OAAA,GACA3W,KAAAmf,YAAA,GAhIA1iB,EAAAD,QAAA8U,EACA7U,EAAAD,QAAA4iB,kBA6RA,SAAAC,EAAAC,EAAApd,EAAAqd,EAAAC,GAEA,IAAAC,EAAA,EAGAC,EAAA7f,EAAA8C,IAAAT,EAAAod,EAAA,GAAAhf,GAAAif,EACAI,EAAA9f,EAAA8C,IAAAT,EAAAod,EAAA,GAAAhf,GAAAif,EAGAG,GAAA,GACAL,EAAAI,KAAA5e,IAAAye,EAAA,IACAK,GAAA,GACAN,EAAAI,KAAA5e,IAAAye,EAAA,IAGA,GAAAI,EAAAC,EAAA,GAEA,IAAAC,EAAAF,KAAAC,GACAN,EAAAI,GAAAnf,EAAAY,WAAA,EAAA0e,EAAAN,EAAA,GAAAhf,EAAAsf,EAAAN,EAAA,GAAAhf,GAGA+e,EAAAI,GAAAvG,GAAA8F,GAAApN,OAAA4N,EACAH,EAAAI,GAAAvG,GAAA8F,GAAAlN,OAAAwN,EAAA,GAAApG,GAAA8F,GAAAlN,OACAuN,EAAAI,GAAAvG,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACAR,EAAAI,GAAAvG,GAAA8F,GAAAN,MAAApN,EAAAwO,SACAL,EAGA,OAAAA,GAxTAhjB,EAAAD,QAAAujB,WAAAC,EACAvjB,EAAAD,QAAAyjB,eAkOA,SAAAC,EAAAC,EAAAC,EAAAC,GAOA,QAAA3jB,EAAA,EAAiBA,EAAA0jB,EAAAlK,aAA0BxZ,EAAA,CAC3C,IAAAwc,EAAAkH,EAAAzJ,OAAAja,GAAAwc,GAEAgH,EAAAxjB,GAAA4jB,EAAAC,YAEA,QAAA9J,EAAA,EAAmBA,EAAA4J,EAAAnK,aAA0BO,EAC7C,GAAA4J,EAAA1J,OAAAF,GAAAyC,GAAAjb,KAAAib,EAAAjb,IAAA,CACAiiB,EAAAxjB,GAAA4jB,EAAAE,aACA,OAMA,QAAA9jB,EAAA,EAAiBA,EAAA2jB,EAAAnK,aAA0BxZ,EAAA,CAC3C,IAAAwc,EAAAmH,EAAA1J,OAAAja,GAAAwc,GAEAiH,EAAAzjB,GAAA4jB,EAAAG,SAEA,QAAAhK,EAAA,EAAmBA,EAAA2J,EAAAlK,aAA0BO,EAC7C,GAAA2J,EAAAzJ,OAAAF,GAAAyC,GAAAjb,KAAAib,EAAAjb,IAAA,CACAkiB,EAAAzjB,GAAA4jB,EAAAE,aACA,SA9PA/jB,EAAAD,QAAA8jB,aAGAhP,EAAAwJ,UAAA,EACAxJ,EAAA2J,QAAA,EACA3J,EAAA8J,QAAA,EAGA9J,EAAAuO,SAAA,EACAvO,EAAAwO,OAAA,EAsEA1iB,OAAAC,eAAA0hB,EAAAzgB,UAAA,OACAf,IAAA,WACA,OAAAyC,KAAAgf,GAAApN,OAAA,EAAA5R,KAAAgf,GAAAlN,OAAA,GAAA9R,KAAAgf,GAAAP,MAAA,GAAAze,KAAAgf,GAAAN,OAEAphB,YAAA,EACAojB,cAAA,IAGA3B,EAAAzgB,UAAAuC,IAAA,SAAA1D,GAEA6C,KAAAgf,GAAAne,IAAA1D,EAAA6hB,KAkBAC,EAAA3gB,UAAAuC,IAAA,SAAA1D,GACA6C,KAAA4R,OAAAzU,EAAAyU,OACA5R,KAAA8R,OAAA3U,EAAA2U,OACA9R,KAAAye,MAAAthB,EAAAshB,MACAze,KAAA0e,MAAAvhB,EAAAuhB,OAuBApN,EAAAhT,UAAAyY,iBAAA,SAAA4J,EAAAtI,EAAAyD,EAAAxD,EAAAyD,GACA,MAAA/b,KAAAkW,WAAA,CAMA,IAAAhU,GAFAye,KAAA,IAAAzB,GAEAhd,OACAyU,EAAAgK,EAAAhK,OACAwI,EAAAwB,EAAAxB,YAGA,OAAAnf,KAAAsW,MACA,KAAAhF,EAAAwJ,UACA5Y,EAAArC,EAAAO,IAAA,KACA,IAAA2a,EAAAlW,EAAAL,QAAA6T,EAAArY,KAAAwW,YACAwE,EAAAnW,EAAAL,QAAA8T,EAAAtY,KAAA2W,OAAA,GAAAH,YACAoK,EAAA/gB,EAAA8B,IAAAqZ,EAAAD,GACAlb,EAAAkC,cAAA6e,GAAAjiB,EAAAE,QAAAF,EAAAE,UACAqD,EAAArB,IAAA+f,GACA1e,EAAAF,aAEA2U,EAAA,GAAA9W,EAAAoD,IAAA8X,EAAAC,GACAmE,EAAA,IAAApD,EAAAD,EACAnF,EAAA9U,OAAA,EACAsd,EAAAtd,OAAA,EACA,MAEA,KAAAyP,EAAA2J,QACA/Y,EAAAyB,EAAAa,QAAA6T,EAAArT,EAAAhF,KAAAuW,aAGA,IAFA,IAAA2E,EAAArW,EAAAL,QAAA6T,EAAArY,KAAAwW,YAEA9Z,EAAA,EAAmBA,EAAAsD,KAAAkW,aAAqBxZ,EAAA,CACxC,IAAAye,EAAAtW,EAAAL,QAAA8T,EAAAtY,KAAA2W,OAAAja,GAAA8Z,YACA+D,EAAA1a,EAAAQ,MAAA8a,GAAA5Z,OAAAua,EAAAjc,EAAA8C,IAAA9C,EAAA8B,IAAAwZ,EAAAD,GAAAhZ,MACAuY,EAAA5a,EAAAQ,MAAA8a,GAAAzZ,OAAAqa,EAAA7Z,GACAyU,EAAAja,GAAAmD,EAAAoD,IAAAsX,EAAAE,GACA0E,EAAAziB,GAAAmD,EAAA8C,IAAA9C,EAAA8B,IAAA8Y,EAAAF,GAAArY,GAEAyU,EAAA9U,OAAA7B,KAAAkW,WACAiJ,EAAAtd,OAAA7B,KAAAkW,WACA,MAEA,KAAA5E,EAAA8J,QACAlZ,EAAAyB,EAAAa,QAAA8T,EAAAtT,EAAAhF,KAAAuW,aAGA,IAFA2E,EAAArW,EAAAL,QAAA8T,EAAAtY,KAAAwW,YAEA9Z,EAAA,EAAmBA,EAAAsD,KAAAkW,aAAqBxZ,EAAA,CACxCye,EAAAtW,EAAAL,QAAA6T,EAAArY,KAAA2W,OAAAja,GAAA8Z,YACAiE,EAAA5a,EAAAiD,QAAA,EAAAqY,EAAAY,EAAAlc,EAAA8C,IAAA9C,EAAA8B,IAAAwZ,EAAAD,GAAAhZ,MACAqY,EAAA1a,EAAAiD,QAAA,EAAAqY,GAAAW,EAAA5Z,GACAyU,EAAAja,GAAAmD,EAAAoD,IAAAsX,EAAAE,GACA0E,EAAAziB,GAAAmD,EAAA8C,IAAA9C,EAAA8B,IAAA4Y,EAAAE,GAAAvY,GAEAyU,EAAA9U,OAAA7B,KAAAkW,WACAiJ,EAAAtd,OAAA7B,KAAAkW,WAEAhU,EAAAN,KAAA,GAOA,OAHA+e,EAAAze,SACAye,EAAAhK,SACAgK,EAAAxB,cACAwB,IAWA,IAAAL,EAAA,CAEAO,UAAA,EACAJ,SAAA,EACAD,aAAA,EACAD,YAAA,GAoDA,SAAAP,IACAhgB,KAAAM,EAAAT,EAAAI,OACAD,KAAAkZ,GAAA,IAAA6F,EAGAiB,EAAA1hB,UAAAuC,IAAA,SAAA1D,GACA6C,KAAAM,EAAAO,IAAA1D,EAAAmD,GACAN,KAAAkZ,GAAArY,IAAA1D,EAAA+b,sBC/SA,IAAA4H,EAAYxkB,EAAQ,IACpB2T,EAAa3T,EAAQ,IACrBykB,EAASzkB,EAAQ,IACjB0kB,EAAa1kB,EAAQ,IAIrB,SAAA2kB,EAAAC,GACA,KAAAlhB,gBAAAihB,GACA,OAAAF,EAAAI,GAAAD,GACAD,EAAAG,IAAAC,MAAAJ,EAAAK,WACKP,EAAA3iB,OAAA8iB,GACLD,EAAAM,MAAAF,MAAAJ,EAAAK,WAEAJ,EAIAJ,EAAA9iB,SAEA,QAAAtB,EAAA,EAAiBA,EAAA8kB,EAAA3f,OAAkBnF,IACnC8kB,EAAA9kB,GAAAG,KAAAmD,MAhBA8gB,EAAA9iB,OAAA,EAoBA,IAAAwjB,EAAA,GAEAP,EAAAO,MAAA,SAAAL,GACAK,EAAAC,KAAAN,IAGA,IAAAO,EAAA,GAEAT,EAAAS,MAAA,SAAAP,GACAO,EAAAD,KAAAN,IAGA,IAAAQ,EAAA,GAEAV,EAAAW,OAAA,WACA,OAAAN,UAAAzf,QAAAkf,EAAAc,OAAAP,UAAA,IACA,OAAAK,EAAAL,UAAA,IAEA,IAAAA,UAAAzf,QAAAkf,EAAA3iB,OAAAkjB,UAAA,KACArR,EAAA0R,EAAAL,UAAA,IAEA,IAAAA,UAAAzf,QAAAkf,EAAAc,OAAAP,UAAA,MACAA,UAAA,GAAAA,UAAA,KAIA,IAAAQ,EAAA,GAEAC,EAAA,GACAC,GAAA,EACAC,GAAA,EAEAhB,EAAAG,IAAA,SAAAA,EAAAc,GACAF,EAKAf,EAAAW,OAAA,aACAO,CAAA,SAAAC,EAAAC,GAEA,QAAA3lB,EAAA,EAAmBA,EAAAglB,EAAA7f,OAAkBnF,IACrCglB,EAAAhlB,GAAAG,KAAAmD,KAAAoiB,EAAAC,GAEAjB,EAAAgB,EAAAC,GACAN,EAAAN,KAAAW,GAEAA,EAAAE,SACGJ,GAdHJ,EAAAL,KAAAH,YAiBA,IAAAiB,EAAAvB,IAEAC,EAAAuB,QAAA,SAAAC,GACA,oBAAAA,EAAA,CACA,IAAAC,EAAAzB,EAAA0B,QAAAF,GACA,gBAAAG,KAAAF,KAEAD,EAAA,SAAAjE,IA4HA,SAAAqE,EAAArE,GACA,IAAAsE,EAAAC,SAAAC,cAAA,UACAF,EAAAG,iBAAA,kBACAzE,MAEAsE,EAAAG,iBAAA,iBAAAxf,GACA+a,EAAA/a,GAAA,yBAAAof,KAEAC,EAAAD,MACAC,EAAA5J,GAAA,WAAAgK,KAAAC,MACAJ,SAAAK,KAAAC,YAAAP,GArIAQ,CAAAZ,EAAAlE,KAIA,mBAAAiE,GAOAA,EAAAF,MAGAtB,EAAAqB,MAAA,SAAAV,GAGAX,EAAAW,UASAW,EAAAgB,KAAA,WAGA,IADAvB,GAAA,EACAF,EAAAjgB,QAAA,CACA,IAAA2hB,EAAA1B,EAAA2B,QACAxC,EAAAG,IAAAC,MAAAJ,EAAAuC,OAKAvC,EAAAyC,MAAA,WACA,IAAAzB,EAAA,CACAA,GAAA,EACA,QAAAvlB,EAAAqlB,EAAAlgB,OAAA,EAAoCnF,GAAA,EAAQA,IAC5CqlB,EAAArlB,GAAAgnB,UAKAzC,EAAA0C,OAAA,WACA,GAAA1B,EAAA,CACAA,GAAA,EACA,QAAAvlB,EAAAqlB,EAAAlgB,OAAA,EAAoCnF,GAAA,EAAQA,IAC5CqlB,EAAArlB,GAAAinB,WAKA1C,EAAAjjB,OAAA,WACA,WAAAijB,GAGAA,EAAA0B,QAAA,WAEA,uBAAAiB,QAAA,oBAAAb,SACA,gBAAAL,GACA,OAAAA,GAIA,IAAAmB,EAAAd,SAAAe,qBAAA,UA2CA,gBAAApB,GACA,WAAAE,KAAAF,GAAA,CACA,IAAAG,EA3CA,WAEA,GAAAE,SAAAgB,cACA,OAAAhB,SAAAgB,cAAAlB,IAIA,IAAAmB,EACA,IACA,IAAAvgB,EAAA,IAAA9C,MACA,IAAA8C,EAAAugB,MAGA,MAAAvgB,EAFAugB,EAAAvgB,EAAAugB,MAIK,MAAAvgB,GACLugB,EAAAvgB,EAAAugB,MAEA,oBAAAA,EAGA,QAAAtnB,GAFAsnB,IAAAC,MAAA,OAEApiB,OAAgCnF,KAAK,CACrC,IAAAgmB,EAAAsB,EAAAtnB,GAAAwnB,MAAA,wCACA,GAAAxB,EACA,OAAAA,EAAA,GAMA,GAAAmB,EAAAhiB,QAAA,eAAAgiB,EAAA,GACA,IAAAnnB,EAAAmnB,EAAAhiB,OAAkCnF,KAClC,mBAAAmnB,EAAAnnB,GAAAynB,WACA,OAAAN,EAAAnnB,GAAAmmB,IAKA,OAAAuB,SAAAC,KAKAC,GAEA5B,EADAG,EAAA0B,UAAA,EAAA1B,EAAA2B,YAAA,QACA9B,EAAA6B,UAAA,GAIA,OAAA7B,GA3DA,GA+DAjmB,EAAAD,QAAAykB,mBC7LA,IACArhB,GAAsD,EAEtDnD,EAAAD,QAAAioB,EAEA,IAAA3kB,EAAaxD,EAAQ,GACrB0B,EAAa1B,EAAQ,GAErBqC,GADcrC,EAAQ,GACXA,EAAQ,IACnBuI,EAAgBvI,EAAQ,GACxBqH,EAAUrH,EAAQ,GAClBuD,EAAWvD,EAAQ,GAEnBqJ,GADWrJ,EAAQ,IACJA,EAAQ,IACvBoR,EAAYpR,EAAQ,IAEpBkC,EAAA,IAAAqB,EAAA+Q,EAAA,IAAA/Q,EAAAgR,EAAA,IAAAhR,EAAA6kB,EAAA,IAAA7kB,EAAA8kB,EAAA,IAAA9kB,EAAA7C,EAAA,IAAA6C,EAAAsC,EAAA,IAAAwB,EAaA,SAAA8gB,EAAAG,GACA,KAAA5kB,gBAAAykB,GACA,WAAAA,EAAAG,GAGAH,EAAAI,OAAAhoB,KAAAmD,MAEAA,KAAAqL,OAAAoZ,EAAAK,KACA9kB,KAAA2N,SAAAhI,EAAAS,cACApG,KAAA+kB,WAAAllB,EAAAI,OACAD,KAAAglB,WAAA,GACAhlB,KAAAilB,UAAA,GACAjlB,KAAAklB,QAAA,EACAllB,KAAAmlB,eAAA,IAAAtlB,EAAA,KAEA+kB,KAAA/iB,QACA7B,KAAAolB,KAAAR,GA3BAH,EAAAI,OAAAnX,EACA+W,EAAAnmB,UAAAN,EAAAymB,EAAAI,OAAAvmB,WAEAmmB,EAAAK,KAAA,UA4BAL,EAAAnmB,UAAA+mB,UAAA,SAAAC,GAEA,OADA1lB,GAAAE,EAAAb,OAAA,GAAAqmB,KAAAtlB,KAAAklB,SACAllB,KAAAglB,WAAAM,IAMAb,EAAAnmB,UAAAwP,OAAA,WACA,IAAAzN,EAAA,IAAAokB,EACApkB,EAAAgL,OAAArL,KAAAqL,OACAhL,EAAAsN,SAAA3N,KAAA2N,SACAtN,EAAA6kB,QAAAllB,KAAAklB,QACA7kB,EAAA0kB,WAAAlkB,IAAAb,KAAA+kB,YACA1kB,EAAA8kB,eAAAtkB,IAAAb,KAAAmlB,gBACA,QAAAzoB,EAAA,EAAiBA,EAAAsD,KAAAklB,QAAkBxoB,IACnC2D,EAAA2kB,WAAAvD,KAAAzhB,KAAAglB,WAAAtoB,GAAA2D,SAEA,IAAA3D,EAAA,EAAiBA,EAAAsD,KAAAilB,UAAApjB,OAA2BnF,IAC5C2D,EAAA4kB,UAAAxD,KAAAzhB,KAAAilB,UAAAvoB,GAAA2D,SAEA,OAAAA,GAGAokB,EAAAnmB,UAAAyP,cAAA,WACA,UA0DA0W,EAAAnmB,UAAA8mB,KAAA,SAAAR,GAEA,GADAhlB,GAAAE,EAAAb,OAAA,GAAA2lB,EAAA/iB,QAAA+iB,EAAA/iB,QAAA8D,EAAAE,oBACA+e,EAAA/iB,OAAA,EACA7B,KAAAulB,UAAA,SADA,CAUA,IALA,IAAApnB,EAAAQ,EAAAa,IAAAolB,EAAA/iB,OAAA8D,EAAAE,oBAGA2f,EAAA,GACAC,EAAA,EACA/oB,EAAA,EAAiBA,EAAAyB,IAAOzB,EAAA,CAIxB,IAHA,IAAA4D,EAAAskB,EAAAloB,GAEAgpB,GAAA,EACAjP,EAAA,EAAmBA,EAAAgP,IAAehP,EAClC,GAAA5W,EAAA2C,gBAAAlC,EAAAklB,EAAA/O,IAAA,IAAA9Q,EAAAM,kBAAA,CACAyf,GAAA,EACA,MAIAA,IACAF,EAAAC,KAAAnlB,GAKA,IADAnC,EAAAsnB,GACA,EAIA,OAFA7lB,GAAAE,EAAAb,QAAA,QACAe,KAAAulB,UAAA,KAQA,IAAAI,EAAA,EACAC,EAAAJ,EAAA,GAAAzmB,EACA,IAAArC,EAAA,EAAiBA,EAAAyB,IAAOzB,EAAA,CACxB,IAAAqC,EAAAymB,EAAA9oB,GAAAqC,GACAA,EAAA6mB,GAAA7mB,GAAA6mB,GAAAJ,EAAA9oB,GAAAqD,EAAAylB,EAAAG,GAAA5lB,KACA4lB,EAAAjpB,EACAkpB,EAAA7mB,GAQA,IAJA,IAAA8mB,EAAA,GACA/oB,EAAA,EACAgpB,EAAAH,IAES,CACTE,EAAA/oB,GAAAgpB,EAEA,IAAAC,EAAA,EACA,IAAAtP,EAAA,EAAmBA,EAAAtY,IAAOsY,EAC1B,GAAAsP,GAAAD,EAAA,CAKA,IAAAtoB,EAAAqC,EAAA8B,IAAA6jB,EAAAO,GAAAP,EAAAK,EAAA/oB,KAEAC,GADAuD,EAAAT,EAAA8B,IAAA6jB,EAAA/O,GAAA+O,EAAAK,EAAA/oB,KACA+C,EAAA+C,MAAApF,EAAA8C,IACAvD,EAAA,IACAgpB,EAAAtP,GAIA,GAAA1Z,GAAAuD,EAAAyB,gBAAAvE,EAAAuE,kBACAgkB,EAAAtP,QAbAsP,EAAAtP,EAoBA,KAHA3Z,EACAgpB,EAAAC,EAEAA,GAAAJ,EACA,MAIA,GAAA7oB,EAAA,EAIA,OAFA8C,GAAAE,EAAAb,QAAA,QACAe,KAAAulB,UAAA,KAMA,GAFAvlB,KAAAklB,QAAApoB,EAEAA,EAAA,GACA,IAAAkpB,GAAAtV,IAAAuV,EAAAD,EAGA,IAAAtpB,EAAA,EAAsBA,EAAAI,IAAOJ,GAC7B4D,EAAAN,KAAAglB,WAAAtoB,GAAA8oB,EAAAK,EAAAnpB,KACAqC,EAAAinB,IACAA,EAAA1lB,EAAAvB,GAEAuB,EAAAP,EAAAkmB,IACAA,EAAA3lB,EAAAP,GAIAC,KAAAmlB,eAAApmB,EAAAinB,EAAA,EACAhmB,KAAAmlB,eAAAplB,EAAAkmB,EAAA,EAIA,IAAAvpB,EAAA,EAAiBA,EAAAI,IAAOJ,EAAA,CACxB,IAAAwpB,EAAAxpB,EACAypB,EAAAzpB,EAAA,EAAAI,EAAAJ,EAAA,IACA0pB,EAAAvmB,EAAA8B,IAAA3B,KAAAglB,WAAAmB,GAAAnmB,KAAAglB,WAAAkB,IACAtmB,GAAAE,EAAAb,OAAAmnB,EAAArkB,gBAAApD,EAAAE,QAAAF,EAAAE,SACAmB,KAAAilB,UAAAvoB,GAAAmD,EAAA+C,MAAAwjB,EAAA,GACApmB,KAAAilB,UAAAvoB,GAAAsF,YAIAhC,KAAA+kB,WAlLA,SAAAsB,EAAAC,GACA1mB,GAAAE,EAAAb,OAAAqnB,GAAA,GAkBA,IAhBA,IAAAvpB,EAAA8C,EAAAI,OACAsmB,EAAA,EAIAC,EAAA3mB,EAAAI,OAWAvD,EAAA,EAAiBA,EAAA4pB,IAAW5pB,EAAA,CAE5B,IAAAkU,EAAA4V,EACA3V,EAAAwV,EAAA3pB,GACA+pB,EAAA/pB,EAAA,EAAA4pB,EAAAD,EAAA3pB,EAAA,GAAA2pB,EAAA,GAEAK,EAAA7mB,EAAA8B,IAAAkP,EAAAD,GACA+V,EAAA9mB,EAAA8B,IAAA8kB,EAAA7V,GAIAgW,EAAA,GAFA/mB,EAAA+C,MAAA8jB,EAAAC,GAGAJ,GAAAK,EAGA7pB,EAAAwE,OAAAqlB,GAjBA,KAiBAhW,GACA7T,EAAAwE,OAAAqlB,GAlBA,KAkBA/V,GACA9T,EAAAwE,OAAAqlB,GAnBA,KAmBAH,GAMA,OAFA7mB,GAAAE,EAAAb,OAAAsnB,EAAA5nB,EAAAE,SACA9B,EAAA6E,IAAA,EAAA2kB,GACAxpB,EAwIA8pB,CAAA7mB,KAAAglB,WAAAloB,KAMA2nB,EAAAnmB,UAAAinB,UAAA,SAAAuB,EAAAC,EAAAC,EAAApjB,GA0BA,GAzBA5D,KAAAglB,WAAA,IACAhlB,KAAAglB,WAAA,GAAAnkB,KAAAimB,GAAAC,GACA/mB,KAAAglB,WAAA,GAAAnkB,IAAAimB,GAAAC,GACA/mB,KAAAglB,WAAA,GAAAnkB,IAAAimB,EAAAC,GACA/mB,KAAAglB,WAAA,GAAAnkB,KAAAimB,EAAAC,KAEA/mB,KAAAglB,WAAA,GAAAnlB,EAAAO,KAAA0mB,GAAAC,GACA/mB,KAAAglB,WAAA,GAAAnlB,EAAAO,IAAA0mB,GAAAC,GACA/mB,KAAAglB,WAAA,GAAAnlB,EAAAO,IAAA0mB,EAAAC,GACA/mB,KAAAglB,WAAA,GAAAnlB,EAAAO,KAAA0mB,EAAAC,IAEA/mB,KAAAilB,UAAA,IACAjlB,KAAAilB,UAAA,GAAApkB,IAAA,MACAb,KAAAilB,UAAA,GAAApkB,IAAA,KACAb,KAAAilB,UAAA,GAAApkB,IAAA,KACAb,KAAAilB,UAAA,GAAApkB,KAAA,OAEAb,KAAAilB,UAAA,GAAAplB,EAAAO,IAAA,MACAJ,KAAAilB,UAAA,GAAAplB,EAAAO,IAAA,KACAJ,KAAAilB,UAAA,GAAAplB,EAAAO,IAAA,KACAJ,KAAAilB,UAAA,GAAAplB,EAAAO,KAAA,MAGAJ,KAAAklB,QAAA,EAEArlB,EAAAa,QAAAsmB,KACAA,EAAAjoB,GAAAJ,EAAAE,SAAAF,EAAAE,QAAAmoB,EAAAjoB,GACAioB,EAAAjnB,GAAApB,EAAAE,SAAAF,EAAAE,QAAAmoB,EAAAjnB,GAAA,CAEA6D,KAAA,EAEA5D,KAAA+kB,WAAAlkB,IAAAmmB,GACA7kB,EAAAtB,IAAA+C,GAKA,IAHA,IAGAtD,EAHA0lB,GAAAtV,IAAAuV,EAAAD,EAGAtpB,EAAA,EAAsBA,EAAAsD,KAAAklB,UAAkBxoB,EACxC4D,EAAAN,KAAAglB,WAAAtoB,GAAAsD,KAAAglB,WAAAtoB,GAAAyF,OAAAf,IAAA4lB,GACAhnB,KAAAilB,UAAAvoB,GAAAsD,KAAAilB,UAAAvoB,GAAAyF,OAEA7B,EAAAvB,EAAAinB,IACAA,EAAA1lB,EAAAvB,GAEAuB,EAAAP,EAAAkmB,IACAA,EAAA3lB,EAAAP,GAIAC,KAAAmlB,eAAApmB,EAAAinB,EAAA,EACAhmB,KAAAmlB,eAAAplB,EAAAkmB,EAAA,OAEAjmB,KAAAmlB,eAAApmB,EAAAiB,KAAAmlB,eAAAplB,GAAA+mB,EAAAC,EAAAD,EAAAC,GAAA,GAIAtC,EAAAnmB,UAAA0P,UAAA,SAAA/I,EAAAzG,GAGA,IAFA,IAAAyoB,EAAAtjB,EAAAiB,SAAAK,EAAAD,EAAAnF,EAAA8B,IAAAnD,EAAAyG,EAAAzG,IAEA9B,EAAA,EAAiBA,EAAAsD,KAAAklB,UAAkBxoB,EAAA,CAEnC,GADAmD,EAAA8C,IAAA3C,KAAAilB,UAAAvoB,GAAAmD,EAAA8B,IAAAslB,EAAAjnB,KAAAglB,WAAAtoB,KACA,EACA,SAIA,UAGA+nB,EAAAnmB,UAAA2P,QAAA,SAAAC,EAAAC,EAAAlJ,EAAAoJ,GACAuC,EAAA/P,IAAAsN,EAAAyC,IACAC,EAAAhQ,IAAAsN,EAAA0C,IAGAD,IAAAjP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GACA6L,IAAAlP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GAEAhI,IAAA6D,IAAAgQ,GAAAlP,IAAAiP,GAEA,IAAAsW,EAAArnB,EAAA8C,IAAA3F,MAAA2B,EAAAE,QACAqoB,IACAlqB,IAAA6D,IAAAb,KAAAmlB,gBAAAxjB,IAAAiP,IASA,IANA,IAEAzN,EAAAD,EAFAkO,EAAAjD,EAAAiD,YACA+V,EAAA/V,EAEAkU,GAAA,EACAgB,EAAA,EAEApB,EAAAllB,KAAAklB,QAAAxoB,EAAA,EAAyCA,EAAAwoB,IAAaxoB,EAAA,CAKtDgoB,EAAA7jB,IAAAb,KAAAglB,WAAAtoB,IACA,IAAAwF,EAAAlC,KAAAilB,UAAAvoB,GACA0qB,EAAAvnB,EAAA8C,IAAAT,EAAA1D,EAAAqC,IAAA6jB,GAAA/iB,IAAAiP,IACAyW,EAAAxnB,EAAA8C,IAAAT,EAAAlF,GAEA,MAAA2B,EAAA2oB,QAAAD,MAAA1oB,EAAA2oB,QAAA,CAIA,IAAAvmB,EAAAqmB,EAAAC,EACA7oB,EAAAqC,IAAA7D,GAAA4E,IAAAb,GAAAK,IAAAwP,GAEA+T,EAAA9jB,IAAAb,KAAAglB,WAAAtoB,EAAA,EAAAsD,KAAAklB,QAAAxoB,EAAA,MACA,IAAA6qB,EAAA1nB,EAAA8C,IAAA+hB,EAAA/iB,IAAAnD,GAAAmmB,EAAAhjB,IAAAnD,IAAA,EACA,GAAA+oB,EAAA,CAYA,GAPArkB,EAAAkO,GAEAmW,GAHApkB,EAAA,IAGApC,MAEAulB,EAGAe,EAAA,GAAAE,EAGApkB,EAAApC,MACK,MAAAsmB,EAAA,GAAAtmB,EAAAmC,GAKL,SAFAA,EAAAnC,EAKAoC,GAAAD,IACAoiB,EAAA5oB,EACAqE,EAAAomB,IACAA,EAAApmB,MAMA,SAAAulB,GACApY,EAAAmD,SAAA,EAEAnD,EAAAhM,OAAAglB,EAAArnB,EAAAM,KAAAnD,EAAA+F,MAAAb,SAAAC,IAAA8C,EAAAD,IACA,GACGsgB,GAAA,IAAA4B,IACHhZ,EAAAmD,SAAA8V,EAEAjZ,EAAAhM,OAAAlF,EAAA6D,IAAAb,KAAAilB,UAAAK,IAAAnjB,IAAA8C,EAAAD,IACA,IAMAyf,EAAAnmB,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,GAGA,IAFA,IAAAmZ,EAAA9W,IAAA+W,EAAA/W,IACAsV,GAAAtV,IAAAuV,GAAAvV,IACAhU,EAAA,EAAiBA,EAAAsD,KAAAklB,UAAkBxoB,EAAA,CACnC,IAAA4D,EAAAuE,EAAAL,QAAAS,EAAAjF,KAAAglB,WAAAtoB,IACA8qB,EAAA7oB,EAAAa,IAAAgoB,EAAAlnB,EAAAvB,GACAinB,EAAArnB,EAAAc,IAAAumB,EAAA1lB,EAAAvB,GACA0oB,EAAA9oB,EAAAa,IAAAioB,EAAAnnB,EAAAP,GACAkmB,EAAAtnB,EAAAc,IAAAwmB,EAAA3lB,EAAAP,GAGAwO,EAAAU,WAAApO,IAAA2mB,EAAAC,GACAlZ,EAAAW,WAAArO,IAAAmlB,EAAAC,GACA1X,EAAA0B,OAAAjQ,KAAA2N,WAGA8W,EAAAnmB,UAAAkQ,YAAA,SAAAC,EAAAC,GAyBA9O,GAAAE,EAAAb,OAAAe,KAAAklB,SAAA,GAWA,IATA,IAAA8B,EAAAnnB,EAAAI,OACAsmB,EAAA,EACAmB,EAAA,EAIAjpB,EAAAoB,EAAAI,OAGAvD,EAAA,EAAiBA,EAAAsD,KAAAklB,UAAkBxoB,EACnC+B,EAAA2C,IAAApB,KAAAglB,WAAAtoB,IAEA+B,EAAAmD,IAAA,EAAA5B,KAAAklB,SAIA,IAAAxoB,EAAA,EAAiBA,EAAAsD,KAAAklB,UAAkBxoB,EAAA,CAEnC,IAAAgqB,EAAA7mB,EAAA8B,IAAA3B,KAAAglB,WAAAtoB,GAAA+B,GACAkoB,EAAAjqB,EAAA,EAAAsD,KAAAklB,QAAArlB,EAAA8B,IAAA3B,KAAAglB,WAAAtoB,EAAA,GAAA+B,GAAAoB,EACA8B,IAAA3B,KAAAglB,WAAA,GAAAvmB,GAEAkpB,EAAA9nB,EAAA+C,MAAA8jB,EAAAC,GAEAC,EAAA,GAAAe,EACApB,GAAAK,EAGAI,EAAA1lB,WAAAslB,GAdA,KAcAF,EAAAE,GAdA,KAcAD,GAEA,IAAAiB,EAAAlB,EAAA3nB,EACA8oB,EAAAnB,EAAA3mB,EACA+nB,EAAAnB,EAAA5nB,EACAgpB,EAAApB,EAAA5mB,EAKA2nB,GAxBA,IAwBA,IAAAC,GAHAC,IAAAE,EAAAF,EAAAE,KACAD,IAAAE,EAAAF,EAAAE,MAMAtZ,EAAAuZ,KAAAtZ,EAAA6X,EAGA3mB,GAAAE,EAAAb,OAAAsnB,EAAA5nB,EAAAE,SACAmoB,EAAAplB,IAAA,EAAA2kB,GACA9X,EAAAuY,OAAA9lB,WAAA,EAAA8lB,EAAA,EAAAvoB,GAGAgQ,EAAAiZ,EAAAhZ,EAAAgZ,EAGAjZ,EAAAiZ,GAAAjZ,EAAAuZ,MACAnoB,EAAA8C,IAAA8L,EAAAuY,OAAAvY,EAAAuY,QAAAnnB,EAAA8C,IAAAqkB,OAKAvC,EAAAnmB,UAAA2pB,SAAA,WACA,QAAAvrB,EAAA,EAAiBA,EAAAsD,KAAAklB,UAAkBxoB,EAMnC,IALA,IAAAwpB,EAAAxpB,EACAypB,EAAAzpB,EAAAsD,KAAAklB,QAAA,EAAAgB,EAAA,IACA1nB,EAAAwB,KAAAglB,WAAAkB,GACAgC,EAAAroB,EAAA8B,IAAA3B,KAAAglB,WAAAmB,GAAA3nB,GAEAiY,EAAA,EAAmBA,EAAAzW,KAAAklB,UAAkBzO,EACrC,GAAAA,GAAAyP,GAAAzP,GAAA0P,EAAA,CAIA,IAAA7lB,EAAAT,EAAA8B,IAAA3B,KAAAglB,WAAAvO,GAAAjY,GAEA,GADAqB,EAAA+C,MAAAslB,EAAA5nB,GACA,EACA,SAKA,UAGAmkB,EAAAnmB,UAAAqQ,qBAAA,SAAAC,GACAA,EAAAoW,WAAAhlB,KAAAglB,WACApW,EAAAsW,QAAAllB,KAAAklB,QACAtW,EAAAjB,SAAA3N,KAAA2N,2BChiBAlR,EAAAD,QAAA+U,EAEA9U,EAAAD,QAAA2rB,MAAAC,EACA3rB,EAAAD,QAAA6rB,OAAAC,EACA7rB,EAAAD,QAAA+rB,MAAAC,EACA/rB,EAAAD,QAAAisB,MAAAC,EAEA,IAAA/iB,EAAerJ,EAAQ,GAGvBwkB,GAFaxkB,EAAQ,GAETA,EAAQ,KAEpBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAElBuI,GADYvI,EAAQ,IACJA,EAAQ,IACTA,EAAQ,IACRA,EAAQ,IAcvB,SAAA8rB,IACApoB,KAAA2oB,OAAA,IAAAH,EACAxoB,KAAA4oB,OAAA,IAAAJ,EACAxoB,KAAA6oB,WAAA,KACA7oB,KAAA8oB,WAAA,KACA9oB,KAAA+oB,UAAA,EAWA,SAAAT,IACAtoB,KAAA+a,OAAAlb,EAAAI,OACAD,KAAAgb,OAAAnb,EAAAI,OACAD,KAAAqC,SACArC,KAAAgpB,WAWA,SAAAN,IACA1oB,KAAAipB,OAAA,EACAjpB,KAAA4R,OAAA,GACA5R,KAAA8R,OAAA,GACA9R,KAAAsmB,MAAA,EAYA,SAAA/U,EAAArD,EAAAgb,EAAA/a,KACA2S,EAAAqI,SAEA,IAAAR,EAAAxa,EAAAwa,OACAC,EAAAza,EAAAya,OACAvQ,EAAAlK,EAAA0a,WACAvQ,EAAAnK,EAAA2a,WAGAM,EAAA,IAAAC,EACAD,EAAAE,UAAAJ,EAAAP,EAAAtQ,EAAAuQ,EAAAtQ,GAiBA,IAdA,IAAAsM,EAAAwE,EAAAG,IACAC,EAAA7jB,EAAAa,qBAIAijB,EAAA,GACAC,EAAA,GACAC,EAAA,EAMAC,EAAA,EACAA,EAAAJ,GAAA,CAEAG,EAAAP,EAAAlE,QACA,QAAAxoB,EAAA,EAAmBA,EAAAitB,IAAejtB,EAClC+sB,EAAA/sB,GAAAkoB,EAAAloB,GAAAkV,OACA8X,EAAAhtB,GAAAkoB,EAAAloB,GAAAoV,OAMA,GAHAsX,EAAA3gB,QAGA,GAAA2gB,EAAAlE,QACA,OAIA1mB,EAAA4qB,EAAAS,mBACA9nB,gBASA,IAAA/E,EAAAosB,EAAAU,qBAGA,GAAA9sB,EAAA+E,gBAAApD,EAAAE,QAAAF,EAAAE,QAOA,MAIA,IAAAkrB,EAAAnF,EAAAwE,EAAAlE,SAEA6E,EAAAnY,OAAA+W,EAAAqB,WAAArmB,EAAAiB,SAAAyT,EAAArT,EAAAnF,EAAAkD,IAAA/F,KACA+sB,EAAA9N,GAAApX,EAAAL,QAAA6T,EAAAsQ,EAAAtD,UAAA0E,EAAAnY,SAEAmY,EAAAjY,OAAA8W,EAAAoB,WAAArmB,EAAAiB,SAAA0T,EAAAtT,EAAAhI,IACA+sB,EAAA5N,GAAAtX,EAAAL,QAAA8T,EAAAsQ,EAAAvD,UAAA0E,EAAAjY,SAEAiY,EAAA9oB,EAAApB,EAAA8B,IAAAooB,EAAA5N,GAAA4N,EAAA9N,MAGA2N,IACA9I,EAAAmJ,SAIA,IAAAC,GAAA,EACA,IAAAxtB,EAAA,EAAmBA,EAAAitB,IAAejtB,EAClC,GAAAqtB,EAAAnY,QAAA6X,EAAA/sB,IAAAqtB,EAAAjY,QAAA4X,EAAAhtB,GAAA,CACAwtB,GAAA,EACA,MAKA,GAAAA,EACA,QAIAd,EAAAlE,QAcA,GAXApE,EAAAqJ,YAAAxrB,EAAAc,IAAAqhB,EAAAqJ,YAAAP,GAGAR,EAAAgB,iBAAAlc,EAAA6M,OAAA7M,EAAA8M,QACA9M,EAAA7L,SAAAxC,EAAAwC,SAAA6L,EAAA6M,OAAA7M,EAAA8M,QACA9M,EAAA8a,WAAAY,EAGAR,EAAAiB,WAAAnB,GAGA/a,EAAA4a,SAAA,CACA,IAAAjU,EAAA6T,EAAAhb,SACAoH,EAAA6T,EAAAjb,SAEA,GAAAO,EAAA7L,SAAAyS,EAAAC,GAAA7G,EAAA7L,SAAA1D,EAAAE,QAAA,CAGAqP,EAAA7L,UAAAyS,EAAAC,EACA,IAAA7S,EAAArC,EAAA8B,IAAAuM,EAAA8M,OAAA9M,EAAA6M,QACA7Y,EAAAF,YACAkM,EAAA6M,OAAAxZ,OAAAuT,EAAA5S,GACAgM,EAAA8M,OAAAtZ,OAAAqT,EAAA7S,OACK,CAGL,IAAA1D,EAAAqB,EAAAoD,IAAAiL,EAAA6M,OAAA7M,EAAA8M,QACA9M,EAAA6M,OAAAla,IAAArC,GACA0P,EAAA8M,OAAAna,IAAArC,GACA0P,EAAA7L,SAAA,IAQA,SAAAmmB,IACAxoB,KAAAsqB,SAAA,GACAtqB,KAAAglB,WAAA,GACAhlB,KAAAklB,QAAA,EACAllB,KAAA2N,SAAA,EAmDA,SAAA4c,IACAvqB,KAAA4R,OACA5R,KAAA8R,OACA9R,KAAAic,GAAApc,EAAAI,OACAD,KAAAmc,GAAAtc,EAAAI,OACAD,KAAAiB,EAAApB,EAAAI,OACAD,KAAAe,EAYA,SAAAsoB,IACArpB,KAAAwqB,KAAA,IAAAD,EACAvqB,KAAAyqB,KAAA,IAAAF,EACAvqB,KAAA0qB,KAAA,IAAAH,EACAvqB,KAAAupB,IAAA,CAAAvpB,KAAAwqB,KAAAxqB,KAAAyqB,KAAAzqB,KAAA0qB,MACA1qB,KAAAklB,QA9QApE,EAAAqI,SAAA,EACArI,EAAAmJ,SAAA,EACAnJ,EAAAqJ,YAAA,EAwMA3B,EAAAlqB,UAAAqsB,eAAA,WACA,OAAA3qB,KAAAklB,SAMAsD,EAAAlqB,UAAA+mB,UAAA,SAAAC,GAEA,OAAAtlB,KAAAglB,WAAAM,IAMAkD,EAAAlqB,UAAA0rB,WAAA,SAAAhtB,GAGA,IAFA,IAAA4tB,EAAA,EACAC,EAAAhrB,EAAA8C,IAAA3C,KAAAglB,WAAA,GAAAhoB,GACAN,EAAA,EAAiBA,EAAAsD,KAAAklB,UAAkBxoB,EAAA,CACnC,IAAAiB,EAAAkC,EAAA8C,IAAA3C,KAAAglB,WAAAtoB,GAAAM,GACAW,EAAAktB,IACAD,EAAAluB,EACAmuB,EAAAltB,GAGA,OAAAitB,GAMApC,EAAAlqB,UAAAwsB,iBAAA,SAAA9tB,GACA,OAAAgD,KAAAglB,WAAAhlB,KAAAgqB,WAAAhtB,KAOAwrB,EAAAlqB,UAAAuC,IAAA,SAAA+M,EAAA0X,GAGA1X,EAAAe,qBAAA3O,KAAAslB,IAYAiF,EAAAjsB,UAAAuC,IAAA,SAAAP,GACAN,KAAA4R,OAAAtR,EAAAsR,OACA5R,KAAA8R,OAAAxR,EAAAwR,OACA9R,KAAAic,GAAApc,EAAAQ,MAAAC,EAAA2b,IACAjc,KAAAmc,GAAAtc,EAAAQ,MAAAC,EAAA6b,IACAnc,KAAAiB,EAAApB,EAAAQ,MAAAC,EAAAW,GACAjB,KAAAe,EAAAT,EAAAS,GAWAsoB,EAAA/qB,UAAAysB,MAAA,WACA,UAAA/qB,KAAAklB,QACA,KAAAllB,KAAAklB,QACAllB,KAAAwqB,KAAAzpB,EAAAf,KAAAwqB,KAAAvO,GAAAld,EAAAiB,KAAAwqB,KAAAvO,GAAAlc,EAAAC,KAAAwqB,KAAArO,GAAApd,EAAAiB,KAAAwqB,KAAArO,GAAApc,EACAC,KAAAyqB,KAAA1pB,EAAAf,KAAAyqB,KAAAxO,GAAAld,EAAAiB,KAAAyqB,KAAAxO,GAAAlc,EAAAC,KAAAyqB,KAAAtO,GAAApd,EAAAiB,KAAAyqB,KAAAtO,GAAApc,EACAC,KAAA0qB,KAAA3pB,EAAAf,KAAA0qB,KAAAzO,GAAAld,EAAAiB,KAAA0qB,KAAAzO,GAAAlc,EAAAC,KAAA0qB,KAAAvO,GAAApd,EAAAiB,KAAA0qB,KAAAvO,GAAApc,GACAQ,WAEG,GAAAP,KAAAklB,QACH,KAAAllB,KAAAklB,QACAllB,KAAAwqB,KAAAzpB,EAAAf,KAAAwqB,KAAAvO,GAAAld,EAAAiB,KAAAwqB,KAAAvO,GAAAlc,EAAAC,KAAAwqB,KAAArO,GAAApd,EAAAiB,KAAAwqB,KAAArO,GAAApc,EACAC,KAAAyqB,KAAA1pB,EAAAf,KAAAyqB,KAAAxO,GAAAld,EAAAiB,KAAAyqB,KAAAxO,GAAAlc,EAAAC,KAAAyqB,KAAAtO,GAAApd,EAAAiB,KAAAyqB,KAAAtO,GAAApc,GACAQ,WAEG,GAAAP,KAAAklB,QACH,KAAAllB,KAAAklB,QACAllB,KAAAwqB,KAAAzpB,EAAAf,KAAAwqB,KAAAvO,GAAAld,EAAAiB,KAAAwqB,KAAAvO,GAAAlc,EAAAC,KAAAwqB,KAAArO,GAAApd,EAAAiB,KAAAwqB,KAAArO,GAAApc,GACAQ,WAGA,IAAAP,KAAAklB,SAKAmE,EAAA/qB,UAAAgrB,UAAA,SAAAJ,EAAAP,EAAAE,EAAAD,EAAAE,GAIA9oB,KAAAklB,QAAAgE,EAAA5C,MACA,QAAA5pB,EAAA,EAAiBA,EAAAsD,KAAAklB,UAAkBxoB,EAAA,EACnC4D,EAAAN,KAAAupB,IAAA7sB,IACAkV,OAAAsX,EAAAtX,OAAAlV,GACA4D,EAAAwR,OAAAoX,EAAApX,OAAApV,GACA,IAAAsuB,EAAArC,EAAAtD,UAAA/kB,EAAAsR,QACAqZ,EAAArC,EAAAvD,UAAA/kB,EAAAwR,QACAxR,EAAA2b,GAAApX,EAAAL,QAAAqkB,EAAAmC,GACA1qB,EAAA6b,GAAAtX,EAAAL,QAAAskB,EAAAmC,GACA3qB,EAAAW,EAAApB,EAAA8B,IAAArB,EAAA6b,GAAA7b,EAAA2b,IACA3b,EAAAS,EAAA,EAKA,GAAAf,KAAAklB,QAAA,GACA,IAAAgG,EAAAhC,EAAAD,OACAkC,EAAAnrB,KAAAorB,aACAD,EAAA,GAAAD,GAAA,EAAAA,EAAAC,GACAA,EAAAxsB,EAAAE,WAEAmB,KAAAklB,QAAA,GAKA,MAAAllB,KAAAklB,QAAA,CACA,IAAA5kB,KAAAN,KAAAupB,IAAA,IACA3X,OAAA,EACAtR,EAAAwR,OAAA,EACAkZ,EAAArC,EAAAtD,UAAA,GACA4F,EAAArC,EAAAvD,UAAA,GACA/kB,EAAA2b,GAAApX,EAAAL,QAAAqkB,EAAAmC,GACA1qB,EAAA6b,GAAAtX,EAAAL,QAAAskB,EAAAmC,GACA3qB,EAAAW,EAAApB,EAAA8B,IAAArB,EAAA6b,GAAA7b,EAAA2b,IACA3b,EAAAS,EAAA,EACAf,KAAAklB,QAAA,IAKAmE,EAAA/qB,UAAA+rB,WAAA,SAAAnB,GACAA,EAAAD,OAAAjpB,KAAAorB,YACAlC,EAAA5C,MAAAtmB,KAAAklB,QACA,QAAAxoB,EAAA,EAAiBA,EAAAsD,KAAAklB,UAAkBxoB,EACnCwsB,EAAAtX,OAAAlV,GAAAsD,KAAAupB,IAAA7sB,GAAAkV,OACAsX,EAAApX,OAAApV,GAAAsD,KAAAupB,IAAA7sB,GAAAoV,QAIAuX,EAAA/qB,UAAAwrB,mBAAA,WACA,OAAA9pB,KAAAklB,SACA,OACA,OAAArlB,EAAAkD,IAAA/C,KAAAwqB,KAAAvpB,GAEA,OACA,IAAAoqB,EAAAxrB,EAAA8B,IAAA3B,KAAAyqB,KAAAxpB,EAAAjB,KAAAwqB,KAAAvpB,GAEA,OADApB,EAAA+C,MAAAyoB,EAAAxrB,EAAAkD,IAAA/C,KAAAwqB,KAAAvpB,IACA,EAEApB,EAAA+C,MAAA,EAAAyoB,GAGAxrB,EAAA+C,MAAAyoB,EAAA,GAIA,QAEA,OAAAxrB,EAAAI,SAIAopB,EAAA/qB,UAAAurB,gBAAA,WACA,OAAA7pB,KAAAklB,SACA,OAEA,OAAArlB,EAAAI,OAEA,OACA,OAAAJ,EAAAQ,MAAAL,KAAAwqB,KAAAvpB,GAEA,OACA,OAAApB,EAAAiD,QAAA9C,KAAAwqB,KAAAzpB,EAAAf,KAAAwqB,KAAAvpB,EAAAjB,KAAAyqB,KAAA1pB,EAAAf,KAAAyqB,KAAAxpB,GAEA,OAGA,QAEA,OAAApB,EAAAI,SAIAopB,EAAA/qB,UAAA8rB,iBAAA,SAAAkB,EAAAC,GACA,OAAAvrB,KAAAklB,SACA,OAEA,MAEA,OACAoG,EAAAzqB,IAAAb,KAAAwqB,KAAAvO,IACAsP,EAAA1qB,IAAAb,KAAAwqB,KAAArO,IACA,MAEA,OACAmP,EAAApqB,WAAAlB,KAAAwqB,KAAAzpB,EAAAf,KAAAwqB,KAAAvO,GAAAjc,KAAAyqB,KAAA1pB,EAAAf,KAAAyqB,KAAAxO,IACAsP,EAAArqB,WAAAlB,KAAAwqB,KAAAzpB,EAAAf,KAAAwqB,KAAArO,GAAAnc,KAAAyqB,KAAA1pB,EAAAf,KAAAyqB,KAAAtO,IACA,MAEA,OACAmP,EAAApqB,WAAAlB,KAAAwqB,KAAAzpB,EAAAf,KAAAwqB,KAAAvO,GAAAjc,KAAAyqB,KAAA1pB,EAAAf,KAAAyqB,KAAAxO,IACAqP,EAAA/pB,OAAAvB,KAAA0qB,KAAA3pB,EAAAf,KAAA0qB,KAAAzO,IACAsP,EAAA1qB,IAAAyqB,KASAjC,EAAA/qB,UAAA8sB,UAAA,WACA,OAAAprB,KAAAklB,SACA,OAIA,OACA,SAEA,OACA,OAAArlB,EAAAwC,SAAArC,KAAAwqB,KAAAvpB,EAAAjB,KAAAyqB,KAAAxpB,GAEA,OACA,OAAApB,EAAA+C,MAAA/C,EAAA8B,IAAA3B,KAAAyqB,KAAAxpB,EAAAjB,KAAAwqB,KAAAvpB,GAAApB,EAAA8B,IAAA3B,KAAA0qB,KAAAzpB,EACAjB,KAAAwqB,KAAAvpB,IAEA,QAEA,WAIAooB,EAAA/qB,UAAAmK,MAAA,WACA,OAAAzI,KAAAklB,SACA,OACA,MAEA,OACAllB,KAAAwrB,SACA,MAEA,OACAxrB,KAAAyrB,WA+BApC,EAAA/qB,UAAAktB,OAAA,WACA,IAAAE,EAAA1rB,KAAAwqB,KAAAvpB,EACA0qB,EAAA3rB,KAAAyqB,KAAAxpB,EACAoqB,EAAAxrB,EAAA8B,IAAAgqB,EAAAD,GAGAE,GAAA/rB,EAAA8C,IAAA+oB,EAAAL,GACA,GAAAO,GAAA,EAIA,OAFA5rB,KAAAwqB,KAAAzpB,EAAA,OACAf,KAAAklB,QAAA,GAKA,IAAA2G,EAAAhsB,EAAA8C,IAAAgpB,EAAAN,GACA,GAAAQ,GAAA,EAKA,OAHA7rB,KAAAyqB,KAAA1pB,EAAA,EACAf,KAAAklB,QAAA,OACAllB,KAAAwqB,KAAA3pB,IAAAb,KAAAyqB,MAKA,IAAAqB,EAAA,GAAAD,EAAAD,GACA5rB,KAAAwqB,KAAAzpB,EAAA8qB,EAAAC,EACA9rB,KAAAyqB,KAAA1pB,EAAA6qB,EAAAE,EACA9rB,KAAAklB,QAAA,GAQAmE,EAAA/qB,UAAAmtB,OAAA,WACA,IAAAC,EAAA1rB,KAAAwqB,KAAAvpB,EACA0qB,EAAA3rB,KAAAyqB,KAAAxpB,EACA8qB,EAAA/rB,KAAA0qB,KAAAzpB,EAMAoqB,EAAAxrB,EAAA8B,IAAAgqB,EAAAD,GACAM,EAAAnsB,EAAA8C,IAAA+oB,EAAAL,GAEAQ,EADAhsB,EAAA8C,IAAAgpB,EAAAN,GAEAO,GAAAI,EAMAC,EAAApsB,EAAA8B,IAAAoqB,EAAAL,GACAQ,EAAArsB,EAAA8C,IAAA+oB,EAAAO,GAEAE,EADAtsB,EAAA8C,IAAAopB,EAAAE,GAEAG,GAAAF,EAMAG,EAAAxsB,EAAA8B,IAAAoqB,EAAAJ,GACAW,EAAAzsB,EAAA8C,IAAAgpB,EAAAU,GAEAE,EADA1sB,EAAA8C,IAAAopB,EAAAM,GAEAG,GAAAF,EAGAG,EAAA5sB,EAAA+C,MAAAyoB,EAAAY,GAEAS,EAAAD,EAAA5sB,EAAA+C,MAAA+oB,EAAAI,GACAY,EAAAF,EAAA5sB,EAAA+C,MAAAmpB,EAAAL,GACAkB,EAAAH,EAAA5sB,EAAA+C,MAAA8oB,EAAAC,GAGA,GAAAC,GAAA,GAAAQ,GAAA,EAGA,OAFApsB,KAAAwqB,KAAAzpB,EAAA,OACAf,KAAAklB,QAAA,GAKA,GAAA2G,EAAA,GAAAD,EAAA,GAAAgB,GAAA,GACA,IAAAd,EAAA,GAAAD,EAAAD,GAIA,OAHA5rB,KAAAwqB,KAAAzpB,EAAA8qB,EAAAC,EACA9rB,KAAAyqB,KAAA1pB,EAAA6qB,EAAAE,OACA9rB,KAAAklB,QAAA,GAKA,GAAAiH,EAAA,GAAAC,EAAA,GAAAO,GAAA,GACA,IAAAE,EAAA,GAAAV,EAAAC,GAKA,OAJApsB,KAAAwqB,KAAAzpB,EAAAorB,EAAAU,EACA7sB,KAAA0qB,KAAA3pB,EAAAqrB,EAAAS,EACA7sB,KAAAklB,QAAA,OACAllB,KAAAyqB,KAAA5pB,IAAAb,KAAA0qB,MAKA,GAAAmB,GAAA,GAAAW,GAAA,EAIA,OAHAxsB,KAAAyqB,KAAA1pB,EAAA,EACAf,KAAAklB,QAAA,OACAllB,KAAAwqB,KAAA3pB,IAAAb,KAAAyqB,MAKA,GAAA0B,GAAA,GAAAI,GAAA,EAIA,OAHAvsB,KAAA0qB,KAAA3pB,EAAA,EACAf,KAAAklB,QAAA,OACAllB,KAAAwqB,KAAA3pB,IAAAb,KAAA0qB,MAKA,GAAA6B,EAAA,GAAAC,EAAA,GAAAE,GAAA,GACA,IAAAI,EAAA,GAAAP,EAAAC,GAKA,OAJAxsB,KAAAyqB,KAAA1pB,EAAAwrB,EAAAO,EACA9sB,KAAA0qB,KAAA3pB,EAAAyrB,EAAAM,EACA9sB,KAAAklB,QAAA,OACAllB,KAAAwqB,KAAA3pB,IAAAb,KAAA0qB,MAKA,IAAAqC,EAAA,GAAAL,EAAAC,EAAAC,GACA5sB,KAAAwqB,KAAAzpB,EAAA2rB,EAAAK,EACA/sB,KAAAyqB,KAAA1pB,EAAA4rB,EAAAI,EACA/sB,KAAA0qB,KAAA3pB,EAAA6rB,EAAAG,EACA/sB,KAAAklB,QAAA,GAMA3T,EAAA1C,YAAA,SAAA+G,EAAAhE,EAAAkE,EAAAhE,EAAAuG,EAAAC,GACA,IAAAnK,EAAA,IAAAia,EACAja,EAAAwa,OAAA9nB,IAAA+U,EAAAhE,GACAzD,EAAAya,OAAA/nB,IAAAiV,EAAAhE,GACA3D,EAAA0a,WAAAxQ,EACAlK,EAAA2a,WAAAxQ,EACAnK,EAAA4a,UAAA,EAEA,IAAAG,EAAA,IAAAR,EAEAxa,EAAA,IAAAoa,EAGA,OAFA/W,EAAArD,EAAAgb,EAAA/a,GAEAD,EAAA7L,SAAA,GAAA1D,EAAAE,0BC5pBApC,EAAAD,QAAAwwB,EAEa1wB,EAAQ,GAArB,IACA0B,EAAa1B,EAAQ,GAErBqC,GADcrC,EAAQ,GACXA,EAAQ,IAEnBqH,GADgBrH,EAAQ,GACdA,EAAQ,IAClBuD,EAAWvD,EAAQ,GAGnBoR,GAFWpR,EAAQ,IACJA,EAAQ,GACXA,EAAQ,KAEpBkC,EAAA,IAAAqB,EAAArC,EAAA,IAAAqC,EAOA,SAAAmtB,EAAAjsB,EAAAC,GACA,KAAAhB,gBAAAgtB,GACA,WAAAA,EAAAjsB,EAAAC,GAGAgsB,EAAAnI,OAAAhoB,KAAAmD,MAEAA,KAAAqL,OAAA2hB,EAAAlI,KACA9kB,KAAAitB,IAAAptB,EAAAI,OACAD,KAAA2N,SAAA,EAEA,iBAAA5M,GAAAlB,EAAAa,QAAAK,IACAf,KAAAitB,IAAApsB,IAAAE,GAEA,iBAAAC,IACAhB,KAAA2N,SAAA3M,IAGG,iBAAAD,IACHf,KAAA2N,SAAA5M,GAxBAisB,EAAAnI,OAAAnX,EACAsf,EAAA1uB,UAAAN,EAAAgvB,EAAAnI,OAAAvmB,WAEA0uB,EAAAlI,KAAA,SAyBAkI,EAAA1uB,UAAAuP,UAAA,WACA,OAAA7N,KAAA2N,UAGAqf,EAAA1uB,UAAA6Q,UAAA,WACA,OAAAnP,KAAAitB,KAGAD,EAAA1uB,UAAA+mB,UAAA,SAAAC,GAEA,OAAAtlB,KAAAitB,KAGAD,EAAA1uB,UAAAqsB,eAAA,SAAArF,GACA,UAMA0H,EAAA1uB,UAAAwP,OAAA,WACA,IAAAzN,EAAA,IAAA2sB,EAIA,OAHA3sB,EAAAgL,OAAArL,KAAAqL,OACAhL,EAAAsN,SAAA3N,KAAA2N,SACAtN,EAAA4sB,IAAAjtB,KAAAitB,IAAA5sB,QACAA,GAGA2sB,EAAA1uB,UAAAyP,cAAA,WACA,UAGAif,EAAA1uB,UAAA0P,UAAA,SAAA/I,EAAAzG,GACA,IAAAwoB,EAAAnnB,EAAAuB,IAAA6D,EAAAzG,EAAAmF,EAAAa,QAAAS,EAAAD,EAAAhF,KAAAitB,MACAjwB,EAAA6C,EAAA8B,IAAAnD,EAAAwoB,GACA,OAAAnnB,EAAA8C,IAAA3F,MAAAgD,KAAA2N,SAAA3N,KAAA2N,UAOAqf,EAAA1uB,UAAA2P,QAAA,SAAAC,EAAAC,EAAAlJ,EAAAoJ,GAEA,IAAAvJ,EAAAjF,EAAAuB,IAAA6D,EAAAzG,EAAAmF,EAAAa,QAAAS,EAAAD,EAAAhF,KAAAitB,MACAxuB,EAAAoB,EAAA8B,IAAAwM,EAAAyC,GAAA9L,GACA9D,EAAAnB,EAAA8C,IAAAlE,KAAAuB,KAAA2N,SAAA3N,KAAA2N,SACAnQ,EAAAqC,EAAA8B,IAAAwM,EAAA0C,GAAA1C,EAAAyC,IAEA,GAAA5P,EAAA,EAGA,OAFAkN,EAAAmD,SAAA,EACAnD,EAAAhM,OAAA1E,EAAAuF,MAAAb,UACA,EAIA,IAAAnF,EAAA8C,EAAA8C,IAAAlE,EAAAjB,GACA0vB,EAAArtB,EAAA8C,IAAAnF,KACA2vB,EAAApwB,IAAAmwB,EAAAlsB,EAGA,GAAAmsB,EAAA,GAAAD,EAAAvuB,EAAAE,QACA,SAIA,IAAAkC,IAAAhE,EAAA4B,EAAAQ,KAAAguB,IAGA,UAAApsB,MAAAoN,EAAAiD,YAAA8b,IACAnsB,GAAAmsB,EACAhf,EAAAmD,SAAAtQ,EACAmN,EAAAhM,OAAArC,EAAAuB,IAAA3C,EAAAoB,EAAA+B,IAAAb,EAAAvD,IAAA0E,UACA,IAMA8qB,EAAA1uB,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,GACA,IAAA7P,EAAAqB,EAAAuB,IAAA6D,EAAAzG,EAAAmF,EAAAa,QAAAS,EAAAD,EAAAhF,KAAAitB,MACA1e,EAAAU,WAAApO,IAAArC,EAAAO,EAAAiB,KAAA2N,SAAAnP,EAAAuB,EAAAC,KAAA2N,UACAY,EAAAW,WAAArO,IAAArC,EAAAO,EAAAiB,KAAA2N,SAAAnP,EAAAuB,EAAAC,KAAA2N,WAGAqf,EAAA1uB,UAAAkQ,YAAA,SAAAC,EAAAC,GACAD,EAAAuZ,KAAAtZ,EAAA/P,EAAAwH,GAAAnG,KAAA2N,SAAA3N,KAAA2N,SACAc,EAAAuY,OAAAhnB,KAAAitB,IAEAxe,EAAAiZ,EAAAjZ,EAAAuZ,MACA,GAAAhoB,KAAA2N,SAAA3N,KAAA2N,SAAA9N,EAAA8C,IAAA3C,KAAAitB,IAAAjtB,KAAAitB,OAGAD,EAAA1uB,UAAAqQ,qBAAA,SAAAC,GACAA,EAAAoW,WAAAvD,KAAAzhB,KAAAitB,KACAre,EAAAsW,QAAA,EACAtW,EAAAjB,SAAA3N,KAAA2N,UAGAqf,EAAA1uB,UAAAuQ,YAAA,SAAAT,EAAAC,EAAAT,EAAAkB,EAAAC,GACA,GAAAnB,EAAAvC,QAAA2hB,EAAAlI,KAAA,CAIAtmB,IAAAqC,IAAAb,KAAAitB,KAAA9qB,IAAAiM,EAAApJ,GAAA5D,IAAAgN,EAAA5P,GACAhB,IAAAqD,IAAA+M,EAAAqf,KAAA9qB,IAAA2M,EAAA9J,GAAA5D,IAAA0N,EAAAtQ,GAEA,IAAAuD,EAAAvD,EAAAmD,IAAAnE,GAAAuE,gBACAqrB,EAAAptB,KAAA2N,SAAAC,EAAAD,SAEA,OAAAyf,IAAArrB,qBCzJAtF,EAAAD,QAAA6wB,EAEA,IAAArvB,EAAa1B,EAAQ,GAErBqJ,GADcrJ,EAAQ,GACPA,EAAQ,IACvBoR,EAAYpR,EAAQ,IACpBqC,EAAWrC,EAAQ,GACnBuI,EAAgBvI,EAAQ,GACxBqH,EAAUrH,EAAQ,GAClBuD,EAAWvD,EAAQ,GAGnBkC,GAFWlC,EAAQ,IAEnB,IAAAuD,GAAA+Q,EAAA,IAAA/Q,EAAAgR,EAAA,IAAAhR,EAAA6kB,EAAA,IAAA7kB,EAAA8kB,EAAA,IAAA9kB,EAAA7C,EAAA,IAAA6C,EAcA,SAAAwtB,EAAA3I,EAAAC,EAAA2I,GACA,KAAAttB,gBAAAqtB,GACA,WAAAA,EAAA3I,EAAAC,GAGA0I,EAAAxI,OAAAhoB,KAAAmD,MAEAA,KAAAqL,OAAAgiB,EAAAvI,KACA9kB,KAAA2N,SAAAhI,EAAAS,cAGApG,KAAAutB,UAAA7I,EAAA7kB,EAAAQ,MAAAqkB,GAAA7kB,EAAAI,OACAD,KAAAwtB,UAAA7I,EAAA9kB,EAAAQ,MAAAskB,GAAA9kB,EAAAI,OAEAqtB,EAAA,GACAttB,KAAAytB,aAAAH,EACAttB,KAAA2N,UAAA2f,EACAttB,KAAA0tB,cAAA,GAGA1tB,KAAAytB,aAAA,EAKAztB,KAAA2tB,UAAA9tB,EAAAI,OACAD,KAAA4tB,UAAA/tB,EAAAI,OACAD,KAAA6tB,cAAA,EACA7tB,KAAA8tB,cAAA,EAxCAT,EAAAxI,OAAAnX,EACA2f,EAAA/uB,UAAAN,EAAAqvB,EAAAxI,OAAAvmB,WAEA+uB,EAAAvI,KAAA,OAwCAuI,EAAA/uB,UAAAyvB,QAAA,SAAAC,GAQA,OAPAA,GACAhuB,KAAA4tB,UAAA/sB,IAAAmtB,GACAhuB,KAAA8tB,cAAA,IAEA9tB,KAAA4tB,UAAAhtB,UACAZ,KAAA8tB,cAAA,GAEA9tB,MAGAqtB,EAAA/uB,UAAA2vB,QAAA,SAAAC,GAQA,OAPAA,GACAluB,KAAA2tB,UAAA9sB,IAAAqtB,GACAluB,KAAA6tB,cAAA,IAEA7tB,KAAA2tB,UAAA/sB,UACAZ,KAAA6tB,cAAA,GAEA7tB,MAMAqtB,EAAA/uB,UAAA8mB,KAAA,SAAAV,EAAAC,GAMA,OALA3kB,KAAAutB,UAAA1sB,IAAA6jB,GACA1kB,KAAAwtB,UAAA3sB,IAAA8jB,GACA3kB,KAAA6tB,cAAA,EACA7tB,KAAA8tB,cAAA,EACA9tB,KAAA0tB,cAAA,EACA1tB,MAMAqtB,EAAA/uB,UAAAwP,OAAA,WACA,IAAAzN,EAAA,IAAAgtB,EAUA,OATAhtB,EAAAgL,OAAArL,KAAAqL,OACAhL,EAAAsN,SAAA3N,KAAA2N,SACAtN,EAAAktB,UAAA1sB,IAAAb,KAAAutB,WACAltB,EAAAmtB,UAAA3sB,IAAAb,KAAAwtB,WACAntB,EAAAstB,UAAA9sB,IAAAb,KAAA2tB,WACAttB,EAAAutB,UAAA/sB,IAAAb,KAAA4tB,WACAvtB,EAAAwtB,aAAA7tB,KAAA6tB,aACAxtB,EAAAytB,aAAA9tB,KAAA8tB,aACAztB,EAAAotB,aAAAztB,KAAAytB,aACAptB,GAGAgtB,EAAA/uB,UAAAyP,cAAA,WACA,UAUAsf,EAAA/uB,UAAA0P,UAAA,SAAA/I,EAAAzG,GACA,GAAAwB,KAAAytB,cAAA,EACA,SAGAjvB,EAAAoS,EAAA/P,IAAArC,GAAAmD,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GAGAhF,KAAA0tB,eACA1tB,KAAAmuB,WAAAnuB,KAAAouB,eACApuB,KAAAquB,YAAAruB,KAAAsuB,aAAAtuB,KAAAquB,aAAA,IAAAxuB,GAAAgB,IAAAb,KAAAwtB,aAEAhvB,EAAAwB,KAAAsuB,YAAA9vB,GACA,IAAAmmB,EAAA3kB,KAAAquB,YAEAf,EAAAttB,KAAAytB,aACA,GAAAjvB,EAAAuB,EAAA4kB,EAAA5kB,EAAA,CACA,IAAAuC,EAAA9D,EAAAO,EAAA4lB,EAAA5lB,EAAAwD,EAAA/D,EAAAuB,EAAA4kB,EAAA5kB,EACA,OAAAuC,IAAAC,IAAA+qB,IAEA,OAAA9uB,EAAAuB,EAAA,EACAvB,EAAAO,EAAAP,EAAAO,EAAAP,EAAAuB,EAAAvB,EAAAuB,EAAAutB,KAEAA,EAAA9uB,EAAAO,GAAAP,EAAAO,EAAAuuB,GAQAD,EAAA/uB,UAAA8vB,aAAA,WACA,IAAAjsB,EAAAnC,KAAAmuB,WAAAnuB,KAAAmuB,YAAA,IAAAxqB,EACA3D,KAAA0tB,cAAA,EAEA,IAAAhJ,EAAA1kB,KAAAutB,UAAA5I,EAAA3kB,KAAAwtB,UACA3rB,EAAA7E,EAAA6D,IAAA8jB,GAAAhjB,IAAA+iB,GAAA7iB,SAEA,OAAAA,GAAAlD,EAAAE,QACAsD,GAQAA,EAAApF,EAAAC,EAAA+C,EAAA8B,EACAM,EAAA1D,EAAAzB,EAAA+B,EAAA8C,EAEAM,IASAkrB,EAAA/uB,UAAAgwB,YAAA,SAAA9vB,GACA,OAAAA,EAAAmD,IAAA3B,KAAAutB,WAAAprB,IAAAnC,KAAAmuB,aAOAd,EAAA/uB,UAAA2P,QAAA,SAAAC,EAAAC,EAAAlJ,EAAAoJ,GAGA,GAAArO,KAAAytB,aAAA,EACA,OAAAztB,KAAAuuB,kBAAArgB,EAAAC,EAAAlJ,GAGAyf,IAAA7jB,IAAAb,KAAAutB,WAGA,IAAA/vB,EADAmnB,GADAA,IAAA9jB,IAAAb,KAAAwtB,YACA7rB,IAAA+iB,GAGAxiB,EADA1D,IAAAqC,IAAArD,EAAAuC,GAAAvC,EAAAuB,GAEA8C,EAAAK,EAAAF,YAEA,GAAAH,GAAAlD,EAAAE,QACA,SAIA+R,IAAA/P,IAAAsN,EAAAyC,IAAAjP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GACA6L,IAAAhQ,IAAAsN,EAAA0C,IAAAlP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GACAhI,IAAA6D,IAAAgQ,GAAAlP,IAAAiP,GAKA,IAAAyW,EAAAxnB,EAAA8C,IAAAT,EAAAlF,GAEA,GAAAqqB,GAAA1oB,EAAAE,QACA,SAGAgS,IAAAhQ,IAAA6jB,GAAA/iB,IAAAiP,GACA,IAAAwW,EAAAvnB,EAAA8C,IAAAT,EAAA2O,GAEAjT,EAAAwpB,EAAAC,EACA,GAAAzpB,EAAA,GAAAuQ,EAAAiD,YAAAxT,EACA,SAKA,IAAAsvB,EAAArrB,IAGA7E,IAAA4E,IAAAhE,GAEA,IAAAoH,EADA4L,IAAAxP,IAAApE,GAGAgI,IAAArD,IAAA+iB,GACA,IAAAjmB,EAAAoB,EAAA8C,IAAAqC,EAAAxH,GAAA0vB,EACA,QAAAzuB,EAAA,KAAAA,KAIAyP,EAAAmD,SAAAzT,EAEAsQ,EAAAhM,OADAklB,EAAA,EACAllB,EAAAC,IAAA8C,EAAAD,GAAAjC,MAEAb,EAAAC,IAAA8C,EAAAD,IAEA,IAUAqoB,EAAA/uB,UAAAiwB,kBAAA,SAAArgB,EAAAC,EAAAlJ,GACAjF,KAAA0tB,eACA1tB,KAAAmuB,WAAAnuB,KAAAouB,eACApuB,KAAAquB,YAAAruB,KAAAsuB,aAAAtuB,KAAAquB,aAAA,IAAAxuB,GAAAgB,IAAAb,KAAAwtB,aAGA,IAAAF,EAAAttB,KAAAytB,aAGA7c,EAAA5Q,KAAAsuB,YAAA1d,EAAA/P,IAAAsN,EAAAyC,IAAAjP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,IACA6L,EAAA7Q,KAAAsuB,YAAAzd,EAAAhQ,IAAAsN,EAAA0C,IAAAlP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,IAEA,IAAA1C,GADAtF,IAAA6D,IAAAgQ,GAAAlP,IAAAiP,IACA7R,EAEA,IAAAJ,EAAAE,SAAAyD,MAAA3D,EAAAE,QAAA,CACA,IAAA2G,EAAAoL,EAAA7R,EACA,GAAAyG,IAAA8nB,MAAA9nB,EACA,SAEA,IAAAgpB,EAAAxuB,KAAAquB,YAAAtuB,EACA0uB,EAAA9vB,EAAAQ,KAAAmuB,IAAA9nB,KACAC,EAAA+oB,EAAAC,EAEA,GAAA7d,EAAA7Q,GAAA0F,EAAA,CACA,GAAAoL,EAAA9Q,GAAA0F,EACA,SAEAyI,EAAAmD,UAAAT,EAAA7Q,EAAA0F,GAAAzI,EAAA6E,SACAqM,EAAAhM,OAAA1D,EAAAqC,IAAA2E,EAAAipB,GACAvgB,EAAAhM,OAAAN,IAAA,EAAA0rB,QACK,GAAA1c,EAAA7Q,IAAA0uB,EAAA,CACL,GAAA5d,EAAA9Q,IAAA0uB,EACA,SAEAvgB,EAAAmD,WAAAT,EAAA7Q,EAAA0uB,GAAAzxB,EAAA6E,SACAqM,EAAAhM,OAAA1D,EAAAqC,IAAA2E,GAAAipB,GACAvgB,EAAAhM,OAAAN,IAAA,EAAA0rB,QAEApf,EAAAmD,SAAA,EACAnD,EAAAhM,OAAAlF,EAAA+F,MAAAb,aAEG,CACH,IAAAwsB,EAAA9d,EAAA7R,EACAkS,IAAAqc,EAAAoB,GAAApsB,EACA4O,GAAAoc,EAAAoB,GAAApsB,EAEA,GAAA2O,GAAA,GAAAC,GAAA,GAAAD,GAAA,GAAAC,GAAA,EACA,SAGA,GAAAD,EAAAC,EAAA,CACA,IAAAtT,EAAAqT,EACAA,EAAAC,EACAA,EAAAtT,EAGA,IAAA2E,EAAAvF,EAAA+C,EACA4uB,EAAA/d,EAAA7Q,EACA6uB,EAAAD,EAAA1d,EAAA1O,EACA,GAAAqsB,EAAAJ,EAAA,CAMA,IAFAK,GADAC,EAAAJ,EAAApsB,EAAAC,GAAAosB,EAAAH,IACAM,GAHA/tB,EAAAuB,IAAAC,MACAxF,EAAA2xB,KAAAC,EAAAH,IAAAG,EAAAH,GAAAlB,OAIA3uB,EAAAE,QACA,SAMA,IAFAkwB,IAAAD,GADAE,EAAArwB,EAAAQ,KAAA0vB,KACA9tB,IAEA,GACA,KAAAguB,EAAA,GAKA,SAJA7gB,EAAAmD,SAAA0d,EACA7gB,EAAAhM,OAAA1D,EAAAqC,IAAA6tB,EAAAK,EAAAzsB,EAAAqsB,EAAAI,EAAAxsB,EAAAisB,GACAtgB,EAAAhM,OAAAN,IAAA,EAAA0rB,OAIO,CAIP,GAFAqB,GADAM,IAAAH,EAAAE,GAAAjuB,GACAwB,GAEAisB,GACA,GAAAS,GAAA,EACA,cAKA,IADAC,EAAAP,EAAAzd,EAAA3O,GACA,GAMA,IAFAssB,GADAC,GAAAvsB,EAAAisB,GACAM,EAAA/tB,GAFAhE,GAAAyxB,GAAA,EAAAG,EAAAH,MAIA,EACA,SAMA,IAFAS,IAAAH,GADAE,EAAArwB,EAAAQ,KAAA0vB,KACA9tB,IAEA,EACA,SAKAmN,EAAAmD,SAAA,EACAnD,EAAAhM,OAAAlF,EAAA+F,MAAAb,eAEK,GAAA0sB,EAAA,GACL,IAUAG,EALA,IAFAF,GADAC,EAAAJ,EAAApsB,EAAAqsB,EAAApsB,GACAusB,GAHA/tB,EAAAuB,IAAAC,MACAxF,EAAA2xB,IAAAC,IAAArB,OAIA3uB,EAAAE,QACA,SAMA,IAFAkwB,IAAAD,GADAE,EAAArwB,EAAAQ,KAAA0vB,KACA9tB,IAEA,GACA,KAAAguB,EAAA,GAKA,SAJA7gB,EAAAmD,SAAA0d,EACA7gB,EAAAhM,OAAA1D,EAAAqC,IAAA6tB,EAAAK,EAAAzsB,EAAAqsB,EAAAI,EAAAxsB,GACA2L,EAAAhM,OAAAN,IAAA,EAAA0rB,OAIO,CAIP,GAFAqB,GADAM,IAAAH,EAAAE,GAAAjuB,GACAwB,GAEA,GACA,GAAA0sB,GAAA,EACA,cAKA,IADAC,EAAAP,EAAAzd,EAAA3O,GACAisB,EAAA,CAMA,IAFAK,GADAC,GAAAvsB,EAAAisB,GACAM,EAAA/tB,GAFAhE,GAAAyxB,GAAA,EAAAG,EAAAH,MAIA,EACA,SAMA,IAFAS,IAAAH,GADAE,EAAArwB,EAAAQ,KAAA0vB,KACA9tB,IAEA,EACA,SAKAmN,EAAAmD,SAAA,EACAnD,EAAAhM,OAAAlF,EAAA+F,MAAAb,eAEK,GAAA+O,GAAA,EACL/C,EAAAmD,SAAAJ,EACA/C,EAAAhM,OAAA1D,EAAAqC,IAAAyB,EAAA,cACK,CACL,IAAA4sB,EAEA,IAFAA,EAAAP,EAAAzd,EAAA3O,GAEAisB,EAAA,CAMA,IAFAK,GADAC,EAAAJ,EAAApsB,EAAAC,GAAAosB,EAAAH,IACAM,GAHA/tB,EAAAuB,IAAAC,MACAxF,EAAA2xB,KAAAC,EAAAH,IAAAG,EAAAH,GAAAlB,OAIA,EACA,SAMA,IAFA2B,IAAAH,GADAE,EAAArwB,EAAAQ,KAAA0vB,KACA9tB,IAEA,EACA,cAEO,GAAAmuB,EAAA,GACP,IAAAnuB,EACAhE,EACA+xB,EACAD,EAMAG,EACAC,EALA,IAFAJ,GADAC,EAAAJ,EAAApsB,EAAAqsB,EAAApsB,GACAusB,GAHA/tB,EAAAuB,IAAAC,MACAxF,EAAA2xB,IAAAC,IAAArB,OAIA,EACA,SAMA,IAFA2B,IAAAH,GADAE,EAAArwB,EAAAQ,KAAA0vB,KACA9tB,IAEA,EACA,SAIAmN,EAAAmD,SAAA,EACAnD,EAAAhM,OAAAlF,EAAA+F,MAAAb,UAKA,OADAgM,EAAAhM,OAAAE,KAAApC,KAAAmuB,YAAAhsB,IAAA8C,EAAAD,IACA,GAGAqoB,EAAA/uB,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,GACA,IAAAqW,EAAA7f,EAAAL,QAAAS,EAAAjF,KAAAutB,WACA5I,EAAA9f,EAAAL,QAAAS,EAAAjF,KAAAwtB,WAEAjf,EAAAuB,cAAA4U,EAAAC,GACApW,EAAA0B,OAAAjQ,KAAA2N,WAGA0f,EAAA/uB,UAAAkQ,YAAA,SAAAC,EAAAC,GACAD,EAAAuZ,KAAA,EACAvZ,EAAAuY,OAAA9lB,WAAA,GAAAlB,KAAAutB,UAAA,GAAAvtB,KAAAwtB,WACA/e,EAAAiZ,EAAA,GAGA2F,EAAA/uB,UAAAqQ,qBAAA,SAAAC,GACAA,EAAAoW,WAAAvD,KAAAzhB,KAAAutB,WACA3e,EAAAoW,WAAAvD,KAAAzhB,KAAAwtB,WACA5e,EAAAsW,QAAA,EACAtW,EAAAjB,SAAA3N,KAAA2N,yBClgBA,sBAAAvQ,OAAAY,OACAvB,EAAAD,QAAA,SAAAgL,EAAAC,GACA,OAAArK,OAAAY,OAAAnB,KAAAO,OAAAoK,EAAAC,QAEC,CASD,SAAAC,KARAjL,EAAAD,QAAA,SAAAgL,EAAAC,GACA,GAAAA,EACA,MAAA9G,MAAA,qCACA,oBAAA6G,GAAA,OAAAA,EACA,MAAA7G,MAAA,sBAEA,OADA+G,EAAApJ,UAAAkJ,EACA,IAAAE,qBCXA,IAAAuZ,EAAY3kB,EAAQ,IACpB6yB,EAAa7yB,EAAQ,IAErB8yB,EAAA,EA8BA,SAAAC,EAAAC,GAEAtvB,KAAAuvB,OAAAD,EACAtvB,KAAAwvB,QAAA,KAGAxvB,KAAAyvB,gBAAA,IAAAN,EAGAnvB,KAAA0vB,gBAAA,IAAAP,EAEAnvB,KAAA2vB,QAvCA1O,EAAAO,MAAA,WACAxhB,KAAA4vB,KAAA,IAAAP,EAAArvB,QAGAihB,EAAA3iB,UAAAuxB,OAAA,SAAAC,GACA,WAAAA,EACA9vB,KAAA4vB,KAAAG,iBAEA/vB,KAAA4vB,KAAAI,kBAGA/O,EAAA3iB,UAAA2xB,IAAA,SAAAlvB,EAAAC,GACA,uBAAAD,GACAf,KAAA4vB,KAAA/uB,IAAAE,GACAf,MAEG,iBAAAe,OACH,IAAAC,EACAhB,KAAA4vB,KAAAryB,IAAAwD,IAEAf,KAAA4vB,KAAA/uB,IAAAE,EAAAC,GACAhB,WAEG,IAAAe,EACHf,KAAA4vB,UADG,GAmBHP,EAAA/wB,UAAAqxB,MAAA,WAEA3vB,KAAAkwB,cAAA,EACAlwB,KAAAmwB,OAAA,EAEAnwB,KAAAowB,OAAA,EACApwB,KAAAqwB,QAAA,EAEArwB,KAAAswB,QAAA,EACAtwB,KAAAuwB,QAAA,EACAvwB,KAAAwwB,OAAA,EACAxwB,KAAAywB,OAAA,EACAzwB,KAAA0wB,UAAA,EAGA1wB,KAAA2wB,UAAA,EACA3wB,KAAA4wB,QAAA,KACA5wB,KAAA6wB,QAAA,KAGA7wB,KAAA8wB,UAAA,EACA9wB,KAAA+wB,SAAA,EACA/wB,KAAAgxB,SAAA,EAGAhxB,KAAAixB,UAAA,EACAjxB,KAAAkxB,QAAA,EACAlxB,KAAAmxB,QAAA,EAGAnxB,KAAAoxB,SAAA,EACApxB,KAAAqxB,SAAA,EAEArxB,KAAAsxB,MAAA,EACAtxB,KAAAuxB,MAAA,EACAvxB,KAAAwxB,UAAAxxB,KAAAowB,OACApwB,KAAAyxB,WAAAzxB,KAAAqwB,QAGArwB,KAAA0xB,gBAAAtC,EACApvB,KAAA2xB,gBAAAvC,EACApvB,KAAA4xB,aAAAxC,GAGAC,EAAA/wB,UAAAuzB,QAAA,WAeA,OAdA7xB,KAAAwvB,QAAAxvB,KAAAuvB,OAAAC,SAAAxvB,KAAAuvB,OAAAC,QAAAI,KAGA5vB,KAAA8wB,UAAA9wB,KAAA8xB,YAAA9xB,KAAA2xB,gBACA3xB,KAAA8xB,WAAA9xB,KAAA2xB,cACA3xB,KAAA0xB,gBAAAtC,GAGApvB,KAAAixB,UAAAjxB,KAAAwvB,SACAxvB,KAAA+xB,WAAA/xB,KAAAwvB,QAAAmC,gBACA3xB,KAAA+xB,UAAA/xB,KAAAwvB,QAAAmC,cACA3xB,KAAA0xB,gBAAAtC,GAGApvB,MAGAqvB,EAAA/wB,UAAAiC,SAAA,WACA,OAAAP,KAAAuvB,OAAA,MAAAvvB,KAAAwvB,QAAAxvB,KAAAwvB,QAAAD,OAAA,WAKAF,EAAA/wB,UAAA0xB,eAAA,WACAhwB,KAAA6xB,UACA,IAAAG,EAAArzB,KAAAc,IAAAO,KAAA2xB,cAAA3xB,KAAA0xB,cACA1xB,KAAAwvB,QAAAxvB,KAAAwvB,QAAAoC,WAAA,GACA,GAAA5xB,KAAAiyB,SAAAD,EACA,OAAAhyB,KAAA0vB,gBAEA1vB,KAAAiyB,QAAAD,EAEA,IAAAhvB,EAAAhD,KAAA0vB,gBAOA,OANA1sB,EAAA2sB,MAAA3vB,KAAA+vB,kBAEA/vB,KAAAwvB,SAAAxsB,EAAAkvB,OAAAlyB,KAAAwvB,QAAAE,iBAEA1vB,KAAA4xB,aAAAxC,EAEApsB,GAGAqsB,EAAA/wB,UAAAyxB,eAAA,WACA/vB,KAAA6xB,UACA,IAAAG,EAAArzB,KAAAc,IAAAO,KAAA2xB,cAAA3xB,KAAA0xB,cACA1xB,KAAAwvB,QAAAxvB,KAAAwvB,QAAAmC,cAAA,GACA,GAAA3xB,KAAAmyB,SAAAH,EACA,OAAAhyB,KAAAyvB,gBAEAzvB,KAAAmyB,QAAAH,EAEA,IAuBAxzB,EAAAwG,EAvBAotB,EAAApyB,KAAAyvB,iBAEA2C,EAAAruB,WACA/D,KAAA2wB,UACAyB,EAAAC,WAAAryB,KAAA4wB,QAAA5wB,KAAAowB,QAAApwB,KAAA6wB,QAAA7wB,KAAAqwB,SAEA+B,EAAAE,MAAAtyB,KAAAswB,QAAAtwB,KAAAuwB,SACA6B,EAAA1vB,KAAA1C,KAAAwwB,OAAAxwB,KAAAywB,QACA2B,EAAAG,OAAAvyB,KAAA0wB,WACA1wB,KAAA2wB,UACAyB,EAAAC,UAAAryB,KAAA4wB,QAAA5wB,KAAAowB,OAAApwB,KAAA6wB,QAAA7wB,KAAAqwB,SAIArwB,KAAA2wB,WAEA3wB,KAAAsxB,MAAA,EACAtxB,KAAAuxB,MAAA,EACAvxB,KAAAwxB,UAAAxxB,KAAAowB,OACApwB,KAAAyxB,WAAAzxB,KAAAqwB,UAKA+B,EAAArxB,EAAA,GAAAqxB,EAAAr1B,EAAA,GAAAq1B,EAAArxB,EAAA,GAAAqxB,EAAAr1B,EAAA,GACAyB,EAAA,EAAAwG,EAAAotB,EAAArxB,EAAAf,KAAAowB,OAAAgC,EAAAr1B,EAAAiD,KAAAqwB,UAEA7xB,EAAA4zB,EAAArxB,EAAAf,KAAAowB,OAAAprB,EAAAotB,EAAAr1B,EAAAiD,KAAAqwB,SAEA7xB,EAAAwG,GACAhF,KAAAsxB,MAAAtsB,EACAhF,KAAAwxB,UAAAhzB,EAAAwG,IAEAhF,KAAAsxB,MAAA9yB,EACAwB,KAAAwxB,UAAAxsB,EAAAxG,GAEA4zB,EAAApxB,EAAA,GAAAoxB,EAAAp1B,EAAA,GAAAo1B,EAAApxB,EAAA,GAAAoxB,EAAAp1B,EAAA,GACAwB,EAAA,EAAAwG,EAAAotB,EAAApxB,EAAAhB,KAAAowB,OAAAgC,EAAAp1B,EAAAgD,KAAAqwB,UAEA7xB,EAAA4zB,EAAApxB,EAAAhB,KAAAowB,OAAAprB,EAAAotB,EAAAp1B,EAAAgD,KAAAqwB,SAEA7xB,EAAAwG,GACAhF,KAAAuxB,MAAAvsB,EACAhF,KAAAyxB,WAAAjzB,EAAAwG,IAEAhF,KAAAuxB,MAAA/yB,EACAwB,KAAAyxB,WAAAzsB,EAAAxG,IAkBA,OAdAwB,KAAAwyB,GAAAxyB,KAAAoxB,SACApxB,KAAAyyB,GAAAzyB,KAAAqxB,SAEArxB,KAAAwyB,IAAAxyB,KAAAsxB,MAAAtxB,KAAA+wB,SAAA/wB,KAAAwxB,UACAxxB,KAAAyyB,IAAAzyB,KAAAuxB,MAAAvxB,KAAAgxB,SAAAhxB,KAAAyxB,WAEAzxB,KAAAixB,UAAAjxB,KAAAwvB,UACAxvB,KAAAwvB,QAAAO,iBACA/vB,KAAAwyB,IAAAxyB,KAAAkxB,QAAAlxB,KAAAwvB,QAAAY,OACApwB,KAAAyyB,IAAAzyB,KAAAmxB,QAAAnxB,KAAAwvB,QAAAa,SAGA+B,EAAAC,UAAAryB,KAAAwyB,GAAAxyB,KAAAyyB,IAEAzyB,KAAAyvB,iBAGAJ,EAAA/wB,UAAAf,IAAA,SAAAU,GACA,sBAAAy0B,EAAAz0B,GACA,OAAAy0B,EAAAz0B,GAAA+B,OAKAqvB,EAAA/wB,UAAAuC,IAAA,SAAAE,EAAAC,GACA,oBAAAD,EACA,mBAAA4xB,EAAA5xB,SAAA,IAAAC,GACA2xB,EAAA5xB,GAAAf,KAAAgB,QAEG,oBAAAD,EACH,IAAAC,KAAAD,EACA,mBAAA4xB,EAAA3xB,SAAA,IAAAD,EAAAC,IACA2xB,EAAA3xB,GAAAhB,KAAAe,EAAAC,GAAAD,GAQA,OAJAf,KAAAuvB,SACAvvB,KAAAuvB,OAAAqD,UAAAxD,EACApvB,KAAAuvB,OAAAsD,SAEA7yB,MAGA,IAAA0yB,EAAA,CACAjpB,MAAA,SAAAwmB,GACA,OAAAA,EAAAE,QAGA2C,aAAA,SAAA7C,GACA,OAAAA,EAAAC,eAGA6C,MAAA,SAAA9C,GACA,OAAAA,EAAAG,QAGA5B,OAAA,SAAAyB,GACA,OAAAA,EAAAI,SAGA2C,SAAA,SAAA/C,GACA,OAAAA,EAAAuB,WAGAyB,UAAA,SAAAhD,GACA,OAAAA,EAAAwB,YAMAyB,OAAA,SAAAjD,GACA,OAAAA,EAAAK,SAGA6C,OAAA,SAAAlD,GACA,OAAAA,EAAAM,SAMA6C,MAAA,SAAAnD,GACA,OAAAA,EAAAO,QAGA6C,MAAA,SAAApD,GACA,OAAAA,EAAAQ,QAGA1rB,SAAA,SAAAkrB,GACA,OAAAA,EAAAS,WAMA4C,OAAA,SAAArD,GACA,OAAAA,EAAAW,SAGA2C,OAAA,SAAAtD,GACA,OAAAA,EAAAY,SAMA2C,QAAA,SAAAvD,GACA,OAAAA,EAAAmB,UAGAqC,QAAA,SAAAxD,GACA,OAAAA,EAAAoB,UAMAqC,OAAA,SAAAzD,GACA,OAAAA,EAAAiB,SAGAyC,OAAA,SAAA1D,GACA,OAAAA,EAAAkB,SAMAyC,QAAA,SAAA3D,GACA,OAAAA,EAAAc,UAGA8C,QAAA,SAAA5D,GACA,OAAAA,EAAAe,WAIA2B,EAAA,CACAlpB,MAAA,SAAAwmB,EAAAtyB,GACAsyB,EAAAE,OAAAxyB,GAGAm1B,aAAA,SAAA7C,EAAAtyB,GACAsyB,EAAAC,cAAAvyB,GAGAo1B,MAAA,SAAA9C,EAAAtyB,GACAsyB,EAAA6D,QAAAn2B,EACAsyB,EAAAG,OAAAzyB,EACAsyB,EAAA0B,gBAAAvC,GAGAZ,OAAA,SAAAyB,EAAAtyB,GACAsyB,EAAA8D,SAAAp2B,EACAsyB,EAAAI,QAAA1yB,EACAsyB,EAAA0B,gBAAAvC,GAGAkD,MAAA,SAAArC,EAAAtyB,GACAsyB,EAAAK,QAAA3yB,EACAsyB,EAAAM,QAAA5yB,EACAsyB,EAAA0B,gBAAAvC,GAGA8D,OAAA,SAAAjD,EAAAtyB,GACAsyB,EAAAK,QAAA3yB,EACAsyB,EAAA0B,gBAAAvC,GAGA+D,OAAA,SAAAlD,EAAAtyB,GACAsyB,EAAAM,QAAA5yB,EACAsyB,EAAA0B,gBAAAvC,GAGA1sB,KAAA,SAAAutB,EAAAtyB,GACAsyB,EAAAO,OAAA7yB,EACAsyB,EAAAQ,OAAA9yB,EACAsyB,EAAA0B,gBAAAvC,GAGAgE,MAAA,SAAAnD,EAAAtyB,GACAsyB,EAAAO,OAAA7yB,EACAsyB,EAAA0B,gBAAAvC,GAGAiE,MAAA,SAAApD,EAAAtyB,GACAsyB,EAAAQ,OAAA9yB,EACAsyB,EAAA0B,gBAAAvC,GAGArqB,SAAA,SAAAkrB,EAAAtyB,GACAsyB,EAAAS,UAAA/yB,EACAsyB,EAAA0B,gBAAAvC,GAGA4E,MAAA,SAAA/D,EAAAtyB,GACAsyB,EAAAW,QAAAjzB,EACAsyB,EAAAY,QAAAlzB,EACAsyB,EAAAU,UAAA,EACAV,EAAA0B,gBAAAvC,GAGAkE,OAAA,SAAArD,EAAAtyB,GACAsyB,EAAAW,QAAAjzB,EACAsyB,EAAAU,UAAA,EACAV,EAAA0B,gBAAAvC,GAGAmE,OAAA,SAAAtD,EAAAtyB,GACAsyB,EAAAY,QAAAlzB,EACAsyB,EAAAU,UAAA,EACAV,EAAA0B,gBAAAvC,GAGA7P,OAAA,SAAA0Q,EAAAtyB,GACAsyB,EAAAmB,SAAAzzB,EACAsyB,EAAAoB,SAAA1zB,EACAsyB,EAAAyB,gBAAAtC,GAGAoE,QAAA,SAAAvD,EAAAtyB,GACAsyB,EAAAmB,SAAAzzB,EACAsyB,EAAAyB,gBAAAtC,GAGAqE,QAAA,SAAAxD,EAAAtyB,GACAsyB,EAAAoB,SAAA1zB,EACAsyB,EAAAyB,gBAAAtC,GAGA6E,MAAA,SAAAhE,EAAAtyB,GACAqC,KAAA0zB,OAAAzD,EAAAtyB,GACAqC,KAAA2zB,OAAA1D,EAAAtyB,IAGA+1B,OAAA,SAAAzD,EAAAtyB,GACAsyB,EAAAiB,QAAAvzB,EACAsyB,EAAAgB,UAAA,EACAhB,EAAAyB,gBAAAtC,EAEApvB,KAAA4zB,QAAA3D,EAAAtyB,IAGAg2B,OAAA,SAAA1D,EAAAtyB,GACAsyB,EAAAkB,QAAAxzB,EACAsyB,EAAAgB,UAAA,EACAhB,EAAAyB,gBAAAtC,EAEApvB,KAAA6zB,QAAA5D,EAAAtyB,IAGAu2B,OAAA,SAAAjE,EAAAtyB,GACAqC,KAAA4zB,QAAA3D,EAAAtyB,GACAqC,KAAA6zB,QAAA5D,EAAAtyB,IAGAi2B,QAAA,SAAA3D,EAAAtyB,GACAsyB,EAAAc,SAAApzB,EACAsyB,EAAAa,UAAA,EACAb,EAAAyB,gBAAAtC,GAGAyE,QAAA,SAAA5D,EAAAtyB,GACAsyB,EAAAe,SAAArzB,EACAsyB,EAAAa,UAAA,EACAb,EAAAyB,gBAAAtC,GAGA+E,WAAA,SAAAlE,EAAAtyB,EAAAy2B,GACAA,IACA,MAAAz2B,EACAA,EAAA,SACO,OAAAA,IACPA,EAAA,YAEA02B,EAAApE,EAAAmE,EAAAE,YAAAF,EAAAG,aAAA52B,KAIA22B,YAAA,SAAArE,EAAAtyB,EAAAy2B,GACAA,KAAAD,YACAE,EAAApE,EAAAtyB,EAAA,OAIA42B,aAAA,SAAAtE,EAAAtyB,EAAAy2B,GACAA,KAAAD,YACAE,EAAApE,EAAA,KAAAtyB,IAIA62B,UAAA,SAAAvE,EAAAtyB,EAAAy2B,GACAA,GACAC,EAAApE,EAAAmE,EAAAK,WAAAL,EAAAM,YAAA/2B,IAIA82B,WAAA,SAAAxE,EAAAtyB,EAAAy2B,GACAA,KAAAI,WACAH,EAAApE,EAAAtyB,EAAA,OAIA+2B,YAAA,SAAAzE,EAAAtyB,EAAAy2B,GACAA,KAAAI,WACAH,EAAApE,EAAA,KAAAtyB,IAIAkyB,OAAA,SAAAI,EAAAtyB,GACAqC,KAAAkzB,OAAAjD,EAAAtyB,EAAAoD,GACAf,KAAAozB,MAAAnD,EAAAtyB,EAAAZ,EAAAY,EAAAX,GACAgD,KAAAqzB,MAAApD,EAAAtyB,EAAAqD,EAAArD,EAAAoD,GACAf,KAAAmzB,OAAAlD,EAAAtyB,EAAAX,GACAgD,KAAAwzB,QAAAvD,EAAAtyB,EAAAuqB,GACAloB,KAAAyzB,QAAAxD,EAAAtyB,EAAAoT,GACA/Q,KAAA+E,SAAAkrB,EAAA,KAIA,SAAAoE,EAAApE,EAAA8C,EAAAvE,EAAA3wB,GACA,IAAAoD,EAAA,iBAAA8xB,EACA4B,EAAA,iBAAAnG,EACA1xB,EAAA,iBAAAe,EACAoyB,EAAA0B,gBAAAvC,EACAnuB,IACAgvB,EAAAK,QAAAyC,EAAA9C,EAAA6D,QACA7D,EAAAG,OAAAH,EAAA6D,SAEAa,IACA1E,EAAAM,QAAA/B,EAAAyB,EAAA8D,SACA9D,EAAAI,QAAAJ,EAAA8D,UAEA9yB,GAAA0zB,GAAA73B,IACA,OAAAe,GAAA,YAAAA,EACAoyB,EAAAK,QAAAL,EAAAM,QAAA5xB,KAAAc,IAAAwwB,EAAAK,QAAAL,EAAAM,SACK,MAAA1yB,GAAA,UAAAA,IACLoyB,EAAAK,QAAAL,EAAAM,QAAA5xB,KAAAa,IAAAywB,EAAAK,QAAAL,EAAAM,UAEA,YAAA1yB,GAAA,UAAAA,IACAoyB,EAAAG,OAAA2C,EAAA9C,EAAAK,QACAL,EAAAI,QAAA7B,EAAAyB,EAAAM,UAKAtP,EAAA3iB,UAAA+1B,QAAA,SAAAtzB,EAAAC,EAAAjE,GAIA,MAHA,iBAAAgE,IACAhE,EAAAiE,IAAAD,EAAAhB,EAAAgB,IAAAhC,GACAs1B,EAAAr0B,KAAA4vB,KAAA7uB,EAAAC,EAAAjE,GACAiD,MAIAqvB,EAAAuF,eAAA,SAAA3T,GACAA,EAAA3iB,UAAAu2B,KAAA,SAAA5zB,EAAA0zB,GAGA,OAFA30B,KAAAiwB,IAAA,QAAAhvB,GACAjB,KAAAiwB,IAAA,SAAA0E,GACA30B,MAGAihB,EAAA3iB,UAAAy0B,MAAA,SAAA9xB,GACA,gBAAAA,EACAjB,KAAAiwB,IAAA,UAEAjwB,KAAAiwB,IAAA,QAAAhvB,GACAjB,OAGAihB,EAAA3iB,UAAAkwB,OAAA,SAAAmG,GACA,gBAAAA,EACA30B,KAAAiwB,IAAA,WAEAjwB,KAAAiwB,IAAA,SAAA0E,GACA30B,OAGAihB,EAAA3iB,UAAAihB,OAAA,SAAAxe,EAAAC,GAKA,MAJA,iBAAAD,IACAC,EAAAD,EAAAhB,EAAAgB,IAAAhC,GACAiB,KAAAiwB,IAAA,UAAAlvB,GACAf,KAAAiwB,IAAA,UAAAjvB,GACAhB,MAGAihB,EAAA3iB,UAAAi0B,OAAA,SAAAxxB,GAEA,OADAf,KAAAiwB,IAAA,WAAAlvB,GACAf,MAGAihB,EAAA3iB,UAAAoE,KAAA,SAAA3B,EAAAC,GAOA,MANA,iBAAAD,GACAC,EAAAD,EAAAhB,EAAAgB,IAAAhC,QACA,IAAAiC,IACAA,EAAAD,GACAf,KAAAiwB,IAAA,QAAAlvB,GACAf,KAAAiwB,IAAA,QAAAjvB,GACAhB,MAGAihB,EAAA3iB,UAAAg0B,MAAA,SAAAvxB,EAAAC,GAOA,MANA,iBAAAD,GACAC,EAAAD,EAAAhB,EAAAgB,IAAAhC,QACA,IAAAiC,IACAA,EAAAD,GACAf,KAAAiwB,IAAA,SAAAlvB,GACAf,KAAAiwB,IAAA,SAAAjvB,GACAhB,MAGAihB,EAAA3iB,UAAAmL,MAAA,SAAA1I,EAAA+zB,GAKA,OAJA90B,KAAAiwB,IAAA,QAAAlvB,QACA,IAAA+zB,GACA90B,KAAAiwB,IAAA,eAAA6E,GAEA90B,OAIAqvB,EAAAuF,eAAA3T,GAEAxkB,EAAAD,QAAA6yB,mBCrlBA,IACAzvB,GAAsD,EAEtDnD,EAAAD,QAAAu4B,EAEA,IAAAj1B,EAAaxD,EAAQ,GACrB04B,EAAc14B,EAAQ,GAEtBuD,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAClBqC,EAAWrC,EAAQ,GACnByM,EAAYzM,EAAQ,IACpBuI,EAAgBvI,EAAQ,GACxB24B,EAAe34B,EAAQ,IACvBqO,EAAerO,EAAQ,IAEvB44B,EAAc54B,EAAQ,IAItB64B,GAHY74B,EAAQ,IACRA,EAAQ,IAEpBy4B,EAAAK,OAAA,UACAC,EAAAN,EAAAO,UAAA,YACAC,EAAAR,EAAAS,QAAA,UAwCAC,EAAA,CACAnf,KAAA6e,EACArwB,SAAAjF,EAAAI,OACA2D,MAAA,EAEA8xB,eAAA71B,EAAAI,OACA01B,gBAAA,EAEAC,cAAA,EACAC,eAAA,EAEAC,eAAA,EACAC,QAAA,EACAC,aAAA,EAEAC,YAAA,EACAC,OAAA,EACAjqB,QAAA,EAEAE,SAAA,MAUA,SAAA4oB,EAAAoB,EAAAjrB,GAEAA,EAAA8pB,EAAA9pB,EAAAuqB,GAEA71B,GAAAE,EAAAb,OAAAY,EAAAa,QAAAwK,EAAApG,WACAlF,GAAAE,EAAAb,OAAAY,EAAAa,QAAAwK,EAAAwqB,iBACA91B,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAtH,QACAhE,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAyqB,kBACA/1B,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAA2qB,iBAAA3qB,EAAA2qB,gBAAA,GACAj2B,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAA0qB,gBAAA1qB,EAAA0qB,eAAA,GAEA51B,KAAAo2B,QAAAD,EAEAn2B,KAAAq2B,YAAAnrB,EAAAgrB,MACAl2B,KAAAs2B,gBAAAprB,EAAA+qB,WACAj2B,KAAAu2B,aAAArrB,EAAA6qB,OACA/1B,KAAAw2B,oBAAAtrB,EAAA4qB,cACA91B,KAAAgM,aAAAd,EAAAe,OAEAjM,KAAA+L,cAAA,EACA/L,KAAA0S,WAAA,EAEA1S,KAAAkM,WAAAhB,EAAAiB,SACAnM,KAAAqL,OAAAH,EAAAoL,KAEAtW,KAAAqL,QAAAkqB,GACAv1B,KAAAy2B,OAAA,EACAz2B,KAAAmW,UAAA,IAEAnW,KAAAy2B,OAAA,EACAz2B,KAAAmW,UAAA,GAIAnW,KAAA02B,IAAA,EACA12B,KAAAoW,OAAA,EAGApW,KAAA22B,KAAA9xB,EAAAd,WACA/D,KAAA22B,KAAAn4B,EAAAqB,EAAAQ,MAAA6K,EAAApG,UACA9E,KAAA22B,KAAA3xB,EAAAnB,SAAAqH,EAAAtH,OAGA5D,KAAAqW,QAAA,IAAAtN,EACA/I,KAAAqW,QAAAjN,aAAApJ,KAAA22B,MAGA32B,KAAA8Z,WAAA,IAAAmb,EACAj1B,KAAA+Z,WAAA,IAAApP,EAEA3K,KAAA42B,QAAA/2B,EAAAI,OACAD,KAAA62B,SAAA,EAEA72B,KAAA82B,iBAAAj3B,EAAAQ,MAAA6K,EAAAwqB,gBACA11B,KAAA+2B,kBAAA7rB,EAAAyqB,gBAEA31B,KAAAg3B,gBAAA9rB,EAAA0qB,cACA51B,KAAAi3B,iBAAA/rB,EAAA2qB,eACA71B,KAAAk3B,eAAAhsB,EAAA8qB,aAEAh2B,KAAAm3B,YAAA,EAEAn3B,KAAAo3B,YAAA,KACAp3B,KAAA2e,cAAA,KACA3e,KAAAq3B,cAAA,KAEAr3B,KAAA2L,OAAA,KACA3L,KAAA4L,OAAA,KAEA5L,KAAAs3B,aAAA,EA8cA,SAAAC,IACAv3B,KAAAgoB,KAAA,EACAhoB,KAAAgnB,OAAAnnB,EAAAI,OACAD,KAAA0nB,EAAA,EA9cAqN,EAAAz2B,UAAAk5B,cAAA,WACA,SAAAx3B,KAAAo2B,UAAAp2B,KAAAo2B,QAAAqB,aAGA1C,EAAAz2B,UAAAo5B,SAAA,WACA,OAAA13B,KAAAo2B,SAGArB,EAAAz2B,UAAAoO,QAAA,WACA,OAAA1M,KAAA4L,QAGAmpB,EAAAz2B,UAAAsO,YAAA,SAAAC,GACA7M,KAAAkM,WAAAW,GAGAkoB,EAAAz2B,UAAAqO,YAAA,WACA,OAAA3M,KAAAkM,YAGA6oB,EAAAz2B,UAAAq5B,eAAA,WACA,OAAA33B,KAAAq3B,eAGAtC,EAAAz2B,UAAAs5B,aAAA,WACA,OAAA53B,KAAAo3B,aAOArC,EAAAz2B,UAAAu5B,eAAA,WACA,OAAA73B,KAAA2e,eAGAoW,EAAAz2B,UAAAw5B,SAAA,WACA,OAAA93B,KAAAqL,QAAA8pB,GAGAJ,EAAAz2B,UAAAy5B,UAAA,WACA,OAAA/3B,KAAAqL,QAAAkqB,GAGAR,EAAAz2B,UAAA05B,YAAA,WACA,OAAAh4B,KAAAqL,QAAAgqB,GAMAN,EAAAz2B,UAAA25B,UAAA,WAEA,OADAj4B,KAAAk4B,QAAA/C,GACAn1B,MAGA+0B,EAAAz2B,UAAA65B,WAAA,WAEA,OADAn4B,KAAAk4B,QAAA3C,GACAv1B,MAGA+0B,EAAAz2B,UAAA85B,aAAA,WAEA,OADAp4B,KAAAk4B,QAAA7C,GACAr1B,MAMA+0B,EAAAz2B,UAAAiO,QAAA,WACA,OAAAvM,KAAAqL,QAOA0pB,EAAAz2B,UAAA45B,QAAA,SAAA5hB,GAIA,GAHA1W,GAAAE,EAAAb,OAAAqX,IAAA6e,GAAA7e,IAAA+e,GAAA/e,IAAAif,GACA31B,GAAAE,EAAAb,OAAA,GAAAe,KAAAw3B,iBAEA,GAAAx3B,KAAAw3B,iBAIAx3B,KAAAqL,QAAAiL,EAAA,CAIAtW,KAAAqL,OAAAiL,EAEAtW,KAAAq4B,gBAEAr4B,KAAAqL,QAAA8pB,IACAn1B,KAAA82B,iBAAAl2B,UACAZ,KAAA+2B,kBAAA,EACA/2B,KAAAqW,QAAA3M,UACA1J,KAAAs4B,uBAGAt4B,KAAAmZ,UAAA,GAEAnZ,KAAA42B,QAAAh2B,UACAZ,KAAA62B,SAAA,EAIA,IADA,IAAA0B,EAAAv4B,KAAA2e,cACA4Z,GAAA,CACA,IAAAC,EAAAD,EACAA,IAAAttB,KACAjL,KAAAo2B,QAAAqC,eAAAD,EAAA/mB,SAEAzR,KAAA2e,cAAA,KAIA,IADA,IAAA+Z,EAAA14B,KAAAo2B,QAAAuC,aACA5nB,EAAA/Q,KAAAq3B,cAAkCtmB,EAAGA,IAAAnF,OAErC,IADA,IAAAgtB,EAAA7nB,EAAA8nB,aACAn8B,EAAA,EAAmBA,EAAAk8B,IAAgBl8B,EACnCg8B,EAAAI,WAAA/nB,EAAAgoB,UAAAr8B,GAAAs8B,WAKAjE,EAAAz2B,UAAA26B,SAAA,WACA,OAAAj5B,KAAAu2B,cAMAxB,EAAAz2B,UAAA46B,UAAA,SAAA5sB,GACAtM,KAAAu2B,eAAAjqB,GAGAyoB,EAAAz2B,UAAA66B,kBAAA,WACA,OAAAn5B,KAAAs2B,iBAGAvB,EAAAz2B,UAAA86B,mBAAA,SAAA9sB,GACAtM,KAAAs2B,kBAAAhqB,EACA,GAAAtM,KAAAs2B,iBACAt2B,KAAAmZ,UAAA,IAIA4b,EAAAz2B,UAAA+6B,QAAA,WACA,OAAAr5B,KAAAq2B,aAQAtB,EAAAz2B,UAAA6a,SAAA,SAAA7M,GACAA,EACA,GAAAtM,KAAAq2B,cACAr2B,KAAAq2B,aAAA,EACAr2B,KAAAm3B,YAAA,IAGAn3B,KAAAq2B,aAAA,EACAr2B,KAAAm3B,YAAA,EACAn3B,KAAA82B,iBAAAl2B,UACAZ,KAAA+2B,kBAAA,EACA/2B,KAAA42B,QAAAh2B,UACAZ,KAAA62B,SAAA,IAIA9B,EAAAz2B,UAAA8N,SAAA,WACA,OAAApM,KAAAgM,cAgBA+oB,EAAAz2B,UAAA+N,UAAA,SAAAC,GAGA,GAFA1M,GAAAE,EAAAb,OAAA,GAAAe,KAAAw3B,iBAEAlrB,GAAAtM,KAAAgM,aAMA,GAFAhM,KAAAgM,eAAAM,EAEAtM,KAAAgM,aAGA,IADA,IAAA0sB,EAAA14B,KAAAo2B,QAAAuC,aACA5nB,EAAA/Q,KAAAq3B,cAAoCtmB,EAAGA,IAAAnF,OACvCmF,EAAAuoB,cAAAZ,EAAA14B,KAAA22B,UAIG,CAGH,IADA+B,EAAA14B,KAAAo2B,QAAAuC,aACA5nB,EAAA/Q,KAAAq3B,cAAoCtmB,EAAGA,IAAAnF,OACvCmF,EAAAwoB,eAAAb,GAKA,IADA,IAAAH,EAAAv4B,KAAA2e,cACA4Z,GAAA,CACA,IAAAC,EAAAD,EACAA,IAAAttB,KACAjL,KAAAo2B,QAAAqC,eAAAD,EAAA/mB,SAEAzR,KAAA2e,cAAA,OAIAoW,EAAAz2B,UAAAk7B,gBAAA,WACA,OAAAx5B,KAAAw2B,qBAMAzB,EAAAz2B,UAAAm7B,iBAAA,SAAAntB,GACAtM,KAAAw2B,qBAAAlqB,IAIAtM,KAAAw2B,sBAAAlqB,EAEAtM,KAAA+2B,kBAAA,EAEA/2B,KAAAq4B,kBAMAtD,EAAAz2B,UAAAgL,aAAA,WACA,OAAAtJ,KAAA22B,MAWA5B,EAAAz2B,UAAA8K,aAAA,SAAAtE,EAAAlB,GAEA,GADAhE,GAAAE,EAAAb,OAAA,GAAAe,KAAAw3B,iBACA,GAAAx3B,KAAAw3B,gBAAA,CAIAx3B,KAAA22B,KAAA91B,IAAAiE,EAAAlB,GACA5D,KAAAqW,QAAAjN,aAAApJ,KAAA22B,MAGA,IADA,IAAA+B,EAAA14B,KAAAo2B,QAAAuC,aACA5nB,EAAA/Q,KAAAq3B,cAAkCtmB,EAAGA,IAAAnF,OACrCmF,EAAA2oB,YAAAhB,EAAA14B,KAAA22B,KAAA32B,KAAA22B,QAIA5B,EAAAz2B,UAAAq7B,qBAAA,WACA35B,KAAAqW,QAAA/M,aAAAtJ,KAAA22B,KAAA,IAMA5B,EAAAz2B,UAAAg6B,oBAAA,WACA,IAAArzB,EAAAJ,EAAAd,WAEA/D,KAAAqW,QAAA/M,aAAArE,EAAA,GAGA,IADA,IAAAyzB,EAAA14B,KAAAo2B,QAAAuC,aACA5nB,EAAA/Q,KAAAq3B,cAAkCtmB,EAAGA,IAAAnF,OACrCmF,EAAA2oB,YAAAhB,EAAAzzB,EAAAjF,KAAA22B,OAOA5B,EAAAz2B,UAAAkL,QAAA,SAAAC,GAEAzJ,KAAAqW,QAAA7M,QAAAC,GACAzJ,KAAAqW,QAAAtZ,EAAA8D,IAAAb,KAAAqW,QAAAnN,IACAlJ,KAAAqW,QAAAtV,EAAAf,KAAAqW,QAAAlN,GACAnJ,KAAAqW,QAAA/M,aAAAtJ,KAAA22B,KAAA,IAMA5B,EAAAz2B,UAAAs7B,YAAA,WACA,OAAA55B,KAAA22B,KAAAn4B,GAGAu2B,EAAAz2B,UAAAu7B,YAAA,SAAAr7B,GACAwB,KAAAoJ,aAAA5K,EAAAwB,KAAAqW,QAAAtV,IAMAg0B,EAAAz2B,UAAA4F,SAAA,WACA,OAAAlE,KAAAqW,QAAAtV,GAGAg0B,EAAAz2B,UAAAuF,SAAA,SAAAD,GACA5D,KAAAoJ,aAAApJ,KAAA22B,KAAAn4B,EAAAoF,IAMAmxB,EAAAz2B,UAAAw7B,eAAA,WACA,OAAA95B,KAAAqW,QAAAtZ,GAMAg4B,EAAAz2B,UAAAy7B,eAAA,WACA,OAAA/5B,KAAAqW,QAAArN,aAQA+rB,EAAAz2B,UAAA07B,kBAAA,WACA,OAAAh6B,KAAA82B,kBAQA/B,EAAAz2B,UAAA27B,gCAAA,SAAAC,GACA,IAAAlxB,EAAAnJ,EAAA8B,IAAAu4B,EAAAl6B,KAAAqW,QAAAtZ,GACA,OAAA8C,EAAAuB,IAAApB,KAAA82B,iBAAAj3B,EAAA+C,MAAA5C,KAAA+2B,kBACA/tB,KAQA+rB,EAAAz2B,UAAA67B,gCAAA,SAAA3jB,GACA,OAAAxW,KAAAi6B,gCAAAj6B,KAAAo6B,cAAA5jB,KAQAue,EAAAz2B,UAAA+7B,kBAAA,SAAA/5B,GACAN,KAAAqL,QAAA8pB,IAGAt1B,EAAA8C,IAAArC,KAAA,GACAN,KAAAmZ,UAAA,GAEAnZ,KAAA82B,iBAAAj2B,IAAAP,KAQAy0B,EAAAz2B,UAAAg8B,mBAAA,WACA,OAAAt6B,KAAA+2B,mBAQAhC,EAAAz2B,UAAAi8B,mBAAA,SAAAt5B,GACAjB,KAAAqL,QAAA8pB,IAGAl0B,IAAA,GACAjB,KAAAmZ,UAAA,GAEAnZ,KAAA+2B,kBAAA91B,IAGA8zB,EAAAz2B,UAAAk8B,iBAAA,WACA,OAAAx6B,KAAAg3B,iBAGAjC,EAAAz2B,UAAAm8B,iBAAA,SAAA7E,GACA51B,KAAAg3B,gBAAApB,GAGAb,EAAAz2B,UAAAo8B,kBAAA,WACA,OAAA16B,KAAAi3B,kBAGAlC,EAAAz2B,UAAAq8B,kBAAA,SAAA9E,GACA71B,KAAAi3B,iBAAApB,GAGAd,EAAAz2B,UAAAs8B,gBAAA,WACA,OAAA56B,KAAAk3B,gBAMAnC,EAAAz2B,UAAAu8B,gBAAA,SAAAvI,GACAtyB,KAAAk3B,eAAA5E,GAQAyC,EAAAz2B,UAAAw8B,QAAA,WACA,OAAA96B,KAAAy2B,QAQA1B,EAAAz2B,UAAAy8B,WAAA,WACA,OAAA/6B,KAAA02B,IAAA12B,KAAAy2B,OACA52B,EAAA8C,IAAA3C,KAAAqW,QAAArN,YAAAhJ,KAAAqW,QAAArN,cAoBA+rB,EAAAz2B,UAAA08B,YAAA,SAAAnuB,GACAA,EAAAmb,KAAAhoB,KAAAy2B,OACA5pB,EAAA6a,EAAA1nB,KAAA+6B,aACAluB,EAAAma,OAAAnmB,IAAAb,KAAAqW,QAAArN,cAQA+rB,EAAAz2B,UAAA+5B,cAAA,WASA,GAPAr4B,KAAAy2B,OAAA,EACAz2B,KAAAmW,UAAA,EACAnW,KAAA02B,IAAA,EACA12B,KAAAoW,OAAA,EACApW,KAAAqW,QAAArN,YAAApI,UAGAZ,KAAA83B,YAAA93B,KAAAg4B,cAIA,OAHAh4B,KAAAqW,QAAAnN,GAAArI,IAAAb,KAAA22B,KAAAn4B,GACAwB,KAAAqW,QAAAtZ,EAAA8D,IAAAb,KAAA22B,KAAAn4B,QACAwB,KAAAqW,QAAAlN,GAAAnJ,KAAAqW,QAAAtV,GAIAnB,GAAAE,EAAAb,OAAAe,KAAA+3B,aAIA,IADA,IAAA/uB,EAAAnJ,EAAAI,OACA8Q,EAAA/Q,KAAAq3B,cAAkCtmB,EAAGA,IAAAnF,OACrC,MAAAmF,EAAAkqB,UAAA,CAIA,IAAAxsB,EAAA,IAAA8oB,EACAxmB,EAAAiqB,YAAAvsB,GACAzO,KAAAy2B,QAAAhoB,EAAAuZ,KACAhf,EAAAzH,OAAAkN,EAAAuZ,KAAAvZ,EAAAuY,QACAhnB,KAAA02B,KAAAjoB,EAAAiZ,EAIA1nB,KAAAy2B,OAAA,GACAz2B,KAAAmW,UAAA,EAAAnW,KAAAy2B,OACAztB,EAAApH,IAAA5B,KAAAmW,aAIAnW,KAAAy2B,OAAA,EACAz2B,KAAAmW,UAAA,GAGAnW,KAAA02B,IAAA,MAAA12B,KAAAw2B,qBAEAx2B,KAAA02B,KAAA12B,KAAAy2B,OAAA52B,EAAA8C,IAAAqG,KACApJ,GAAAE,EAAAb,OAAAe,KAAA02B,IAAA,GACA12B,KAAAoW,OAAA,EAAApW,KAAA02B,MAGA12B,KAAA02B,IAAA,EACA12B,KAAAoW,OAAA,GAIA,IAAA8kB,EAAAr7B,EAAAQ,MAAAL,KAAAqW,QAAAtZ,GACAiD,KAAAqW,QAAAhN,eAAAL,EAAAhJ,KAAA22B,MAGA32B,KAAA82B,iBAAA11B,IAAAvB,EAAA+C,MAAA5C,KAAA+2B,kBAAAl3B,EAAA8B,IACA3B,KAAAqW,QAAAtZ,EAAAm+B,MAWAnG,EAAAz2B,UAAA68B,YAAA,SAAA1sB,GAEA,GADA7O,GAAAE,EAAAb,OAAA,GAAAe,KAAAw3B,iBACA,GAAAx3B,KAAAw3B,iBAIAx3B,KAAAqL,QAAAkqB,EAAA,CAIAv1B,KAAAmW,UAAA,EACAnW,KAAA02B,IAAA,EACA12B,KAAAoW,OAAA,EAEApW,KAAAy2B,OAAAhoB,EAAAuZ,KACAhoB,KAAAy2B,QAAA,IACAz2B,KAAAy2B,OAAA,GAGAz2B,KAAAmW,UAAA,EAAAnW,KAAAy2B,OAEAhoB,EAAAiZ,EAAA,MAAA1nB,KAAAw2B,sBACAx2B,KAAA02B,IAAAjoB,EAAAiZ,EAAA1nB,KAAAy2B,OACA52B,EAAA8C,IAAA8L,EAAAuY,OAAAvY,EAAAuY,QACApnB,GAAAE,EAAAb,OAAAe,KAAA02B,IAAA,GACA12B,KAAAoW,OAAA,EAAApW,KAAA02B,KAIA,IAAAwE,EAAAr7B,EAAAQ,MAAAL,KAAAqW,QAAAtZ,GACAiD,KAAAqW,QAAAhN,eAAAoF,EAAAuY,OAAAhnB,KAAA22B,MAGA32B,KAAA82B,iBAAA11B,IAAAvB,EAAA+C,MAAA5C,KAAA+2B,kBAAAl3B,EAAA8B,IACA3B,KAAAqW,QAAAtZ,EAAAm+B,OAYAnG,EAAAz2B,UAAA88B,WAAA,SAAAC,EAAAzgB,EAAA0gB,GACAt7B,KAAAqL,QAAAkqB,IAGA+F,GAAA,GAAAt7B,KAAAq2B,aACAr2B,KAAAmZ,UAAA,GAGAnZ,KAAAq2B,cACAr2B,KAAA42B,QAAAx1B,IAAAi6B,GACAr7B,KAAA62B,UAAAh3B,EAAA+C,MAAA/C,EAAA8B,IAAAiZ,EAAA5a,KAAAqW,QAAAtZ,GAAAs+B,MAUAtG,EAAAz2B,UAAAi9B,mBAAA,SAAAF,EAAAC,GACAt7B,KAAAqL,QAAAkqB,IAGA+F,GAAA,GAAAt7B,KAAAq2B,aACAr2B,KAAAmZ,UAAA,GAGAnZ,KAAAq2B,aACAr2B,KAAA42B,QAAAx1B,IAAAi6B,KAWAtG,EAAAz2B,UAAAk9B,YAAA,SAAAC,EAAAH,GACAt7B,KAAAqL,QAAAkqB,IAGA+F,GAAA,GAAAt7B,KAAAq2B,aACAr2B,KAAAmZ,UAAA,GAGAnZ,KAAAq2B,cACAr2B,KAAA62B,UAAA4E,KAaA1G,EAAAz2B,UAAAo9B,mBAAA,SAAAjgB,EAAAb,EAAA0gB,GACAt7B,KAAAqL,QAAAkqB,IAGA+F,GAAA,GAAAt7B,KAAAq2B,aACAr2B,KAAAmZ,UAAA,GAIAnZ,KAAAq2B,cACAr2B,KAAA82B,iBAAAv1B,OAAAvB,KAAAmW,UAAAsF,GACAzb,KAAA+2B,mBAAA/2B,KAAAoW,OAAAvW,EAAA+C,MAAA/C,EAAA8B,IAAAiZ,EAAA5a,KAAAqW,QAAAtZ,GAAA0e,MAWAsZ,EAAAz2B,UAAAq9B,2BAAA,SAAAlgB,EAAA6f,GACAt7B,KAAAqL,QAAAkqB,IAGA+F,GAAA,GAAAt7B,KAAAq2B,aACAr2B,KAAAmZ,UAAA,GAIAnZ,KAAAq2B,aACAr2B,KAAA82B,iBAAAv1B,OAAAvB,KAAAmW,UAAAsF,KAUAsZ,EAAAz2B,UAAAs9B,oBAAA,SAAAngB,EAAA6f,GACAt7B,KAAAqL,QAAAkqB,IAIA+F,GAAA,GAAAt7B,KAAAq2B,aACAr2B,KAAAmZ,UAAA,GAGAnZ,KAAAq2B,cACAr2B,KAAA+2B,mBAAA/2B,KAAAoW,OAAAqF,KAQAsZ,EAAAz2B,UAAAu9B,cAAA,SAAAlyB,GAEA,GAAA3J,KAAAqL,QAAAkqB,GAAA5rB,EAAA0B,QAAAkqB,EACA,SAGA,QAAAuG,EAAA97B,KAAAo3B,YAAiC0E,EAAIA,IAAA7wB,KACrC,GAAA6wB,EAAAhxB,OAAAnB,GACA,GAAAmyB,EAAA/wB,MAAAU,mBACA,SAIA,UAgBAspB,EAAAz2B,UAAAy9B,cAAA,SAAAnuB,EAAAouB,GAGA,GAFAp8B,GAAAE,EAAAb,OAAA,GAAAe,KAAAw3B,iBAEA,GAAAx3B,KAAAw3B,gBACA,YAGA,IAAAyE,EAAA,IAAA/G,EAAAl1B,KAAA4N,EAAAouB,GAEA,GAAAh8B,KAAAgM,cAAAiwB,EAAA7vB,WAAA,CACA,IAAAssB,EAAA14B,KAAAo2B,QAAAuC,aACAsD,EAAA3C,cAAAZ,EAAA14B,KAAA22B,MAeA,OAZAsF,EAAArwB,OAAA5L,KAAAq3B,cACAr3B,KAAAq3B,cAAA4E,EAGAA,EAAAhB,UAAA,GACAj7B,KAAAq4B,gBAKAr4B,KAAAo2B,QAAA8F,aAAAD,EAAA7vB,WAEA6vB,GAcAlH,EAAAz2B,UAAA69B,eAAA,SAAAF,GAGA,GAFAr8B,GAAAE,EAAAb,OAAA,GAAAe,KAAAw3B,iBAEA,GAAAx3B,KAAAw3B,gBAAA,CAIA53B,GAAAE,EAAAb,OAAAg9B,EAAA1e,QAAAvd,MAGA,IAAAo8B,GAAA,EACA,GAAAp8B,KAAAq3B,gBAAA4E,EACAj8B,KAAAq3B,cAAA4E,EAAArwB,OACAwwB,GAAA,OAIA,IADA,IAAAC,EAAAr8B,KAAAq3B,cACA,MAAAgF,GAAA,CACA,GAAAA,EAAAzwB,SAAAqwB,EAAA,CACAI,EAAAzwB,OAAAqwB,EAAArwB,OACAwwB,GAAA,EACA,MAEAC,IAAAzwB,OAKAhM,GAAAE,EAAAb,OAAAm9B,GAIA,IADA,IAAAhW,EAAApmB,KAAA2e,cACAyH,GAAA,CACA,IAAArpB,EAAAqpB,EAAA3U,QACA2U,IAAAnb,KAEA,IAAAyK,EAAA3Y,EAAAqa,cACAzB,EAAA5Y,EAAAsa,cAEA4kB,GAAAvmB,GAAAumB,GAAAtmB,GAGA3V,KAAAo2B,QAAAqC,eAAA17B,GAIA,GAAAiD,KAAAgM,aAAA,CACA,IAAA0sB,EAAA14B,KAAAo2B,QAAAuC,aACAsD,EAAA1C,eAAAb,GAGAuD,EAAA1e,OAAA,KACA0e,EAAArwB,OAAA,KAEA5L,KAAAo2B,QAAAkG,QAAA,iBAAAL,GAGAj8B,KAAAq4B,kBAMAtD,EAAAz2B,UAAA87B,cAAA,SAAA5jB,GACA,OAAA3R,EAAAL,QAAAxE,KAAA22B,KAAAngB,IAMAue,EAAAz2B,UAAAi+B,eAAA,SAAAC,GACA,OAAA74B,EAAAa,QAAAxE,KAAA22B,KAAA3xB,EAAAw3B,IAMAzH,EAAAz2B,UAAAm+B,cAAA,SAAAvC,GACA,OAAAr1B,EAAAD,SAAA5E,KAAA22B,KAAAuD,IAOAnF,EAAAz2B,UAAAo+B,eAAA,SAAAC,GACA,OAAAh5B,EAAAiB,SAAA5E,KAAA22B,KAAA3xB,EAAA23B,qBC5hCAngC,EAAA+D,SAAA,SAAAq8B,GACAA,EAAA,iBAAAA,IAAA,KACA,IAAA/a,EAAA,GACA,QAAA5kB,KAAA+C,KACA,mBAAAA,KAAA/C,IAAA,iBAAA+C,KAAA/C,KACA4kB,GAAA5kB,EAAA,KAAA+C,KAAA/C,GAAA2/B,GAGA,OAAA/a,oBCWAplB,EAAAD,QAAAqgC,EAEavgC,EAAQ,GAArB,IACA0B,EAAa1B,EAAQ,GAGrBuI,GAFcvI,EAAQ,GACXA,EAAQ,GACHA,EAAQ,IAExBuD,GADUvD,EAAQ,GACPA,EAAQ,IAEnBqJ,GADWrJ,EAAQ,IACJA,EAAQ,IACvBoR,EAAYpR,EAAQ,IACpB+wB,EAAgB/wB,EAAQ,IAiBxB,SAAAugC,EAAAjY,EAAAkY,EAAAxP,GACA,KAAAttB,gBAAA68B,GACA,WAAAA,EAAAjY,EAAAkY,GAGAD,EAAAhY,OAAAhoB,KAAAmD,MAEAA,KAAAqL,OAAAwxB,EAAA/X,KACA9kB,KAAA2N,SAAAhI,EAAAS,cACApG,KAAAglB,WAAA,GACAhlB,KAAAklB,QAAA,EACAllB,KAAA+8B,aAAA,KACA/8B,KAAAg9B,aAAA,KACAh9B,KAAAi9B,iBAAA,EACAj9B,KAAAk9B,iBAAA,EACA5P,EAAA,GACAttB,KAAAytB,aAAAH,EACAttB,KAAA2N,UAAA2f,GAEAttB,KAAAytB,aAAA,EAGA7I,KAAA/iB,SACAi7B,EACA98B,KAAAm9B,YAAAvY,GAEA5kB,KAAAo9B,aAAAxY,IAzCAiY,EAAAhY,OAAAnX,EACAmvB,EAAAv+B,UAAAN,EAAA6+B,EAAAhY,OAAAvmB,WAEAu+B,EAAA/X,KAAA,QAsDA+X,EAAAv+B,UAAA6+B,YAAA,SAAAvY,GAUA5kB,KAAAglB,WAAAnjB,OAAA,EACA7B,KAAAklB,QAAAN,EAAA/iB,OAAA,EACA,QAAAnF,EAAA,EAAiBA,EAAAkoB,EAAA/iB,SAAqBnF,EACtCsD,KAAAglB,WAAAtoB,GAAAkoB,EAAAloB,GAAA2D,QAQA,OANAL,KAAAglB,WAAAJ,EAAA/iB,QAAA+iB,EAAA,GAAAvkB,QAEAL,KAAA+8B,aAAA/8B,KAAAglB,WAAAhlB,KAAAklB,QAAA,GACAllB,KAAAg9B,aAAAh9B,KAAAglB,WAAA,GACAhlB,KAAAi9B,iBAAA,EACAj9B,KAAAk9B,iBAAA,EACAl9B,MASA68B,EAAAv+B,UAAA8+B,aAAA,SAAAxY,GAUA5kB,KAAAklB,QAAAllB,KAAAglB,WAAAnjB,OAAA+iB,EAAA/iB,OACA,QAAAnF,EAAA,EAAiBA,EAAAkoB,EAAA/iB,SAAqBnF,EACtCsD,KAAAglB,WAAAtoB,GAAAkoB,EAAAloB,GAAA2D,QAOA,OAJAL,KAAAi9B,iBAAA,EACAj9B,KAAAk9B,iBAAA,EACAl9B,KAAA+8B,aAAA,KACA/8B,KAAAg9B,aAAA,KACAh9B,MAOA68B,EAAAv+B,UAAA++B,eAAA,SAAAC,GACAt9B,KAAA+8B,aAAAO,EACAt9B,KAAAi9B,iBAAA,GAOAJ,EAAAv+B,UAAAi/B,eAAA,SAAAC,GACAx9B,KAAAg9B,aAAAQ,EACAx9B,KAAAk9B,iBAAA,GAMAL,EAAAv+B,UAAAwP,OAAA,WACA,IAAAzN,EAAA,IAAAw8B,EAQA,OAPAx8B,EAAAo9B,YAAAz9B,KAAAglB,YACA3kB,EAAAgL,OAAArL,KAAAqL,OACAhL,EAAAsN,SAAA3N,KAAA2N,SACAtN,EAAA08B,aAAA/8B,KAAA+8B,aACA18B,EAAA28B,aAAAh9B,KAAAg9B,aACA38B,EAAA48B,gBAAAj9B,KAAAi9B,gBACA58B,EAAA68B,gBAAAl9B,KAAAk9B,gBACA78B,GAGAw8B,EAAAv+B,UAAAyP,cAAA,WAEA,OAAA/N,KAAAklB,QAAA,EAAAllB,KAAAklB,QAAA,KAIA2X,EAAAv+B,UAAAo/B,aAAA,SAAAtX,EAAA/X,GAEA+X,EAAA/a,OAAAgiB,EAAAvI,KACAsB,EAAAzY,SAAA3N,KAAA2N,SACAyY,EAAAqH,aAAAztB,KAAAytB,aAEArH,EAAAmH,UAAAvtB,KAAAglB,WAAA3W,GACA+X,EAAAoH,UAAAxtB,KAAAglB,WAAA3W,EAAA,GAEAA,EAAA,GACA+X,EAAAuH,UAAA3tB,KAAAglB,WAAA3W,EAAA,GACA+X,EAAAyH,cAAA,IAEAzH,EAAAuH,UAAA3tB,KAAA+8B,aACA3W,EAAAyH,aAAA7tB,KAAAi9B,iBAGA5uB,EAAArO,KAAAklB,QAAA,GACAkB,EAAAwH,UAAA5tB,KAAAglB,WAAA3W,EAAA,GACA+X,EAAA0H,cAAA,IAEA1H,EAAAwH,UAAA5tB,KAAAg9B,aACA5W,EAAA0H,aAAA9tB,KAAAk9B,kBAIAL,EAAAv+B,UAAA+mB,UAAA,SAAAC,GAEA,OAAAA,EAAAtlB,KAAAklB,QACAllB,KAAAglB,WAAAM,GAEAtlB,KAAAglB,WAAA,IAWA6X,EAAAv+B,UAAA0P,UAAA,SAAA/I,EAAAzG,GACA,GAAAwB,KAAAytB,cAAA,GAAAztB,KAAAklB,QAAA,EACA,SAEA,IAAAN,EAAA5kB,KAAAglB,WACA2Y,EAAA,IAAAtQ,EAAAzI,EAAA,GAAAA,EAAA,GAAA5kB,KAAAytB,cACA,GAAAkQ,EAAA3vB,UAAA/I,EAAAzG,GACA,SAEA,QAAA8nB,EAAAtmB,KAAAklB,QAAAxoB,EAAA,EAAuCA,EAAA4pB,IAAW5pB,EAElD,GADAihC,EAAAvY,KAAAR,EAAAloB,EAAA,GAAAkoB,EAAAloB,IACAihC,EAAA3vB,UAAA/I,EAAAzG,GACA,SAGA,UAGAq+B,EAAAv+B,UAAA2P,QAAA,SAAAC,EAAAC,EAAAlJ,EAAAoJ,GAIA,OADA,IAAAgf,EAAArtB,KAAAqlB,UAAAhX,GAAArO,KAAAqlB,UAAAhX,EAAA,GAAArO,KAAAytB,cACAxf,QAAAC,EAAAC,EAAAlJ,EAAA,IAGA43B,EAAAv+B,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,GAGA,IAAAqW,EAAA7f,EAAAL,QAAAS,EAAAjF,KAAAqlB,UAAAhX,IACAsW,EAAA9f,EAAAL,QAAAS,EAAAjF,KAAAqlB,UAAAhX,EAAA,IAEAE,EAAAuB,cAAA4U,EAAAC,GACApW,EAAA0B,OAAAjQ,KAAA2N,WAMAkvB,EAAAv+B,UAAAkQ,YAAA,SAAAC,EAAAC,GACAD,EAAAuZ,KAAA,EACAvZ,EAAAuY,OAAAnnB,EAAAO,MACAqO,EAAAiZ,EAAA,GAGAmV,EAAAv+B,UAAAqQ,qBAAA,SAAAC,EAAAP,GAEAO,EAAA0b,SAAA,GAAAtqB,KAAAqlB,UAAAhX,GACAO,EAAA0b,SAAA,GAAAtqB,KAAAqlB,UAAAhX,EAAA,GACAO,EAAAoW,WAAApW,EAAA0b,SACA1b,EAAAsW,QAAA,EACAtW,EAAAjB,SAAA3N,KAAA2N,2BCpRA,IAAAsT,EAAY3kB,EAAQ,IACpBA,EAAQ,IACR,IAAAwkB,EAAYxkB,EAAQ,IAEpB2kB,EAAA3iB,UAAAs/B,UAAA,KACA3c,EAAA3iB,UAAA6xB,OAAA,EAEAlP,EAAA3iB,UAAAu/B,OAAA,SAAAC,GACA,GAAA99B,KAAA+9B,SAAA,CAGAjd,EAAAub,OAEA,IAAAv/B,EAAAkD,KAAA6vB,SACAiO,EAAA10B,aAAAtM,EAAAiE,EAAAjE,EAAAkE,EAAAlE,EAAAC,EAAAD,EAAAE,EAAAF,EAAAorB,EAAAprB,EAAAiU,GAGA/Q,KAAAmwB,OAAAnwB,KAAA4vB,KAAAO,QAAAnwB,KAAAwvB,QAAAxvB,KAAAwvB,QAAAW,OAAA,GACA,IAAA1mB,EAAAzJ,KAAA4vB,KAAAM,cAAAlwB,KAAAmwB,OAMA,GAJA2N,EAAAE,aAAAv0B,IACAq0B,EAAAE,YAAAv0B,GAGA,OAAAzJ,KAAA49B,UACA,QAAAlhC,EAAA,EAAAyB,EAAA6B,KAAA49B,UAAA/7B,OAA8CnF,EAAAyB,EAAOzB,IACrDsD,KAAA49B,UAAAlhC,GAAAuhC,KAAAH,GAIAA,EAAAE,aAAAh+B,KAAAmwB,SACA2N,EAAAE,YAAAh+B,KAAAmwB,QAIA,IADA,IAAA+N,EAAAjzB,EAAAjL,KAAAm+B,OACAD,EAAAjzB,GACAA,EAAAizB,EAAAE,MACAF,EAAAL,OAAAC,KAIA7c,EAAA3iB,UAAA+/B,YAAA,KACApd,EAAA3iB,UAAAggC,WAAA,KACArd,EAAA3iB,UAAAigC,WAAA7tB,IAEAuQ,EAAA3iB,UAAAkgC,MAAA,SAAAC,EAAAtb,EAAAub,GACA,GAAA1+B,KAAA+9B,SAAA,CAIAU,EAAAz+B,KAAAu+B,aACAE,EAAAz+B,KAAAu+B,YAGA,IAAAI,GAAA,EAEA,UAAA3+B,KAAAq+B,YACA,QAAA3hC,EAAA,EAAmBA,EAAAsD,KAAAq+B,YAAAx8B,OAA6BnF,IAAA,CAChDokB,EAAA8d,OAEAD,GAAA,IADA3+B,KAAAq+B,YAAA3hC,GACAG,KAAAmD,KAAAy+B,EAAAtb,EAAAub,IAAAC,EAKA,IADA,IAAAT,EAAAjzB,EAAAjL,KAAAm+B,OACAD,EAAAjzB,GACAA,EAAAizB,EAAAE,MACAF,EAAAW,MAAA,WACAF,GAAA,IAAAT,EAAAM,MAAAC,EAAAtb,EAAAub,IAAAC,GAIA,UAAA3+B,KAAAs+B,WACA,IAAA5hC,EAAA,EAAmBA,EAAAsD,KAAAs+B,WAAAz8B,OAA4BnF,IAAA,CAC/CokB,EAAA8d,OAEAD,GAAA,IADA3+B,KAAAs+B,WAAA5hC,GACAG,KAAAmD,KAAAy+B,EAAAtb,EAAAub,IAAAC,EAIA,OAAAA,IAGA1d,EAAA3iB,UAAAsgC,KAAA,SAAAE,EAAAC,GACA,mBAAAD,IAGAC,GACA,OAAA/+B,KAAAq+B,cACAr+B,KAAAq+B,YAAA,IAEAr+B,KAAAq+B,YAAA5c,KAAAqd,KAEA,OAAA9+B,KAAAs+B,aACAt+B,KAAAs+B,WAAA,IAEAt+B,KAAAs+B,WAAA7c,KAAAqd,IAEA9+B,KAAA6+B,MAAA,eAAA7+B,KAAAs+B,YAAAt+B,KAAAs+B,WAAAz8B,OAAA,GACA,OAAA7B,KAAAq+B,aAAAr+B,KAAAq+B,YAAAx8B,OAAA,KAGAof,EAAA3iB,UAAA0gC,OAAA,SAAAF,GAIA,IAAApiC,EAHA,mBAAAoiC,IAIA,OAAA9+B,KAAAq+B,cAAA3hC,EAAAsD,KAAAq+B,YAAAY,QAAAH,KAAA,GACA9+B,KAAAq+B,YAAAa,OAAAxiC,EAAA,GAEA,OAAAsD,KAAAs+B,aAAA5hC,EAAAsD,KAAAs+B,WAAAW,QAAAH,KAAA,GACA9+B,KAAAs+B,WAAAY,OAAAxiC,EAAA,KAIAukB,EAAA3iB,UAAA6gC,QAAA,SAAAhe,EAAAie,GACAp/B,KAAAq/B,WAAAle,EAAAie,IAGAne,EAAA3iB,UAAA+gC,WAAA,SAAAle,EAAAie,GACA,SAAAE,EAAA1hC,GACA,MAAAwhC,GAAAxhC,GAAA,GAIA,SAHAoC,KAAAg/B,OAAAM,GACAne,EAAAtkB,KAAAmD,MAMA,OADAA,KAAA4+B,KAAAU,GACAA,GAGAre,EAAA3iB,UAAAihC,aAAA,SAAAD,GACAt/B,KAAAg/B,OAAAM,qBC/GA7iC,EAAAD,QAAA04B,EAEa54B,EAAQ,GAArB,IACA04B,EAAc14B,EAAQ,GAGtBuD,GADWvD,EAAQ,GACRA,EAAQ,IAEnB0S,EAAW1S,EAAQ,IAsBnBkjC,EAAA,CACArzB,SAAA,KACAuL,SAAA,GACAI,YAAA,EACApJ,QAAA,EACAkK,UAAA,EACA3M,QAAA,EAEAwzB,iBAAA,EACAC,mBAAA,EACAC,eAAA,OAMA,SAAAC,EAAA3D,EAAA5tB,GACArO,KAAAuO,KAAA,IAAAS,EACAhP,KAAAi8B,UACAj8B,KAAAqO,aACArO,KAAAg5B,QAYA,SAAA9D,EAAA9R,EAAAxV,EAAA1C,GA+BA,GA9BA0C,SACA1C,EAAA0C,EACAA,WAEG,iBAAA1C,IACHA,EAAA,CAAWwD,QAAAxD,IAGXA,EAAA8pB,EAAA9pB,EAAAs0B,GAEAx/B,KAAAud,OAAA6F,EAEApjB,KAAA2S,WAAAzH,EAAAwM,SACA1X,KAAA6S,cAAA3H,EAAA4M,YACA9X,KAAAi7B,UAAA/vB,EAAAwD,QACA1O,KAAA6/B,WAAA30B,EAAA0N,SACA5Y,KAAAgM,aAAAd,EAAAe,OAEAjM,KAAA8/B,mBAAA50B,EAAAu0B,iBACAz/B,KAAA+/B,qBAAA70B,EAAAw0B,mBACA1/B,KAAAggC,iBAAA90B,EAAAy0B,eAGA3/B,KAAAigC,QAAAryB,EAEA5N,KAAA4L,OAAA,KAEA5L,KAAA+4B,UAAA,GACA/4B,KAAA64B,aAAA,EAEA74B,KAAAgM,aAEA,IADA,IAAAk0B,EAAAlgC,KAAA64B,aAAA74B,KAAAigC,QAAAlyB,gBACArR,EAAA,EAAmBA,EAAAwjC,IAAgBxjC,EACnCsD,KAAA+4B,UAAAr8B,GAAA,IAAAkjC,EAAA5/B,KAAAtD,GAIAsD,KAAAkM,WAAAhB,EAAAiB,SAOA+oB,EAAA52B,UAAAiO,QAAA,WACA,OAAAvM,KAAAigC,QAAA1zB,WAQA2oB,EAAA52B,UAAAuX,SAAA,WACA,OAAA7V,KAAAigC,SAMA/K,EAAA52B,UAAAsa,SAAA,WACA,OAAA5Y,KAAA6/B,YAMA3K,EAAA52B,UAAA6hC,UAAA,SAAArnB,GACAA,GAAA9Y,KAAA6/B,aACA7/B,KAAAud,OAAApE,UAAA,GACAnZ,KAAA6/B,WAAA/mB,IAeAoc,EAAA52B,UAAAqO,YAAA,WACA,OAAA3M,KAAAkM,YAMAgpB,EAAA52B,UAAAsO,YAAA,SAAAC,GACA7M,KAAAkM,WAAAW,GAOAqoB,EAAA52B,UAAAyX,QAAA,WACA,OAAA/V,KAAAud,QAMA2X,EAAA52B,UAAAoO,QAAA,WACA,OAAA1M,KAAA4L,QAMAspB,EAAA52B,UAAA8hC,WAAA,WACA,OAAApgC,KAAAi7B,WAOA/F,EAAA52B,UAAA+hC,WAAA,SAAA3xB,GAEA1O,KAAAi7B,UAAAvsB,GAMAwmB,EAAA52B,UAAAqZ,YAAA,WACA,OAAA3X,KAAA2S,YAOAuiB,EAAA52B,UAAAmZ,YAAA,SAAAC,GACA1X,KAAA2S,WAAA+E,GAMAwd,EAAA52B,UAAAyZ,eAAA,WACA,OAAA/X,KAAA6S,eAOAqiB,EAAA52B,UAAAuZ,eAAA,SAAAC,GACA9X,KAAA6S,cAAAiF,GAMAod,EAAA52B,UAAA0P,UAAA,SAAAxP,GACA,OAAAwB,KAAAigC,QAAAjyB,UAAAhO,KAAAud,OAAAjU,eAAA9K,IAMA02B,EAAA52B,UAAA2P,QAAA,SAAAC,EAAAC,EAAAE,GACA,OAAArO,KAAAigC,QAAAhyB,QAAAC,EAAAC,EAAAnO,KAAAud,OAAAjU,eAAA+E,IAQA6mB,EAAA52B,UAAA08B,YAAA,SAAAvsB,GACAzO,KAAAigC,QAAAzxB,YAAAC,EAAAzO,KAAAi7B,YAOA/F,EAAA52B,UAAAgiC,QAAA,SAAAjyB,GAEA,OAAArO,KAAA+4B,UAAA1qB,GAAAE,MAQA2mB,EAAA52B,UAAAiiC,WAAA,SAAAlyB,GACA,OAAArO,KAAA+4B,UAAA1qB,GAAA2qB,SAMA9D,EAAA52B,UAAAg7B,cAAA,SAAAZ,EAAAzzB,GACA,GAAAjF,KAAAgM,aAAA,CAIA0sB,KAAA14B,KAAAud,OAAAma,WAAAiB,aACA1zB,KAAAjF,KAAAud,OAAAjU,eAEA,QAAA5M,EAAA,EAAiBA,EAAAsD,KAAA64B,eAAuBn8B,EAAA,CACxC,IAAAkS,EAAA5O,KAAA+4B,UAAAr8B,GACAg8B,EAAA8H,aAAA5xB,EAAAoqB,SACApqB,EAAAoqB,QAAA,KAGAh5B,KAAA+4B,UAAAl3B,OAAA7B,KAAA64B,aAAA74B,KAAAigC,QAAAlyB,gBAGA,IAAArR,EAAA,EAAiBA,EAAAsD,KAAA64B,eAAuBn8B,EAAA,CACxCkS,EAAA5O,KAAA+4B,UAAAr8B,GAAAsD,KAAA+4B,UAAAr8B,IAAA,IAAAkjC,EAAA5/B,KAAAtD,GACAsD,KAAAigC,QAAA3xB,YAAAM,EAAAL,KAAAtJ,EAAAvI,GACAkS,EAAAoqB,QAAAN,EAAA+H,YAAA7xB,EAAAL,KAAAK,MAIAsmB,EAAA52B,UAAAi7B,eAAA,SAAAb,GAEA,QAAAh8B,EAAA,EAAiBA,EAAAsD,KAAA64B,eAAuBn8B,EAAA,CACxC,IAAAkS,EAAA5O,KAAA+4B,UAAAr8B,GACAg8B,EAAA8H,aAAA5xB,EAAAoqB,SACApqB,EAAAoqB,QAAA,KAGAh5B,KAAA64B,aAAA,GAOA3D,EAAA52B,UAAAo7B,YAAA,SAAAhB,EAAAgI,EAAAC,GACA,GAAA3gC,KAAAgM,aAIA,QAAAtP,EAAA,EAAiBA,EAAAsD,KAAA64B,eAAuBn8B,EAAA,CACxC,IAAAkS,EAAA5O,KAAA+4B,UAAAr8B,GAGAkkC,EAAA,IAAA5xB,EACA6xB,EAAA,IAAA7xB,EACAhP,KAAAigC,QAAA3xB,YAAAsyB,EAAAF,EAAA9xB,EAAAP,YACArO,KAAAigC,QAAA3xB,YAAAuyB,EAAAF,EAAA/xB,EAAAP,YAEAO,EAAAL,KAAAzL,QAAA89B,EAAAC,GAEA,IAAAC,EAAAjhC,EAAA8B,IAAAg/B,EAAAniC,EAAAkiC,EAAAliC,GAEAk6B,EAAAqI,UAAAnyB,EAAAoqB,QAAApqB,EAAAL,KAAAuyB,KASA5L,EAAA52B,UAAA0iC,cAAA,SAAAC,GACAjhC,KAAA8/B,mBAAAmB,EAAAC,WACAlhC,KAAA+/B,qBAAAkB,EAAAE,aACAnhC,KAAAggC,iBAAAiB,EAAAG,SACAphC,KAAAqhC,YAGAnM,EAAA52B,UAAAgjC,oBAAA,WACA,OAAAthC,KAAA8/B,oBAGA5K,EAAA52B,UAAAijC,sBAAA,WACA,OAAAvhC,KAAA+/B,sBAGA7K,EAAA52B,UAAAkjC,kBAAA,WACA,OAAAxhC,KAAAggC,kBAOA9K,EAAA52B,UAAA+iC,SAAA,WACA,SAAArhC,KAAAud,QAAAvd,KAAAgM,aAAA,CAMA,IADA,IAAAoa,EAAApmB,KAAAud,OAAAsa,iBACAzR,GAAA,CACA,IAAA3U,EAAA2U,EAAA3U,QACAiE,EAAAjE,EAAA2F,cACAzB,EAAAlE,EAAA4F,cACA3B,GAAA1V,MAAA2V,GAAA3V,MACAyR,EAAA+F,mBAGA4O,IAAAnb,KAGA,IAAAkrB,EAAAn2B,KAAAud,OAAAma,WAEA,SAAAvB,EAMA,IADA,IAAAuC,EAAAvC,EAAAwC,aACAj8B,EAAA,EAAiBA,EAAAsD,KAAA64B,eAAuBn8B,EACxCg8B,EAAAI,WAAA94B,KAAA+4B,UAAAr8B,GAAAs8B,WAiBA9D,EAAA52B,UAAAu9B,cAAA,SAAAlyB,GAEA,OAAAA,EAAAm2B,oBAAA9/B,KAAA8/B,oBAAA,GAAAn2B,EAAAm2B,mBACAn2B,EAAAm2B,mBAAA,EAGA,IAAAn2B,EAAAq2B,iBAAAhgC,KAAA+/B,uBACA,IAAAp2B,EAAAo2B,qBAAA//B,KAAAggC,mBASA9K,EAAA52B,UAAA8N,SAAA,WACA,OAAApM,KAAAgM,cAQAkpB,EAAA52B,UAAA+N,UAAA,SAAAC,GACA,GAAAA,GAAAtM,KAAAgM,aAAA,CAIAhM,KAAAgM,eAAAM,EACA,IAAA8W,EAAApjB,KAAAud,OAEAvd,KAAAgM,aACAhM,KAAAs5B,cAAAlW,EAAAsU,WAAAiB,aAAAvV,EAAA9Z,gBAEAtJ,KAAAu5B,eAAAnW,EAAAsU,WAAAiB,gBAeAzD,EAAA52B,UAAAmjC,cAAA,SAAAjjB,GACA,GAAAxe,KAAAgM,cAAA,GAAAhM,KAAA64B,aAAA,CAGA,IAAA1C,EAAAn2B,KAAAud,OAAAma,WACA,SAAAvB,EAAA,CAGA,GAAAn2B,KAAA0hC,gBAAAxM,EAAA52B,UAAAojC,eAAA,CACA,IAAAC,EAAA3hC,KACAA,KAAA0hC,eAAA,SAAAzF,EAAArtB,GACAsmB,EAAA52B,UAAAojC,eAAA7kC,KAAA8kC,EAAA1F,EAAArtB,IAGA5O,KAAA4hC,UAAA,GACA5hC,KAAA6hC,iBAAArjB,EACAxe,KAAA8hC,WAAA9hC,KAAAud,OAAAjU,eACA,QAAA5M,EAAA,EAAiBA,EAAAsD,KAAA64B,eAAuBn8B,EACxCsD,KAAA+hC,YAAArlC,EACAy5B,EAAA6L,UAAAhiC,KAAA+4B,UAAAr8B,GAAA6R,KAAAvO,KAAA0hC,gBAEA1hC,KAAA8hC,WAAA9hC,KAAA+hC,YAAA/hC,KAAA4hC,UAAA5hC,KAAA6hC,iBAAArjB,EAAA,QAMA0W,EAAA52B,UAAAojC,eAAA,SAAAzF,EAAArtB,GACA,GAAAqtB,GAAAj8B,KACA,SAEA,IAAAkZ,EAAA+iB,EAAAlD,UAAA,GAAAC,QACA,SAAAh5B,KAAA4hC,UAAA1oB,IACAlZ,KAAAigC,QAAApxB,YAAA7O,KAAA8hC,WAAA9hC,KAAA+hC,YAAA9F,EAAAgE,QAAAhE,EAAA1e,OAAAjU,eAAAsF,EAAAP,eAGArO,KAAA4hC,UAAA1oB,IAAA,EACAlZ,KAAA6hC,iBAAA5F,sBCreAx/B,EAAAD,QAAAylC,EAEA,IAAAjN,EAAc14B,EAAQ,GAEtBuD,GADavD,EAAQ,GACVA,EAAQ,IACnB4lC,EAAiB5lC,EAAQ,IACzB6lC,EAAa7lC,EAAQ,IACrBy4B,EAAWz4B,EAAQ,IACnBoV,EAAcpV,EAAQ,IActB8lC,EAAA,CACAC,QAAAxiC,EAAAI,OACAg2B,YAAA,EACApf,cAAA,EACAyrB,mBAAA,EACAC,aAAA,EACA7lB,YAAA,EACA8lB,mBAAA,EACAC,mBAAA,GAMA,SAAAR,EAAA/2B,GACA,KAAAlL,gBAAAiiC,GACA,WAAAA,EAAA/2B,GAGAA,GAAArL,EAAAa,QAAAwK,KACAA,EAAA,CAAWm3B,QAAAn3B,IAGXA,EAAA8pB,EAAA9pB,EAAAk3B,GAEApiC,KAAA0iC,SAAA,IAAAP,EAAAniC,MAEAA,KAAA24B,aAAA,IAAAuJ,EAEAliC,KAAA2e,cAAA,KACA3e,KAAA2iC,eAAA,EAEA3iC,KAAA4iC,WAAA,KACA5iC,KAAA6iC,YAAA,EAEA7iC,KAAAo3B,YAAA,KACAp3B,KAAA8iC,aAAA,EAEA9iC,KAAA+iC,gBAAA,EAEA/iC,KAAAgjC,aAAA93B,EAAA+qB,WACAj2B,KAAAijC,UAAApjC,EAAAQ,MAAA6K,EAAAm3B,SAEAriC,KAAAkjC,eAAA,EACAljC,KAAAk8B,cAAA,EACAl8B,KAAAmjC,UAAA,EAGAnjC,KAAAojC,eAAAl4B,EAAA2L,aACA7W,KAAAqjC,oBAAAn4B,EAAAo3B,kBACAtiC,KAAAsjC,cAAAp4B,EAAAq3B,YAEAviC,KAAAujC,aAAAr4B,EAAAwR,WACA1c,KAAAwjC,qBAAAt4B,EAAAs3B,mBACAxiC,KAAAyjC,qBAAAv4B,EAAAu3B,mBAEAziC,KAAA0jC,IAAA,EAEA1jC,KAAA2jC,YAAA,EAGA3jC,KAAA4jC,QAAA5jC,KAAA6jC,cAAA3lC,KAAA8B,MASAiiC,EAAA3jC,UAAAwlC,YAAA,WACA,OAAA9jC,KAAA4iC,YASAX,EAAA3jC,UAAAs5B,aAAA,WACA,OAAA53B,KAAAo3B,aAYA6K,EAAA3jC,UAAAu5B,eAAA,WACA,OAAA73B,KAAA2e,eAGAsjB,EAAA3jC,UAAAylC,aAAA,WACA,OAAA/jC,KAAA6iC,aAGAZ,EAAA3jC,UAAA0lC,cAAA,WACA,OAAAhkC,KAAA8iC,cAMAb,EAAA3jC,UAAA2lC,gBAAA,WACA,OAAAjkC,KAAA2iC,gBAMAV,EAAA3jC,UAAA4lC,WAAA,SAAA7B,GACAriC,KAAAijC,UAAAZ,GAMAJ,EAAA3jC,UAAA6lC,WAAA,WACA,OAAAnkC,KAAAijC,WAMAhB,EAAA3jC,UAAAm5B,SAAA,WACA,OAAAz3B,KAAAmjC,UAMAlB,EAAA3jC,UAAA8lC,iBAAA,SAAA93B,GACA,GAAAA,GAAAtM,KAAAgjC,eAIAhjC,KAAAgjC,aAAA12B,EACA,GAAAtM,KAAAgjC,cACA,QAAAhiC,EAAAhB,KAAA4iC,WAAiC5hC,EAAGA,IAAA4K,OACpC5K,EAAAmY,UAAA,IAKA8oB,EAAA3jC,UAAA+lC,iBAAA,WACA,OAAArkC,KAAAgjC,cAMAf,EAAA3jC,UAAAgmC,gBAAA,SAAAh4B,GACAtM,KAAAojC,eAAA92B,GAGA21B,EAAA3jC,UAAAimC,gBAAA,WACA,OAAAvkC,KAAAojC,gBAMAnB,EAAA3jC,UAAAkmC,qBAAA,SAAAl4B,GACAtM,KAAAqjC,oBAAA/2B,GAGA21B,EAAA3jC,UAAAmmC,qBAAA,WACA,OAAAzkC,KAAAqjC,qBAMApB,EAAA3jC,UAAAomC,eAAA,SAAAp4B,GACAtM,KAAAsjC,cAAAh3B,GAGA21B,EAAA3jC,UAAAqmC,eAAA,WACA,OAAA3kC,KAAAsjC,eAMArB,EAAA3jC,UAAAsmC,mBAAA,SAAAt4B,GACAtM,KAAAkjC,cAAA52B,GAMA21B,EAAA3jC,UAAAumC,mBAAA,WACA,OAAA7kC,KAAAkjC,eAcAjB,EAAA3jC,UAAAwmC,YAAA,WACA,QAAA1hB,EAAApjB,KAAA4iC,WAAkCxf,EAAMA,IAAA1W,UACxC0W,EAAAwT,QAAAh2B,UACAwiB,EAAAyT,SAAA,GAoBAoL,EAAA3jC,UAAA0jC,UAAA,SAAAzzB,EAAAw2B,GAEA9C,EAAA+C,uBAAAD,EACA/kC,KAAA24B,aAAAsM,MAAA12B,EAAAvO,KAAAklC,oBACAjD,EAAA+C,uBAAA,MAOA/C,EAAA3jC,UAAA4mC,mBAAA,SAAAlM,EAAApqB,GACA,OAAAqzB,EAAA+C,uBAAAp2B,EAAAqtB,QAAArtB,IAiCAqzB,EAAA3jC,UAAA2P,QAAA,SAAAk3B,EAAAC,EAAAC,GACA,GAAArlC,KAAAslC,kBAAArD,EAAA3jC,UAAAgnC,iBAAA,CACA,IAAA3D,EAAA3hC,KACAA,KAAAslC,iBAAA,SAAAn3B,EAAA6qB,EAAApqB,GACAqzB,EAAA3jC,UAAAgnC,iBAAAzoC,KAAA8kC,EAAAxzB,EAAA6qB,EAAApqB,IAGA5O,KAAAulC,MAAA,GACAvlC,KAAAglC,uBAAAK,EACArlC,KAAA24B,aAAA1qB,QAAA,KAAAjO,KAAAslC,iBAAAH,EAAAC,EAAA,GACAplC,KAAAulC,MAAAvlC,KAAAglC,uBAAAK,EAAA,MAOApD,EAAA3jC,UAAAgnC,iBAAA,SAAAn3B,EAAA6qB,EAAApqB,GACA,IAAAqtB,EAAArtB,EAAAqtB,QACA/iB,EAAA+iB,EAAAsE,WAAA,GACA,GAAAvgC,KAAAulC,MAAArsB,GACA,OAAA/K,EAAAiD,YAEA,IAAAkU,EAAA1W,EAAAP,WACAH,EAAA,GAEA,GADA+tB,EAAAhuB,QAAAC,EAAAC,EAAAmX,GACA,CACAtlB,KAAAulC,MAAArsB,IAAA,EACA,IAAA7H,EAAAnD,EAAAmD,SACAuJ,EAAAzM,EAAAyC,GAAAhP,IAAA,EAAAyP,GAAAjQ,IAAA+M,EAAA0C,GAAAjP,IAAAyP,IACA,OAAArR,KAAAglC,uBAAA/I,EAAArhB,EAAA1M,EAAAhM,OAAAmP,GAEA,OAAAlD,EAAAiD,aAMA6wB,EAAA3jC,UAAAknC,cAAA,WACA,OAAAxlC,KAAA24B,aAAA6M,iBAMAvD,EAAA3jC,UAAAmnC,cAAA,WACA,OAAAzlC,KAAA24B,aAAA8M,iBAQAxD,EAAA3jC,UAAAonC,eAAA,WACA,OAAA1lC,KAAA24B,aAAA+M,kBASAzD,EAAA3jC,UAAAqnC,eAAA,WACA,OAAA3lC,KAAA24B,aAAAgN,kBASA1D,EAAA3jC,UAAA8O,YAAA,SAAAC,GAEA,IAAArN,KAAAmjC,SAAA,CAIA,QAAAniC,EAAAhB,KAAA4iC,WAA+B5hC,EAAGA,IAAA4K,OAClC5K,EAAA21B,KAAAn4B,EAAAmD,IAAA0L,GACArM,EAAAqV,QAAAnN,GAAAvH,IAAA0L,GACArM,EAAAqV,QAAAtZ,EAAA4E,IAAA0L,GAGA,QAAAoJ,EAAAzW,KAAAo3B,YAAgC3gB,EAAGA,IAAA7K,OACnC6K,EAAArJ,YAAAC,GAGArN,KAAA24B,aAAAvrB,YAAAC,KAYA40B,EAAA3jC,UAAAsnC,WAAA,SAAA16B,EAAAtH,GAEA,GAAA5D,KAAAy3B,WACA,YAGAvsB,GAAArL,EAAAa,QAAAwK,KACAA,EAAA,CACApG,SAAAoG,EACAtH,UAIA,IAAAwf,EAAA,IAAA2R,EAAA/0B,KAAAkL,GAWA,OARAkY,EAAAzX,OAAA,KACAyX,EAAAxX,OAAA5L,KAAA4iC,WACA5iC,KAAA4iC,aACA5iC,KAAA4iC,WAAAj3B,OAAAyX,GAEApjB,KAAA4iC,WAAAxf,IACApjB,KAAA6iC,YAEAzf,GAGA6e,EAAA3jC,UAAAunC,kBAAA,SAAA36B,EAAAtH,GAOA,OANAsH,EAEGrL,EAAAa,QAAAwK,KACHA,EAAA,CAAWpG,SAAAoG,EAAAtH,UAFXsH,EAAA,GAIAA,EAAAoL,KAAA,UACAtW,KAAA4lC,WAAA16B,IAGA+2B,EAAA3jC,UAAAwnC,oBAAA,SAAA56B,EAAAtH,GAOA,OANAsH,EAEGrL,EAAAa,QAAAwK,KACHA,EAAA,CAAWpG,SAAAoG,EAAAtH,UAFXsH,EAAA,GAIAA,EAAAoL,KAAA,YACAtW,KAAA4lC,WAAA16B,IAaA+2B,EAAA3jC,UAAAynC,YAAA,SAAA/kC,GAGA,IAAAhB,KAAAy3B,WAAA,CAIA,GAAAz2B,EAAAs2B,YACA,SAKA,IADA,IAAA0O,EAAAhlC,EAAAo2B,YACA4O,GAAA,CACA,IAAAC,EAAAD,EACAA,IAAA/6B,KAEAjL,KAAAs8B,QAAA,eAAA2J,EAAAl7B,OACA/K,KAAAkmC,aAAAD,EAAAl7B,OAEA/J,EAAAo2B,YAAA4O,EAEAhlC,EAAAo2B,YAAA,KAIA,IADA,IAAAmB,EAAAv3B,EAAA2d,cACA4Z,GAAA,CACA,IAAAC,EAAAD,EACAA,IAAAttB,KAEAjL,KAAAy4B,eAAAD,EAAA/mB,SAEAzQ,EAAA2d,cAAA4Z,EAEAv3B,EAAA2d,cAAA,KAIA,IADA,IAAA5N,EAAA/P,EAAAq2B,cACAtmB,GAAA,CACA,IAAAo1B,EAAAp1B,EACAA,IAAAnF,OAEA5L,KAAAs8B,QAAA,iBAAA6J,GACAA,EAAA5M,eAAAv5B,KAAA24B,cAEA33B,EAAAq2B,cAAAtmB,EAuBA,OArBA/P,EAAAq2B,cAAA,KAGAr2B,EAAA2K,SACA3K,EAAA2K,OAAAC,OAAA5K,EAAA4K,QAGA5K,EAAA4K,SACA5K,EAAA4K,OAAAD,OAAA3K,EAAA2K,QAGA3K,GAAAhB,KAAA4iC,aACA5iC,KAAA4iC,WAAA5hC,EAAA4K,QAGA5K,EAAAs2B,aAAA,IAEAt3B,KAAA6iC,YAEA7iC,KAAAs8B,QAAA,cAAAt7B,IAEA,IAaAihC,EAAA3jC,UAAA8nC,YAAA,SAAAr7B,GAIA,GAAA/K,KAAAy3B,WACA,YA8BA,GA1BA1sB,EAAAY,OAAA,KACAZ,EAAAa,OAAA5L,KAAAo3B,YACAp3B,KAAAo3B,cACAp3B,KAAAo3B,YAAAzrB,OAAAZ,GAEA/K,KAAAo3B,YAAArsB,IACA/K,KAAA8iC,aAGA/3B,EAAAc,QAAAd,QACAA,EAAAc,QAAAf,MAAAC,EAAAQ,QACAR,EAAAc,QAAAb,KAAA,KACAD,EAAAc,QAAAZ,KAAAF,EAAAO,QAAA8rB,YACArsB,EAAAO,QAAA8rB,cACArsB,EAAAO,QAAA8rB,YAAApsB,KAAAD,EAAAc,SACAd,EAAAO,QAAA8rB,YAAArsB,EAAAc,QAEAd,EAAAe,QAAAf,QACAA,EAAAe,QAAAhB,MAAAC,EAAAO,QACAP,EAAAe,QAAAd,KAAA,KACAD,EAAAe,QAAAb,KAAAF,EAAAQ,QAAA6rB,YACArsB,EAAAQ,QAAA6rB,cACArsB,EAAAQ,QAAA6rB,YAAApsB,KAAAD,EAAAe,SACAf,EAAAQ,QAAA6rB,YAAArsB,EAAAe,QAGA,GAAAf,EAAAU,mBACA,QAAA2a,EAAArb,EAAAQ,QAAAssB,iBAAmDzR,EAAMA,IAAAnb,KACzDmb,EAAAtb,OAAAC,EAAAO,SAGA8a,EAAA3U,QAAA+F,mBAOA,OAAAzM,GASAk3B,EAAA3jC,UAAA4nC,aAAA,SAAAn7B,GAEA,IAAA/K,KAAAy3B,WAAA,CAKA1sB,EAAAY,SACAZ,EAAAY,OAAAC,OAAAb,EAAAa,QAGAb,EAAAa,SACAb,EAAAa,OAAAD,OAAAZ,EAAAY,QAGAZ,GAAA/K,KAAAo3B,cACAp3B,KAAAo3B,YAAArsB,EAAAa,QAIA,IAAAT,EAAAJ,EAAAO,QACAF,EAAAL,EAAAQ,QA0CA,GAvCAJ,EAAAgO,UAAA,GACA/N,EAAA+N,UAAA,GAGApO,EAAAc,QAAAb,OACAD,EAAAc,QAAAb,KAAAC,KAAAF,EAAAc,QAAAZ,MAGAF,EAAAc,QAAAZ,OACAF,EAAAc,QAAAZ,KAAAD,KAAAD,EAAAc,QAAAb,MAGAD,EAAAc,SAAAV,EAAAisB,cACAjsB,EAAAisB,YAAArsB,EAAAc,QAAAZ,MAGAF,EAAAc,QAAAb,KAAA,KACAD,EAAAc,QAAAZ,KAAA,KAGAF,EAAAe,QAAAd,OACAD,EAAAe,QAAAd,KAAAC,KAAAF,EAAAe,QAAAb,MAGAF,EAAAe,QAAAb,OACAF,EAAAe,QAAAb,KAAAD,KAAAD,EAAAe,QAAAd,MAGAD,EAAAe,SAAAV,EAAAgsB,cACAhsB,EAAAgsB,YAAArsB,EAAAe,QAAAb,MAGAF,EAAAe,QAAAd,KAAA,KACAD,EAAAe,QAAAb,KAAA,OAGAjL,KAAA8iC,aAGA,GAAA/3B,EAAAU,mBAEA,IADA,IAAA2a,EAAAhb,EAAAysB,iBACAzR,GACAA,EAAAtb,OAAAK,GAGAib,EAAA3U,QAAA+F,mBAGA4O,IAAAnb,KAIAjL,KAAAs8B,QAAA,eAAAvxB,KAGA,IAAAs7B,EAAA,IAAAlE,EAAAmE,SAYArE,EAAA3jC,UAAAiP,KAAA,SAAAg5B,EAAA/D,EAAAC,GA+BA,IA7BA,EAAAD,SAEAA,EAAA,GAGAA,KAAAxiC,KAAAwjC,qBACAf,KAAAziC,KAAAyjC,qBAGAzjC,KAAA2jC,cAGA3jC,KAAAk8B,eACAl8B,KAAAwmC,kBACAxmC,KAAAk8B,cAAA,GAGAl8B,KAAAmjC,UAAA,EAEAkD,EAAA1W,MAAA4W,GACAF,EAAA7D,qBACA6D,EAAA5D,qBACA4D,EAAAxvB,aAAA7W,KAAAojC,eACAiD,EAAA3pB,WAAA1c,KAAAujC,aAGAvjC,KAAAymC,iBAGAzmC,KAAA+iC,gBAAAwD,EAAA,GACAvmC,KAAA0iC,SAAAgE,WAAAL,GAGA,QAAArlC,EAAAhB,KAAA4iC,WAAiC5hC,EAAGA,IAAA0L,UAEpC,GAAA1L,EAAA+K,eAIA/K,EAAA82B,YAKA92B,EAAAs3B,uBAGAt4B,KAAAwmC,kBAIAxmC,KAAAqjC,qBAAAkD,EAAA,GACAvmC,KAAA0iC,SAAAiE,cAAAN,GAGArmC,KAAAkjC,eACAljC,KAAA8kC,cAGA9kC,KAAAmjC,UAAA,GAMAlB,EAAA3jC,UAAAkoC,gBAAA,WACAxmC,KAAA24B,aAAAiO,YAAA5mC,KAAA4jC,UASA3B,EAAA3jC,UAAAulC,cAAA,SAAAlb,EAAAC,GACA,IAAAlT,EAAAiT,EAAAsT,QACAtmB,EAAAiT,EAAAqT,QAEArqB,EAAA+W,EAAAta,WACAyD,EAAA8W,EAAAva,WAEAlD,EAAAuK,EAAAK,UACA3K,EAAAuK,EAAAI,UAGA,GAAA5K,GAAAC,EAAA,CAQA,IADA,IAAAgb,EAAAhb,EAAAysB,iBACAzR,GAAA,CACA,GAAAA,EAAAtb,OAAAK,EAAA,CACA,IAAAwG,EAAAyU,EAAA3U,QAAA2F,cACAvF,EAAAuU,EAAA3U,QAAA4F,cACA+C,EAAAgM,EAAA3U,QAAA6F,iBACAgD,EAAA8L,EAAA3U,QAAA8F,iBAEA,GAAA5F,GAAA+D,GAAA7D,GAAA8D,GAAAyE,GAAAxI,GAAA0I,GAAAxI,EAEA,OAGA,GAAAH,GAAAgE,GAAA9D,GAAA6D,GAAA0E,GAAAtI,GAAAwI,GAAA1I,EAEA,OAIAwU,IAAAnb,KAGA,MAAAG,EAAAywB,cAAA1wB,IAGA,GAAAwK,EAAAkmB,cAAAnmB,GAAA,CAKA,IAAAjE,EAAAC,EAAA1T,OAAA0X,EAAA9D,EAAA+D,EAAA7D,GACA,MAAAL,IAKAA,EAAA9F,OAAA,KACA,MAAA3L,KAAA2e,gBACAlN,EAAA7F,OAAA5L,KAAA2e,cACA3e,KAAA2e,cAAAhT,OAAA8F,GAEAzR,KAAA2e,cAAAlN,IAEAzR,KAAA2iC,mBAMAV,EAAA3jC,UAAAmoC,eAAA,WAGA,IADA,IAAA1pC,EAAA8pC,EAAA7mC,KAAA2e,cACA5hB,EAAA8pC,GAAA,CACAA,EAAA9pC,EAAA2P,UACA,IAAAgJ,EAAA3Y,EAAAqa,cACA,GAAA1B,EAAAtJ,WAAA,CAIA,IAAAuJ,EAAA5Y,EAAAsa,cACA,GAAA1B,EAAAvJ,WAAA,CAIA,IAAAjB,EAAAuK,EAAAK,UACA,GAAA5K,EAAAiB,WAAA,CAIA,IAAAhB,EAAAuK,EAAAI,UACA,GAAA3K,EAAAgB,WAAA,CAIA,IAAAwF,EAAA7U,EAAAua,iBACAxF,EAAA/U,EAAAwa,iBAGA,GAAAxa,EAAAmW,aAAA,CACA,MAAA9H,EAAAywB,cAAA1wB,GAAA,CACAnL,KAAAy4B,eAAA17B,GACA,SAGA,MAAA4Y,EAAAkmB,cAAAnmB,GAAA,CACA1V,KAAAy4B,eAAA17B,GACA,SAIAA,EAAAmW,cAAA,EAGA,IAAA4zB,EAAA37B,EAAAkuB,YAAAluB,EAAA2sB,WACAiP,EAAA37B,EAAAiuB,YAAAjuB,EAAA0sB,WAGA,MAAAgP,GAAA,GAAAC,EAAA,CAIA,IAAAC,EAAAtxB,EAAAqjB,UAAAnnB,GAAAonB,QACAiO,EAAAtxB,EAAAojB,UAAAjnB,GAAAknB,QAIA,GAHAh5B,KAAA24B,aAAA9pB,YAAAm4B,EAAAC,GASAlqC,EAAAwb,OAAAvY,MALAA,KAAAy4B,eAAA17B,SApCAiD,KAAAy4B,eAAA17B,QALAiD,KAAAy4B,eAAA17B,QALAiD,KAAAy4B,eAAA17B,QALAiD,KAAAy4B,eAAA17B,KA+DAklC,EAAA3jC,UAAAm6B,eAAA,SAAAhnB,GACAC,EAAAkN,QAAAnN,EAAAzR,MAGAyR,EAAA9F,SACA8F,EAAA9F,OAAAC,OAAA6F,EAAA7F,QAEA6F,EAAA7F,SACA6F,EAAA7F,OAAAD,OAAA8F,EAAA9F,QAEA8F,GAAAzR,KAAA2e,gBACA3e,KAAA2e,cAAAlN,EAAA7F,UAGA5L,KAAA2iC,gBAGAV,EAAA3jC,UAAA4oC,WAAA,KAQAjF,EAAA3jC,UAAA6oC,GAAA,SAAAlqC,EAAAub,GACA,uBAAAvb,GAAA,mBAAAub,EACAxY,MAEAA,KAAAknC,aACAlnC,KAAAknC,WAAA,IAEAlnC,KAAAknC,WAAAjqC,KACA+C,KAAAknC,WAAAjqC,GAAA,IAEA+C,KAAAknC,WAAAjqC,GAAAwkB,KAAAjJ,GACAxY,OASAiiC,EAAA3jC,UAAA8oC,IAAA,SAAAnqC,EAAAub,GACA,oBAAAvb,GAAA,mBAAAub,EACA,OAAAxY,KAEA,IAAAqnC,EAAArnC,KAAAknC,YAAAlnC,KAAAknC,WAAAjqC,GACA,IAAAoqC,MAAAxlC,OACA,OAAA7B,KAEA,IAAAslB,EAAA+hB,EAAApI,QAAAzmB,GAIA,OAHA8M,GAAA,GACA+hB,EAAAnI,OAAA5Z,EAAA,GAEAtlB,MAGAiiC,EAAA3jC,UAAAg+B,QAAA,SAAAr/B,EAAAqqC,EAAAC,EAAAC,GACA,IAAAH,EAAArnC,KAAAknC,YAAAlnC,KAAAknC,WAAAjqC,GACA,IAAAoqC,MAAAxlC,OACA,SAEA,QAAAlF,EAAA,EAAiBA,EAAA0qC,EAAAxlC,OAAsBlF,IACvC0qC,EAAA1qC,GAAAE,KAAAmD,KAAAsnC,EAAAC,EAAAC,GAEA,OAAAH,EAAAxlC,QAoBAogC,EAAA3jC,UAAA8a,aAAA,SAAA3H,GACAzR,KAAAs8B,QAAA,gBAAA7qB,IAuBAwwB,EAAA3jC,UAAA+a,WAAA,SAAA5H,GACAzR,KAAAs8B,QAAA,cAAA7qB,IAwBAwwB,EAAA3jC,UAAAgb,SAAA,SAAA7H,EAAAsH,GACA/Y,KAAAs8B,QAAA,YAAA7qB,EAAAsH,IAuBAkpB,EAAA3jC,UAAAmpC,UAAA,SAAAh2B,EAAAgK,GACAzb,KAAAs8B,QAAA,aAAA7qB,EAAAgK,qBC3iCA,IAGA9V,EAAerJ,EAAQ,GAEvBorC,GADaprC,EAAQ,GACVA,EAAQ,KACnBuD,EAAWvD,EAAQ,GACnBqC,EAAWrC,EAAQ,GACnB0S,EAAW1S,EAAQ,IAUnB,SAAAqrC,EAAAzuB,GACAlZ,KAAAkZ,KACAlZ,KAAAuO,KAAA,IAAAS,EACAhP,KAAAmM,SAAA,KACAnM,KAAA4nC,OAAA,KACA5nC,KAAA6nC,OAAA,KACA7nC,KAAA8nC,OAAA,KACA9nC,KAAAwuB,QAAA,EAEAxuB,KAAAO,SAAA,WACA,OAAAP,KAAAkZ,GAAA,KAAAlZ,KAAAmM,UAkBA,SAAA47B,IACA/nC,KAAAgoC,OAAA,KACAhoC,KAAAioC,QAAA,GACAjoC,KAAAkoC,cAAA,EAEAloC,KAAAmoC,OAAA,IAAAT,EAAA,CACA1pC,OAAA,WACA,WAAA2pC,KA3CAlrC,EAAAD,QAAAurC,EAsBAJ,EAAArpC,UAAA8pC,OAAA,WACA,aAAApoC,KAAA6nC,QA8BAE,EAAAzpC,UAAAqO,YAAA,SAAAuM,GACA,IAAAmjB,EAAAr8B,KAAAioC,QAAA/uB,GAEA,OAAAmjB,EAAAlwB,UAQA47B,EAAAzpC,UAAA+pC,WAAA,SAAAnvB,GACA,IAAAmjB,EAAAr8B,KAAAioC,QAAA/uB,GAEA,OAAAmjB,EAAA9tB,MAGAw5B,EAAAzpC,UAAAgqC,aAAA,WACA,IAAAjM,EAAAr8B,KAAAmoC,OAAAI,WAQA,OAPAlM,EAAAnjB,KAAAlZ,KAAAkoC,cACA7L,EAAAlwB,SAAA,KACAkwB,EAAAuL,OAAA,KACAvL,EAAAwL,OAAA,KACAxL,EAAAyL,OAAA,KACAzL,EAAA7N,QAAA,EACAxuB,KAAAioC,QAAA5L,EAAAnjB,IAAAmjB,EACAA,GAGA0L,EAAAzpC,UAAAkqC,SAAA,SAAAnM,GACAr8B,KAAAmoC,OAAAM,QAAApM,GACAA,EAAA7N,QAAA,SACAxuB,KAAAioC,QAAA5L,EAAAnjB,KASA6uB,EAAAzpC,UAAAmiC,YAAA,SAAAlyB,EAAApC,GAGA,IAAAkwB,EAAAr8B,KAAAsoC,eAYA,OAVAjM,EAAA9tB,KAAA1N,IAAA0N,GAGAS,EAAAiB,OAAAosB,EAAA9tB,KAAA5I,EAAAG,eAEAu2B,EAAAlwB,WACAkwB,EAAA7N,OAAA,EAEAxuB,KAAA0oC,WAAArM,GAEAA,EAAAnjB,IAMA6uB,EAAAzpC,UAAAkiC,aAAA,SAAAtnB,GACA,IAAAmjB,EAAAr8B,KAAAioC,QAAA/uB,GAKAlZ,KAAA2oC,WAAAtM,GACAr8B,KAAAwoC,SAAAnM,IAcA0L,EAAAzpC,UAAAyiC,UAAA,SAAA7nB,EAAA3K,EAAAvR,GAIA,IAAAq/B,EAAAr8B,KAAAioC,QAAA/uB,GAKA,OAAAmjB,EAAA9tB,KAAAwB,SAAAxB,KAIAvO,KAAA2oC,WAAAtM,GAEAA,EAAA9tB,KAAA1N,IAAA0N,GAGAA,EAAA8tB,EAAA9tB,KACAS,EAAAiB,OAAA1B,EAAA5I,EAAAG,eAKA9I,EAAA+B,EAAA,EACAwP,EAAAU,WAAAlQ,GAAA/B,EAAA+B,EAAA4G,EAAAI,eAEAwI,EAAAW,WAAAnQ,GAAA/B,EAAA+B,EAAA4G,EAAAI,eAGA/I,EAAA+C,EAAA,EACAwO,EAAAU,WAAAlP,GAAA/C,EAAA+C,EAAA4F,EAAAI,eAEAwI,EAAAW,WAAAnP,GAAA/C,EAAA+C,EAAA4F,EAAAI,eAGA/F,KAAA0oC,WAAArM,IAEA,IAGA0L,EAAAzpC,UAAAoqC,WAAA,SAAAE,GAGA,SAAA5oC,KAAAgoC,OAGA,OAFAhoC,KAAAgoC,OAAAY,OACA5oC,KAAAgoC,OAAAJ,OAAA,MAOA,IAFA,IAAAiB,EAAAD,EAAAr6B,KACA+W,EAAAtlB,KAAAgoC,OACA,GAAA1iB,EAAA8iB,UAAA,CACA,IAAAP,EAAAviB,EAAAuiB,OACAC,EAAAxiB,EAAAwiB,OAEAvhB,EAAAjB,EAAA/W,KAAAc,eAEAy5B,EAAA,IAAA95B,EACA85B,EAAAhmC,QAAAwiB,EAAA/W,KAAAs6B,GACA,IASAE,EAcAC,EAvBAC,EAAAH,EAAAz5B,eAGA65B,EAAA,EAAAD,EAGAE,EAAA,GAAAF,EAAA1iB,GAIA,GAAAshB,EAAAO,SAAA,EACA75B,EAAA,IAAAS,GACAlM,QAAA+lC,EAAAhB,EAAAt5B,MACAw6B,EAAAx6B,EAAAc,eAAA85B,MACK,EACL56B,EAAA,IAAAS,GACAlM,QAAA+lC,EAAAhB,EAAAt5B,MACA,IAAA66B,EAAAvB,EAAAt5B,KAAAc,eAEA05B,EADAx6B,EAAAc,eACA+5B,EAAAD,EAKA,GAAArB,EAAAM,SAAA,EACA75B,EAAA,IAAAS,GACAlM,QAAA+lC,EAAAf,EAAAv5B,MACAy6B,EAAAz6B,EAAAc,eAAA85B,MACK,CACL,IAAA56B,KAAA,IAAAS,GACAlM,QAAA+lC,EAAAf,EAAAv5B,MACA66B,EAAAtB,EAAAv5B,KAAAc,eAEA25B,EADAz6B,EAAAc,eACA+5B,EAAAD,EAIA,GAAAD,EAAAH,GAAAG,EAAAF,EACA,MAKA1jB,EADAyjB,EAAAC,EACAnB,EAEAC,EAIA,IAAAuB,EAAA/jB,EAGAgkB,EAAAD,EAAAzB,OACA2B,EAAAvpC,KAAAsoC,eA6BA,IA5BAiB,EAAA3B,OAAA0B,EACAC,EAAAp9B,SAAA,KACAo9B,EAAAh7B,KAAAzL,QAAA+lC,EAAAQ,EAAA96B,MACAg7B,EAAA/a,OAAA6a,EAAA7a,OAAA,EAEA,MAAA8a,GAEAA,EAAAzB,QAAAwB,EACAC,EAAAzB,OAAA0B,EAEAD,EAAAxB,OAAAyB,EAGAA,EAAA1B,OAAAwB,EACAE,EAAAzB,OAAAc,EACAS,EAAAzB,OAAA2B,EACAX,EAAAhB,OAAA2B,IAGAA,EAAA1B,OAAAwB,EACAE,EAAAzB,OAAAc,EACAS,EAAAzB,OAAA2B,EACAX,EAAAhB,OAAA2B,EACAvpC,KAAAgoC,OAAAuB,GAIAjkB,EAAAsjB,EAAAhB,OACA,MAAAtiB,GAAA,CAGAuiB,GAFAviB,EAAAtlB,KAAAwpC,QAAAlkB,IAEAuiB,OACAC,EAAAxiB,EAAAwiB,OAKAxiB,EAAAkJ,OAAA,EAAA7vB,EAAAc,IAAAooC,EAAArZ,OAAAsZ,EAAAtZ,QACAlJ,EAAA/W,KAAAzL,QAAA+kC,EAAAt5B,KAAAu5B,EAAAv5B,MAEA+W,IAAAsiB,SAMAG,EAAAzpC,UAAAqqC,WAAA,SAAAC,GACA,GAAAA,GAAA5oC,KAAAgoC,OAAA,CAKA,IAEAqB,EAFAzB,EAAAgB,EAAAhB,OACA6B,EAAA7B,SAQA,GALAyB,EADAzB,EAAAC,QAAAe,EACAhB,EAAAE,OAEAF,EAAAC,OAGA,MAAA4B,EAAA,CAEAA,EAAA5B,QAAAD,EACA6B,EAAA5B,OAAAwB,EAEAI,EAAA3B,OAAAuB,EAEAA,EAAAzB,OAAA6B,EACAzpC,KAAAwoC,SAAAZ,GAIA,IADA,IAAAtiB,EAAAmkB,EACA,MAAAnkB,GAAA,CAGA,IAAAuiB,GAFAviB,EAAAtlB,KAAAwpC,QAAAlkB,IAEAuiB,OACAC,EAAAxiB,EAAAwiB,OAEAxiB,EAAA/W,KAAAzL,QAAA+kC,EAAAt5B,KAAAu5B,EAAAv5B,MACA+W,EAAAkJ,OAAA,EAAA7vB,EAAAc,IAAAooC,EAAArZ,OAAAsZ,EAAAtZ,QAEAlJ,IAAAsiB,aAGA5nC,KAAAgoC,OAAAqB,EACAA,EAAAzB,OAAA,KACA5nC,KAAAwoC,SAAAZ,QAvCA5nC,KAAAgoC,OAAA,MAiDAD,EAAAzpC,UAAAkrC,QAAA,SAAApvB,GAGA,IAAAsvB,EAAAtvB,EACA,GAAAsvB,EAAAtB,UAAAsB,EAAAlb,OAAA,EACA,OAAApU,EAGA,IAAAuvB,EAAAD,EAAA7B,OACAxsB,EAAAquB,EAAA5B,OAEA0B,EAAAnuB,EAAAmT,OAAAmb,EAAAnb,OAGA,GAAAgb,EAAA,GACA,IAAAI,EAAAvuB,EAAAwsB,OACAgC,EAAAxuB,EAAAysB,OAuCA,OApCAzsB,EAAAwsB,OAAA6B,EACAruB,EAAAusB,OAAA8B,EAAA9B,OACA8B,EAAA9B,OAAAvsB,EAGA,MAAAA,EAAAusB,OACAvsB,EAAAusB,OAAAC,QAAAztB,EACAiB,EAAAusB,OAAAC,OAAAxsB,EAEAA,EAAAusB,OAAAE,OAAAzsB,EAGArb,KAAAgoC,OAAA3sB,EAIAuuB,EAAApb,OAAAqb,EAAArb,QACAnT,EAAAysB,OAAA8B,EACAF,EAAA5B,OAAA+B,EACAA,EAAAjC,OAAA8B,EACAA,EAAAn7B,KAAAzL,QAAA6mC,EAAAp7B,KAAAs7B,EAAAt7B,MACA8M,EAAA9M,KAAAzL,QAAA4mC,EAAAn7B,KAAAq7B,EAAAr7B,MAEAm7B,EAAAlb,OAAA,EAAA7vB,EAAAc,IAAAkqC,EAAAnb,OAAAqb,EAAArb,QACAnT,EAAAmT,OAAA,EAAA7vB,EAAAc,IAAAiqC,EAAAlb,OAAAob,EAAApb,UAEAnT,EAAAysB,OAAA+B,EACAH,EAAA5B,OAAA8B,EACAA,EAAAhC,OAAA8B,EACAA,EAAAn7B,KAAAzL,QAAA6mC,EAAAp7B,KAAAq7B,EAAAr7B,MACA8M,EAAA9M,KAAAzL,QAAA4mC,EAAAn7B,KAAAs7B,EAAAt7B,MAEAm7B,EAAAlb,OAAA,EAAA7vB,EAAAc,IAAAkqC,EAAAnb,OAAAob,EAAApb,QACAnT,EAAAmT,OAAA,EAAA7vB,EAAAc,IAAAiqC,EAAAlb,OAAAqb,EAAArb,SAGAnT,EAIA,GAAAmuB,GAAA,GACA,IAAA7hB,EAAAgiB,EAAA9B,OACAiC,EAAAH,EAAA7B,OAuCA,OApCA6B,EAAA9B,OAAA6B,EACAC,EAAA/B,OAAA8B,EAAA9B,OACA8B,EAAA9B,OAAA+B,EAGA,MAAAA,EAAA/B,OACA+B,EAAA/B,OAAAC,QAAA6B,EACAC,EAAA/B,OAAAC,OAAA8B,EAEAA,EAAA/B,OAAAE,OAAA6B,EAGA3pC,KAAAgoC,OAAA2B,EAIAhiB,EAAA6G,OAAAsb,EAAAtb,QACAmb,EAAA7B,OAAAngB,EACA+hB,EAAA7B,OAAAiC,EACAA,EAAAlC,OAAA8B,EACAA,EAAAn7B,KAAAzL,QAAAuY,EAAA9M,KAAAu7B,EAAAv7B,MACAo7B,EAAAp7B,KAAAzL,QAAA4mC,EAAAn7B,KAAAoZ,EAAApZ,MAEAm7B,EAAAlb,OAAA,EAAA7vB,EAAAc,IAAA4b,EAAAmT,OAAAsb,EAAAtb,QACAmb,EAAAnb,OAAA,EAAA7vB,EAAAc,IAAAiqC,EAAAlb,OAAA7G,EAAA6G,UAEAmb,EAAA7B,OAAAgC,EACAJ,EAAA7B,OAAAlgB,EACAA,EAAAigB,OAAA8B,EACAA,EAAAn7B,KAAAzL,QAAAuY,EAAA9M,KAAAoZ,EAAApZ,MACAo7B,EAAAp7B,KAAAzL,QAAA4mC,EAAAn7B,KAAAu7B,EAAAv7B,MAEAm7B,EAAAlb,OAAA,EAAA7vB,EAAAc,IAAA4b,EAAAmT,OAAA7G,EAAA6G,QACAmb,EAAAnb,OAAA,EAAA7vB,EAAAc,IAAAiqC,EAAAlb,OAAAsb,EAAAtb,SAGAmb,EAGA,OAAAD,GAOA3B,EAAAzpC,UAAAyrC,UAAA,WACA,aAAA/pC,KAAAgoC,OACA,EAGAhoC,KAAAgoC,OAAAxZ,QAMAuZ,EAAAzpC,UAAA0rC,aAAA,WACA,SAAAhqC,KAAAgoC,OACA,SAQA,IALA,IAIA3L,EAHA4N,EADAjqC,KAAAgoC,OACAz5B,KAAAc,eAEA66B,EAAA,EACAC,EAAAC,EAAA7B,WAAA8B,WACAhO,EAAA8N,EAAAl/B,QACAoxB,EAAA7N,OAAA,IAKA0b,GAAA7N,EAAA9tB,KAAAc,gBAKA,OAFA+6B,EAAA3B,QAAA0B,GAEAD,EAAAD,GAMAlC,EAAAzpC,UAAAgsC,cAAA,SAAApxB,GACA,IAAAmjB,EASA,IAPAA,OADA,IAAAnjB,EACAlZ,KAAAioC,QAAA/uB,GAEAlZ,KAAAgoC,QAKAI,SACA,SAGA,IAAAmC,EAAAC,cAAAnO,EAAAwL,QACA4C,EAAAD,cAAAnO,EAAAyL,QACA,SAAAnpC,EAAAc,IAAA8qC,EAAAE,IAGA1C,EAAAzpC,UAAAosC,kBAAA,SAAArO,GACA,SAAAA,EAAA,CAIAr8B,KAAAgoC,OAIA,IAAAH,EAAAxL,EAAAwL,OACAC,EAAAzL,EAAAyL,OAEAzL,EAAA+L,WAaApoC,KAAA0qC,kBAAA7C,GACA7nC,KAAA0qC,kBAAA5C,MAGAC,EAAAzpC,UAAAqsC,gBAAA,SAAAtO,GACA,SAAAA,EAAA,CAIA,IAAAwL,EAAAxL,EAAAwL,OACAC,EAAAzL,EAAAyL,OAEA,IAAAzL,EAAA+L,SAAA,CAUA,IAAAmC,EAAAvqC,KAAAioC,QAAAJ,GAAArZ,OACAic,EAAAzqC,KAAAioC,QAAAH,GAAAtZ,OAIAjgB,GAHA5P,EAAAc,IAAA8qC,EAAAE,GAGA,IAAAz7B,GACAT,EAAAzL,QAAA+kC,EAAAt5B,KAAAu5B,EAAAv5B,MAIAvO,KAAA2qC,gBAAA9C,GACA7nC,KAAA2qC,gBAAA7C,MAIAC,EAAAzpC,UAAA2pB,SAAA,WACA2iB,kBAAA5qC,KAAAgoC,QACA6C,gBAAA7qC,KAAAgoC,SASAD,EAAAzpC,UAAAwsC,cAAA,WAGA,IAFA,IACAzO,EADA0O,EAAA,EACAZ,EAAAC,EAAA7B,WAAA8B,WACAhO,EAAA8N,EAAAl/B,QACA,KAAAoxB,EAAA7N,QAAA,IAMA,IAAAgb,EAAA7qC,EAAAqE,IAAAq5B,EAAAyL,OAAAtZ,OAAA6N,EAAAwL,OAAArZ,QACAuc,EAAApsC,EAAAc,IAAAsrC,EAAAvB,GAIA,OAFAY,EAAA3B,QAAA0B,GAEAY,GAMAhD,EAAAzpC,UAAA0sC,gBAAA,WAMA,IALA,IAIA3O,EAJA4O,EAAA,GACA3kB,EAAA,EAGA6jB,EAAAC,EAAA7B,WAAA8B,WACAhO,EAAA8N,EAAAl/B,QACAoxB,EAAA7N,OAAA,IAKA6N,EAAA+L,UACA/L,EAAAuL,OAAA,KACAqD,EAAA3kB,GAAA+V,IACA/V,GAEAtmB,KAAAwoC,SAAAnM,IAKA,IAFA+N,EAAA3B,QAAA0B,GAEA7jB,EAAA,IAGA,IAFA,IAAA4kB,EAAAx6B,IACAy6B,GAAA,EAAAC,GAAA,EACA1uC,EAAA,EAAmBA,EAAA4pB,IAAW5pB,EAE9B,IADA,IAAA2uC,EAAAJ,EAAAvuC,GAAA6R,KACAkI,EAAA/Z,EAAA,EAAyB+Z,EAAA6P,IAAW7P,EAAA,CACpC,IAAA60B,EAAAL,EAAAx0B,GAAAlI,KACAvN,EAAA,IAAAgO,EACAhO,EAAA8B,QAAAuoC,EAAAC,GACA,IAAApC,EAAAloC,EAAAqO,eACA65B,EAAAgC,IACAC,EAAAzuC,EACA0uC,EAAA30B,EACAy0B,EAAAhC,GAKA,IAAArB,EAAAoD,EAAAE,GACArD,EAAAmD,EAAAG,GAEAxD,EAAA5nC,KAAAsoC,eACAV,EAAAC,SACAD,EAAAE,SACAF,EAAApZ,OAAA,EAAA7vB,EAAAc,IAAAooC,EAAArZ,OAAAsZ,EAAAtZ,QACAoZ,EAAAr5B,KAAAzL,QAAA+kC,EAAAt5B,KAAAu5B,EAAAv5B,MACAq5B,SAAA,KAEAC,EAAAD,SACAE,EAAAF,SAEAqD,EAAAG,GAAAH,EAAA3kB,EAAA,GACA2kB,EAAAE,GAAAvD,IACAthB,EAGAtmB,KAAAgoC,OAAAiD,EAAA,GAEAjrC,KAAAioB,YASA8f,EAAAzpC,UAAA8O,YAAA,SAAAC,GAGA,IADA,IAAAgvB,EAAA8N,EAAAC,EAAA7B,WAAA8B,WACAhO,EAAA8N,EAAAl/B,QAAA,CACA,IAAAsD,EAAA8tB,EAAA9tB,KACAA,EAAAU,WAAAlQ,GAAAsO,EAAAtO,EACAwP,EAAAU,WAAAlP,GAAAsN,EAAAtN,EACAwO,EAAAW,WAAAnQ,GAAAsO,EAAAtO,EACAwP,EAAAW,WAAAnP,GAAAsN,EAAAtN,EAEAqqC,EAAA3B,QAAA0B,IAeApC,EAAAzpC,UAAA2mC,MAAA,SAAA12B,EAAAw2B,GAEA,IAAA/gB,EAAAunB,EAAAhD,WAGA,IADAvkB,EAAAvC,KAAAzhB,KAAAgoC,QACAhkB,EAAAniB,OAAA,IACA,IAAAw6B,EAAArY,EAAAwnB,MACA,SAAAnP,EAIA,GAAArtB,EAAAH,YAAAwtB,EAAA9tB,QACA,GAAA8tB,EAAA+L,UAEA,MADArD,EAAA1I,EAAAnjB,GAAAmjB,EAAAlwB,UAEA,YAGA6X,EAAAvC,KAAA4a,EAAAwL,QACA7jB,EAAAvC,KAAA4a,EAAAyL,QAKAyD,EAAA9C,QAAAzkB,IAkBA+jB,EAAAzpC,UAAA2P,QAAA,SAAAE,EAAAs9B,EAAA76B,EAAAC,EAAAO,GAEAR,KAAAzC,EAAAyC,GACAC,KAAA1C,EAAA0C,GACA,IAAArT,EAAAqC,EAAA8B,IAAAkP,EAAAD,GAEApT,EAAAwE,YAGA,IAAA1B,EAAAT,EAAA+C,MAAA,EAAApF,GACAkuC,EAAA7rC,EAAAmD,IAAA1C,GAKA8Q,KAAA,EAAAA,EAAAjD,EAAAiD,YAGA,IAAAu6B,EAAA,IAAA38B,EACApR,EAAAiC,EAAAiD,QAAA,EAAAsO,EAAAR,EAAAQ,EAAAP,GACA86B,EAAA77B,cAAAc,EAAAhT,GAEA,IAAAomB,EAAAunB,EAAAhD,WACAqD,EAAAC,EAAAtD,WAGA,IADAvkB,EAAAvC,KAAAzhB,KAAAgoC,QACAhkB,EAAAniB,OAAA,IACA,IAAAw6B,EAAArY,EAAAwnB,MACA,SAAAnP,GAIA,GAAArtB,EAAAH,YAAAwtB,EAAA9tB,KAAAo9B,GAAA,CAMA,IAAA5uC,EAAAs/B,EAAA9tB,KAAAY,YACAwlB,EAAA0H,EAAA9tB,KAAAa,aAGA,KAFAzQ,EAAAqE,IAAAnD,EAAA8C,IAAArC,EAAAT,EAAA8B,IAAAiP,EAAA7T,KACA8C,EAAA8C,IAAA+oC,EAAA/W,GACA,GAIA,GAAA0H,EAAA+L,SAAA,CACAwD,EAAAh7B,GAAA/Q,EAAAQ,MAAAuQ,GACAg7B,EAAA/6B,GAAAhR,EAAAQ,MAAAwQ,GACA+6B,EAAAx6B,cAEA,IAAAzT,EAAA8tC,EAAAG,EAAAvP,EAAAnjB,GAAAmjB,EAAAlwB,UAEA,MAAAxO,EAEA,OAGAA,EAAA,IAEAyT,EAAAzT,EACAC,EAAAiC,EAAAiD,QAAA,EAAAsO,EAAAR,EAAAQ,EAAAP,GACA86B,EAAA77B,cAAAc,EAAAhT,SAGAomB,EAAAvC,KAAA4a,EAAAwL,QACA7jB,EAAAvC,KAAA4a,EAAAyL,SAIAyD,EAAA9C,QAAAzkB,GACA6nB,EAAApD,QAAAmD,IAGA,IAAAC,EAAA,IAAAnE,EAAA,CACA1pC,OAAA,WACA,UAEAyqC,QAAA,SAAAzkB,OAIAunB,EAAA,IAAA7D,EAAA,CACA1pC,OAAA,WACA,UAEAyqC,QAAA,SAAAzkB,GACAA,EAAAniB,OAAA,KAIAuoC,EAAA,IAAA1C,EAAA,CACA1pC,OAAA,WACA,WAAA8tC,GAEArD,QAAA,SAAAsD,GACAA,EAAAC,WAIA,SAAAF,IACA,IAAAG,EAAA,GACAC,EAAA,GACA,OACA7B,SAAA,SAAA8B,GAKA,OAJAF,EAAApqC,OAAA,EACAoqC,EAAAxqB,KAAA0qB,GACAD,EAAArqC,OAAA,EACAqqC,EAAAzqB,KAAA,GACAzhB,MAEAiL,KAAA,WACA,KAAAghC,EAAApqC,OAAA,IACA,IAAAnF,EAAAuvC,EAAApqC,OAAA,EACAw6B,EAAA4P,EAAAvvC,GACA,OAAAwvC,EAAAxvC,GAEA,OADAwvC,EAAAxvC,GAAA,EACA2/B,EAEA,OAAA6P,EAAAxvC,KACAwvC,EAAAxvC,GAAA,EACA2/B,EAAAwL,QAGA,OAFAoE,EAAAxqB,KAAA4a,EAAAwL,QACAqE,EAAAzqB,KAAA,GACA4a,EAAAwL,OAGA,OAAAqE,EAAAxvC,KACAwvC,EAAAxvC,GAAA,EACA2/B,EAAAyL,QAGA,OAFAmE,EAAAxqB,KAAA4a,EAAAyL,QACAoE,EAAAzqB,KAAA,GACA4a,EAAAyL,OAGAmE,EAAAT,MACAU,EAAAV,QAGAQ,MAAA,WACAC,EAAApqC,OAAA,sBC/3BA,IACAjC,GAAsD,EAEtDnD,EAAAD,QAmFA,SAAA0R,EAAAC,GACA,IAAAmxB,EAAA8M,EAAAjpB,QAEArC,EAAAurB,SAEAn+B,EAAAo+B,MAAAC,EAAAC,UACAt+B,EAAAtQ,EAAAuQ,EAAAs+B,KAEA,IAAA9jB,EAAAxa,EAAAwa,OACAC,EAAAza,EAAAya,OAEA8jB,EAAAv+B,EAAAu+B,OACAC,EAAAx+B,EAAAw+B,OAIAD,EAAA1qC,YACA2qC,EAAA3qC,YAEA,IAAAyqC,EAAAt+B,EAAAs+B,KAEAG,EAAAjkB,EAAAhb,SAAAib,EAAAjb,SACAk/B,EAAAluC,EAAAc,IAAAkG,EAAAK,WAAA4mC,EAAA,EAAAjnC,EAAAK,YACA8mC,EAAA,IAAAnnC,EAAAK,WACApG,GAAAE,EAAAb,OAAA4tC,EAAAC,GAEA,IAAA77B,EAAA,EACA87B,EAAApnC,EAAAY,iBACAqjB,EAAA,EAGAV,EAAA,IAAAR,EAEAskB,EAAA,IAAA5kB,EAOA,IANA4kB,EAAArkB,OAAAxa,EAAAwa,OACAqkB,EAAApkB,OAAAza,EAAAya,OACAokB,EAAAjkB,UAAA,IAIS,CACT,IAAA1Q,EAAAxT,EAAAd,WACAuU,EAAAzT,EAAAd,WACA2oC,EAAApjC,aAAA+O,EAAApH,GACA07B,EAAArjC,aAAAgP,EAAArH,GAIA+7B,EAAAnkB,WAAAxQ,EACA20B,EAAAlkB,WAAAxQ,EACA,IAAA20B,EAAA,IAAA3kB,EAIA,GAHA/W,EAAA07B,EAAA/jB,EAAA8jB,GAGAC,EAAA5qC,UAAA,GAEA6L,EAAAo+B,MAAAC,EAAAW,aACAh/B,EAAAtQ,EAAA,EACA,MAGA,GAAAqvC,EAAA5qC,SAAAwqC,EAAAC,EAAA,CAEA5+B,EAAAo+B,MAAAC,EAAAY,WACAj/B,EAAAtQ,EAAAqT,EACA,MAIA,IAAAm8B,EAAA,IAAAC,EACAD,EAAAE,WAAApkB,EAAAP,EAAA+jB,EAAA9jB,EAAA+jB,EAAA17B,GA0BA,IAHA,IAAAs8B,GAAA,EACAr8B,EAAAu7B,EACAe,EAAA,IACW,CAEX,IAAAC,EAAAL,EAAAM,kBAAAx8B,GACAk8B,EAAAx7B,OACAw7B,EAAAt7B,OAGA,GAAA27B,EAAAZ,EAAAC,EAAA,CAEA5+B,EAAAo+B,MAAAC,EAAAoB,YACAz/B,EAAAtQ,EAAA6uC,EACAc,GAAA,EACA,MAIA,GAAAE,EAAAZ,EAAAC,EAAA,CAEA77B,EAAAC,EACA,MAIA,IAAA08B,EAAAR,EAAAh1B,SAAAnH,GACAm8B,EAAAx7B,OACAw7B,EAAAt7B,OAIA,GAAA87B,EAAAf,EAAAC,EAAA,CACA5+B,EAAAo+B,MAAAC,EAAAsB,SACA3/B,EAAAtQ,EAAAqT,EACAs8B,GAAA,EACA,MAIA,GAAAK,GAAAf,EAAAC,EAAA,CAEA5+B,EAAAo+B,MAAAC,EAAAY,WACAj/B,EAAAtQ,EAAAqT,EACAs8B,GAAA,EACA,MAMA,IAFA,IAAAO,EAAA,EACAC,EAAA98B,EAAA+8B,EAAA98B,IACa,CAEb,IAAAtT,EAGAA,EAFA,EAAAkwC,EAEAC,GAAAlB,EAAAe,IAAAI,EAAAD,IAAAN,EAAAG,GAGA,IAAAG,EAAAC,KAGAF,IACAhtB,EAAAmtB,aAEA,IAAAxvC,EAAA2uC,EAAAh1B,SAAAxa,GACAwvC,EAAAx7B,OACAw7B,EAAAt7B,OAEA,GAAAnT,EAAAqE,IAAAvE,EAAAouC,GAAAC,EAAA,CAEA57B,EAAAtT,EACA,MAYA,GARAa,EAAAouC,GACAkB,EAAAnwC,EACAgwC,EAAAnvC,IAEAuvC,EAAApwC,EACA6vC,EAAAhvC,GAGA,IAAAqvC,EACA,MAQA,GAJAhtB,EAAAotB,gBAAAvvC,EAAAc,IAAAqhB,EAAAotB,gBAAAJ,KAEAN,GAEA7nC,EAAAE,mBACA,MAOA,KAHA+jB,IACA9I,EAAAqtB,SAEAZ,EACA,MAGA,GAAA3jB,GAAAmjB,EAAA,CAEA7+B,EAAAo+B,MAAAC,EAAAsB,SACA3/B,EAAAtQ,EAAAqT,EACA,OAIA6P,EAAAstB,YAAAzvC,EAAAc,IAAAqhB,EAAAstB,YAAAxkB,GAEA,IAAAwV,EAAAgN,EAAA97B,KAAAgvB,GACAxe,EAAAutB,WAAA1vC,EAAAc,IAAAqhB,EAAAutB,WAAAjP,GACAte,EAAAwtB,SAAAlP,GApSA3iC,EAAAD,QAAA2rB,MAoCA,WACAnoB,KAAA2oB,OAAA,IAAAH,EACAxoB,KAAA4oB,OAAA,IAAAJ,EACAxoB,KAAA0sC,OAAA,IAAA3jC,EACA/I,KAAA2sC,OAAA,IAAA5jC,EACA/I,KAAAysC,MAxCAhwC,EAAAD,QAAA6rB,OAAAkkB,EAEA,IAAA5mC,EAAerJ,EAAQ,GAEvBwD,EAAaxD,EAAQ,GACrB8vC,EAAY9vC,EAAQ,IAEpBwkB,EAAYxkB,EAAQ,IAEpBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAClByM,EAAYzM,EAAQ,IACpBuI,EAAgBvI,EAAQ,GAIxBiV,GAHejV,EAAQ,IACRA,EAAQ,IAERA,EAAQ,KACvB8rB,EAAA7W,EAAA4W,MACAG,EAAA/W,EAAA8W,OACAG,EAAAjX,EAAAgX,MACAG,EAAAnX,EAAAkX,MAgCA,SAAA8jB,IACAvsC,KAAAssC,MACAtsC,KAAApC,EAdA2uC,EAAAC,UAAA,EACAD,EAAAsB,SAAA,EACAtB,EAAAW,aAAA,EACAX,EAAAY,WAAA,EACAZ,EAAAoB,YAAA,EAaA7sB,EAAAwtB,QAAA,EACAxtB,EAAAutB,WAAA,EACAvtB,EAAAurB,SAAA,EACAvrB,EAAAqtB,SAAA,EACArtB,EAAAstB,YAAA,EACAttB,EAAAmtB,aAAA,EACAntB,EAAAotB,gBAAA,EAwOA,SAAAb,IACArtC,KAAAuuC,SAAA,IAAA/lB,EACAxoB,KAAAwuC,SAAA,IAAAhmB,EACAxoB,KAAAyuC,SACAzuC,KAAA0uC,SACA1uC,KAAAqL,OACArL,KAAA2uC,aAAA9uC,EAAAI,OACAD,KAAA4uC,OAAA/uC,EAAAI,OAaAotC,EAAA/uC,UAAAgvC,WAAA,SAAApkB,EAAAP,EAAA+jB,EAAA9jB,EAAA+jB,EAAA17B,GACAjR,KAAAuuC,SAAA5lB,EACA3oB,KAAAwuC,SAAA5lB,EACA,IAAAtC,EAAA4C,EAAA5C,MACA1mB,GAAAE,EAAAb,OAAA,EAAAqnB,KAAA,GAEAtmB,KAAAyuC,SAAA/B,EACA1sC,KAAA0uC,SAAA/B,EAEA,IAAAt0B,EAAAxT,EAAAd,WACAuU,EAAAzT,EAAAd,WAIA,GAHA/D,KAAAyuC,SAAAnlC,aAAA+O,EAAApH,GACAjR,KAAA0uC,SAAAplC,aAAAgP,EAAArH,GAEA,GAAAqV,EAAA,CACAtmB,KAAAqL,OAvCA,EAwCA,IAAAwjC,EAAA7uC,KAAAuuC,SAAAlpB,UAAA6D,EAAAtX,OAAA,IACAk9B,EAAA9uC,KAAAwuC,SAAAnpB,UAAA6D,EAAApX,OAAA,IACAiJ,EAAAlW,EAAAL,QAAA6T,EAAAw2B,GACA7zB,EAAAnW,EAAAL,QAAA8T,EAAAw2B,GAGA,OAFA9uC,KAAA4uC,OAAA1tC,WAAA,EAAA8Z,GAAA,EAAAD,GACAtc,EAAAuB,KAAA4uC,OAAA5sC,YAGG,GAAAknB,EAAAtX,OAAA,IAAAsX,EAAAtX,OAAA,IAEH5R,KAAAqL,OAhDA,EAiDA,IAAA0jC,EAAAnmB,EAAAvD,UAAA6D,EAAApX,OAAA,IACAk9B,EAAApmB,EAAAvD,UAAA6D,EAAApX,OAAA,IAEA9R,KAAA4uC,OAAA/uC,EAAA+C,MAAA/C,EAAA8B,IAAAqtC,EAAAD,GAAA,GACA/uC,KAAA4uC,OAAA5sC,YACA,IAAAE,EAAAyB,EAAAa,QAAA8T,EAAAtT,EAAAhF,KAAA4uC,QAEA5uC,KAAA2uC,aAAA9uC,EAAAoD,IAAA8rC,EAAAC,GACAh0B,EAAAnW,EAAAL,QAAA8T,EAAAtY,KAAA2uC,cAEAE,EAAAlmB,EAAAtD,UAAA6D,EAAAtX,OAAA,IACAmJ,EAAAlW,EAAAL,QAAA6T,EAAAw2B,GAOA,OALApwC,EAAAoB,EAAA8C,IAAAoY,EAAA7Y,GAAArC,EAAA8C,IAAAqY,EAAA9Y,IACA,IACAlC,KAAA4uC,OAAA/uC,EAAAkD,IAAA/C,KAAA4uC,QACAnwC,MAEAA,EAIAuB,KAAAqL,OAxEA,EAyEA,IAAA4jC,EAAAjvC,KAAAuuC,SAAAlpB,UAAA6D,EAAAtX,OAAA,IACAs9B,EAAAlvC,KAAAuuC,SAAAlpB,UAAA6D,EAAAtX,OAAA,IAEA5R,KAAA4uC,OAAA/uC,EAAA+C,MAAA/C,EAAA8B,IAAAutC,EAAAD,GAAA,GACAjvC,KAAA4uC,OAAA5sC,YACAE,EAAAyB,EAAAa,QAAA6T,EAAArT,EAAAhF,KAAA4uC,QAEA5uC,KAAA2uC,aAAA9uC,EAAAoD,IAAAgsC,EAAAC,GACA,IAKAzwC,EALAsc,EAAAlW,EAAAL,QAAA6T,EAAArY,KAAA2uC,cAEAG,EAAA9uC,KAAAwuC,SAAAnpB,UAAA6D,EAAApX,OAAA,IACAkJ,EAAAnW,EAAAL,QAAA8T,EAAAw2B,GAOA,OALArwC,EAAAoB,EAAA8C,IAAAqY,EAAA9Y,GAAArC,EAAA8C,IAAAoY,EAAA7Y,IACA,IACAlC,KAAA4uC,OAAA/uC,EAAAkD,IAAA/C,KAAA4uC,QACAnwC,MAEAA,GAIA4uC,EAAA/uC,UAAA6wC,QAAA,SAAAC,EAAAxxC,GAEA,IAAAya,EAAAxT,EAAAd,WACAuU,EAAAzT,EAAAd,WAIA,OAHA/D,KAAAyuC,SAAAnlC,aAAA+O,EAAAza,GACAoC,KAAA0uC,SAAAplC,aAAAgP,EAAA1a,GAEAoC,KAAAqL,QACA,KAxGA,EAyGA,GAAA+jC,EAAA,CACA,IAAAC,EAAA1rC,EAAAiB,SAAAyT,EAAArT,EAAAhF,KAAA4uC,QACAU,EAAA3rC,EAAAiB,SAAA0T,EAAAtT,EAAAnF,EAAAkD,IAAA/C,KAAA4uC,SAEA5uC,KAAA4R,OAAA5R,KAAAuuC,SAAAvkB,WAAAqlB,GACArvC,KAAA8R,OAAA9R,KAAAwuC,SAAAxkB,WAAAslB,GAGA,IAAAT,EAAA7uC,KAAAuuC,SAAAlpB,UAAArlB,KAAA4R,QACAk9B,EAAA9uC,KAAAwuC,SAAAnpB,UAAArlB,KAAA8R,QAEAiJ,EAAAlW,EAAAL,QAAA6T,EAAAw2B,GACA7zB,EAAAnW,EAAAL,QAAA8T,EAAAw2B,GAGA,OADAjvC,EAAA8C,IAAAqY,EAAAhb,KAAA4uC,QAAA/uC,EAAA8C,IAAAoY,EAAA/a,KAAA4uC,QAIA,KA1HA,EA2HA,IAAA1sC,EAAAyB,EAAAa,QAAA6T,EAAArT,EAAAhF,KAAA4uC,QACA7zB,EAAAlW,EAAAL,QAAA6T,EAAArY,KAAA2uC,cAEA,GAAAS,EAAA,CACAE,EAAA3rC,EAAAiB,SAAA0T,EAAAtT,EAAAnF,EAAAkD,IAAAb,IAEAlC,KAAA4R,QAAA,EACA5R,KAAA8R,OAAA9R,KAAAwuC,SAAAxkB,WAAAslB,GAGAR,EAAA9uC,KAAAwuC,SAAAnpB,UAAArlB,KAAA8R,QACAkJ,EAAAnW,EAAAL,QAAA8T,EAAAw2B,GAGA,OADAjvC,EAAA8C,IAAAqY,EAAA9Y,GAAArC,EAAA8C,IAAAoY,EAAA7Y,GAIA,KA3IA,EA4IAA,EAAAyB,EAAAa,QAAA8T,EAAAtT,EAAAhF,KAAA4uC,QACA5zB,EAAAnW,EAAAL,QAAA8T,EAAAtY,KAAA2uC,cAEA,GAAAS,EAAA,CACAC,EAAA1rC,EAAAiB,SAAAyT,EAAArT,EAAAnF,EAAAkD,IAAAb,IAEAlC,KAAA8R,QAAA,EACA9R,KAAA4R,OAAA5R,KAAAuuC,SAAAvkB,WAAAqlB,GAGAR,EAAA7uC,KAAAuuC,SAAAlpB,UAAArlB,KAAA4R,QACAmJ,EAAAlW,EAAAL,QAAA6T,EAAAw2B,GAGA,OADAhvC,EAAA8C,IAAAoY,EAAA7Y,GAAArC,EAAA8C,IAAAqY,EAAA9Y,GAIA,QAMA,OALAtC,GAAAE,EAAAb,QAAA,GACAmwC,IACApvC,KAAA4R,QAAA,EACA5R,KAAA8R,QAAA,GAEA,IAIAu7B,EAAA/uC,UAAAovC,kBAAA,SAAA9vC,GACA,OAAAoC,KAAAmvC,SAAA,EAAAvxC,IAGAyvC,EAAA/uC,UAAA8Z,SAAA,SAAAxa,GACA,OAAAoC,KAAAmvC,SAAA,EAAAvxC,qBCvdAnB,EAAAD,QAAA+yC,EAEajzC,EAAQ,GAArB,IACA04B,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnB2L,EAAW3L,EAAQ,GACnB6L,EAAY7L,EAAQ,GACpBsN,EAAYtN,EAAQ,IACpBqH,EAAUrH,EAAQ,GAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBkzC,EAAA,EAKAD,EAAAzqB,KAAA,iBAEAyqB,EAAA1qB,OAAAja,EACA2kC,EAAAjxC,UAAAN,EAAAuxC,EAAA1qB,OAAAvmB,WA+BA,IAAAmxC,EAAA,CACAC,WAAA,EACAC,WAAA,EACAC,eAAA,EACAC,WAAA,EACAC,aAAA,EACAC,aAAA,EACA9jC,QAAA,GAeA,SAAAsjC,EAAArkC,EAAAC,EAAAC,EAAA4kC,GACA,KAAAhwC,gBAAAuvC,GACA,WAAAA,EAAArkC,EAAAC,EAAAC,EAAA4kC,GAGA9kC,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAkkC,EAAAzqB,KAEA9kB,KAAAiwC,eAAAD,EAAA7kC,EAAAsxB,cAAAuT,GAAA9kC,EAAAglC,cAAArwC,EAAAI,OACAD,KAAAmwC,eAAAH,EAAA5kC,EAAAqxB,cAAAuT,GAAA9kC,EAAAklC,cAAAvwC,EAAAI,OACAD,KAAAqwC,iBAAA1xC,EAAAG,SAAAoM,EAAAolC,gBAAAplC,EAAAolC,eAAAllC,EAAAlH,WAAAiH,EAAAjH,WAEAlE,KAAAuwC,UAAAtoC,IACAjI,KAAAwwC,eAAA,EAEAxwC,KAAAywC,aAAAvlC,EAAAwkC,WACA1vC,KAAA0wC,aAAAxlC,EAAAykC,WACA3vC,KAAA2wC,iBAAAzlC,EAAA0kC,eACA5vC,KAAA4wC,aAAA1lC,EAAA2kC,WACA7vC,KAAA6wC,cAAA3lC,EAAA4kC,YACA9vC,KAAA8wC,cAAA5lC,EAAA6kC,YAGA/vC,KAAA+wC,KACA/wC,KAAAgxC,KACAhxC,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QAEAtxC,KAAAy2B,OAAA,IAAA7sB,EAEA5J,KAAAuxC,YACAvxC,KAAAwxC,aAAAhC,EAmBAD,EAAAjxC,UAAAmzC,gBAAA,WACA,OAAAzxC,KAAAiwC,gBAMAV,EAAAjxC,UAAAozC,gBAAA,WACA,OAAA1xC,KAAAmwC,gBAMAZ,EAAAjxC,UAAAqzC,kBAAA,WACA,OAAA3xC,KAAAqwC,kBAMAd,EAAAjxC,UAAAszC,cAAA,WACA,IAAAC,EAAA7xC,KAAAsL,QAEA,OADAtL,KAAAuL,QACA8K,QAAAtV,EAAA8wC,EAAAx7B,QAAAtV,EAAAf,KAAAqwC,kBAMAd,EAAAjxC,UAAAwzC,cAAA,WACA,IAAAD,EAAA7xC,KAAAsL,QAEA,OADAtL,KAAAuL,QACAwrB,kBAAA8a,EAAA9a,mBAMAwY,EAAAjxC,UAAAyzC,eAAA,WACA,OAAA/xC,KAAA8wC,eAMAvB,EAAAjxC,UAAAyxC,YAAA,SAAAzjC,GACAtM,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA8wC,cAAAxkC,GAMAijC,EAAAjxC,UAAA0zC,eAAA,SAAA9kC,GACA,OAAAA,EAAAlN,KAAAwwC,gBAMAjB,EAAAjxC,UAAA2zC,cAAA,SAAA/5B,GACAlY,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA4wC,aAAA14B,GAMAq3B,EAAAjxC,UAAA4zC,cAAA,WACA,OAAAlyC,KAAA4wC,cAMArB,EAAAjxC,UAAA6zC,kBAAA,SAAA1W,GACAz7B,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA2wC,iBAAAlV,GAMA8T,EAAAjxC,UAAA8zC,eAAA,WACA,OAAApyC,KAAA6wC,eAMAtB,EAAAjxC,UAAAwxC,YAAA,SAAAxjC,GACAA,GAAAtM,KAAA6wC,gBACA7wC,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA6wC,cAAAvkC,EACAtM,KAAAuwC,UAAAroC,EAAA,IAOAqnC,EAAAjxC,UAAA+zC,cAAA,WACA,OAAAryC,KAAAywC,cAMAlB,EAAAjxC,UAAAg0C,cAAA,WACA,OAAAtyC,KAAA0wC,cAMAnB,EAAAjxC,UAAAi0C,UAAA,SAAApvC,EAAAD,GAGAC,GAAAnD,KAAAywC,cAAAvtC,GAAAlD,KAAA0wC,eACA1wC,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAAuwC,UAAAroC,EAAA,EACAlI,KAAAywC,aAAAttC,EACAnD,KAAA0wC,aAAAxtC,IAIAqsC,EAAAjxC,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGAV,EAAAjxC,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAMAZ,EAAAjxC,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAAO,IAAAJ,KAAAuwC,UAAAxxC,EAAAiB,KAAAuwC,UAAAxwC,GAAA6B,IAAAsL,IAOAqiC,EAAAjxC,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAAuwC,UAAAroC,GAGAqnC,EAAAjxC,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAoE,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAyZ,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA1a,KAAA+wC,KAAAptC,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAjxC,KAAAgxC,KAAArtC,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBAWA,IAAA/2B,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAEAxb,EAAA1b,EAAAE,IAAA,EAwBA,GAtBAta,KAAAy2B,OAAAruB,GAAArJ,EAAAob,EAAAE,EAAAra,KAAA+wC,KAAAhxC,EAAAC,KAAA+wC,KAAAhxC,EAAAqa,EAAApa,KAAAgxC,KAAAjxC,EACAC,KAAAgxC,KAAAjxC,EAAAua,EACAta,KAAAy2B,OAAApuB,GAAAtJ,GAAAiB,KAAA+wC,KAAAhxC,EAAAC,KAAA+wC,KAAAhyC,EAAAqb,EAAApa,KAAAgxC,KAAAjxC,EACAC,KAAAgxC,KAAAjyC,EAAAub,EACAta,KAAAy2B,OAAA5sB,GAAA9K,GAAAiB,KAAA+wC,KAAAhxC,EAAAqa,EAAApa,KAAAgxC,KAAAjxC,EAAAua,EACAta,KAAAy2B,OAAAruB,GAAArI,EAAAC,KAAAy2B,OAAApuB,GAAAtJ,EACAiB,KAAAy2B,OAAApuB,GAAAtI,EAAAoa,EAAAE,EAAAra,KAAA+wC,KAAAhyC,EAAAiB,KAAA+wC,KAAAhyC,EAAAqb,EAAApa,KAAAgxC,KAAAjyC,EACAiB,KAAAgxC,KAAAjyC,EAAAub,EACAta,KAAAy2B,OAAA5sB,GAAA9J,EAAAC,KAAA+wC,KAAAhyC,EAAAqb,EAAApa,KAAAgxC,KAAAjyC,EAAAub,EACAta,KAAAy2B,OAAAruB,GAAAF,EAAAlI,KAAAy2B,OAAA5sB,GAAA9K,EACAiB,KAAAy2B,OAAApuB,GAAAH,EAAAlI,KAAAy2B,OAAA5sB,GAAA9J,EACAC,KAAAy2B,OAAA5sB,GAAA3B,EAAAkS,EAAAE,EAEAta,KAAAuxC,YAAAn3B,EAAAE,EACAta,KAAAuxC,YAAA,IACAvxC,KAAAuxC,YAAA,EAAAvxC,KAAAuxC,cAGA,GAAAvxC,KAAA8wC,eAAAhb,KACA91B,KAAAwwC,eAAA,GAGAxwC,KAAA6wC,eAAA,GAAA/a,EAAA,CACA,IAAA4c,EAAAh4B,EAAAF,EAAAxa,KAAAqwC,iBAEA1xC,EAAAqE,IAAAhD,KAAA0wC,aAAA1wC,KAAAywC,cAAA,EAAA9qC,EAAAO,YACAlG,KAAAwxC,aA/UA,EAiVKkB,GAAA1yC,KAAAywC,cAnVL,GAoVAzwC,KAAAwxC,eACAxxC,KAAAuwC,UAAAroC,EAAA,GAEAlI,KAAAwxC,aAvVA,GAyVKkB,GAAA1yC,KAAA0wC,cAxVL,GAyVA1wC,KAAAwxC,eACAxxC,KAAAuwC,UAAAroC,EAAA,GAEAlI,KAAAwxC,aA5VA,IA+VAxxC,KAAAwxC,aAAAhC,EACAxvC,KAAAuwC,UAAAroC,EAAA,QAIAlI,KAAAwxC,aAAAhC,EAGA,GAAAjiC,EAAAsJ,aAAA,CAEA7W,KAAAuwC,UAAA3uC,IAAA2L,EAAAuJ,SACA9W,KAAAwwC,gBAAAjjC,EAAAuJ,QAEA,IAAA4E,EAAA7b,EAAAO,IAAAJ,KAAAuwC,UAAAxxC,EAAAiB,KAAAuwC,UAAAxwC,GAEAic,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAAA1b,KAAAwwC,eAAAxwC,KAAAuwC,UAAAroC,GAEAgU,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,GAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,GAAA1b,KAAAwwC,eAAAxwC,KAAAuwC,UAAAroC,QAGAlI,KAAAuwC,UAAA3vC,UACAZ,KAAAwwC,eAAA,EAGAxwC,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAozB,EAAAjxC,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAkZ,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAEAxb,EAAA1b,EAAAE,IAAA,EAGA,GAAAta,KAAA8wC,eA5YA,GA4YA9wC,KAAAwxC,cACA,GAAA1b,EAAA,CACA,IAAA6c,EAAAx2B,EAAAF,EAAAjc,KAAA4wC,aACAn1B,GAAAzb,KAAAuxC,YAAAoB,EACAC,EAAA5yC,KAAAwwC,eACAqC,EAAAtlC,EAAAulC,GAAA9yC,KAAA2wC,iBACA3wC,KAAAwwC,eAAA7xC,EAAAe,MAAAM,KAAAwwC,eAAA/0B,GACAo3B,KAGA52B,GAAA7B,GAFAqB,EAAAzb,KAAAwwC,eAAAoC,GAGAz2B,GAAA7B,EAAAmB,EAIA,GAAAzb,KAAA6wC,eAAA7wC,KAAAwxC,cAAAhC,GACA,GAAA1Z,EAAA,CACA,IAAAid,EAAAlzC,EAAAI,OACA8yC,EAAAzxC,WAAA,EAAA4a,EAAA,EAAArc,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,OACA+B,EAAAtxC,WAAA,EAAAua,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAA+wC,OACA,IAAAiC,EAAA72B,EAAAF,EACA02B,EAAA1qC,EAAA8qC,EAAAh0C,EAAAg0C,EAAAhzC,EAAAizC,GAEAv3B,EAAAxT,EAAAlF,IAAA/C,KAAAy2B,OAAA3sB,QAAA6oC,IAEA,GAraA,GAqaA3yC,KAAAwxC,aACAxxC,KAAAuwC,UAAAnvC,IAAAqa,QAEK,GA1aL,GA0aKzb,KAAAwxC,aAAA,CAGL,GAFAxxC,KAAAuwC,UAAAroC,EAAAuT,EAAAvT,EAEA,GACA,IAAA+qC,EAAApzC,EAAAiD,SAAA,EAAAiwC,EAAA/yC,KAAAuwC,UAAAroC,EAAArI,EAAAO,IAAAJ,KAAAy2B,OAAA5sB,GAAA9K,EAAAiB,KAAAy2B,OAAA5sB,GAAA9J,IACAmzC,EAAAlzC,KAAAy2B,OAAA1sB,QAAAkpC,GACAx3B,EAAA1c,EAAAm0C,EAAAn0C,EACA0c,EAAA1b,EAAAmzC,EAAAnzC,EACA0b,EAAAvT,GAAAlI,KAAAuwC,UAAAroC,EACAlI,KAAAuwC,UAAAxxC,GAAAm0C,EAAAn0C,EACAiB,KAAAuwC,UAAAxwC,GAAAmzC,EAAAnzC,EACAC,KAAAuwC,UAAAroC,EAAA,OAGAlI,KAAAuwC,UAAAnvC,IAAAqa,QAGK,GA1bL,GA0bKzb,KAAAwxC,aAAA,CAGL,GAFAxxC,KAAAuwC,UAAAroC,EAAAuT,EAAAvT,EAEA,GACA+qC,EAAApzC,EAAAiD,SAAA,EAAAiwC,EAAA/yC,KAAAuwC,UAAAroC,EAAArI,EAAAO,IAAAJ,KAAAy2B,OAAA5sB,GAAA9K,EAAAiB,KAAAy2B,OAAA5sB,GAAA9J,IACAmzC,EAAAlzC,KAAAy2B,OAAA1sB,QAAAkpC,GACAx3B,EAAA1c,EAAAm0C,EAAAn0C,EACA0c,EAAA1b,EAAAmzC,EAAAnzC,EACA0b,EAAAvT,GAAAlI,KAAAuwC,UAAAroC,EACAlI,KAAAuwC,UAAAxxC,GAAAm0C,EAAAn0C,EACAiB,KAAAuwC,UAAAxwC,GAAAmzC,EAAAnzC,EACAC,KAAAuwC,UAAAroC,EAAA,OAGAlI,KAAAuwC,UAAAnvC,IAAAqa,GAIA,IAAAC,EAAA7b,EAAAO,IAAAqb,EAAA1c,EAAA0c,EAAA1b,GAEAic,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAAAD,EAAAvT,GAEAgU,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,GAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,GAAAD,EAAAvT,OAEG,EAEHyqC,EAAA9yC,EAAAI,QACAqB,WAAA,EAAA4a,EAAA,EAAArc,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,OACA2B,EAAAlxC,WAAA,EAAAua,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAA+wC,OACAt1B,EAAAzb,KAAAy2B,OAAA1sB,QAAAlK,EAAAkD,IAAA4vC,IAEA3yC,KAAAuwC,UAAAxxC,GAAA0c,EAAA1c,EACAiB,KAAAuwC,UAAAxwC,GAAA0b,EAAA1b,EAEAic,EAAAta,OAAAyY,EAAAsB,GACAQ,GAAA7B,EAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAt1B,GAEAS,EAAA3a,OAAA8Y,EAAAoB,GACAU,GAAA7B,EAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAv1B,GAGAzb,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAozB,EAAAjxC,UAAAmP,yBAAA,SAAAF,GACA,IASA4lC,EATA54B,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACA0Z,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EAEAyxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA04B,EAAA,EAGAtd,EAAA91B,KAAAqxC,QAAArxC,KAAAsxC,SAAA,EAGA,GAAAtxC,KAAA6wC,eAAA7wC,KAAAwxC,cAAAhC,GACA,GAAA1Z,EAAA,CACA,IAAAlyB,EAAA8W,EAAAF,EAAAxa,KAAAqwC,iBACAgD,EAAA,EAEA,GA9fA,GA8fArzC,KAAAwxC,aAAA,CAEA,IAAAn2B,EAAA1c,EAAAe,MAAAkE,EAAA5D,KAAAywC,cACA9qC,EAAAgB,qBAAAhB,EAAAgB,sBACA0sC,GAAArzC,KAAAuxC,YAAAl2B,EACA+3B,EAAAz0C,EAAAqE,IAAAqY,QAEK,GAvgBL,GAugBKrb,KAAAwxC,aAAA,CAEL4B,IADA/3B,EAAAzX,EAAA5D,KAAAywC,cAIAp1B,EAAA1c,EAAAe,MAAA2b,EAAA1V,EAAAO,aAAAP,EAAAgB,qBACA,GACA0sC,GAAArzC,KAAAuxC,YAAAl2B,OAEK,GA/gBL,GA+gBKrb,KAAAwxC,aAAA,CAEL4B,EADA/3B,EAAAzX,EAAA5D,KAAA0wC,aAIAr1B,EAAA1c,EAAAe,MAAA2b,EAAA1V,EAAAO,YAAA,EACAP,EAAAgB,sBACA0sC,GAAArzC,KAAAuxC,YAAAl2B,EAGAb,GAAAxa,KAAAqxC,QAAAgC,EACA34B,GAAA1a,KAAAsxC,QAAA+B,EAKAb,EAAA3xC,IAAA2Z,GACAi4B,EAAA5xC,IAAA6Z,GACA,IAAA5F,EAAAnR,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAl8B,EAAApR,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,kBAEA71B,EAAAxb,EAAAI,QACAqB,WAAA,EAAAmZ,EAAA,EAAA1F,GACAsG,EAAA5Z,WAAA,EAAA8Y,EAAA,EAAAzF,GACAq+B,EAAA93B,EAAAxZ,SAEA,IAAAsY,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAEA91B,EAAA,IAAArT,EACAqT,EAAApT,GAAArJ,EAAAob,EAAAE,EAAAD,EAAAtF,EAAA/U,EAAA+U,EAAA/U,EAAAua,EAAAvF,EAAAhV,EAAAgV,EAAAhV,EACAyb,EAAApT,GAAArI,GAAAqa,EAAAtF,EAAA/V,EAAA+V,EAAA/U,EAAAua,EAAAvF,EAAAhW,EAAAgW,EAAAhV,EACAyb,EAAAnT,GAAAtJ,EAAAyc,EAAApT,GAAArI,EACAyb,EAAAnT,GAAAtI,EAAAoa,EAAAE,EAAAD,EAAAtF,EAAA/V,EAAA+V,EAAA/V,EAAAub,EAAAvF,EAAAhW,EAAAgW,EAAAhW,EAEA,IAAA0c,EAAA5b,EAAAkD,IAAAyY,EAAA/S,MAAA4S,IAcA,OAZAd,EAAA7Y,OAAAyY,EAAAsB,GACAjB,GAAAJ,EAAAva,EAAA+C,MAAAkS,EAAA2G,GAEAhB,EAAAlZ,OAAA8Y,EAAAoB,GACAf,GAAAJ,EAAAza,EAAA+C,MAAAmS,EAAA0G,GAGAzb,KAAAsL,QAAAyO,WAAAhd,EAAA8D,IAAA0Z,GACAva,KAAAsL,QAAAyO,WAAAhZ,EAAAyZ,EACAxa,KAAAuL,QAAAwO,WAAAhd,EAAA8D,IAAA4Z,GACAza,KAAAuL,QAAAwO,WAAAhZ,EAAA2Z,EAEAy4B,GAAAxtC,EAAAK,YACAotC,GAAAztC,EAAAO,8BCzlBAzJ,EAAAD,QAAA82C,EAEah3C,EAAQ,GAArB,IACA04B,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnB2L,EAAW3L,EAAQ,GACnB6L,EAAY7L,EAAQ,GACpBsN,EAAYtN,EAAQ,IACpBqH,EAAUrH,EAAQ,GAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBkzC,EAAA,EAKA8D,EAAAxuB,KAAA,kBAEAwuB,EAAAzuB,OAAAja,EACA0oC,EAAAh1C,UAAAN,EAAAs1C,EAAAzuB,OAAAvmB,WA4BA,IAAAmxC,EAAA,CACAK,aAAA,EACAyD,iBAAA,EACAC,iBAAA,EACAzD,aAAA,EACA0D,cAAA,EACA5D,WAAA,EACA5jC,QAAA,GAaA,SAAAqnC,EAAApoC,EAAAC,EAAAC,EAAA4kC,EAAA0D,GACA,KAAA1zC,gBAAAszC,GACA,WAAAA,EAAApoC,EAAAC,EAAAC,EAAA4kC,EAAA0D,GAGAxoC,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAioC,EAAAxuB,KAEA9kB,KAAAiwC,eAAAD,EAAA7kC,EAAAsxB,cAAAuT,GAAA9kC,EAAAglC,cAAArwC,EAAAI,OACAD,KAAAmwC,eAAAH,EAAA5kC,EAAAqxB,cAAAuT,GAAA9kC,EAAAklC,cAAAvwC,EAAAI,OACAD,KAAA2zC,cAAAD,EAAAvoC,EAAAuxB,eAAAgX,GAAAxoC,EAAA0oC,YAAA/zC,EAAAO,IAAA,KACAJ,KAAA2zC,cAAA3xC,YACAhC,KAAA6zC,cAAAh0C,EAAA+C,MAAA,EAAA5C,KAAA2zC,eACA3zC,KAAAqwC,iBAAA1xC,EAAAG,SAAAoM,EAAAolC,gBAAAplC,EAAAolC,eAAAllC,EAAAlH,WAAAiH,EAAAjH,WAEAlE,KAAAuwC,UAAAtoC,IACAjI,KAAAuxC,YAAA,EACAvxC,KAAAwwC,eAAA,EAEAxwC,KAAA8zC,mBAAA5oC,EAAAqoC,iBACAvzC,KAAA+zC,mBAAA7oC,EAAAsoC,iBACAxzC,KAAAg0C,gBAAA9oC,EAAAuoC,cACAzzC,KAAA4wC,aAAA1lC,EAAA2kC,WACA7vC,KAAA6wC,cAAA3lC,EAAA4kC,YACA9vC,KAAA8wC,cAAA5lC,EAAA6kC,YACA/vC,KAAAwxC,aAAAhC,EAEAxvC,KAAA4uC,OAAA/uC,EAAAI,OACAD,KAAAi0C,OAAAp0C,EAAAI,OAGAD,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QACAtxC,KAAA4uC,OAAA5uC,KAAAi0C,OACAj0C,KAAAk0C,KAAAl0C,KAAAm0C,KACAn0C,KAAAo0C,KAAAp0C,KAAAq0C,KACAr0C,KAAAs0C,IAAA,IAAA1qC,EACA5J,KAAAuxC,YA+EA+B,EAAAh1C,UAAAmzC,gBAAA,WACA,OAAAzxC,KAAAiwC,gBAMAqD,EAAAh1C,UAAAozC,gBAAA,WACA,OAAA1xC,KAAAmwC,gBAMAmD,EAAAh1C,UAAAi2C,cAAA,WACA,OAAAv0C,KAAA2zC,eAMAL,EAAAh1C,UAAAqzC,kBAAA,WACA,OAAA3xC,KAAAqwC,kBAMAiD,EAAAh1C,UAAAk2C,oBAAA,WACA,IAAAlpB,EAAAtrB,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,gBACA1kB,EAAAvrB,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,gBACAnzC,EAAA6C,EAAA8B,IAAA4pB,EAAAD,GACAooB,EAAA1zC,KAAAsL,QAAAixB,eAAAv8B,KAAA2zC,eAGA,OADA9zC,EAAA8C,IAAA3F,EAAA02C,IAOAJ,EAAAh1C,UAAAwzC,cAAA,WACA,IAAAD,EAAA7xC,KAAAsL,QACAmpC,EAAAz0C,KAAAuL,QAEAuJ,EAAAnR,EAAAa,QAAAqtC,EAAAlb,KAAA3xB,EAAAnF,EAAA8B,IAAA3B,KAAAiwC,eAAA4B,EAAAx7B,QAAArN,cACA+L,EAAApR,EAAAa,QAAAiwC,EAAA9d,KAAA3xB,EAAAnF,EAAA8B,IAAA3B,KAAAmwC,eAAAsE,EAAAp+B,QAAArN,cACA4H,EAAA/Q,EAAAuB,IAAAywC,EAAAx7B,QAAAtZ,EAAA+X,GACAjE,EAAAhR,EAAAuB,IAAAqzC,EAAAp+B,QAAAtZ,EAAAgY,GACA/X,EAAA6C,EAAA8B,IAAAkP,EAAAD,GACA8iC,EAAA/vC,EAAAa,QAAAqtC,EAAAlb,KAAA3xB,EAAAhF,KAAA2zC,eAEA33B,EAAA61B,EAAA/a,iBACA5a,EAAAu4B,EAAA3d,iBACA7a,EAAA41B,EAAA9a,kBACA5a,EAAAs4B,EAAA1d,kBAIA,OAFAl3B,EAAA8C,IAAA3F,EAAA6C,EAAA+C,MAAAqZ,EAAAy3B,IACA7zC,EAAA8C,IAAA+wC,EAAA7zC,EAAA8B,IAAA9B,EAAAgD,SAAAqZ,EAAAC,EAAApH,GAAAlV,EAAAgD,SAAAmZ,EAAAC,EAAAnH,MAOAw+B,EAAAh1C,UAAA8zC,eAAA,WACA,OAAApyC,KAAA6wC,eAMAyC,EAAAh1C,UAAAwxC,YAAA,SAAAxjC,GACAA,GAAAtM,KAAA6wC,gBACA7wC,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA6wC,cAAAvkC,EACAtM,KAAAuwC,UAAAroC,EAAA,IAOAorC,EAAAh1C,UAAA+zC,cAAA,WACA,OAAAryC,KAAA8zC,oBAMAR,EAAAh1C,UAAAg0C,cAAA,WACA,OAAAtyC,KAAA+zC,oBAMAT,EAAAh1C,UAAAi0C,UAAA,SAAApvC,EAAAD,GAEAC,GAAAnD,KAAA8zC,oBAAA5wC,GAAAlD,KAAA+zC,qBACA/zC,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA8zC,mBAAA3wC,EACAnD,KAAA+zC,mBAAA7wC,EACAlD,KAAAuwC,UAAAroC,EAAA,IAOAorC,EAAAh1C,UAAAyzC,eAAA,WACA,OAAA/xC,KAAA8wC,eAMAwC,EAAAh1C,UAAAyxC,YAAA,SAAAzjC,GACAtM,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA8wC,cAAAxkC,GAMAgnC,EAAAh1C,UAAA2zC,cAAA,SAAA/5B,GACAlY,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA4wC,aAAA14B,GAMAo7B,EAAAh1C,UAAAo2C,iBAAA,SAAArZ,GACAr7B,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAAg0C,gBAAA3Y,GAMAiY,EAAAh1C,UAAA4zC,cAAA,WACA,OAAAlyC,KAAA4wC,cAMA0C,EAAAh1C,UAAAq2C,cAAA,SAAAznC,GACA,OAAAA,EAAAlN,KAAAwwC,gBAGA8C,EAAAh1C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGAqD,EAAAh1C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGAmD,EAAAh1C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAAiD,QAAA9C,KAAAuwC,UAAAxxC,EAAAiB,KAAAi0C,OAAAj0C,KAAAwwC,eAAAxwC,KAAAuwC,UAAAroC,EAAAlI,KAAA4uC,QAAAhtC,IAAAsL,IAGAomC,EAAAh1C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAAuwC,UAAAxwC,GAGAuzC,EAAAh1C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAmE,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAwZ,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAGA5F,EAAAnR,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAl8B,EAAApR,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBACAl0C,EAAA6C,EAAAI,OACAjD,EAAAsE,WAAA,EAAAmZ,EAAA,EAAA1F,GACA/X,EAAAyE,WAAA,EAAA8Y,EAAA,EAAAzF,GAEA,IAAAqF,EAAAna,KAAAmxC,WAAA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QAAA/2B,EAAAta,KAAAsxC,QAIAtxC,KAAA4uC,OAAAjrC,EAAAa,QAAAguC,EAAAxyC,KAAA2zC,eACA3zC,KAAAo0C,KAAAv0C,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA8X,GAAA9U,KAAA4uC,QACA5uC,KAAAq0C,KAAAx0C,EAAA+C,MAAAmS,EAAA/U,KAAA4uC,QAEA5uC,KAAAuxC,YAAAp3B,EAAAE,EAAAD,EAAApa,KAAAo0C,KAAAp0C,KAAAo0C,KAAA95B,EAAAta,KAAAq0C,KACAr0C,KAAAq0C,KACAr0C,KAAAuxC,YAAA,IACAvxC,KAAAuxC,YAAA,EAAAvxC,KAAAuxC,aAMAvxC,KAAAi0C,OAAAtwC,EAAAa,QAAAguC,EAAAxyC,KAAA6zC,eAEA7zC,KAAAk0C,KAAAr0C,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA8X,GAAA9U,KAAAi0C,QACAj0C,KAAAm0C,KAAAt0C,EAAA+C,MAAAmS,EAAA/U,KAAAi0C,QAEAp0C,EAAA+C,MAAAkS,EAAA9U,KAAAi0C,QAAA,IAEAh3B,EAAA9C,EAAAE,EAAAD,EAAApa,KAAAk0C,KAAAl0C,KAAAk0C,KAAA55B,EAAAta,KAAAm0C,KAAAn0C,KAAAm0C,KACAh3B,EAAA/C,EAAApa,KAAAk0C,KAAA55B,EAAAta,KAAAm0C,KACAS,EAAAx6B,EAAApa,KAAAk0C,KAAAl0C,KAAAo0C,KAAA95B,EAAAta,KAAAm0C,KAAAn0C,KAAAq0C,KACAn3B,EAAA9C,EAAAE,EACA,GAAA4C,IAEAA,EAAA,GAEA,IAAA23B,EAAAz6B,EAAApa,KAAAo0C,KAAA95B,EAAAta,KAAAq0C,KACAS,EAAA36B,EAAAE,EAAAD,EAAApa,KAAAo0C,KAAAp0C,KAAAo0C,KAAA95B,EAAAta,KAAAq0C,KAAAr0C,KAAAq0C,KAQA,GANAr0C,KAAAs0C,IAAAlsC,GAAAvH,IAAAoc,EAAAE,EAAAy3B,GACA50C,KAAAs0C,IAAAjsC,GAAAxH,IAAAsc,EAAAD,EAAA23B,GACA70C,KAAAs0C,IAAAzqC,GAAAhJ,IAAA+zC,EAAAC,EAAAC,GAIA90C,KAAA6wC,cAAA,CAEA,IAAAkE,EAAAl1C,EAAA8C,IAAA3C,KAAA4uC,OAAA5xC,GACA2B,EAAAqE,IAAAhD,KAAA+zC,mBAAA/zC,KAAA8zC,oBAAA,EAAAnuC,EAAAK,WACAhG,KAAAwxC,aAxaA,EA0aKuD,GAAA/0C,KAAA8zC,mBA5aL,GA6aA9zC,KAAAwxC,eACAxxC,KAAAwxC,aA9aA,EA+aAxxC,KAAAuwC,UAAAroC,EAAA,GAGK6sC,GAAA/0C,KAAA+zC,mBAjbL,GAkbA/zC,KAAAwxC,eACAxxC,KAAAwxC,aAnbA,EAobAxxC,KAAAuwC,UAAAroC,EAAA,IAIAlI,KAAAwxC,aAAAhC,EACAxvC,KAAAuwC,UAAAroC,EAAA,QAIAlI,KAAAwxC,aAAAhC,EACAxvC,KAAAuwC,UAAAroC,EAAA,EAOA,GAJA,GAAAlI,KAAA8wC,gBACA9wC,KAAAwwC,eAAA,GAGAjjC,EAAAsJ,aAAA,CAEA7W,KAAAuwC,UAAA3uC,IAAA2L,EAAAuJ,SACA9W,KAAAwwC,gBAAAjjC,EAAAuJ,QAEA,IAAA4E,EAAA7b,EAAAiD,QAAA9C,KAAAuwC,UAAAxxC,EAAAiB,KAAAi0C,OAAAj0C,KAAAwwC,eACAxwC,KAAAuwC,UAAAroC,EAAAlI,KAAA4uC,QACAoG,EAAAh1C,KAAAuwC,UAAAxxC,EAAAiB,KAAAk0C,KAAAl0C,KAAAuwC,UAAAxwC,GACAC,KAAAwwC,eAAAxwC,KAAAuwC,UAAAroC,GAAAlI,KAAAo0C,KACAa,EAAAj1C,KAAAuwC,UAAAxxC,EAAAiB,KAAAm0C,KAAAn0C,KAAAuwC,UAAAxwC,GACAC,KAAAwwC,eAAAxwC,KAAAuwC,UAAAroC,GAAAlI,KAAAq0C,KAEAr4B,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAA46B,EAEA94B,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,EAAA26B,OAEAj1C,KAAAuwC,UAAA3vC,UACAZ,KAAAwwC,eAAA,EAGAxwC,KAAAsL,QAAAwO,WAAAxZ,EAAAO,IAAAmb,GACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAAO,IAAAqb,GACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAm3B,EAAAh1C,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAkZ,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAGA,GAAAtxC,KAAA8wC,eA5eA,GA4eA9wC,KAAAwxC,aAAA,CACA,IAAAmB,EAAA9yC,EAAA8C,IAAA3C,KAAA4uC,OAAA/uC,EAAA8B,IAAAua,EAAAF,IAAAhc,KAAAq0C,KAAAl4B,EACAnc,KAAAo0C,KAAAn4B,EACAR,EAAAzb,KAAAuxC,aAAAvxC,KAAA4wC,aAAA+B,GACAC,EAAA5yC,KAAAwwC,eACAqC,EAAAtlC,EAAAulC,GAAA9yC,KAAAg0C,gBACAh0C,KAAAwwC,eAAA7xC,EAAAe,MAAAM,KAAAwwC,eAAA/0B,GACAo3B,KACAp3B,EAAAzb,KAAAwwC,eAAAoC,EAEA,IAAAl3B,EAAA7b,EAAA+B,IAAA6Z,EAAAzb,KAAA4uC,QACAoG,EAAAv5B,EAAAzb,KAAAo0C,KACAa,EAAAx5B,EAAAzb,KAAAq0C,KAEAr4B,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAA46B,EAEA94B,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,EAAA26B,EAGA,IAAAlC,EAAAlzC,EAAAI,OAKA,GAJA8yC,EAAAh0C,GAAAc,EAAA8C,IAAA3C,KAAAi0C,OAAA/3B,GAAAlc,KAAAm0C,KAAAh4B,EACA42B,EAAAh0C,GAAAc,EAAA8C,IAAA3C,KAAAi0C,OAAAj4B,GAAAhc,KAAAk0C,KAAAj4B,EACA82B,EAAAhzC,EAAAoc,EAAAF,EAEAjc,KAAA6wC,eAAA7wC,KAAAwxC,cAAAhC,EAAA,CAEA,IAAAwD,EAAA,EACAA,GAAAnzC,EAAA8C,IAAA3C,KAAA4uC,OAAA1yB,GAAAlc,KAAAq0C,KAAAl4B,EACA62B,GAAAnzC,EAAA8C,IAAA3C,KAAA4uC,OAAA5yB,GAAAhc,KAAAo0C,KAAAn4B,EAEA02B,EAAA1qC,EAAA8qC,EAAAh0C,EAAAg0C,EAAAhzC,EAAAizC,GAAA,IAEAkC,EAAAjtC,EAAAjI,KAAAuwC,WACA4E,EAAAn1C,KAAAs0C,IAAAxqC,QAAA7B,EAAAlF,IAAA4vC,IACA3yC,KAAAuwC,UAAAnvC,IAAA+zC,GAlhBA,GAohBAn1C,KAAAwxC,aACAxxC,KAAAuwC,UAAAroC,EAAAvJ,EAAAc,IAAAO,KAAAuwC,UAAAroC,EAAA,GAphBA,GAqhBKlI,KAAAwxC,eACLxxC,KAAAuwC,UAAAroC,EAAAvJ,EAAAa,IAAAQ,KAAAuwC,UAAAroC,EAAA,IAKA,IAAAlH,EAAAnB,EAAAiD,SAAA,EAAAiwC,IAAA/yC,KAAAuwC,UAAAroC,EAAAgtC,EAAAhtC,GAAArI,EAAAO,IAAAJ,KAAAs0C,IAAAzqC,GAAA9K,EAAAiB,KAAAs0C,IAAAzqC,GAAA9J,IACAq1C,EAAAv1C,EAAAuB,IAAApB,KAAAs0C,IAAAvqC,QAAA/I,GAAAnB,EAAAO,IAAA80C,EAAAn2C,EAAAm2C,EAAAn1C,IACAC,KAAAuwC,UAAAxxC,EAAAq2C,EAAAr2C,EACAiB,KAAAuwC,UAAAxwC,EAAAq1C,EAAAr1C,EAEAo1C,EAAAltC,EAAAtG,IAAA3B,KAAAuwC,UAAA2E,GAEAx5B,EAAA7b,EAAAiD,QAAAqyC,EAAAp2C,EAAAiB,KAAAi0C,OAAAkB,EAAAjtC,EAAAlI,KAAA4uC,QACAoG,EAAAG,EAAAp2C,EAAAiB,KAAAk0C,KAAAiB,EAAAp1C,EAAAo1C,EAAAjtC,EAAAlI,KAAAo0C,KACAa,EAAAE,EAAAp2C,EAAAiB,KAAAm0C,KAAAgB,EAAAp1C,EAAAo1C,EAAAjtC,EAAAlI,KAAAq0C,KAEAr4B,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAA46B,EAEA94B,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,EAAA26B,MACG,CAEHE,EAAAn1C,KAAAs0C,IAAAvqC,QAAAlK,EAAAkD,IAAAgwC,IACA/yC,KAAAuwC,UAAAxxC,GAAAo2C,EAAAp2C,EACAiB,KAAAuwC,UAAAxwC,GAAAo1C,EAAAp1C,EAEA2b,EAAA7b,EAAA+B,IAAAuzC,EAAAp2C,EAAAiB,KAAAi0C,QACAe,EAAAG,EAAAp2C,EAAAiB,KAAAk0C,KAAAiB,EAAAp1C,EACAk1C,EAAAE,EAAAp2C,EAAAiB,KAAAm0C,KAAAgB,EAAAp1C,EAEAic,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAA46B,EAEA94B,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,EAAA26B,EAGAj1C,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAm3B,EAAAh1C,UAAAmP,yBAAA,SAAAF,GACA,IAAAgN,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACA0Z,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EAEAyxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEAP,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAGAx8B,EAAAnR,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAl8B,EAAApR,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBACAl0C,EAAA6C,EAAA8B,IAAA9B,EAAAuB,IAAAqZ,EAAA1F,GAAAlV,EAAAuB,IAAAmZ,EAAAzF,IAEA4+B,EAAA/vC,EAAAa,QAAAguC,EAAAxyC,KAAA2zC,eACA5F,EAAAluC,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA8X,GAAA4+B,GACA1F,EAAAnuC,EAAA+C,MAAAmS,EAAA2+B,GACA2B,EAAA1xC,EAAAa,QAAAguC,EAAAxyC,KAAA6zC,eAEAjG,EAAA/tC,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA8X,GAAAugC,GACA5H,EAAA5tC,EAAA+C,MAAAmS,EAAAsgC,GAEA55B,EAAAxT,IACAqtC,EAAAz1C,EAAAI,OACAq1C,EAAAv2C,EAAAc,EAAA8C,IAAA0yC,EAAAr4C,GACAs4C,EAAAv1C,EAAA2a,EAAAF,EAAAxa,KAAAqwC,iBAEA,IAAAkF,EAAA52C,EAAAqE,IAAAsyC,EAAAv2C,GACAq0C,EAAAz0C,EAAAqE,IAAAsyC,EAAAv1C,GAEAiG,EAAAL,EAAAK,WACAU,EAAAf,EAAAe,oBAEAuF,GAAA,EACAupC,EAAA,EACA,GAAAx1C,KAAA6wC,cAAA,CAEA,IAAA4E,EAAA51C,EAAA8C,IAAA+wC,EAAA12C,GACA2B,EAAAqE,IAAAhD,KAAA+zC,mBAAA/zC,KAAA8zC,oBAAA,EAAA9tC,GAEAwvC,EAAA72C,EAAAe,MAAA+1C,GAAA/uC,KACA6uC,EAAA52C,EAAAc,IAAA81C,EAAA52C,EAAAqE,IAAAyyC,IACAxpC,GAAA,GAEKwpC,GAAAz1C,KAAA8zC,oBAEL0B,EAAA72C,EAAAe,MAAA+1C,EAAAz1C,KAAA8zC,mBAAA9tC,GACAU,EAAA,GACA6uC,EAAA52C,EACAc,IAAA81C,EAAAv1C,KAAA8zC,mBAAA2B,GACAxpC,GAAA,GAEKwpC,GAAAz1C,KAAA+zC,qBAELyB,EAAA72C,EAAAe,MAAA+1C,EAAAz1C,KAAA+zC,mBAAA/tC,EAAA,EACAU,GACA6uC,EAAA52C,EACAc,IAAA81C,EAAAE,EAAAz1C,KAAA+zC,oBACA9nC,GAAA,GAIA,GAAAA,EAAA,CACA,IAAAgR,EAAA9C,EAAAE,EAAAD,EAAAwzB,IAAAtzB,EAAAmzB,IACAtwB,EAAA/C,EAAAwzB,EAAAtzB,EAAAmzB,EACAmH,EAAAx6B,EAAAwzB,EAAAG,EAAAzzB,EAAAmzB,EAAAO,EAEA,IADA9wB,EAAA9C,EAAAE,KAGA4C,EAAA,GAEA,IAAA23B,EAAAz6B,EAAA2zB,EAAAzzB,EAAA0zB,EACA8G,EAAA36B,EAAAE,EAAAD,EAAA2zB,IAAAzzB,EAAA0zB,KAEAxyB,EAAA,IAAA5R,GACAxB,GAAAvH,IAAAoc,EAAAE,EAAAy3B,GACAp5B,EAAAnT,GAAAxH,IAAAsc,EAAAD,EAAA23B,GACAr5B,EAAA3R,GAAAhJ,IAAA+zC,EAAAC,EAAAC,GAEA,IAAAz5B,EAAApT,IACAoT,EAAAtc,EAAAu2C,EAAAv2C,EACAsc,EAAAtb,EAAAu1C,EAAAv1C,EACAsb,EAAAnT,EAAAstC,EAEA/5B,EAAAD,EAAA1R,QAAA7B,EAAAlF,IAAAsY,QACG,CACH,IAEA6B,EAKA1B,EAPAyB,EAAA9C,EAAAE,EAAAD,EAAAwzB,IAAAtzB,EAAAmzB,IACAtwB,EAAA/C,EAAAwzB,EAAAtzB,EAAAmzB,EAEA,IADAvwB,EAAA9C,EAAAE,KAEA4C,EAAA,IAGA1B,EAAA,IAAArT,GACAC,GAAAvH,IAAAoc,EAAAE,GACA3B,EAAAnT,GAAAxH,IAAAsc,EAAAD,GAEA,IAAAw4B,EAAAl6B,EAAA/S,MAAA5I,EAAAkD,IAAAuyC,IACA75B,EAAA1c,EAAA22C,EAAA32C,EACA0c,EAAA1b,EAAA21C,EAAA31C,EACA0b,EAAAvT,EAAA,EAGA,IAAAwT,EAAA7b,EAAAiD,QAAA2Y,EAAA1c,EAAAs2C,EAAA55B,EAAAvT,EAAAwrC,GACAsB,EAAAv5B,EAAA1c,EAAA6uC,EAAAnyB,EAAA1b,EAAA0b,EAAAvT,EAAA6lC,EACAkH,EAAAx5B,EAAA1c,EAAA0uC,EAAAhyB,EAAA1b,EAAA0b,EAAAvT,EAAA8lC,EAYA,OAVAzzB,EAAA7Y,OAAAyY,EAAAuB,GACAlB,GAAAJ,EAAA46B,EACAv6B,EAAAlZ,OAAA8Y,EAAAqB,GACAhB,GAAAJ,EAAA26B,EAEAj1C,KAAAsL,QAAAyO,WAAAhd,EAAAwd,EACAva,KAAAsL,QAAAyO,WAAAhZ,EAAAyZ,EACAxa,KAAAuL,QAAAwO,WAAAhd,EAAA0d,EACAza,KAAAuL,QAAAwO,WAAAhZ,EAAA2Z,EAEA66B,GAAA5vC,EAAAK,YACAotC,GAAAztC,EAAAO,4BCzuBAzJ,EAAAD,QAAA,kBCAAC,EAAAD,QAAA,SAAAm5C,GACA,QAAAj5C,EAAA,EAAiBA,EAAA4kB,UAAAzf,OAAsBnF,IAAA,CACvC,IAAAwD,EAAAohB,UAAA5kB,GACA,QAAAuB,KAAAiC,EACAA,EAAA3B,eAAAN,KACA03C,EAAA13C,GAAAiC,EAAAjC,IAIA,OAAA03C;;;;;;;ACFA,IAAAC,EAAAx4C,OAAAkB,UACAu3C,EAAAD,EAAAr3C,eACAu3C,EAAAF,EAAAr1C,SASAw1C,EAAA,iBAEAh1B,EAAAtkB,EAAAD,QAAA,GAEAukB,EAAAhgB,EAAAggB,EAAAi1B,GAAAj1B,EAAAzK,KAAA,SAAA3Y,EAAA2Y,GACA,cAAA3Y,IAAA2Y,GAGAyK,EAAAk1B,QAAA,SAAAt4C,GACA,gBAAAA,GAGAojB,EAAAm1B,MAAA,SAAAv4C,GACA,IACAM,EADAqY,EAAAw/B,EAAAj5C,KAAAc,GAGA,sBAAA2Y,GAAA,uBAAAA,GACA,oBAAAA,EACA,WAAA3Y,EAAAkE,OAGA,uBAAAyU,EAAA,CACA,IAAArY,KAAAN,EACA,GAAAk4C,EAAAh5C,KAAAc,EAAAM,GACA,SAGA,SAGA,OAAAN,GAGAojB,EAAAo1B,MAAA,SAAAx4C,EAAAmN,GACA,GAAAnN,IAAAmN,EACA,SAGA,IACA7M,EADAqY,EAAAw/B,EAAAj5C,KAAAc,GAGA,GAAA2Y,IAAAw/B,EAAAj5C,KAAAiO,GACA,SAGA,uBAAAwL,EAAA,CACA,IAAArY,KAAAN,EACA,KAAAojB,EAAAo1B,MAAAx4C,EAAAM,GAAA6M,EAAA7M,UAAA6M,GACA,SAGA,IAAA7M,KAAA6M,EACA,KAAAiW,EAAAo1B,MAAAx4C,EAAAM,GAAA6M,EAAA7M,UAAAN,GACA,SAGA,SAGA,sBAAA2Y,EAAA,CAEA,IADArY,EAAAN,EAAAkE,UACAiJ,EAAAjJ,OACA,SAEA,OAAA5D,GACA,IAAA8iB,EAAAo1B,MAAAx4C,EAAAM,GAAA6M,EAAA7M,IACA,SAGA,SAGA,4BAAAqY,EACA3Y,EAAAW,YAAAwM,EAAAxM,UAGA,kBAAAgY,GACA3Y,EAAAy4C,YAAAtrC,EAAAsrC,WAMAr1B,EAAAs1B,SAAA,SAAA14C,EAAA24C,GACA,OAAA34C,aAAA24C,GAGAv1B,EAAAw1B,IAAA,SAAA54C,GACA,cAAAA,GAGAojB,EAAAy1B,MAAA,SAAA74C,GACA,gBAAAA,GAGAojB,EAAA01B,MAAA,SAAA94C,GACA,yBAAAm4C,EAAAj5C,KAAAc,IAGAojB,EAAA21B,WAAA,SAAA/4C,GACA,OAAAojB,EAAA01B,MAAA94C,IAAA,IAAAA,EAAAkE,QAGAkf,EAAA41B,UAAA,SAAAh5C,GACA,QAAAA,IAAAojB,EAAA61B,QAAAj5C,IAAAk4C,EAAAh5C,KAAAc,EAAA,WACAmB,SAAAnB,EAAAkE,SAAAkf,EAAA81B,OAAAl5C,EAAAkE,SAAAlE,EAAAkE,QAAA,GAGAkf,EAAA61B,QAAA,SAAAj5C,GACA,2BAAAm4C,EAAAj5C,KAAAc,IAGAojB,EAAA+1B,QAAA,SAAAn5C,GACA,YAAAo5C,IAAAp5C,GAAA,oBAAAq5C,aACAr5C,aAAAq5C,aAAA,IAAAr5C,EAAAs5C,UAGAl2B,EAAAI,GAAA,SAAAxjB,GACA,4BAAAm4C,EAAAj5C,KAAAc,IAGAojB,EAAA81B,OAAA,SAAAl5C,GACA,0BAAAm4C,EAAAj5C,KAAAc,IAGAojB,EAAAm2B,IAAA,SAAAv5C,GACA,OAAAojB,EAAA81B,OAAAl5C,UAGAojB,EAAA3iB,OAAA,SAAAT,GACA,0BAAAm4C,EAAAj5C,KAAAc,IAGAojB,EAAAo2B,KAAA,SAAAx5C,GACA,OAAAojB,EAAA3iB,OAAAT,MAAA24C,cAAAl5C,SAAAO,EAAAs5C,WACAt5C,EAAAy5C,aAGAr2B,EAAAs2B,OAAA,SAAA15C,GACA,0BAAAm4C,EAAAj5C,KAAAc,IAGAojB,EAAAc,OAAA,SAAAlkB,GACA,0BAAAm4C,EAAAj5C,KAAAc,IAGAojB,EAAAu2B,IAAA,SAAA35C,GACA,OAAAojB,EAAAc,OAAAlkB,QAAAkE,QAAAk0C,EAAAnzB,KAAAjlB,sBCrKAnB,EAAA+6C,SAAA,GAEA/6C,EAAAmC,KAAerC,EAAQ,GACvBE,EAAAqD,KAAevD,EAAQ,GACvBE,EAAAyL,KAAe3L,EAAQ,GACvBE,EAAA2L,MAAgB7L,EAAQ,GACxBE,EAAAoN,MAAgBtN,EAAQ,IACxBE,EAAAqI,UAAoBvI,EAAQ,GAC5BE,EAAAmH,IAAcrH,EAAQ,GAEtBE,EAAAwS,KAAe1S,EAAQ,IAEvBE,EAAAkR,MAAgBpR,EAAQ,IACxBE,EAAA04B,QAAkB54B,EAAQ,IAC1BE,EAAAu4B,KAAez4B,EAAQ,IACvBE,EAAAkV,QAAkBpV,EAAQ,IAC1BE,EAAAoO,MAAgBtO,EAAQ,IACxBE,EAAAylC,MAAgB3lC,EAAQ,IAExBE,EAAAg7C,OAAiBl7C,EAAQ,IACzBE,EAAAi7C,KAAen7C,EAAQ,IACvBE,EAAAk7C,QAAkBp7C,EAAQ,IAC1BE,EAAAm7C,MAAgBr7C,EAAQ,IACxBE,EAAAo7C,IAAct7C,EAAQ,IAEtBA,EAAQ,IACRA,EAAQ,IACRE,EAAA+6C,SAAAM,gBAAmCv7C,EAAQ,IAC3CA,EAAQ,IACRA,EAAQ,IAERE,EAAAs7C,cAAwBx7C,EAAQ,IAChCE,EAAAu7C,cAAwBz7C,EAAQ,IAChCE,EAAAw7C,UAAoB17C,EAAQ,IAC5BE,EAAAy7C,WAAqB37C,EAAQ,IAC7BE,EAAA07C,WAAqB57C,EAAQ,IAC7BE,EAAA82C,eAAyBh3C,EAAQ,IACjCE,EAAA27C,YAAsB77C,EAAQ,IAC9BE,EAAA+yC,cAAwBjzC,EAAQ,IAChCE,EAAA47C,UAAoB97C,EAAQ,IAC5BE,EAAA67C,UAAoB/7C,EAAQ,IAC5BE,EAAA87C,WAAqBh8C,EAAQ,IAE7BE,EAAA+6C,SAAAxuC,MAAwBzM,EAAQ,IAChCE,EAAA+6C,SAAAz2B,MAAyBxkB,EAAQ,IACjCE,EAAA+6C,SAAAjmC,SAA4BhV,EAAQ,IACpCE,EAAA+6C,SAAAhmC,SAA4BjV,EAAQ,IACpCE,EAAA+6C,SAAAgB,aAAgCj8C,EAAQ,IACxCE,EAAA+6C,SAAAxP,YAA+BzrC,EAAQ,IACvCE,EAAA+6C,SAAA5xC,SAA4BrJ,EAAQ,oBC3BrBA,EAAQ,GACVA,EAAQ,GAJrB,IAKAqC,EAAWrC,EAAQ,GACnB0S,EAAW1S,EAAQ,IACnByrC,EAAkBzrC,EAAQ,IAQ1B,SAAA4lC,IACAliC,KAAAw4C,OAAA,IAAAzQ,EACA/nC,KAAA64B,aAAA,EACA74B,KAAAy4C,aAAA,GACAz4C,KAAA+kC,cAAA/kC,KAAA+kC,cAAA7mC,KAAA8B,MAVAvD,EAAAD,QAAA0lC,EAgBAA,EAAA5jC,UAAAqO,YAAA,SAAAqsB,GACA,OAAAh5B,KAAAw4C,OAAA7rC,YAAAqsB,IAMAkJ,EAAA5jC,UAAAuQ,YAAA,SAAAm4B,EAAAC,GACA,IAAAyR,EAAA14C,KAAAw4C,OAAAnQ,WAAArB,GACA2R,EAAA34C,KAAAw4C,OAAAnQ,WAAApB,GACA,OAAAj4B,EAAAH,YAAA6pC,EAAAC,IAMAzW,EAAA5jC,UAAA+pC,WAAA,SAAArP,GACA,OAAAh5B,KAAAw4C,OAAAnQ,WAAArP,IAMAkJ,EAAA5jC,UAAAknC,cAAA,WACA,OAAAxlC,KAAA64B,cAMAqJ,EAAA5jC,UAAAmnC,cAAA,WACA,OAAAzlC,KAAAw4C,OAAAzO,aAMA7H,EAAA5jC,UAAAonC,eAAA,WACA,OAAA1lC,KAAAw4C,OAAA1N,iBAMA5I,EAAA5jC,UAAAqnC,eAAA,WACA,OAAA3lC,KAAAw4C,OAAAxO,gBAOA9H,EAAA5jC,UAAA2mC,MAAA,SAAA12B,EAAAw2B,GACA/kC,KAAAw4C,OAAAvT,MAAA12B,EAAAw2B,IAkBA7C,EAAA5jC,UAAA2P,QAAA,SAAAE,EAAAs9B,EAAA76B,EAAAC,EAAAO,GACApR,KAAAw4C,OAAAvqC,QAAAE,EAAAs9B,EAAA76B,EAAAC,EAAAO,IASA8wB,EAAA5jC,UAAA8O,YAAA,SAAAC,GACArN,KAAAw4C,OAAAprC,YAAAC,IAOA60B,EAAA5jC,UAAAmiC,YAAA,SAAAlyB,EAAApC,GAEA,IAAA6sB,EAAAh5B,KAAAw4C,OAAA/X,YAAAlyB,EAAApC,GAGA,OAFAnM,KAAA64B,eACA74B,KAAA44C,WAAA5f,GACAA,GAMAkJ,EAAA5jC,UAAAkiC,aAAA,SAAAxH,GACAh5B,KAAA64C,aAAA7f,GACAh5B,KAAA64B,eACA74B,KAAAw4C,OAAAhY,aAAAxH,IAOAkJ,EAAA5jC,UAAAyiC,UAAA,SAAA/H,EAAAzqB,EAAAuyB,GAEA9gC,KAAAw4C,OAAAzX,UAAA/H,EAAAzqB,EAAAuyB,IAEA9gC,KAAA44C,WAAA5f,IAQAkJ,EAAA5jC,UAAAw6B,WAAA,SAAAE,GACAh5B,KAAA44C,WAAA5f,IAGAkJ,EAAA5jC,UAAAs6C,WAAA,SAAA5f,GACAh5B,KAAAy4C,aAAAh3B,KAAAuX,IAGAkJ,EAAA5jC,UAAAu6C,aAAA,SAAA7f,GACA,QAAAt8B,EAAA,EAAiBA,EAAAsD,KAAAy4C,aAAA52C,SAA8BnF,EAC/CsD,KAAAy4C,aAAA/7C,IAAAs8B,IACAh5B,KAAAy4C,aAAA/7C,GAAA,OAgBAwlC,EAAA5jC,UAAAsoC,YAAA,SAAAkS,GAKA,IAHA94C,KAAA+4C,WAAAD,EAGA94C,KAAAy4C,aAAA52C,OAAA,GAEA,GADA7B,KAAAg5C,eAAAh5C,KAAAy4C,aAAAjN,MACA,OAAAxrC,KAAAg5C,eAAA,CAMA,IAAAC,EAAAj5C,KAAAw4C,OAAAnQ,WAAAroC,KAAAg5C,gBAGAh5C,KAAAw4C,OAAAvT,MAAAgU,EAAAj5C,KAAA+kC,iBAOA7C,EAAA5jC,UAAAymC,cAAA,SAAA/L,GAEA,GAAAA,GAAAh5B,KAAAg5C,eACA,SAGA,IAAAhS,EAAAroC,EAAAa,IAAAw5B,EAAAh5B,KAAAg5C,gBACA/R,EAAAtoC,EAAAc,IAAAu5B,EAAAh5B,KAAAg5C,gBAIAE,EAAAl5C,KAAAw4C,OAAA7rC,YAAAq6B,GACAmS,EAAAn5C,KAAAw4C,OAAA7rC,YAAAs6B,GAKA,OAFAjnC,KAAA+4C,WAAAG,EAAAC,IAEA,oBCpNA18C,EAAAD,QAEA,SAAA0lB,GACA,IAAAk3B,EAAA,GACAC,EAAAn3B,EAAAziB,KAAAiR,IAEA4oC,EAAAp3B,EAAAlkB,OACAu7C,EAAAr3B,EAAAqmB,SACAiR,EAAAt3B,EAAAumB,QACAgR,EAAAv3B,EAAAw3B,QAEAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA95C,KAAAP,IAAA,SAAAtB,GACA,uBAAAA,GACAk7C,EAAAl7C,EACA6B,MAEAq5C,GAGAr5C,KAAA60B,KAAA,WACA,OAAAukB,EAAAv3C,QAGA7B,KAAAuoC,SAAA,WACA,IAAAwR,EAeA,OAdAX,EAAAv3C,OAAA,EACAk4C,EAAAX,EAAA31B,SAEAk2B,IAEAI,EADA,mBAAAT,EACAA,IAEA,IAGAM,IACA,mBAAAL,GACAA,EAAAQ,GAEAA,GAGA/5C,KAAAyoC,QAAA,SAAAsR,GACAX,EAAAv3C,OAAAw3C,GACAQ,IACA,mBAAAL,GACAA,EAAAO,GAEAX,EAAA33B,KAAAs4B,KAEAD,IACA,mBAAAL,IACAM,EAAAN,EAAAM,MAKA/5C,KAAAO,SAAA,WACA,WAAAo5C,EAAA,KAAAC,EAAA,KAAAC,EAAA,KACAC,EAAA,KAAAV,EAAAv3C,OAAA,IAAAw3C,qBC/DA58C,EAAAD,QAAA2lC,EACA1lC,EAAAD,QAAA8pC,WAEA,IAAA3gC,EAAerJ,EAAQ,GACvBwD,EAAaxD,EAAQ,GAErBuD,EAAWvD,EAAQ,GACnBqC,EAAWrC,EAAQ,GAMnBi8C,GAJWj8C,EAAQ,IACLA,EAAQ,IACVA,EAAQ,IAEDA,EAAQ,KAC3B09C,EAAAzB,EAAApwB,MACAokB,EAAAgM,EAAAlwB,OAEA9W,EAAejV,EAAQ,IACvBiV,EAAA4W,MACA5W,EAAA8W,OACA9W,EAAAgX,MACAhX,EAAAkX,MAEA,SAAA6d,EAAAwM,GACA9yC,KAAA8yC,GAAA,EACA9yC,KAAAkN,OAAA,EACAlN,KAAAwiC,mBAAA,EACAxiC,KAAAyiC,mBAAA,EACAziC,KAAA6W,cAAA,EACA7W,KAAA0c,YAAA,EAGA1c,KAAAi6C,QAAA,EACAj6C,KAAA8W,QAAA,EAiBA,SAAAqrB,EAAAhM,GACAn2B,KAAAo2B,QAAAD,EACAn2B,KAAAk6C,QAAA,GACAl6C,KAAAm6C,SAAA,GACAn6C,KAAAo6C,WAAA,GACAp6C,KAAAq6C,SAAA,GAnBA/T,EAAAhoC,UAAAqxB,MAAA,SAAAmjB,GACA9yC,KAAA8yC,GAAA,IACA9yC,KAAAi6C,QAAAj6C,KAAAkN,QAEAlN,KAAA8yC,KACA9yC,KAAAkN,OAAA,GAAA4lC,EAAA,IAAAA,EACA9yC,KAAA8W,QAAAg8B,EAAA9yC,KAAAi6C,SAgBA9X,EAAA7jC,UAAAg8C,MAAA,WACAt6C,KAAAk6C,QAAAr4C,OAAA,EACA7B,KAAAm6C,SAAAt4C,OAAA,EACA7B,KAAAo6C,WAAAv4C,OAAA,EACA7B,KAAAq6C,SAAAx4C,OAAA,GAGAsgC,EAAA7jC,UAAAi8C,QAAA,SAAAn3B,GAEApjB,KAAAm6C,SAAA14B,KAAA2B,IAQA+e,EAAA7jC,UAAAk8C,WAAA,SAAA/oC,GAEAzR,KAAAo6C,WAAA34B,KAAAhQ,IAGA0wB,EAAA7jC,UAAAm8C,SAAA,SAAA1vC,GAEA/K,KAAAq6C,SAAA54B,KAAA1W,IAMAo3B,EAAA7jC,UAAAooC,WAAA,SAAAn5B,GAIA,IAHA,IAAA4oB,EAAAn2B,KAAAo2B,QAGAp1B,EAAAm1B,EAAAyM,WAAgC5hC,EAAGA,IAAA4K,OACnC5K,EAAA+K,cAAA,EAEA,QAAAhP,EAAAo5B,EAAAxX,cAAmC5hB,EAAGA,IAAA6O,OACtC7O,EAAAgP,cAAA,EAEA,QAAA0K,EAAA0f,EAAAiB,YAAiC3gB,EAAGA,IAAA7K,OACpC6K,EAAA1K,cAAA,EAMA,IAFA,IAAAiY,EAAAhkB,KAAAk6C,QAEAQ,EAAAvkB,EAAAyM,WAAmC8X,EAAMA,IAAA9uC,OAEzC,GADAkxB,GACA4d,EAAA3uC,cAIA,GAAA2uC,EAAArhB,WAAA,GAAAqhB,EAAAtuC,aAKAsuC,EAAA5iB,WAAA,CAYA,IAPA93B,KAAAs6C,QAEAt2B,EAAAvC,KAAAi5B,GAEAA,EAAA3uC,cAAA,EAGAiY,EAAAniB,OAAA,IAEAb,EAAAgjB,EAAAwnB,MASA,GAPAxrC,KAAAu6C,QAAAv5C,GAGAA,EAAAmY,UAAA,IAIAnY,EAAA82B,WAAA,CAKA,QAAAS,EAAAv3B,EAAA2d,cAAoC4Z,EAAIA,IAAAttB,KAAA,CACxC,IAAAwG,EAAA8mB,EAAA9mB,QAGA,IAAAA,EAAA1F,eAKA,GAAA0F,EAAAyF,aAAA,GAAAzF,EAAA0F,cAAA,CAIA,IAAAzB,EAAAjE,EAAAS,WACAyD,EAAAlE,EAAAU,WAEA,GAAAuD,EAAAtJ,YAAAuJ,EAAAvJ,WAAA,CAKA,IAAAuM,EAAAjD,EAAAmqB,WACAhnB,EAAAlD,EAAAkqB,WACA,IAAAlnB,IAAAE,EAIA7Y,KAAAw6C,WAAA/oC,GACAA,EAAA1F,cAAA,GAEAjB,EAAAytB,EAAAztB,OAGAiB,eAKAiY,EAAAvC,KAAA3W,GACAA,EAAAiB,cAAA,KAIA,QAAAi6B,EAAAhlC,EAAAo2B,YAAkC4O,EAAIA,IAAA/6B,KAAA,CAKtC,IAAAH,EAJA,MAAAk7B,EAAAj7B,MAAAgB,cAAA,GAAAi6B,EAAAj7B,MAAAiB,aAOA,IAHAlB,EAAAk7B,EAAAl7B,OAGAsB,aAIApM,KAAAy6C,SAAAzU,EAAAj7B,OACAi7B,EAAAj7B,MAAAgB,cAAA,EAEAjB,EAAAiB,eAKAiY,EAAAvC,KAAA3W,GACAA,EAAAiB,cAAA,MAIA/L,KAAA26C,YAAAptC,GAGA,QAAA7Q,EAAA,EAAmBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,EAG7CsE,EAAAhB,KAAAm6C,SAAAz9C,IACAo7B,aACA92B,EAAA+K,cAAA,MASAo2B,EAAA7jC,UAAAq8C,YAAA,SAAAptC,GASA,IAPA,IAAA4oB,EAAAn2B,KAAAo2B,QACAiM,EAAAlM,EAAA8M,UACAhN,EAAAE,EAAA6M,aAEArO,EAAApnB,EAAAulC,GAGAp2C,EAAA,EAAiBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,CAC3C,IAAA0mB,EAAApjB,KAAAm6C,SAAAz9C,GAEAK,EAAA8C,EAAAQ,MAAA+iB,EAAA/M,QAAAtZ,GACAgE,EAAAqiB,EAAA/M,QAAAtV,EACAT,EAAAT,EAAAQ,MAAA+iB,EAAA0T,kBACA71B,EAAAmiB,EAAA2T,kBAGA3T,EAAA/M,QAAAnN,GAAArI,IAAAuiB,EAAA/M,QAAAtZ,GACAqmB,EAAA/M,QAAAlN,GAAAia,EAAA/M,QAAAtV,EAEAqiB,EAAA2U,cAEAz3B,EAAAiB,OAAAozB,EAAAvR,EAAA8T,eAAAmL,GACA/hC,EAAAiB,OAAAozB,EAAAvR,EAAAjN,UAAAiN,EAAAwT,SACA31B,GAAA0zB,EAAAvR,EAAAhN,OAAAgN,EAAAyT,SAYAv2B,EAAAsB,IAAA,KAAA+yB,EAAAvR,EAAA4T,kBACA/1B,GAAA,KAAA0zB,EAAAvR,EAAA6T,mBAGA7T,EAAArJ,WAAAhd,IACAqmB,EAAArJ,WAAAhZ,IACAqiB,EAAAtJ,WAAAxZ,IACA8iB,EAAAtJ,WAAA7Y,IAGA,IAAAvE,EAAA,EAAiBA,EAAAsD,KAAAo6C,WAAAv4C,SAA4BnF,EAAA,CAC7CsD,KAAAo6C,WAAA19C,GACA+Y,eAAAlI,GAKA,IAAA7Q,EAAA,EAAiBA,EAAAsD,KAAAo6C,WAAAv4C,SAA4BnF,EAAA,CAC7CsD,KAAAo6C,WAAA19C,GACAif,uBAAApO,GAKA,GAAAA,EAAAsJ,aAEA,IAAAna,EAAA,EAAmBA,EAAAsD,KAAAo6C,WAAAv4C,SAA4BnF,EAAA,CAC/CsD,KAAAo6C,WAAA19C,GACA0gB,oBAAA7P,GAMA,IAAA7Q,EAAA,EAAiBA,EAAAsD,KAAAq6C,SAAAx4C,SAA0BnF,EAAA,CAC3CsD,KAAAq6C,SAAA39C,GACA4Q,wBAAAC,GAMA,IAAA7Q,EAAA,EAAiBA,EAAA6Q,EAAAi1B,qBAA6B9lC,EAAA,CAC9C,QAAA+Z,EAAA,EAAmBA,EAAAzW,KAAAq6C,SAAAx4C,SAA0B4U,EAAA,CAC7CzW,KAAAq6C,SAAA5jC,GACAjJ,yBAAAD,GAGA,IAAAkJ,EAAA,EAAmBA,EAAAzW,KAAAo6C,WAAAv4C,SAA4B4U,EAAA,CAC/CzW,KAAAo6C,WAAA3jC,GACA6G,wBAAA/P,IAOA,IAAA7Q,EAAA,EAAiBA,EAAAsD,KAAAo6C,WAAAv4C,SAA4BnF,EAAA,CAC7CsD,KAAAo6C,WAAA19C,GACA2gB,wBAAA9P,GAMA,IAAA7Q,EAAA,EAAiBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,CAC3C0mB,EAAApjB,KAAAm6C,SAAAz9C,GAEAK,EAAA8C,EAAAQ,MAAA+iB,EAAArJ,WAAAhd,GACAgE,EAAAqiB,EAAArJ,WAAAhZ,EACAT,EAAAT,EAAAQ,MAAA+iB,EAAAtJ,WAAAxZ,GACAW,EAAAmiB,EAAAtJ,WAAA7Y,EALA,IAQAw0C,EAAA51C,EAAA+B,IAAA+yB,EAAAr0B,GACA,GAAAT,EAAAkC,cAAA0zC,GAAA9vC,EAAAkB,sBAAA,CACA,IAAA+zC,EAAAj1C,EAAAiB,eAAA6uC,EAAA5zC,SACAvB,EAAAsB,IAAAg5C,GAGA,IAAA71C,EAAA4vB,EAAA1zB,EACA,GAAA8D,IAAAY,EAAAoB,mBAEA9F,GADA25C,EAAAj1C,EAAAmB,YAAAnI,EAAAqE,IAAA+B,GAKAhI,EAAAwE,OAAAozB,EAAAr0B,GACAS,GAAA4zB,EAAA1zB,EAEAmiB,EAAArJ,WAAAhd,EAAA8D,IAAA9D,GACAqmB,EAAArJ,WAAAhZ,IACAqiB,EAAAtJ,WAAAxZ,EAAAO,IAAAP,GACA8iB,EAAAtJ,WAAA7Y,IAMA,IAAA45C,GAAA,EACA,IAAAn+C,EAAA,EAAiBA,EAAA6Q,EAAAk1B,qBAA6B/lC,EAAA,CAC9C,IAAAie,EAAA,EACA,IAAAlE,EAAA,EAAmBA,EAAAzW,KAAAo6C,WAAAv4C,SAA4B4U,EAAA,CAC/C,IACAoE,EADA7a,KAAAo6C,WAAA3jC,GACA8C,wBAAAhM,GACAoN,EAAAhc,EAAAa,IAAAmb,EAAAE,GAIA,IAAAigC,EAAAngC,IAAA,EAAAhV,EAAAK,WAEA+0C,GAAA,EACA,IAAAtkC,EAAA,EAAmBA,EAAAzW,KAAAq6C,SAAAx4C,SAA0B4U,EAAA,CAC7C,IACAukC,EADAh7C,KAAAq6C,SAAA5jC,GACAhJ,yBAAAF,GACAwtC,KAAAC,EAGA,GAAAF,GAAAC,EAAA,CAEAF,GAAA,EACA,OAOA,IAAAn+C,EAAA,EAAiBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,EAC3C0mB,EAAApjB,KAAAm6C,SAAAz9C,IAEA2Z,QAAAtZ,EAAA8D,IAAAuiB,EAAArJ,WAAAhd,GACAqmB,EAAA/M,QAAAtV,EAAAqiB,EAAArJ,WAAAhZ,EACAqiB,EAAA0T,iBAAAj2B,IAAAuiB,EAAAtJ,WAAAxZ,GACA8iB,EAAA2T,kBAAA3T,EAAAtJ,WAAA7Y,EACAmiB,EAAAuW,uBAKA,GAFA35B,KAAAi7C,kBAEAhlB,EAAA,CACA,IAAAilB,EAAAxqC,IAEAyqC,EAAAx1C,EAAAyB,wBACAg0C,EAAAz1C,EAAA4B,yBAEA,IAAA7K,EAAA,EAAmBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,EAC7C0mB,EAAApjB,KAAAm6C,SAAAz9C,IACAo7B,aAIA,GAAA1U,EAAAkT,iBACAlT,EAAA2T,kBAAA3T,EAAA2T,kBAAAqkB,GACAv7C,EAAAkC,cAAAqhB,EAAA0T,kBAAAqkB,GACA/3B,EAAA+T,YAAA,EACA+jB,EAAA,IAEA93B,EAAA+T,aAAAxC,EACAumB,EAAAv8C,EAAAa,IAAA07C,EAAA93B,EAAA+T,eAIA,GAAA+jB,GAAAv1C,EAAAuB,aAAA2zC,EACA,IAAAn+C,EAAA,EAAqBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,EAC/C0mB,EAAApjB,KAAAm6C,SAAAz9C,IACAyc,UAAA,MAMAgpB,EAAA7jC,UAAA+8C,YAAA,SAAAC,GACA,QAAA5+C,EAAA,EAAiBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,CAC3C,IAAAsE,EAAAhB,KAAAm6C,SAAAz9C,GACAoD,EAAAyD,MAAA+3C,EAAAt6C,EAAA+Y,WAAAhZ,EAAAC,EAAA+Y,WAAAhd,EAAAgC,EAAAiC,EAAA+Y,WAAAhd,EAAAgD,EAAAiB,EAAA8Y,WAAA7Y,EAAAD,EAAA8Y,WAAAxZ,EAAAvB,EAAAiC,EAAA8Y,WAAAxZ,EAAAP,KAIA,IAAAw7C,EAAA,IAAAjV,EA8aA,SAAAkV,IACAx7C,KAAAy7C,eAAA,GACAz7C,KAAA07C,gBAAA,GAzaAvZ,EAAA7jC,UAAAqoC,cAAA,SAAAp5B,GACA,IAAA4oB,EAAAn2B,KAAAo2B,QAEA,GAAAD,EAAA4M,eAAA,CACA,QAAA/hC,EAAAm1B,EAAAyM,WAAkC5hC,EAAGA,IAAA4K,OACrC5K,EAAA+K,cAAA,EACA/K,EAAAqV,QAAApN,OAAA,EAGA,QAAAlM,EAAAo5B,EAAAxX,cAAqC5hB,EAAGA,IAAA6O,OAExC7O,EAAA2V,WAAA,EACA3V,EAAAgP,cAAA,EACAhP,EAAA0V,WAAA,EACA1V,EAAAyV,MAAA,EAKA,OAAS,CAKT,IAHA,IAAAmpC,EAAA,KACAC,EAAA,EAEA7+C,EAAAo5B,EAAAxX,cAAqC5hB,EAAGA,IAAA6O,OAExC,MAAA7O,EAAAma,eAKAna,EAAA0V,WAAA9M,EAAAU,aAAA,CAIA,IAAAoD,EAAA,EACA,GAAA1M,EAAA2V,UAEAjJ,EAAA1M,EAAAyV,UACO,CACP,IAAAb,EAAA5U,EAAAqa,cACAvF,EAAA9U,EAAAsa,cAEA,IAAA1F,EAAAvF,aAAAyF,EAAAzF,WACA,SAIA,GAAAuF,EAAAiH,YAAA/G,EAAA+G,WACA,SAGA,IAAAi5B,EAAAlgC,EAAAoE,UACA0+B,EAAA5iC,EAAAkE,UAIA+wB,EAAA+K,EAAAxY,YAAAwY,EAAA/Z,WACAiP,EAAA0N,EAAApb,YAAAob,EAAA3c,WAGA,MAAAgP,GAAA,GAAAC,EACA,SAGA,IAAA8U,EAAAhK,EAAA5Y,aAAA4Y,EAAA9Z,YACA+jB,EAAArH,EAAAxb,aAAAwb,EAAA1c,YAGA,MAAA8jB,GAAA,GAAAC,EACA,SAKA,IAAA7yC,EAAA4oC,EAAAx7B,QAAApN,OAEA4oC,EAAAx7B,QAAApN,OAAAwrC,EAAAp+B,QAAApN,QACAA,EAAAwrC,EAAAp+B,QAAApN,OACA4oC,EAAAx7B,QAAA7M,QAAAP,IACSwrC,EAAAp+B,QAAApN,OAAA4oC,EAAAx7B,QAAApN,SACTA,EAAA4oC,EAAAx7B,QAAApN,OACAwrC,EAAAp+B,QAAA7M,QAAAP,IAKA,IAAA2I,EAAA7U,EAAAua,iBACAxF,EAAA/U,EAAAwa,iBAMApJ,GAJA0jC,EAAAx7B,QACAo+B,EAAAp+B,QAGA,IAAA2jC,GACA7rC,EAAAwa,OAAA9nB,IAAA8Q,EAAAkE,WAAAjE,GACAzD,EAAAya,OAAA/nB,IAAAgR,EAAAgE,WAAA/D,GACA3D,EAAAu+B,OAAA7rC,IAAAgxC,EAAAx7B,SACAlI,EAAAw+B,OAAA9rC,IAAA4zC,EAAAp+B,SACAlI,EAAAs+B,KAAA,EAEA,IAAAv+B,EAAA,IAAAq+B,EACAgM,EAAArqC,EAAAC,GAGA,IAAA5E,EAAA2E,EAAAtQ,EAEA6L,EADAyE,EAAAo+B,OAAAC,EAAAY,WACAxuC,EAAAa,IAAAyJ,GAAA,EAAAA,GAAAM,EAAA,GAEA,EAGAxM,EAAAyV,MAAA/I,EACA1M,EAAA2V,WAAA,EAGAjJ,EAAAmyC,IAEAD,EAAA5+C,EACA6+C,EAAAnyC,GAIA,SAAAkyC,GAAA,KAAAh9C,EAAAE,QAAA+8C,EAAA,CAEAzlB,EAAA4M,gBAAA,EACA,MAIApxB,EAAAgqC,EAAAvkC,cACAvF,EAAA8pC,EAAAtkC,cACAw6B,EAAAlgC,EAAAoE,UACA0+B,EAAA5iC,EAAAkE,UAHA,IAKAgmC,EAAAlK,EAAAx7B,QAAAhW,QACA27C,EAAAvH,EAAAp+B,QAAAhW,QAWA,GATAwxC,EAAAroC,QAAAoyC,GACAnH,EAAAjrC,QAAAoyC,GAGAD,EAAApjC,OAAA4d,GACAwlB,EAAAjpC,WAAA,IACAipC,EAAAlpC,WAGA,GAAAkpC,EAAAzkC,aAAA,GAAAykC,EAAAxkC,aAAA,CAUA06B,EAAA14B,UAAA,GACAs7B,EAAAt7B,UAAA,GAGAnZ,KAAAs6C,QACAt6C,KAAAu6C,QAAA1I,GACA7xC,KAAAu6C,QAAA9F,GACAz0C,KAAAw6C,WAAAmB,GAEA9J,EAAA9lC,cAAA,EACA0oC,EAAA1oC,cAAA,EACA4vC,EAAA5vC,cAAA,EAIA,IADA,IAAAkwC,EAAA,CAAApK,EAAA4C,GACA/3C,EAAA,EAAmBA,EAAAu/C,EAAAp6C,SAAmBnF,EAAA,CAEtC,IADA0mB,EAAA64B,EAAAv/C,IACAq7B,YACA,QAAAQ,EAAAnV,EAAAzE,cAAyC4Z,EAAIA,IAAAttB,KAAA,CAI7C,IAAAwG,EAAA8mB,EAAA9mB,QAGA,IAAAA,EAAA1F,aAAA,CAKA,IAAAjB,EAAAytB,EAAAztB,MACA,IAAAA,EAAAitB,aAAA3U,EAAA6V,YAAAnuB,EAAAmuB,WAAA,CAKA,IAAAtgB,EAAAlH,EAAAS,WAAA2tB,WACAhnB,EAAApH,EAAAU,WAAA0tB,WACA,IAAAlnB,IAAAE,EAAA,CAKA,IAAAqjC,EAAApxC,EAAAuL,QAAAhW,QACA,GAAAyK,EAAAiB,cACAjB,EAAAtB,QAAAoyC,GAIAnqC,EAAA8G,OAAA4d,GAIA,GAAA1kB,EAAAyF,aAAA,GAAAzF,EAAA0F,cAOA1F,EAAA1F,cAAA,EACA/L,KAAAw6C,WAAA/oC,GAGA3G,EAAAiB,eAKAjB,EAAAiB,cAAA,EAEAjB,EAAAgtB,YACAhtB,EAAAqO,UAAA,GAGAnZ,KAAAu6C,QAAAzvC,MArBAA,EAAAuL,QAAAxV,IAAAq7C,GACApxC,EAAA6uB,4BAyBA4hB,EAAA5rB,OAAA,EAAAisB,GAAAruC,EAAAulC,IACAyI,EAAAzkC,QAAA,EACAykC,EAAA9Y,mBAAA,GACA8Y,EAAA/Y,mBAAAj1B,EAAAi1B,mBACA+Y,EAAA1kC,cAAA,EAEA7W,KAAAm8C,eAAAZ,EAAA1J,EAAA4C,GAGA,IAAA/3C,EAAA,EAAmBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,CAC7C,IAAA0mB,EAGA,IAHAA,EAAApjB,KAAAm6C,SAAAz9C,IACAqP,cAAA,EAEAqX,EAAA2U,YAAA,CAIA3U,EAAAkV,sBAGA,IAAAC,EAAAnV,EAAAzE,cAAuC4Z,EAAIA,IAAAttB,KAC3CstB,EAAA9mB,QAAAiB,WAAA,EACA6lB,EAAA9mB,QAAA1F,cAAA,GASA,GAFAoqB,EAAAqQ,kBAEArQ,EAAAmN,cAAA,CACAnN,EAAA4M,gBAAA,EACA,YAzHA4Y,EAAA1kC,YAAA,GACA46B,EAAAx7B,QAAAxV,IAAAk7C,GACAtH,EAAAp+B,QAAAxV,IAAAm7C,GACAnK,EAAAlY,uBACA8a,EAAA9a,yBAsIAwI,EAAA7jC,UAAA69C,eAAA,SAAAC,EAAA1iC,EAAAC,GACA3Z,KAAAo2B,QAGA,IAHA,IAGA15B,EAAA,EAAiBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,EAC3C0mB,EAAApjB,KAAAm6C,SAAAz9C,IACAqd,WAAAhd,EAAA8D,IAAAuiB,EAAA/M,QAAAtZ,GACAqmB,EAAArJ,WAAAhZ,EAAAqiB,EAAA/M,QAAAtV,EACAqiB,EAAAtJ,WAAAxZ,EAAAO,IAAAuiB,EAAA0T,kBACA1T,EAAAtJ,WAAA7Y,EAAAmiB,EAAA2T,kBAGA,QAAAr6B,EAAA,EAAiBA,EAAAsD,KAAAo6C,WAAAv4C,SAA4BnF,EAAA,CAC7CsD,KAAAo6C,WAAA19C,GACA+Y,eAAA2mC,GAIA,IAAA1/C,EAAA,EAAiBA,EAAA0/C,EAAA3Z,qBAAgC/lC,EAAA,CAEjD,IADA,IAAAie,EAAA,EACAlE,EAAA,EAAmBA,EAAAzW,KAAAo6C,WAAAv4C,SAA4B4U,EAAA,CAC/C,IACAoE,EADA7a,KAAAo6C,WAAA3jC,GACAgD,2BAAA2iC,EAAA1iC,EAAAC,GACAgB,EAAAhc,EAAAa,IAAAmb,EAAAE,GAKA,GADAF,IAAA,IAAAhV,EAAAK,WAEA,MAmCA0T,EAAArD,QAAAnN,GAAArI,IAAA6Y,EAAAK,WAAAhd,GACA2c,EAAArD,QAAAlN,GAAAuQ,EAAAK,WAAAhZ,EACA4Y,EAAAtD,QAAAnN,GAAArI,IAAA8Y,EAAAI,WAAAhd,GACA4c,EAAAtD,QAAAlN,GAAAwQ,EAAAI,WAAAhZ,EAIA,IAAArE,EAAA,EAAiBA,EAAAsD,KAAAo6C,WAAAv4C,SAA4BnF,EAAA,CAC7CsD,KAAAo6C,WAAA19C,GACAif,uBAAAygC,GAIA,IAAA1/C,EAAA,EAAiBA,EAAA0/C,EAAA5Z,qBAAgC9lC,EACjD,IAAA+Z,EAAA,EAAmBA,EAAAzW,KAAAo6C,WAAAv4C,SAA4B4U,EAAA,CAC/CzW,KAAAo6C,WAAA3jC,GACA6G,wBAAA8+B,GAOA,IAAAznB,EAAAynB,EAAAtJ,GAGA,IAAAp2C,EAAA,EAAiBA,EAAAsD,KAAAm6C,SAAAt4C,SAA0BnF,EAAA,CAC3C,IAAA0mB,EAAApjB,KAAAm6C,SAAAz9C,GAEAK,EAAA8C,EAAAQ,MAAA+iB,EAAArJ,WAAAhd,GACAgE,EAAAqiB,EAAArJ,WAAAhZ,EACAT,EAAAT,EAAAQ,MAAA+iB,EAAAtJ,WAAAxZ,GACAW,EAAAmiB,EAAAtJ,WAAA7Y,EAGAw0C,EAAA51C,EAAA+B,IAAA+yB,EAAAr0B,GACA,GAAAT,EAAA8C,IAAA8yC,KAAA9vC,EAAAkB,sBAAA,CACA,IAAA+zC,EAAAj1C,EAAAiB,eAAA6uC,EAAA5zC,SACAvB,EAAAsB,IAAAg5C,GAGA,IAAA71C,EAAA4vB,EAAA1zB,EACA,GAAA8D,IAAAY,EAAAoB,mBAEA9F,GADA25C,EAAAj1C,EAAAmB,YAAAnI,EAAAqE,IAAA+B,GAKAhI,EAAAwE,OAAAozB,EAAAr0B,GACAS,GAAA4zB,EAAA1zB,EAEAmiB,EAAArJ,WAAAhd,IACAqmB,EAAArJ,WAAAhZ,IACAqiB,EAAAtJ,WAAAxZ,IACA8iB,EAAAtJ,WAAA7Y,IAGAmiB,EAAA/M,QAAAtZ,IACAqmB,EAAA/M,QAAAtV,IACAqiB,EAAA0T,iBAAAx2B,EACA8iB,EAAA2T,kBAAA91B,EACAmiB,EAAAuW,uBAGA35B,KAAAi7C,mBAaA9Y,EAAA7jC,UAAA28C,gBAAA,WAGA,IADA,IAAAx/B,EAAA,IAAA+/B,EACAz+C,EAAA,EAAiBA,EAAAiD,KAAAo6C,WAAAv4C,SAA4B9E,EAAA,CAE7C,IADA,IAAA0U,EAAAzR,KAAAo6C,WAAAr9C,GACAyB,EAAA,EAAmBA,EAAAiT,EAAA2B,SAAAvR,SAA6BrD,EAChDid,EAAAggC,eAAAh6B,KAAAhQ,EAAA2B,SAAA5U,GAAAwW,eACAyG,EAAAigC,gBAAAj6B,KAAAhQ,EAAA2B,SAAA5U,GAAAyW,gBAEAjV,KAAAo2B,QAAAqR,UAAAh2B,EAAAgK,sBC54BAhf,EAAAD,QAAA2mB,IAAA,WACA,OAAAD,KAAAC,OAGA1mB,EAAAD,QAAA8T,KAAA,SAAA8uB,GACA,OAAAlc,KAAAC,MAAAic,oBCcA3iC,EAAAD,QAAA6/C,EAEa//C,EAAQ,GAArB,IACA0B,EAAa1B,EAAQ,GACrBmoB,EAAmBnoB,EAAQ,IAU3B,SAAA+/C,EAAAv1B,EAAAC,EAAAC,EAAApjB,GACA,KAAA5D,gBAAAq8C,GACA,WAAAA,EAAAv1B,EAAAC,EAAAC,EAAApjB,GAGAy4C,EAAAx3B,OAAAhoB,KAAAmD,MAEAA,KAAAulB,UAAAuB,EAAAC,EAAAC,EAAApjB,GAfAy4C,EAAAx3B,OAAAJ,EACA43B,EAAA/9C,UAAAN,EAAAq+C,EAAAx3B,OAAAvmB,WAEA+9C,EAAAv3B,KAAA,2BCZA,IACAllB,GAAsD,EAEtDE,EAAaxD,EAAQ,GAGrBuI,GAFavI,EAAQ,GACVA,EAAQ,GACHA,EAAQ,IACxBuD,EAAWvD,EAAQ,GAGnBoV,GAFepV,EAAQ,GACXA,EAAQ,IACNA,EAAQ,KACtBgV,EAAehV,EAAQ,IACvB0wB,EAAkB1wB,EAAQ,IAU1B,SAAAggD,EAAAtmC,EAAAumC,EAAAlkC,EAAAmkC,EAAAlkC,GACAtC,EAAAE,WAAA,EAEA,IAAAoV,EAAAzmB,EAAAL,QAAA6T,EAAAkkC,EAAAtvB,KACA1B,EAAA1mB,EAAAL,QAAA8T,EAAAkkC,EAAAvvB,KAEAwvB,EAAA58C,EAAA2C,gBAAA+oB,EAAAD,GAGAgC,EAFAivB,EAAA5uC,SACA6uC,EAAA7uC,SAEA8uC,EAAAnvB,MAIAtX,EAAAM,KAAAhF,EAAAwJ,UACA9E,EAAAQ,WAAA3V,IAAA07C,EAAAtvB,KACAjX,EAAAO,YAAA3V,UACAoV,EAAAE,WAAA,EACAF,EAAAW,OAAA,GAAAH,WAAA3V,IAAA27C,EAAAvvB,KAGAjX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UAhCAnO,EAAA2M,QAAA2O,EAAAlI,KAAAkI,EAAAlI,KAEA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAlS,GAAAE,EAAAb,OAAAyW,EAAAnJ,WAAAygB,EAAAlI,MACAllB,GAAAE,EAAAb,OAAA0W,EAAApJ,WAAAygB,EAAAlI,MACAw3B,EAAAtmC,EAAAN,EAAAG,WAAAwC,EAAA1C,EAAAE,WAAAyC,KA8BA9b,EAAA8/C,kCCjDA,IACA18C,GAAsD,EAEtDE,EAAaxD,EAAQ,GAGrBuI,GAFavI,EAAQ,GACVA,EAAQ,GACHA,EAAQ,IACxBuD,EAAWvD,EAAQ,GAInBoV,GAHUpV,EAAQ,GACHA,EAAQ,GACXA,EAAQ,IACNA,EAAQ,KACtBgV,EAAehV,EAAQ,IACvB+wB,EAAgB/wB,EAAQ,IACxBugC,EAAiBvgC,EAAQ,IACzB0wB,EAAkB1wB,EAAQ,IA+B1B,SAAAogD,EAAA1mC,EAAA2mC,EAAAtkC,EAAAmkC,EAAAlkC,GACAtC,EAAAE,WAAA,EAGA,IAAA0mC,EAAA/3C,EAAAD,SAAAyT,EAAAxT,EAAAL,QAAA8T,EAAAkkC,EAAAvvB,MAEAyc,EAAAiT,EAAApvB,UACAoc,EAAAgT,EAAAnvB,UACAtF,EAAAroB,EAAA8B,IAAAgoC,EAAAD,GAGAmT,EAAAh9C,EAAA8C,IAAAulB,EAAAroB,EAAA8B,IAAAgoC,EAAAiT,IACAt8C,EAAAT,EAAA8C,IAAAulB,EAAAroB,EAAA8B,IAAAi7C,EAAAlT,IAEApc,EAAAqvB,EAAAhvC,SAAA6uC,EAAA7uC,SAGA,GAAArN,GAAA,GACA,IAAAob,EAAA7b,EAAAQ,MAAAqpC,GACA1sC,EAAA6C,EAAA8B,IAAAi7C,EAAAlhC,GAEA,GADA7b,EAAA8C,IAAA3F,KACAswB,IACA,OAIA,GAAAqvB,EAAA9uB,aAAA,CACA,IAAAivB,EAAAH,EAAAhvB,UACAovB,EAAArT,EACAhjB,EAAA7mB,EAAA8B,IAAAo7C,EAAAD,GAIA,GAHAj9C,EAAA8C,IAAA+jB,EAAA7mB,EAAA8B,IAAAo7C,EAAAH,IAGA,EACA,OAeA,OAXA5mC,EAAAM,KAAAhF,EAAAwJ,UACA9E,EAAAO,YAAA3V,UACAoV,EAAAQ,WAAA3V,IAAA6a,GACA1F,EAAAE,WAAA,EACAF,EAAAW,OAAA,GAAAH,WAAA3V,IAAA27C,EAAAvvB,KAGAjX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,OACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UAKA,GAAAg9B,GAAA,GACAnhC,EAAA7b,EAAAQ,MAAAspC,GACA3sC,EAAA6C,EAAA8B,IAAAi7C,EAAAlhC,GAEA,GADA7b,EAAA8C,IAAA3F,KACAswB,IACA,OAIA,GAAAqvB,EAAA7uB,aAAA,CACA,IAAAkvB,EAAAL,EAAA/uB,UACAqvB,EAAAtT,EACAhjB,EAAA9mB,EAAA8B,IAAAq7C,EAAAC,GAIA,GAHAp9C,EAAA8C,IAAAgkB,EAAA9mB,EAAA8B,IAAAi7C,EAAAK,IAGA,EACA,OAeA,OAXAjnC,EAAAM,KAAAhF,EAAAwJ,UACA9E,EAAAO,YAAA3V,UACAoV,EAAAQ,WAAA3V,IAAA6a,GACA1F,EAAAE,WAAA,EACAF,EAAAW,OAAA,GAAAH,WAAA3V,IAAA27C,EAAAvvB,KAGAjX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,OACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UAKA,IAAAq9B,EAAAr9C,EAAA8C,IAAAulB,KACAtoB,GAAAE,EAAAb,OAAAi+C,EAAA,GACAxhC,EAAA7b,EAAAiD,QAAA+5C,EAAAK,EAAAxT,EAAAppC,EAAA48C,EAAAvT,GACA3sC,EAAA6C,EAAA8B,IAAAi7C,EAAAlhC,GAEA,KADA7b,EAAA8C,IAAA3F,KACAswB,KAAA,CAIA,IAAAnvB,EAAA0B,EAAAO,KAAA8nB,EAAAnoB,EAAAmoB,EAAAnpB,GACAc,EAAA8C,IAAAxE,EAAA0B,EAAA8B,IAAAi7C,EAAAlT,IAAA,GACAvrC,EAAA0C,KAAA1C,EAAAY,GAAAZ,EAAA4B,GAEA5B,EAAA6D,YAEAgU,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAApY,EACA6X,EAAAQ,WAAA3V,IAAA6oC,GACA1zB,EAAAE,WAAA,EACAF,EAAAW,OAAA,GAAAH,WAAA3V,IAAA27C,EAAAvvB,KAGAjX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACA9J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UA/IAnO,EAAA2M,QAAAgP,EAAAvI,KAAAkI,EAAAlI,KAGA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAlS,GAAAE,EAAAb,OAAAyW,EAAAnJ,WAAA8gB,EAAAvI,MACAllB,GAAAE,EAAAb,OAAA0W,EAAApJ,WAAAygB,EAAAlI,MAEA,IAAAlP,EAAAF,EAAAG,WACAC,EAAAH,EAAAE,WAEA6mC,EAAA1mC,EAAAJ,EAAAyC,EAAAvC,EAAAwC,KATA5G,EAAA2M,QAAAwe,EAAA/X,KAAAkI,EAAAlI,KAYA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAlS,GAAAE,EAAAb,OAAAyW,EAAAnJ,WAAAswB,EAAA/X,MACAllB,GAAAE,EAAAb,OAAA0W,EAAApJ,WAAAygB,EAAAlI,MAEA,IAAAq4B,EAAAznC,EAAAG,WACAuQ,EAAA,IAAAiH,EACA8vB,EAAAzf,aAAAtX,EAAAxU,GAEA,IAAAgE,EAAAwQ,EACAtQ,EAAAH,EAAAE,WAEA6mC,EAAA1mC,EAAAJ,EAAAyC,EAAAvC,EAAAwC,sBCzCA,IACA1Y,GAAsD,EAEtDE,EAAaxD,EAAQ,GAErBuI,GADWvI,EAAQ,GACHA,EAAQ,IACxBqH,EAAUrH,EAAQ,GAClBuD,EAAWvD,EAAQ,GAEnBqJ,GADWrJ,EAAQ,IACJA,EAAQ,IACvBgV,EAAehV,EAAQ,IACvBoV,EAAcpV,EAAQ,IAEtBmoB,GADYnoB,EAAQ,IACDA,EAAQ,KAgB3B,SAAA8gD,EAAAC,EAAA3c,EAAA4c,EAAA3c,GAUA,IATA,IAAA4c,EAAAF,EAAAn4B,QACAs4B,EAAAF,EAAAp4B,QACAu4B,EAAAJ,EAAAp4B,UACAy4B,EAAAL,EAAAr4B,WACA24B,EAAAL,EAAAt4B,WACA/f,EAAAJ,EAAAa,OAAAi7B,EAAAD,GAEA9V,EAAA,EACAgzB,GAAAltC,IACAhU,EAAA,EAAiBA,EAAA6gD,IAAY7gD,EAAA,CAQ7B,IANA,IAAAyB,EAAAwF,EAAAa,QAAAS,EAAAD,EAAAy4C,EAAA/gD,IACAgoB,EAAA7f,EAAAL,QAAAS,EAAAy4C,EAAAhhD,IACA6iB,EAAA1f,EAAA8C,IAAAxE,EAAAumB,GAGAm5B,EAAAntC,IACA+F,EAAA,EAAmBA,EAAA+mC,IAAY/mC,EAAA,CAC/B,IAAAqnC,EAAAj+C,EAAA8C,IAAAxE,EAAAw/C,EAAAlnC,IAAA8I,EACAu+B,EAAAD,IACAA,EAAAC,GAIAD,EAAAD,IACAA,EAAAC,EACAjzB,EAAAluB,GAKA0gD,EAAAW,eAAAH,EACAR,EAAAY,WAAApzB,EAyDA,SAAAitB,EAAA7hC,EAAAioC,EAAA5lC,EAAA6lC,EAAA5lC,GACAtC,EAAAE,WAAA,EACA,IAAA02B,EAAAqR,EAAAtwC,SAAAuwC,EAAAvwC,SAEAyvC,EAAAa,EAAA5lC,EAAA6lC,EAAA5lC,GACA,IAAAqkC,EAAAS,EAAAY,WACAG,EAAAf,EAAAW,eACA,KAAAI,EAAAvR,GAAA,CAGAwQ,EAAAc,EAAA5lC,EAAA2lC,EAAA5lC,GACA,IAAA+lC,EAAAhB,EAAAY,WACAK,EAAAjB,EAAAW,eACA,KAAAM,EAAAzR,GAAA,CAGA,IAAAyQ,EACAC,EACA5c,EACAC,EACA2d,EACAC,EAGAF,EAAAF,EAFA,GAAAx4C,EAAAK,YAGAq3C,EAAAa,EACAZ,EAAAW,EACAvd,EAAApoB,EACAqoB,EAAAtoB,EACAimC,EAAAF,EACApoC,EAAAM,KAAAhF,EAAA8J,QACAmjC,EAAA,IAEAlB,EAAAY,EACAX,EAAAY,EACAxd,EAAAroB,EACAsoB,EAAAroB,EACAgmC,EAAA3B,EACA3mC,EAAAM,KAAAhF,EAAA2J,QACAsjC,EAAA,GAGA,IAAAC,EAAA,KAAAltC,EAAAyO,WAAA,IAAAzO,EAAAyO,aA5FA,SAAAhjB,EAAAsgD,EAAA3c,EAAA4d,EAAAhB,EAAA3c,GACA,IAAA8d,EAAApB,EAAAp4B,UAEAu4B,EAAAF,EAAAp4B,QACAw5B,EAAApB,EAAAt4B,WACA25B,EAAArB,EAAAr4B,UAEArlB,GAAAE,EAAAb,OAAA,GAAAq/C,KAAAjB,EAAAn4B,SAQA,IALA,IAAA05B,EAAAj7C,EAAAe,KAAAi8B,EAAA37B,EAAArB,EAAAa,QAAAk8B,EAAA17B,EAAAy5C,EAAAH,KAGAh5B,EAAA,EACAu5B,EAAAnuC,IACAhU,EAAA,EAAiBA,EAAA8gD,IAAY9gD,EAAA,CAC7B,IAAAiG,EAAA9C,EAAA8C,IAAAi8C,EAAAD,EAAAjiD,IACAiG,EAAAk8C,IACAA,EAAAl8C,EACA2iB,EAAA5oB,GAKA,IAAAwpB,EAAAZ,EACAa,EAAAD,EAAA,EAAAs3B,EAAAt3B,EAAA,IAEAnpB,EAAA,GAAAuD,EAAAuE,EAAAL,QAAAm8B,EAAA+d,EAAAx4B,IACAnpB,EAAA,GAAAmc,GAAA8F,GAAApN,OAAA0sC,EACAvhD,EAAA,GAAAmc,GAAA8F,GAAAlN,OAAAoU,EACAnpB,EAAA,GAAAmc,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACA/iB,EAAA,GAAAmc,GAAA8F,GAAAN,MAAApN,EAAAuO,SAEA9iB,EAAA,GAAAuD,EAAAuE,EAAAL,QAAAm8B,EAAA+d,EAAAv4B,IACAppB,EAAA,GAAAmc,GAAA8F,GAAApN,OAAA0sC,EACAvhD,EAAA,GAAAmc,GAAA8F,GAAAlN,OAAAqU,EACAppB,EAAA,GAAAmc,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACA/iB,EAAA,GAAAmc,GAAA8F,GAAAN,MAAApN,EAAAuO,SAwDAi/B,CAAAN,EAAAnB,EAAA3c,EAAA4d,EAAAhB,EAAA3c,GAEA,IAAA4c,EAAAF,EAAAn4B,QACA65B,EAAA1B,EAAAr4B,WAEAg6B,EAAAV,EACAW,EAAAX,EAAA,EAAAf,EAAAe,EAAA,IAEAY,EAAAH,EAAAC,GACAG,EAAAJ,EAAAE,GAEAG,EAAAv/C,EAAA8B,IAAAw9C,EAAAD,GACAE,EAAAp9C,YAEA,IAAAuU,EAAA1W,EAAA+C,MAAAw8C,EAAA,GACAlkC,EAAArb,EAAAiD,QAAA,GAAAo8C,EAAA,GAAAC,GAEA9iC,EAAA1Y,EAAAa,QAAAk8B,EAAA17B,EAAAo6C,GACAl9C,EAAArC,EAAA+C,MAAAyZ,EAAA,GAEA6iC,EAAAr6C,EAAAL,QAAAk8B,EAAAwe,GACAC,EAAAt6C,EAAAL,QAAAk8B,EAAAye,GAGA,IAAAE,EAAAx/C,EAAA8C,IAAAT,EAAAg9C,GAGAI,GAAAz/C,EAAA8C,IAAA0Z,EAAA6iC,GAAAtS,EACA2S,EAAA1/C,EAAA8C,IAAA0Z,EAAA8iC,GAAAvS,EAGA4S,EAAA,KAAAluC,EAAAyO,WAAA,IAAAzO,EAAAyO,YACA0/B,EAAA,KAAAnuC,EAAAyO,WAAA,IAAAzO,EAAAyO,YAOA,KAHAzO,EAAA8N,kBAAAogC,EAAAhB,EAAA3+C,EAAAkD,IAAAsZ,GACAijC,EAAAN,GAEA,GAKA1tC,EAAA8N,kBAAAqgC,EAAAD,EAAAnjC,EACAkjC,EAAAN,GAEA,IAKAjpC,EAAAO,cACAP,EAAAQ,WAAA0E,EAGA,IADA,IAAAhF,EAAA,EACAxZ,EAAA,EAAiBA,EAAA+iD,EAAA59C,SAA+CnF,EAAA,CAGhE,GAFAmD,EAAA8C,IAAAT,EAAAu9C,EAAA/iD,GAAA4D,GAAA++C,GAEAzS,EAAA,CACA,IAAAl2B,EAAAV,EAAAW,OAAAT,GAGA,GAFAQ,EAAAF,WAAA3V,IAAAgE,EAAAD,SAAA+7B,EAAA8e,EAAA/iD,GAAA4D,IACAoW,EAAAwC,GAAAumC,EAAA/iD,GAAAwc,GACAqlC,EAAA,CAEA,IAAAv/B,EAAAtI,EAAAwC,GAAA8F,GACApN,EAAAoN,EAAApN,OACAE,EAAAkN,EAAAlN,OACA2M,EAAAO,EAAAP,MACAC,EAAAM,EAAAN,MACAM,EAAApN,OAAAE,EACAkN,EAAAlN,OAAAF,EACAoN,EAAAP,MAAAC,EACAM,EAAAN,MAAAD,IAEAvI,GAIAF,EAAAE,gBAlOAzZ,EAAAD,QAAAq7C,EAEAnmC,EAAA2M,QAAAoG,EAAAK,KAAAL,EAAAK,KAEA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAlS,GAAAE,EAAAb,OAAAyW,EAAAnJ,WAAAkY,EAAAK,MACAllB,GAAAE,EAAAb,OAAA0W,EAAApJ,WAAAkY,EAAAK,MACA+yB,EAAA7hC,EAAAN,EAAAG,WAAAwC,EAAA1C,EAAAE,WAAAyC,sBCtBA,IACA1Y,GAAsD,EAEtDE,EAAaxD,EAAQ,GACrBqC,EAAWrC,EAAQ,GACnBuI,EAAgBvI,EAAQ,GAExBuD,GADUvD,EAAQ,GACPA,EAAQ,IAGnBgV,GAFWhV,EAAQ,IACJA,EAAQ,GACRA,EAAQ,KACvBoV,EAAcpV,EAAQ,IAEtB0wB,GADY1wB,EAAQ,IACFA,EAAQ,KAC1BmoB,EAAmBnoB,EAAQ,IAE3BoV,EAAA2M,QAAAoG,EAAAK,KAAAkI,EAAAlI,KAEA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAlS,GAAAE,EAAAb,OAAAyW,EAAAnJ,WAAAkY,EAAAK,MACAllB,GAAAE,EAAAb,OAAA0W,EAAApJ,WAAAygB,EAAAlI,MAKA,SAAA9O,EAAA0pC,EAAArnC,EAAAmkC,EAAAlkC,GACAtC,EAAAE,WAAA,EAcA,IAXA,IAAAnZ,EAAA8H,EAAAL,QAAA8T,EAAAkkC,EAAAvvB,KACA0yB,EAAA96C,EAAAD,SAAAyT,EAAAtb,GAGA6iD,EAAA,EACA/kC,GAAAnK,IACA4c,EAAAoyB,EAAA/xC,SAAA6uC,EAAA7uC,SACAkyC,EAAAH,EAAAx6B,QACAN,EAAA86B,EAAA16B,WACA86B,EAAAJ,EAAAz6B,UAEAvoB,EAAA,EAAiBA,EAAAmjD,IAAiBnjD,EAAA,CAClC,IAAA+B,EAAAoB,EAAA8C,IAAAm9C,EAAApjD,GAAAmD,EAAA8B,IAAAg+C,EAAA/6B,EAAAloB,KAEA,GAAA+B,EAAA6uB,EAEA,OAGA7uB,EAAAoc,IACAA,EAAApc,EACAmhD,EAAAljD,GAKA,IAAAqjD,EAAAH,EACAI,EAAAD,EAAA,EAAAF,EAAAE,EAAA,IACAr7B,EAAAE,EAAAm7B,GACAp7B,EAAAC,EAAAo7B,GAGA,GAAAnlC,EAAAlc,EAAAE,QAYA,OAXAmX,EAAAE,WAAA,EACAF,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAA1V,IAAAi/C,EAAAF,IACA5pC,EAAAQ,WAAAtV,WAAA,GAAAwjB,EAAA,GAAAC,GACA3O,EAAAW,OAAA,GAAAH,WAAAgmC,EAAAvvB,IAGAjX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,OACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UAKA,IAAAogC,EAAApgD,EAAA8C,IAAA9C,EAAA8B,IAAAg+C,EAAAj7B,GAAA7kB,EAAA8B,IAAAgjB,EAAAD,IACAw7B,EAAArgD,EAAA8C,IAAA9C,EAAA8B,IAAAg+C,EAAAh7B,GAAA9kB,EAAA8B,IAAA+iB,EAAAC,IACA,GAAAs7B,GAAA,GACA,GAAApgD,EAAA2C,gBAAAm9C,EAAAj7B,GAAA4I,IACA,OAGAtX,EAAAE,WAAA,EACAF,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAArV,WAAA,EAAAy+C,GAAA,EAAAj7B,GACA1O,EAAAO,YAAAvU,YACAgU,EAAAQ,WAAAkO,EACA1O,EAAAW,OAAA,GAAAH,WAAA3V,IAAA27C,EAAAvvB,KAGAjX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,cACG,GAAAqgC,GAAA,GACH,GAAArgD,EAAA2C,gBAAAm9C,EAAAh7B,GAAA2I,IACA,OAGAtX,EAAAE,WAAA,EACAF,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAArV,WAAA,EAAAy+C,GAAA,EAAAh7B,GACA3O,EAAAO,YAAAvU,YACAgU,EAAAQ,WAAA3V,IAAA8jB,GACA3O,EAAAW,OAAA,GAAAH,WAAA3V,IAAA27C,EAAAvvB,KAGAjX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,aACG,CACH,IAAAsgC,EAAAtgD,EAAAoD,IAAAyhB,EAAAC,GACA9J,EAAAhb,EAAA8C,IAAAg9C,EAAAG,EAAAC,IACAlgD,EAAA8C,IAAAw9C,EAAAL,EAAAC,IACA,GAAAllC,EAAAyS,EACA,OAGAtX,EAAAE,WAAA,EACAF,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAA1V,IAAAi/C,EAAAC,IACA/pC,EAAAQ,WAAA3V,IAAAs/C,GACAnqC,EAAAW,OAAA,GAAAH,WAAA3V,IAAA27C,EAAAvvB,KAGAjX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UA9GAugC,CAAApqC,EAAAN,EAAAG,WAAAwC,EAAA1C,EAAAE,WACAyC,sBCtBA,IACA1Y,GAAsD,EAEtDE,EAAaxD,EAAQ,GAErBqC,GADarC,EAAQ,GACVA,EAAQ,IACnBuI,EAAgBvI,EAAQ,GACxBuD,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAClBqJ,EAAerJ,EAAQ,GAEvBoV,GADYpV,EAAQ,IACNA,EAAQ,KACtBgV,EAAehV,EAAQ,IACvB+wB,EAAgB/wB,EAAQ,IACxBugC,EAAiBvgC,EAAQ,IACzBmoB,EAAmBnoB,EAAQ,IAE3BoV,EAAA2M,QAAAgP,EAAAvI,KAAAL,EAAAK,KAGA,SAAA9O,EAAAqC,EAAA1G,EAAAC,EAAA0G,EAAAzG,EAAAC,GACAlS,GAAAE,EAAAb,OAAA0S,EAAApF,WAAA8gB,EAAAvI,MACAllB,GAAAE,EAAAb,OAAA4S,EAAAtF,WAAAkY,EAAAK,MAEAu7B,EAAArqC,EAAArE,EAAAkE,WAAAwC,EAAAxG,EAAAgE,WAAAyC,KANA5G,EAAA2M,QAAAwe,EAAA/X,KAAAL,EAAAK,KASA,SAAA9O,EAAAqC,EAAA1G,EAAAC,EAAA0G,EAAAzG,EAAAC,GACAlS,GAAAE,EAAAb,OAAA0S,EAAApF,WAAAswB,EAAA/X,MACAllB,GAAAE,EAAAb,OAAA4S,EAAAtF,WAAAkY,EAAAK,MAEA,IAAAq4B,EAAAxrC,EAAAkE,WACAuQ,EAAA,IAAAiH,EACA8vB,EAAAzf,aAAAtX,EAAAxU,GAEAyuC,EAAArqC,EAAAoQ,EAAA/N,EAAAxG,EAAAgE,WAAAyC,KAIA,IAAAk0B,GAAA,EACA8T,EAAA,EACAC,EAAA,EAGA,SAAAC,IACAxgD,KAAAsW,KACAtW,KAAAslB,MACAtlB,KAAA6a,WAsBA,IAAA4lC,EAAA,IAAAD,EACAE,EAAA,IAAAF,EACAG,EAAA,IApBA,WACA3gD,KAAA4kB,SAAA,GACA5kB,KAAA8/C,QAAA,GACA9/C,KAAAsmB,MAAA,GAkBAs6B,EAAA,IAdA,WACA5gD,KAAAkmB,GAAAlmB,KAAAmmB,GACAnmB,KAAA0kB,GAAA1kB,KAAA2kB,GACA3kB,KAAAkC,OAAArC,EAAAI,OACAD,KAAA6gD,YAAAhhD,EAAAI,OACAD,KAAAs/C,YACAt/C,KAAA8gD,YAAAjhD,EAAAI,OACAD,KAAAu/C,aAaA,SAAAc,EAAArqC,EAAA2mC,EAAAtkC,EAAA0oC,EAAAzoC,GAWA,IAAArT,EAAAJ,EAAAa,OAAA2S,EAAAC,GAEA0oC,EAAAn8C,EAAAL,QAAAS,EAAA87C,EAAAh8B,YAEAmJ,EAAAyuB,EAAAhvB,UACAjJ,EAAAi4B,EAAApvB,UACA5I,EAAAg4B,EAAAnvB,UACAQ,EAAA2uB,EAAA/uB,UAEAqzB,EAAAtE,EAAA9uB,aACAqzB,EAAAvE,EAAA7uB,aAEAwwB,EAAAz+C,EAAA8B,IAAAgjB,EAAAD,GACA45B,EAAAt8C,YACA,IAyBAm/C,EAzBAvC,EAAA/+C,EAAAO,IAAAk+C,EAAAv+C,GAAAu+C,EAAAv/C,GACAqiD,EAAAvhD,EAAA8C,IAAAi8C,EAAA/+C,EAAA8B,IAAAq/C,EAAAt8B,IACA28B,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EAGA,GAAAP,EAAA,CACA,IAAAQ,EAAA5hD,EAAA8B,IAAA+iB,EAAAwJ,GACAuzB,EAAAz/C,YACA,IAAA0/C,EAAA7hD,EAAAO,IAAAqhD,EAAA1hD,GAAA0hD,EAAA1iD,GACAwiD,EAAA1hD,EAAA+C,MAAA6+C,EAAAnD,IAAA,EACA+C,EAAAxhD,EAAA8C,IAAA++C,EAAAV,GAAAnhD,EAAA8C,IAAA++C,EAAAxzB,GAIA,GAAAgzB,EAAA,CACA,IAAAS,EAAA9hD,EAAA8B,IAAAqsB,EAAArJ,GACAg9B,EAAA3/C,YACA,IAAA4/C,EAAA/hD,EAAAO,IAAAuhD,EAAA5hD,GAAA4hD,EAAA5iD,GACAyiD,EAAA3hD,EAAA+C,MAAA07C,EAAAqD,GAAA,EACAL,EAAAzhD,EAAA8C,IAAAi/C,EAAAZ,GAAAnhD,EAAA8C,IAAAi/C,EAAAj9B,GAIA,IAAAziB,EAAArC,EAAAI,OACA4hD,EAAAhiD,EAAAI,OACA6hD,EAAAjiD,EAAAI,OAGAghD,GAAAC,EACAK,GAAAC,GACAL,EAAAE,GAAA,GAAAD,GAAA,GAAAE,GAAA,IAEAp/C,EAAArB,IAAA+9C,GACAiD,EAAAhhD,IAAA6gD,GACAI,EAAAjhD,IAAA+gD,KAEA1/C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAA1gD,QAAA,EAAAy9C,GACAkD,EAAA3gD,QAAA,EAAAy9C,IAEK2C,GACLJ,EAAAE,GAAA,GAAAD,GAAA,GAAAE,GAAA,IAEAp/C,EAAArB,IAAA+9C,GACAiD,EAAAhhD,IAAA6gD,GACAI,EAAAjhD,IAAA+9C,KAEA18C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAA1gD,QAAA,EAAAygD,GACAE,EAAA3gD,QAAA,EAAAy9C,IAEK4C,GACLL,EAAAG,GAAA,GAAAD,GAAA,GAAAD,GAAA,IAEAl/C,EAAArB,IAAA+9C,GACAiD,EAAAhhD,IAAA+9C,GACAkD,EAAAjhD,IAAA+gD,KAEA1/C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAA1gD,QAAA,EAAAy9C,GACAkD,EAAA3gD,QAAA,EAAAugD,KAGAP,EAAAE,GAAA,GAAAD,GAAA,GAAAE,GAAA,IAEAp/C,EAAArB,IAAA+9C,GACAiD,EAAAhhD,IAAA+9C,GACAkD,EAAAjhD,IAAA+9C,KAEA18C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAA1gD,QAAA,EAAAygD,GACAE,EAAA3gD,QAAA,EAAAugD,IAGGT,EACHM,GACAJ,EAAAE,GAAA,GAAAD,GAAA,IAEAl/C,EAAArB,IAAA+9C,GACAiD,EAAAhhD,IAAA6gD,GACAI,EAAA3gD,QAAA,EAAAy9C,KAEA18C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAAhhD,IAAA+9C,GACAkD,EAAA3gD,QAAA,EAAAy9C,KAGAuC,EAAAE,GAAA,GAAAD,GAAA,IAEAl/C,EAAArB,IAAA+9C,GACAiD,EAAAhhD,IAAA+9C,GACAkD,EAAA3gD,QAAA,EAAAy9C,KAEA18C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAAhhD,IAAA+9C,GACAkD,EAAA3gD,QAAA,EAAAugD,IAGGR,EACHM,GACAL,EAAAC,GAAA,GAAAE,GAAA,IAEAp/C,EAAArB,IAAA+9C,GACAiD,EAAA1gD,QAAA,EAAAy9C,GACAkD,EAAAjhD,IAAA+gD,KAEA1/C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAA1gD,QAAA,EAAAy9C,GACAkD,EAAAjhD,IAAA+9C,KAGAuC,EAAAC,GAAA,GAAAE,GAAA,IAEAp/C,EAAArB,IAAA+9C,GACAiD,EAAA1gD,QAAA,EAAAy9C,GACAkD,EAAAjhD,IAAA+9C,KAEA18C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAA1gD,QAAA,EAAAygD,GACAE,EAAAjhD,IAAA+9C,KAIAuC,EAAAC,GAAA,IAEAl/C,EAAArB,IAAA+9C,GACAiD,EAAA1gD,QAAA,EAAAy9C,GACAkD,EAAA3gD,QAAA,EAAAy9C,KAEA18C,EAAAf,QAAA,EAAAy9C,GACAiD,EAAAhhD,IAAA+9C,GACAkD,EAAAjhD,IAAA+9C,IAKA+B,EAAAr6B,MAAAy6B,EAAA77B,QACA,QAAAxoB,EAAA,EAAiBA,EAAAqkD,EAAA77B,UAAsBxoB,EACvCikD,EAAA/7B,SAAAloB,GAAAmI,EAAAL,QAAAS,EAAA87C,EAAA/7B,WAAAtoB,IACAikD,EAAAb,QAAApjD,GAAAiH,EAAAa,QAAAS,EAAAD,EAAA+7C,EAAA97B,UAAAvoB,IAGA,IAAA4wB,EAAAqvB,EAAAhvC,SAAAozC,EAAApzC,SAEAqI,EAAAE,WAAA,EAGAuqC,EAAAnqC,KAAAgqC,EACAG,EAAAn7B,MAAA67B,EAAA,IACAV,EAAA5lC,WAAAnK,IAEA,IAAAhU,EAAA,EAAmBA,EAAAikD,EAAAr6B,QAAqB5pB,EAAA,EACxC+B,EAAAoB,EAAA8C,IAAAT,EAAArC,EAAA8B,IAAAg/C,EAAA/7B,SAAAloB,GAAAgoB,KACA+7B,EAAA5lC,aACA4lC,EAAA5lC,WAAApc,GAMA,GAAAgiD,EAAAnqC,MAAAk2B,KAIAiU,EAAA5lC,WAAAyS,GAAA,CAKAozB,EAAApqC,KAAAk2B,EACAkU,EAAAp7B,OAAA,EACAo7B,EAAA7lC,YAAAnK,IAEA,IAAA2kC,EAAAx1C,EAAAO,KAAA8B,EAAAnC,EAAAmC,EAAAnD,GAEA,IAAArC,EAAA,EAAmBA,EAAAikD,EAAAr6B,QAAqB5pB,EAAA,CACxC,IAIA+B,EAJAN,EAAA0B,EAAAkD,IAAA49C,EAAAb,QAAApjD,IAEAkxC,EAAA/tC,EAAA8C,IAAAxE,EAAA0B,EAAA8B,IAAAg/C,EAAA/7B,SAAAloB,GAAAgoB,IACA+oB,EAAA5tC,EAAA8C,IAAAxE,EAAA0B,EAAA8B,IAAAg/C,EAAA/7B,SAAAloB,GAAAioB,IAGA,IAFAlmB,EAAAE,EAAAa,IAAAouC,EAAAH,IAEAngB,EAAA,CAEAozB,EAAApqC,KAAAiqC,EACAG,EAAAp7B,MAAA5oB,EACAgkD,EAAA7lC,WAAApc,EACA,MAIA,GAAAoB,EAAA8C,IAAAxE,EAAAk3C,IAAA,GACA,GAAAx1C,EAAA8C,IAAA9C,EAAA8B,IAAAxD,EAAA2jD,GAAA5/C,IAAAyD,EAAAO,YACA,cAGA,GAAArG,EAAA8C,IAAA9C,EAAA8B,IAAAxD,EAAA0jD,GAAA3/C,IAAAyD,EAAAO,YACA,SAIAzH,EAAAiiD,EAAA7lC,aACA6lC,EAAApqC,KAAAiqC,EACAG,EAAAp7B,MAAA5oB,EACAgkD,EAAA7lC,WAAApc,GAKA,KAAAiiD,EAAApqC,MAAAk2B,GAAAkU,EAAA7lC,WAAAyS,GAAA,CAKA,IAGAy0B,EAEAA,EADArB,EAAApqC,MAAAk2B,EACAiU,EACGC,EAAA7lC,WANH,IAMG4lC,EAAA5lC,WALH,KAMA6lC,EAEAD,EAGA,IAAA16B,EAAA,KAAAzU,EAAAyO,WAAA,IAAAzO,EAAAyO,YAEA,GAAAgiC,EAAAzrC,MAAAgqC,EAAA,CACAtqC,EAAAM,KAAAhF,EAAA2J,QAIA,IAAA2P,EAAA,EACAC,EAAAhrB,EAAA8C,IAAAT,EAAAy+C,EAAAb,QAAA,IACA,IAAApjD,EAAA,EAAmBA,EAAAikD,EAAAr6B,QAAqB5pB,EAAA,CACxC,IAAAiB,EAAAkC,EAAA8C,IAAAT,EAAAy+C,EAAAb,QAAApjD,IACAiB,EAAAktB,IACAA,EAAAltB,EACAitB,EAAAluB,GAIA,IAAAwpB,EAAA0E,EACAzE,GAAAD,EAAA,EAAAy6B,EAAAr6B,MAAAJ,EAAA,IAEAH,EAAA,GAAAzlB,EAAAqgD,EAAA/7B,SAAAsB,GACAH,EAAA,GAAA7M,GAAA8F,GAAApN,OAAA,EACAmU,EAAA,GAAA7M,GAAA8F,GAAAlN,OAAAoU,EACAH,EAAA,GAAA7M,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACAiG,EAAA,GAAA7M,GAAA8F,GAAAN,MAAApN,EAAAuO,SAEAkG,EAAA,GAAAzlB,EAAAqgD,EAAA/7B,SAAAuB,IACAJ,EAAA,GAAA7M,GAAA8F,GAAApN,OAAA,EACAmU,EAAA,GAAA7M,GAAA8F,GAAAlN,OAAAqU,GACAJ,EAAA,GAAA7M,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACAiG,EAAA,GAAA7M,GAAA8F,GAAAN,MAAApN,EAAAuO,SAEAshC,GACAP,EAAA16B,GAAA,EACA06B,EAAAz6B,GAAA,EACAy6B,EAAAl8B,KACAk8B,EAAAj8B,KACAi8B,EAAA1+C,OAAArB,IAAA+9C,KAEAgC,EAAA16B,GAAA,EACA06B,EAAAz6B,GAAA,EACAy6B,EAAAl8B,GAAAC,EACAi8B,EAAAj8B,GAAAD,EACAk8B,EAAA1+C,OAAAf,QAAA,EAAAy9C,SAGA5oC,EAAAM,KAAAhF,EAAA8J,QAEA2K,EAAA,GAAAzlB,EAAAokB,EACAqB,EAAA,GAAA7M,GAAA8F,GAAApN,OAAA,EACAmU,EAAA,GAAA7M,GAAA8F,GAAAlN,OAAAiwC,EAAAz8B,MACAS,EAAA,GAAA7M,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACAkG,EAAA,GAAA7M,GAAA8F,GAAAN,MAAApN,EAAAwO,OAEAiG,EAAA,GAAAzlB,EAAAqkB,EACAoB,EAAA,GAAA7M,GAAA8F,GAAApN,OAAA,EACAmU,EAAA,GAAA7M,GAAA8F,GAAAlN,OAAAiwC,EAAAz8B,MACAS,EAAA,GAAA7M,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACAkG,EAAA,GAAA7M,GAAA8F,GAAAN,MAAApN,EAAAwO,OAEA8gC,EAAA16B,GAAA67B,EAAAz8B,MACAs7B,EAAAz6B,GAAAy6B,EAAA16B,GAAA,EAAAy6B,EAAAr6B,MAAAs6B,EAAA16B,GAAA,IACA06B,EAAAl8B,GAAAi8B,EAAA/7B,SAAAg8B,EAAA16B,IACA06B,EAAAj8B,GAAAg8B,EAAA/7B,SAAAg8B,EAAAz6B,IACAy6B,EAAA1+C,OAAArB,IAAA8/C,EAAAb,QAAAc,EAAA16B,KAGA06B,EAAAC,YAAAhgD,IAAA+/C,EAAA1+C,OAAAnC,GAAA6gD,EAAA1+C,OAAAnD,GACA6hD,EAAAE,YAAA3/C,QAAA,EAAAy/C,EAAAC,aACAD,EAAAtB,YAAAz/C,EAAA8C,IAAAi+C,EAAAC,YAAAD,EAAAl8B,IACAk8B,EAAArB,YAAA1/C,EAAA8C,IAAAi+C,EAAAE,YAAAF,EAAAj8B,IAGA,IAAA66B,GAAA,KAAAluC,EAAAyO,WAAA,IAAAzO,EAAAyO,YACA0/B,GAAA,KAAAnuC,EAAAyO,WAAA,IAAAzO,EAAAyO,YAOA,KAFAzO,EAAA8N,kBAAAogC,GAAAz5B,EAAA66B,EAAAC,YAAAD,EAAAtB,YAAAsB,EAAA16B,IAEAvgB,EAAAC,mBAKA0L,EAAA8N,kBAAAqgC,GAAAD,GAAAoB,EAAAE,YAAAF,EAAArB,YAAAqB,EAAAz6B,IAEAxgB,EAAAC,mBAAA,CAKAm8C,EAAAzrC,MAAAgqC,GACAtqC,EAAAO,YAAA1W,EAAAQ,MAAAugD,EAAA1+C,QACA8T,EAAAQ,WAAA3W,EAAAQ,MAAAugD,EAAAl8B,MAEA1O,EAAAO,YAAA1W,EAAAQ,MAAA0gD,EAAA97B,UAAA27B,EAAA16B,KACAlQ,EAAAQ,WAAA3W,EAAAQ,MAAA0gD,EAAA/7B,WAAA47B,EAAA16B,MAGA,IAAAhQ,GAAA,EACA,IAAAxZ,EAAA,EAAiBA,EAAAiJ,EAAAC,oBAAgClJ,EAAA,CAGjD,GAFAmD,EAAA8C,IAAAi+C,EAAA1+C,OAAArC,EAAA8B,IAAA89C,GAAA/iD,GAAA4D,EAAAsgD,EAAAl8B,MAEA4I,EAAA,CACA,IAAA5W,GAAAV,EAAAW,OAAAT,IAEA6rC,EAAAzrC,MAAAgqC,GACA5pC,GAAAF,WAAA3R,EAAAH,KAAAO,EAAAw6C,GAAA/iD,GAAA4D,GACAoW,GAAAwC,GAAAumC,GAAA/iD,GAAAwc,KAEAxC,GAAAF,WAAAipC,GAAA/iD,GAAA4D,EACAoW,GAAAwC,GAAA8F,GAAAP,MAAAghC,GAAA/iD,GAAAwc,GAAA8F,GAAAN,MACAhI,GAAAwC,GAAA8F,GAAAN,MAAA+gC,GAAA/iD,GAAAwc,GAAA8F,GAAAP,MACA/H,GAAAwC,GAAA8F,GAAApN,OAAA6tC,GAAA/iD,GAAAwc,GAAA8F,GAAAlN,OACA4E,GAAAwC,GAAA8F,GAAAlN,OAAA2tC,GAAA/iD,GAAAwc,GAAA8F,GAAApN,UAGAsE,IAIAF,EAAAE,mCCpcAzZ,EAAAD,QAAAs7C,EAEA,IAAA9iB,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBw7C,EAAAhzB,KAAA,iBAEAgzB,EAAAjzB,OAAAja,EACAktC,EAAAx5C,UAAAN,EAAA85C,EAAAjzB,OAAAvmB,WAqBA,IAAAmxC,EAAA,CACAuS,YAAA,EACAC,aAAA,EACAh2C,QAAA,GAaA,SAAA6rC,EAAA5sC,EAAAC,EAAAC,EAAA82C,EAAAC,GACA,KAAAniD,gBAAA83C,GACA,WAAAA,EAAA5sC,EAAAC,EAAAC,EAAA82C,EAAAC,GAIA,GAAA/2C,GAAA82C,GAAA,WAAAA,GAAA,MAAA92C,GAAA,MAAAA,EAAA,CACA,IAAA+F,EAAA/F,EACAA,EAAA82C,EACAA,EAAA/wC,EAGAjG,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAysC,EAAAhzB,KAGA9kB,KAAAiwC,eAAAiS,EAAA/2C,EAAAsxB,cAAAylB,GAAAh3C,EAAAglC,cAAArwC,EAAAI,OACAD,KAAAmwC,eAAAgS,EAAA/2C,EAAAqxB,cAAA0lB,GAAAj3C,EAAAklC,cAAAvwC,EAAAI,OACAD,KAAAoiD,SAAAzjD,EAAAG,SAAAoM,EAAArJ,QAAAqJ,EAAArJ,OACAhC,EAAAwC,SAAA8I,EAAAivB,cAAAp6B,KAAAiwC,gBAAA7kC,EAAAgvB,cAAAp6B,KAAAmwC,iBACAnwC,KAAAqiD,cAAAn3C,EAAA82C,YACAhiD,KAAAsiD,eAAAp3C,EAAA+2C,aACAjiD,KAAAuwC,UAAA,EACAvwC,KAAAuiD,QAAA,EACAviD,KAAAwiD,OAAA,EAGAxiD,KAAAyiD,IACAziD,KAAA+wC,KACA/wC,KAAAgxC,KACAhxC,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QACAtxC,KAAAy2B,OAqBAqhB,EAAAx5C,UAAAmzC,gBAAA,WACA,OAAAzxC,KAAAiwC,gBAMA6H,EAAAx5C,UAAAozC,gBAAA,WACA,OAAA1xC,KAAAmwC,gBAOA2H,EAAAx5C,UAAAokD,UAAA,SAAA7gD,GACA7B,KAAAoiD,SAAAvgD,GAGAi2C,EAAAx5C,UAAAqkD,UAAA,WACA,OAAA3iD,KAAAoiD,UAGAtK,EAAAx5C,UAAAskD,aAAA,SAAAC,GACA7iD,KAAAqiD,cAAAQ,GAGA/K,EAAAx5C,UAAAwkD,aAAA,WACA,OAAA9iD,KAAAqiD,eAGAvK,EAAAx5C,UAAAykD,gBAAA,SAAAnI,GACA56C,KAAAsiD,eAAA1H,GAGA9C,EAAAx5C,UAAA0kD,gBAAA,WACA,OAAAhjD,KAAAsiD,gBAGAxK,EAAAx5C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGA6H,EAAAx5C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGA2H,EAAAx5C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAA5B,KAAAuwC,UAAAvwC,KAAAyiD,KAAA7gD,IAAAsL,IAGA4qC,EAAAx5C,UAAA6O,kBAAA,SAAAD,GACA,UAGA4qC,EAAAx5C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAmE,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAwZ,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA1a,KAAA+wC,KAAAptC,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAjxC,KAAAgxC,KAAArtC,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBACAlxC,KAAAyiD,IAAA5iD,EAAA8B,IAAA9B,EAAAuB,IAAAqZ,EAAAza,KAAAgxC,MAAAnxC,EAAAuB,IAAAmZ,EAAAva,KAAA+wC,OAGA,IAAAlvC,EAAA7B,KAAAyiD,IAAA5gD,SACAA,EAAA8D,EAAAK,WACAhG,KAAAyiD,IAAA7gD,IAAA,EAAAC,GAEA7B,KAAAyiD,IAAA5hD,IAAA,KAGA,IAAAoiD,EAAApjD,EAAA+C,MAAA5C,KAAA+wC,KAAA/wC,KAAAyiD,KACAS,EAAArjD,EAAA+C,MAAA5C,KAAAgxC,KAAAhxC,KAAAyiD,KACAU,EAAAnjD,KAAAmxC,WAAAnxC,KAAAqxC,QAAA4R,IAAAjjD,KAAAoxC,WACApxC,KAAAsxC,QAAA4R,IAKA,GAFAljD,KAAAy2B,OAAA,GAAA0sB,EAAA,EAAAA,EAAA,EAEAnjD,KAAAqiD,cAAA,GACA,IAAAhnC,EAAAxZ,EAAA7B,KAAAoiD,SAGAgB,EAAA,EAAAzkD,EAAAwH,GAAAnG,KAAAqiD,cAGArlD,EAAA,EAAAgD,KAAAy2B,OAAAz2B,KAAAsiD,eAAAc,EAGAt0B,EAAA9uB,KAAAy2B,OAAA2sB,IAGAzuB,EAAApnB,EAAAulC,GACA9yC,KAAAuiD,QAAA5tB,GAAA33B,EAAA23B,EAAA7F,GACA9uB,KAAAuiD,QAAA,GAAAviD,KAAAuiD,QAAA,EAAAviD,KAAAuiD,QAAA,EACAviD,KAAAwiD,OAAAnnC,EAAAsZ,EAAA7F,EAAA9uB,KAAAuiD,QAEAY,GAAAnjD,KAAAuiD,QACAviD,KAAAy2B,OAAA,GAAA0sB,EAAA,EAAAA,EAAA,OAEAnjD,KAAAuiD,QAAA,EACAviD,KAAAwiD,OAAA,EAGA,GAAAj1C,EAAAsJ,aAAA,CAEA7W,KAAAuwC,WAAAhjC,EAAAuJ,QAEA,IAAA4E,EAAA7b,EAAA+B,IAAA5B,KAAAuwC,UAAAvwC,KAAAyiD,KAEAzmC,EAAAta,OAAA1B,KAAAmxC,WAAAz1B,GACAO,GAAAjc,KAAAqxC,QAAAxxC,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAEAQ,EAAA3a,OAAAvB,KAAAoxC,WAAA11B,GACAS,GAAAnc,KAAAsxC,QAAAzxC,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,QAGA1b,KAAAuwC,UAAA,EAGAvwC,KAAAsL,QAAAwO,WAAAxZ,EAAAO,IAAAmb,GACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAAO,IAAAqb,GACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGA27B,EAAAx5C,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAGAoiD,EAAAxjD,EAAAuB,IAAA4a,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAA+wC,OACAuS,EAAAzjD,EAAAuB,IAAA8a,EAAArc,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,OACA2B,EAAA9yC,EAAA8C,IAAA3C,KAAAyiD,IAAAa,GAAAzjD,EAAA8C,IAAA3C,KAAAyiD,IAAAY,GAEA5nC,GAAAzb,KAAAy2B,QACAkc,EAAA3yC,KAAAwiD,OAAAxiD,KAAAuiD,QAAAviD,KAAAuwC,WACAvwC,KAAAuwC,WAAA90B,EAEA,IAAAC,EAAA7b,EAAA+B,IAAA6Z,EAAAzb,KAAAyiD,KACAzmC,EAAAta,OAAA1B,KAAAmxC,WAAAz1B,GACAO,GAAAjc,KAAAqxC,QAAAxxC,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GACAQ,EAAA3a,OAAAvB,KAAAoxC,WAAA11B,GACAS,GAAAnc,KAAAsxC,QAAAzxC,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,GAEA1b,KAAAsL,QAAAwO,WAAAxZ,EAAAO,IAAAmb,GACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAAO,IAAAqb,GACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGA27B,EAAAx5C,UAAAmP,yBAAA,SAAAF,GACA,GAAAvN,KAAAqiD,cAAA,EAEA,SAGA,IAAA9nC,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACA0Z,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EAEAyxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA5F,EAAAnR,EAAAc,OAAA+tC,EAAAxyC,KAAAiwC,eAAAjwC,KAAAixC,gBACAl8B,EAAApR,EAAAc,OAAAguC,EAAAzyC,KAAAmwC,eAAAnwC,KAAAkxC,gBACA2L,EAAAh9C,EAAA8B,IAAA9B,EAAAuB,IAAAqZ,EAAA1F,GAAAlV,EAAAuB,IAAAmZ,EAAAzF,IAGAuG,EADAwhC,EAAA76C,YACAhC,KAAAoiD,SACA/mC,EAAA1c,EACAe,MAAA2b,GAAA1V,EAAAe,oBAAAf,EAAAe,qBAEA,IAAA+U,GAAAzb,KAAAy2B,OAAApb,EACAK,EAAA7b,EAAA+B,IAAA6Z,EAAAohC,GAYA,OAVAtiC,EAAA7Y,OAAA1B,KAAAmxC,WAAAz1B,GACAlB,GAAAxa,KAAAqxC,QAAAxxC,EAAA+C,MAAAkS,EAAA4G,GACAjB,EAAAlZ,OAAAvB,KAAAoxC,WAAA11B,GACAhB,GAAA1a,KAAAsxC,QAAAzxC,EAAA+C,MAAAmS,EAAA2G,GAEA1b,KAAAsL,QAAAyO,WAAAhd,EAAA8D,IAAA0Z,GACAva,KAAAsL,QAAAyO,WAAAhZ,EAAAyZ,EACAxa,KAAAuL,QAAAwO,WAAAhd,EAAA8D,IAAA4Z,GACAza,KAAAuL,QAAAwO,WAAAhZ,EAAA2Z,EAEA/b,EAAAqE,IAAAqY,GAAA1V,EAAAK,6BCtUAvJ,EAAAD,QAAAu7C,EAEaz7C,EAAQ,GAArB,IACA04B,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GAGrBqC,GAFerC,EAAQ,GAEZA,EAAQ,IACnBuD,EAAWvD,EAAQ,GAEnB6L,GADW7L,EAAQ,GACPA,EAAQ,IAEpBqH,GADYrH,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBy7C,EAAAjzB,KAAA,iBAEAizB,EAAAlzB,OAAAja,EACAmtC,EAAAz5C,UAAAN,EAAA+5C,EAAAlzB,OAAAvmB,WAcA,IAAAmxC,EAAA,CACA8T,SAAA,EACAC,UAAA,EACAv3C,QAAA,GAYA,SAAA8rC,EAAA7sC,EAAAC,EAAAC,EAAA4kC,GACA,KAAAhwC,gBAAA+3C,GACA,WAAAA,EAAA7sC,EAAAC,EAAAC,EAAA4kC,GAGA9kC,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA0sC,EAAAjzB,KAEA9kB,KAAAiwC,eAAAD,EAAA7kC,EAAAsxB,cAAAuT,GAAA9kC,EAAAglC,cAAArwC,EAAAI,OACAD,KAAAmwC,eAAAH,EAAA5kC,EAAAqxB,cAAAuT,GAAA9kC,EAAAklC,cAAAvwC,EAAAI,OAGAD,KAAAyjD,gBAAA5jD,EAAAI,OACAD,KAAA0jD,iBAAA,EACA1jD,KAAA2jD,WAAAz4C,EAAAq4C,SACAvjD,KAAA4jD,YAAA14C,EAAAs4C,UAGAxjD,KAAA+wC,KACA/wC,KAAAgxC,KACAhxC,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QACAtxC,KAAA6jD,aACA7jD,KAAA8jD,cAkBA/L,EAAAz5C,UAAAmzC,gBAAA,WACA,OAAAzxC,KAAAiwC,gBAMA8H,EAAAz5C,UAAAozC,gBAAA,WACA,OAAA1xC,KAAAmwC,gBAMA4H,EAAAz5C,UAAAylD,YAAA,SAAA1oB,GAEAr7B,KAAA2jD,WAAAtoB,GAMA0c,EAAAz5C,UAAA0lD,YAAA,WACA,OAAAhkD,KAAA2jD,YAMA5L,EAAAz5C,UAAA2lD,aAAA,SAAAxoB,GAEAz7B,KAAA4jD,YAAAnoB,GAMAsc,EAAAz5C,UAAA4lD,aAAA,WACA,OAAAlkD,KAAA4jD,aAGA7L,EAAAz5C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGA8H,EAAAz5C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGA4H,EAAAz5C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAAsL,EAAAlN,KAAAyjD,kBAGA1L,EAAAz5C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAA0jD,kBAGA3L,EAAAz5C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAoE,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAyZ,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GAAAi4B,EAAA9uC,EAAAvD,IAAAsa,GAGA1a,KAAA+wC,KAAAptC,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAjxC,KAAAgxC,KAAArtC,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBAWA,IAAA/2B,EAAAna,KAAAmxC,WAAA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QAAA/2B,EAAAta,KAAAsxC,QAEA91B,EAAA,IAAArT,EAeA,GAdAqT,EAAApT,GAAArJ,EAAAob,EAAAE,EAAAD,EAAApa,KAAA+wC,KAAAhxC,EAAAC,KAAA+wC,KAAAhxC,EAAAua,EAAAta,KAAAgxC,KAAAjxC,EACAC,KAAAgxC,KAAAjxC,EACAyb,EAAApT,GAAArI,GAAAqa,EAAApa,KAAA+wC,KAAAhyC,EAAAiB,KAAA+wC,KAAAhxC,EAAAua,EAAAta,KAAAgxC,KAAAjyC,EAAAiB,KAAAgxC,KAAAjxC,EACAyb,EAAAnT,GAAAtJ,EAAAyc,EAAApT,GAAArI,EACAyb,EAAAnT,GAAAtI,EAAAoa,EAAAE,EAAAD,EAAApa,KAAA+wC,KAAAhyC,EAAAiB,KAAA+wC,KAAAhyC,EAAAub,EAAAta,KAAAgxC,KAAAjyC,EACAiB,KAAAgxC,KAAAjyC,EAEAiB,KAAA6jD,aAAAroC,EAAAlT,aAEAtI,KAAA8jD,cAAA1pC,EAAAE,EACAta,KAAA8jD,cAAA,IACA9jD,KAAA8jD,cAAA,EAAA9jD,KAAA8jD,eAGAv2C,EAAAsJ,aAAA,CAEA7W,KAAAyjD,gBAAA7hD,IAAA2L,EAAAuJ,SACA9W,KAAA0jD,kBAAAn2C,EAAAuJ,QAEA,IAAA4E,EAAA7b,EAAAO,IAAAJ,KAAAyjD,gBAAA1kD,EAAAiB,KAAAyjD,gBAAA1jD,GAEAic,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAAA1b,KAAA0jD,kBAEAxnC,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,GAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,GAAA1b,KAAA0jD,uBAGA1jD,KAAAyjD,gBAAA7iD,UACAZ,KAAA0jD,iBAAA,EAGA1jD,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGA47B,EAAAz5C,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAkZ,EAAAna,KAAAmxC,WAAA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QAAA/2B,EAAAta,KAAAsxC,QAEA3c,EAAApnB,EAAAulC,GAIAH,EAAAx2B,EAAAF,EACAR,GAAAzb,KAAA8jD,cAAAnR,EAEAC,EAAA5yC,KAAA0jD,iBACA7Q,EAAAle,EAAA30B,KAAA4jD,YACA5jD,KAAA0jD,iBAAA/kD,EAAAe,MAAAM,KAAA0jD,iBAAAjoC,GACAo3B,KAGA52B,GAAA7B,GAFAqB,EAAAzb,KAAA0jD,iBAAA9Q,GAGAz2B,GAAA7B,EAAAmB,EAKAk3B,EAAA9yC,EAAA8B,IAAA9B,EAAAuB,IAAA8a,EAAArc,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,OAAAnxC,EAAAuB,IAAA4a,EACAnc,EAAA+C,MAAAqZ,EAAAjc,KAAA+wC,QAEAt1B,EAAA5b,EAAAkD,IAAAoF,EAAA3D,QAAAxE,KAAA6jD,aAAAlR,IACAC,EAAA5yC,KAAAyjD,gBACAzjD,KAAAyjD,gBAAAriD,IAAAqa,GAEAo3B,EAAAle,EAAA30B,KAAA2jD,WAEA3jD,KAAAyjD,gBAAA1hD,gBAAA8wC,MACA7yC,KAAAyjD,gBAAAzhD,YACAhC,KAAAyjD,gBAAA7hD,IAAAixC,IAGAp3B,EAAA5b,EAAA8B,IAAA3B,KAAAyjD,gBAAA7Q,GAEA52B,EAAAta,OAAAyY,EAAAsB,GACAQ,GAAA7B,EAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAt1B,GAEAS,EAAA3a,OAAA8Y,EAAAoB,GACAU,GAAA7B,EAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAv1B,GAGAzb,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGA47B,EAAAz5C,UAAAmP,yBAAA,SAAAF,GACA,2BCpSA,IACA3N,GAAsD,EAEtDnD,EAAAD,QAAAw7C,EAEA,IAAAl4C,EAAaxD,EAAQ,GACrB04B,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBizC,EAAoBjzC,EAAQ,IAC5Bg3C,EAAqBh3C,EAAQ,IAE7B07C,EAAAlzB,KAAA,aAEAkzB,EAAAnzB,OAAAja,EACAotC,EAAA15C,UAAAN,EAAAg6C,EAAAnzB,OAAAvmB,WAeA,IAAAmxC,EAAA,CACAmL,MAAA,EACA3uC,QAAA,GAoBA,SAAA+rC,EAAA9sC,EAAAC,EAAAC,EAAA+4C,EAAAC,EAAAxJ,GACA,KAAA56C,gBAAAg4C,GACA,WAAAA,EAAA9sC,EAAAC,EAAAC,EAAA+4C,EAAAC,EAAAxJ,GAyBA,IAAAyJ,EAAAC,EAtBAp5C,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA2sC,EAAAlzB,KAEAllB,GAAAE,EAAAb,OAAAklD,EAAA94C,SAAAkkC,EAAAzqB,MACAq/B,EAAA94C,SAAAioC,EAAAxuB,MACAllB,GAAAE,EAAAb,OAAAmlD,EAAA/4C,SAAAkkC,EAAAzqB,MACAs/B,EAAA/4C,SAAAioC,EAAAxuB,MAEA9kB,KAAAukD,SAAAJ,GAAAj5C,EAAAi5C,OACAnkD,KAAAwkD,SAAAJ,GAAAl5C,EAAAk5C,OACApkD,KAAAykD,QAAA9lD,EAAAG,SAAA87C,KAAA1vC,EAAA0vC,MAEA56C,KAAA0kD,QAAA1kD,KAAAukD,SAAAh4C,UACAvM,KAAA2kD,QAAA3kD,KAAAwkD,SAAAj4C,UASAvM,KAAA4kD,QAAA5kD,KAAAukD,SAAA/3C,WACAxM,KAAAsL,QAAAtL,KAAAukD,SAAA93C,WAGA,IAAA4L,EAAArY,KAAAsL,QAAAqrB,KACAnc,EAAAxa,KAAAsL,QAAA+K,QAAAtV,EACA8jD,EAAA7kD,KAAA4kD,QAAAjuB,KACAmuB,EAAA9kD,KAAA4kD,QAAAvuC,QAAAtV,EAEA,GAAAf,KAAA0kD,UAAAnV,EAAAzqB,KAAA,CACA,IAAAigC,EAAA/kD,KAAAukD,SACAvkD,KAAAglD,eAAAD,EAAA9U,eACAjwC,KAAAiwC,eAAA8U,EAAA5U,eACAnwC,KAAAilD,kBAAAF,EAAA1U,iBACArwC,KAAAklD,aAAArlD,EAAAI,OAEAokD,EAAA7pC,EAAAsqC,EAAA9kD,KAAAilD,sBACG,CACH,IAAAE,EAAAnlD,KAAAukD,SACAvkD,KAAAglD,eAAAG,EAAAlV,eACAjwC,KAAAiwC,eAAAkV,EAAAhV,eACAnwC,KAAAilD,kBAAAE,EAAA9U,iBACArwC,KAAAklD,aAAAC,EAAAxR,cAEA,IAAAyR,EAAAplD,KAAAglD,eACA15B,EAAA3nB,EAAAiB,SAAAigD,EAAA7/C,EAAAnF,EAAAuB,IAAAuC,EAAA/B,IAAAyW,EAAArT,EAAAhF,KAAAiwC,gBAAApwC,EAAA8B,IAAA0W,EAAA7Z,EAAAqmD,EAAArmD,KACA6lD,EAAAxkD,EAAA8C,IAAA2oB,EAAAtrB,KAAAklD,cAAArlD,EAAA8C,IAAAyiD,EAAAplD,KAAAklD,cAGAllD,KAAAqlD,QAAArlD,KAAAwkD,SAAAh4C,WACAxM,KAAAuL,QAAAvL,KAAAwkD,SAAA/3C,WAGA,IAAA6L,EAAAtY,KAAAuL,QAAAorB,KACAjc,EAAA1a,KAAAuL,QAAA8K,QAAAtV,EACAukD,EAAAtlD,KAAAqlD,QAAA1uB,KACA4uB,EAAAvlD,KAAAqlD,QAAAhvC,QAAAtV,EAEA,GAAAf,KAAA2kD,UAAApV,EAAAzqB,KAAA,CACAigC,EAAA/kD,KAAAwkD,SACAxkD,KAAAwlD,eAAAT,EAAA9U,eACAjwC,KAAAmwC,eAAA4U,EAAA5U,eACAnwC,KAAAylD,kBAAAV,EAAA1U,iBACArwC,KAAA0lD,aAAA7lD,EAAAI,OAEAqkD,EAAA5pC,EAAA6qC,EAAAvlD,KAAAylD,sBACG,CACHN,EAAAnlD,KAAAwkD,SACAxkD,KAAAwlD,eAAAL,EAAAlV,eACAjwC,KAAAmwC,eAAAgV,EAAAhV,eACAnwC,KAAAylD,kBAAAN,EAAA9U,iBACArwC,KAAA0lD,aAAAP,EAAAxR,cAEA,IAAAgS,EAAA3lD,KAAAwlD,eACAj6B,EAAA5nB,EAAAiB,SAAA0gD,EAAAtgD,EAAAnF,EAAAuB,IAAAuC,EAAA/B,IAAA0W,EAAAtT,EAAAhF,KAAAmwC,gBAAAtwC,EAAA8B,IAAA2W,EAAA9Z,EAAA8mD,EAAA9mD,KACA8lD,EAAAzkD,EAAA8C,IAAA4oB,EAAAvrB,KAAA0lD,cAAA7lD,EAAA8C,IAAAgjD,EAAA3lD,KAAA0lD,cAGA1lD,KAAA4lD,WAAAvB,EAAArkD,KAAAykD,QAAAH,EAEAtkD,KAAAuwC,UAAA,EAGAvwC,KAAA6lD,MAAA7lD,KAAA8lD,MAAA9lD,KAAA+lD,MAAA/lD,KAAAgmD,MACAhmD,KAAAimD,KAAAjmD,KAAAkmD,KAAAlmD,KAAAmmD,KAAAnmD,KAAAomD,KACApmD,KAAAqmD,KAAArmD,KAAAsmD,KAAAtmD,KAAAumD,KAAAvmD,KAAAwmD,KACAxmD,KAAAymD,OAAAzmD,KAAA0mD,OACA1mD,KAAA2mD,MAAA3mD,KAAA4mD,MAAA5mD,KAAA6mD,MAAA7mD,KAAA8mD,MACA9mD,KAAAy2B,OAyBAuhB,EAAA15C,UAAAyoD,UAAA,WACA,OAAA/mD,KAAAukD,UAMAvM,EAAA15C,UAAA0oD,UAAA,WACA,OAAAhnD,KAAAwkD,UAMAxM,EAAA15C,UAAA2oD,SAAA,SAAArM,GACAh7C,GAAAE,EAAAb,OAAAN,EAAAG,SAAA87C,IACA56C,KAAAykD,QAAA7J,GAGA5C,EAAA15C,UAAA4oD,SAAA,WACA,OAAAlnD,KAAAykD,SAGAzM,EAAA15C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGA+H,EAAA15C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGA6H,EAAA15C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAA5B,KAAAuwC,UAAAvwC,KAAAymD,QAAA7kD,IAAAsL,IAGA8qC,EAAA15C,UAAA6O,kBAAA,SAAAD,GAEA,OAAAA,GADAlN,KAAAuwC,UAAAvwC,KAAA2mD,QAIA3O,EAAA15C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAA6lD,MAAA7lD,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAA8lD,MAAA9lD,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAA+lD,MAAA/lD,KAAA4kD,QAAAvuC,QAAArN,YACAhJ,KAAAgmD,MAAAhmD,KAAAqlD,QAAAhvC,QAAArN,YACAhJ,KAAAimD,KAAAjmD,KAAAsL,QAAA6K,UACAnW,KAAAkmD,KAAAlmD,KAAAuL,QAAA4K,UACAnW,KAAAmmD,KAAAnmD,KAAA4kD,QAAAzuC,UACAnW,KAAAomD,KAAApmD,KAAAqlD,QAAAlvC,UACAnW,KAAAqmD,KAAArmD,KAAAsL,QAAA8K,OACApW,KAAAsmD,KAAAtmD,KAAAuL,QAAA6K,OACApW,KAAAumD,KAAAvmD,KAAA4kD,QAAAxuC,OACApW,KAAAwmD,KAAAxmD,KAAAqlD,QAAAjvC,OAEA,IAAAoE,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAyZ,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEA6jD,EAAA9kD,KAAA4kD,QAAA7qC,WAAAhZ,EACAomD,EAAAnnD,KAAA4kD,QAAA9qC,WAAAxZ,EACA8mD,EAAApnD,KAAA4kD,QAAA9qC,WAAA7Y,EAEAskD,EAAAvlD,KAAAqlD,QAAAtrC,WAAAhZ,EACAsmD,EAAArnD,KAAAqlD,QAAAvrC,WAAAxZ,EACAiQ,EAAAvQ,KAAAqlD,QAAAvrC,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GACA4sC,EAAA3jD,EAAAvD,IAAA0kD,GACAyC,EAAA5jD,EAAAvD,IAAAmlD,GAIA,GAFAvlD,KAAAy2B,OAAA,EAEAz2B,KAAA0kD,SAAAnV,EAAAzqB,KACA9kB,KAAAymD,OAAA5mD,EAAAI,OACAD,KAAA2mD,MAAA,EACA3mD,KAAA6mD,MAAA,EACA7mD,KAAAy2B,QAAAz2B,KAAAqmD,KAAArmD,KAAAumD,SACG,CACH,IAAA1J,EAAAl5C,EAAAa,QAAA8iD,EAAAtnD,KAAAklD,cACAsC,EAAA7jD,EAAAc,OAAA6iD,EAAAtnD,KAAAglD,eAAAhlD,KAAA+lD,OACAjxC,EAAAnR,EAAAc,OAAA+tC,EAAAxyC,KAAAiwC,eAAAjwC,KAAA6lD,OACA7lD,KAAAymD,OAAA5J,EACA78C,KAAA6mD,MAAAhnD,EAAA+C,MAAA4kD,EAAA3K,GACA78C,KAAA2mD,MAAA9mD,EAAA+C,MAAAkS,EAAA+nC,GACA78C,KAAAy2B,QAAAz2B,KAAAmmD,KAAAnmD,KAAAimD,KAAAjmD,KAAAumD,KAAAvmD,KAAA6mD,MAAA7mD,KAAA6mD,MAAA7mD,KAAAqmD,KAAArmD,KAAA2mD,MAAA3mD,KAAA2mD,MAGA,GAAA3mD,KAAA2kD,SAAApV,EAAAzqB,KACA9kB,KAAA0mD,OAAA7mD,EAAAI,OACAD,KAAA4mD,MAAA5mD,KAAAykD,QACAzkD,KAAA8mD,MAAA9mD,KAAAykD,QACAzkD,KAAAy2B,QAAAz2B,KAAAykD,QAAAzkD,KAAAykD,SAAAzkD,KAAAsmD,KAAAtmD,KAAAwmD,UACG,CACH3J,EAAAl5C,EAAAa,QAAA+iD,EAAAvnD,KAAA0lD,cAAA,IACA+B,EAAA9jD,EAAAc,OAAA8iD,EAAAvnD,KAAAwlD,eAAAxlD,KAAAgmD,OACAjxC,EAAApR,EAAAc,OAAAguC,EAAAzyC,KAAAmwC,eAAAnwC,KAAA8lD,OACA9lD,KAAA0mD,OAAA7mD,EAAA+B,IAAA5B,KAAAykD,QAAA5H,GACA78C,KAAA8mD,MAAA9mD,KAAAykD,QAAA5kD,EAAA+C,MAAA6kD,EAAA5K,GACA78C,KAAA4mD,MAAA5mD,KAAAykD,QAAA5kD,EAAA+C,MAAAmS,EAAA8nC,GACA78C,KAAAy2B,QAAAz2B,KAAAykD,QAAAzkD,KAAAykD,SAAAzkD,KAAAomD,KAAApmD,KAAAkmD,MAAAlmD,KAAAwmD,KAAAxmD,KAAA8mD,MAAA9mD,KAAA8mD,MAAA9mD,KAAAsmD,KAAAtmD,KAAA4mD,MAAA5mD,KAAA4mD,MAIA5mD,KAAAy2B,OAAAz2B,KAAAy2B,OAAA,IAAAz2B,KAAAy2B,OAAA,EAEAlpB,EAAAsJ,cACAmF,EAAAza,OAAAvB,KAAAimD,KAAAjmD,KAAAuwC,UAAAvwC,KAAAymD,QACAxqC,GAAAjc,KAAAqmD,KAAArmD,KAAAuwC,UAAAvwC,KAAA2mD,MAEAzqC,EAAA3a,OAAAvB,KAAAkmD,KAAAlmD,KAAAuwC,UAAAvwC,KAAA0mD,QACAvqC,GAAAnc,KAAAsmD,KAAAtmD,KAAAuwC,UAAAvwC,KAAA4mD,MAEAO,EAAAzlD,OAAA1B,KAAAmmD,KAAAnmD,KAAAuwC,UAAAvwC,KAAAymD,QACAW,GAAApnD,KAAAumD,KAAAvmD,KAAAuwC,UAAAvwC,KAAA6mD,MAEAQ,EAAA3lD,OAAA1B,KAAAomD,KAAApmD,KAAAuwC,UAAAvwC,KAAA0mD,QACAn2C,GAAAvQ,KAAAwmD,KAAAxmD,KAAAuwC,UAAAvwC,KAAA8mD,OAGA9mD,KAAAuwC,UAAA,EAGAvwC,KAAAsL,QAAAwO,WAAAxZ,EAAAO,IAAAmb,GACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAAO,IAAAqb,GACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,EACAnc,KAAA4kD,QAAA9qC,WAAAxZ,EAAAO,IAAAsmD,GACAnnD,KAAA4kD,QAAA9qC,WAAA7Y,EAAAmmD,EACApnD,KAAAqlD,QAAAvrC,WAAAxZ,EAAAO,IAAAwmD,GACArnD,KAAAqlD,QAAAvrC,WAAA7Y,EAAAsP,GAGAynC,EAAA15C,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EACAkmD,EAAAnnD,KAAA4kD,QAAA9qC,WAAAxZ,EACA8mD,EAAApnD,KAAA4kD,QAAA9qC,WAAA7Y,EACAomD,EAAArnD,KAAAqlD,QAAAvrC,WAAAxZ,EACAiQ,EAAAvQ,KAAAqlD,QAAAvrC,WAAA7Y,EAEA0xC,EAAA9yC,EAAA8C,IAAA3C,KAAAymD,OAAAzqC,GAAAnc,EAAA8C,IAAA3C,KAAAymD,OAAAU,GACAtnD,EAAA8C,IAAA3C,KAAA0mD,OAAAxqC,GAAArc,EAAA8C,IAAA3C,KAAA0mD,OAAAW,GACA1U,GAAA3yC,KAAA2mD,MAAA1qC,EAAAjc,KAAA6mD,MAAAO,GACApnD,KAAA4mD,MAAAzqC,EAAAnc,KAAA8mD,MAAAv2C,GAEA,IAAAkL,GAAAzb,KAAAy2B,OAAAkc,EACA3yC,KAAAuwC,WAAA90B,EAEAO,EAAAza,OAAAvB,KAAAimD,KAAAxqC,EAAAzb,KAAAymD,QACAxqC,GAAAjc,KAAAqmD,KAAA5qC,EAAAzb,KAAA2mD,MACAzqC,EAAA3a,OAAAvB,KAAAkmD,KAAAzqC,EAAAzb,KAAA0mD,QACAvqC,GAAAnc,KAAAsmD,KAAA7qC,EAAAzb,KAAA4mD,MACAO,EAAAzlD,OAAA1B,KAAAmmD,KAAA1qC,EAAAzb,KAAAymD,QACAW,GAAApnD,KAAAumD,KAAA9qC,EAAAzb,KAAA6mD,MACAQ,EAAA3lD,OAAA1B,KAAAomD,KAAA3qC,EAAAzb,KAAA0mD,QACAn2C,GAAAvQ,KAAAwmD,KAAA/qC,EAAAzb,KAAA8mD,MAEA9mD,KAAAsL,QAAAwO,WAAAxZ,EAAAO,IAAAmb,GACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAAO,IAAAqb,GACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,EACAnc,KAAA4kD,QAAA9qC,WAAAxZ,EAAAO,IAAAsmD,GACAnnD,KAAA4kD,QAAA9qC,WAAA7Y,EAAAmmD,EACApnD,KAAAqlD,QAAAvrC,WAAAxZ,EAAAO,IAAAwmD,GACArnD,KAAAqlD,QAAAvrC,WAAA7Y,EAAAsP,GAGAynC,EAAA15C,UAAAmP,yBAAA,SAAAF,GACA,IAgBA82C,EAAAC,EAEAoD,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAnBAxtC,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACA0Z,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAinD,EAAAhoD,KAAA4kD,QAAA7qC,WAAAhd,EACA+nD,EAAA9kD,KAAA4kD,QAAA7qC,WAAAhZ,EACAknD,EAAAjoD,KAAAqlD,QAAAtrC,WAAAhd,EACAwoD,EAAAvlD,KAAAqlD,QAAAtrC,WAAAhZ,EAEAyxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GACA4sC,EAAA3jD,EAAAvD,IAAA0kD,GACAyC,EAAA5jD,EAAAvD,IAAAmlD,GAQAv9B,EAAA,EAEA,GAAAhoB,KAAA0kD,SAAAnV,EAAAzqB,KACA4iC,EAAA7nD,EAAAI,OACA2nD,EAAA,EACAE,EAAA,EACA9/B,GAAAhoB,KAAAqmD,KAAArmD,KAAAumD,KAEAlC,EAAA7pC,EAAAsqC,EAAA9kD,KAAAilD,sBACG,CACH,IAAApI,EAAAl5C,EAAAa,QAAA8iD,EAAAtnD,KAAAklD,cACAsC,EAAA7jD,EAAAc,OAAA6iD,EAAAtnD,KAAAglD,eAAAhlD,KAAA+lD,OACAjxC,EAAAnR,EAAAc,OAAA+tC,EAAAxyC,KAAAiwC,eAAAjwC,KAAA6lD,OACA6B,EAAA7K,EACAiL,EAAAjoD,EAAA+C,MAAA4kD,EAAA3K,GACA+K,EAAA/nD,EAAA+C,MAAAkS,EAAA+nC,GACA70B,GAAAhoB,KAAAmmD,KAAAnmD,KAAAimD,KAAAjmD,KAAAumD,KAAAuB,IAAA9nD,KAAAqmD,KAAAuB,IAEA,IAAAxC,EAAAvlD,EAAA8B,IAAA3B,KAAAglD,eAAAhlD,KAAA+lD,OACAz6B,EAAA3nB,EAAAiB,SAAA0iD,EAAAznD,EAAAuB,IAAA0T,EAAAjV,EAAA8B,IAAA4Y,EAAAytC,KACA3D,EAAAxkD,EAAA8C,IAAA9C,EAAA8B,IAAA2pB,EAAA85B,GAAAplD,KAAAklD,cAGA,GAAAllD,KAAA2kD,SAAApV,EAAAzqB,KACA6iC,EAAA9nD,EAAAI,OACA4nD,EAAA7nD,KAAAykD,QACAsD,EAAA/nD,KAAAykD,QACAz8B,GAAAhoB,KAAAykD,QAAAzkD,KAAAykD,SAAAzkD,KAAAsmD,KAAAtmD,KAAAwmD,MAEAlC,EAAA5pC,EAAA6qC,EAAAvlD,KAAAylD,sBACG,CACH5I,EAAAl5C,EAAAa,QAAA+iD,EAAAvnD,KAAA0lD,cAAA,IACA+B,EAAA9jD,EAAAc,OAAA8iD,EAAAvnD,KAAAwlD,eAAAxlD,KAAAgmD,OACAjxC,EAAApR,EAAAc,OAAAguC,EAAAzyC,KAAAmwC,eAAAnwC,KAAA8lD,OACA6B,EAAA9nD,EAAA+B,IAAA5B,KAAAykD,QAAA5H,GACAkL,EAAA/nD,KAAAykD,QAAA5kD,EAAA+C,MAAA6kD,EAAA5K,GACAgL,EAAA7nD,KAAAykD,QAAA5kD,EAAA+C,MAAAmS,EAAA8nC,GACA70B,GAAAhoB,KAAAykD,QAAAzkD,KAAAykD,SAAAzkD,KAAAomD,KAAApmD,KAAAkmD,MAAAlmD,KAAAwmD,KACAuB,IAAA/nD,KAAAsmD,KAAAuB,IAEA,IAAAlC,EAAA9lD,EAAA8B,IAAA3B,KAAAwlD,eAAAxlD,KAAAgmD,OACAz6B,EAAA5nB,EAAAiB,SAAA2iD,EAAA1nD,EAAAuB,IAAA2T,EAAAlV,EAAA8B,IAAA8Y,EAAAwtC,KACA3D,EAAAzkD,EAAA8C,IAAA4oB,EAAAvrB,KAAA0lD,cACA7lD,EAAA8C,IAAAgjD,EAAA3lD,KAAA0lD,cAGA,IAAArqC,EAAAgpC,EAAArkD,KAAAykD,QAAAH,EAAAtkD,KAAA4lD,WAEAnqC,EAAA,EAwBA,OAvBAuM,EAAA,IACAvM,GAAAJ,EAAA2M,GAGAzN,EAAAhZ,OAAAvB,KAAAimD,KAAAxqC,EAAAisC,GACAltC,GAAAxa,KAAAqmD,KAAA5qC,EAAAmsC,EACAntC,EAAAlZ,OAAAvB,KAAAkmD,KAAAzqC,EAAAksC,GACAjtC,GAAA1a,KAAAsmD,KAAA7qC,EAAAosC,EACAG,EAAAtmD,OAAA1B,KAAAmmD,KAAA1qC,EAAAisC,GACA5C,GAAA9kD,KAAAumD,KAAA9qC,EAAAqsC,EACAG,EAAAvmD,OAAA1B,KAAAomD,KAAA3qC,EAAAksC,GACApC,GAAAvlD,KAAAwmD,KAAA/qC,EAAAssC,EAEA/nD,KAAAsL,QAAAyO,WAAAhd,EAAA8D,IAAA0Z,GACAva,KAAAsL,QAAAyO,WAAAhZ,EAAAyZ,EACAxa,KAAAuL,QAAAwO,WAAAhd,EAAA8D,IAAA4Z,GACAza,KAAAuL,QAAAwO,WAAAhZ,EAAA2Z,EACA1a,KAAA4kD,QAAA7qC,WAAAhd,EAAA8D,IAAAmnD,GACAhoD,KAAA4kD,QAAA7qC,WAAAhZ,EAAA+jD,EACA9kD,KAAAqlD,QAAAtrC,WAAAhd,EAAA8D,IAAAonD,GACAjoD,KAAAqlD,QAAAtrC,WAAAhZ,EAAAwkD,EA3EA,EA8EA5/C,EAAAK,6BCtcAvJ,EAAAD,QAAAy7C,EAEa37C,EAAQ,GAArB,IACA04B,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GAGrBqC,GAFerC,EAAQ,GAEZA,EAAQ,IACnBuD,EAAWvD,EAAQ,GAEnB6L,GADW7L,EAAQ,GACPA,EAAQ,IAEpBqH,GADYrH,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB27C,EAAAnzB,KAAA,cAEAmzB,EAAApzB,OAAAja,EACAqtC,EAAA35C,UAAAN,EAAAi6C,EAAApzB,OAAAvmB,WAeA,IAAAmxC,EAAA,CACA8T,SAAA,EACAC,UAAA,EACA0E,iBAAA,GACAj8C,QAAA,GAYA,SAAAgsC,EAAA/sC,EAAAC,EAAAC,GACA,KAAApL,gBAAAi4C,GACA,WAAAA,EAAA/sC,EAAAC,EAAAC,GAGAF,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA4sC,EAAAnzB,KAEA9kB,KAAAmoD,eAAAj9C,EAAAk9C,aAAAl9C,EAAAk9C,aAAAj9C,EAAAsxB,cAAArxB,EAAAwuB,eAEA,IAAAyuB,EAAAl9C,EAAAjH,WACAokD,EAAAl9C,EAAAlH,WACAlE,KAAAuoD,gBAAAD,EAAAD,EAEAroD,KAAAyjD,gBAAA5jD,EAAAI,OACAD,KAAA0jD,iBAAA,EAEA1jD,KAAA2jD,WAAAz4C,EAAAq4C,SACAvjD,KAAA4jD,YAAA14C,EAAAs4C,UACAxjD,KAAAwoD,mBAAAt9C,EAAAg9C,iBAGAloD,KAAA+wC,KACA/wC,KAAAgxC,KACAhxC,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAyoD,cACAzoD,KAAA0oD,eACA1oD,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QACAtxC,KAAA6jD,aACA7jD,KAAA8jD,cAkBA7L,EAAA35C,UAAAylD,YAAA,SAAA1oB,GAEAr7B,KAAA2jD,WAAAtoB,GAMA4c,EAAA35C,UAAA0lD,YAAA,WACA,OAAAhkD,KAAA2jD,YAMA1L,EAAA35C,UAAA2lD,aAAA,SAAAxoB,GAEAz7B,KAAA4jD,YAAAnoB,GAMAwc,EAAA35C,UAAA4lD,aAAA,WACA,OAAAlkD,KAAA4jD,aAMA3L,EAAA35C,UAAAqqD,oBAAA,SAAAC,GAEA5oD,KAAAwoD,mBAAAI,GAMA3Q,EAAA35C,UAAAuqD,oBAAA,WACA,OAAA7oD,KAAAwoD,oBAMAvQ,EAAA35C,UAAAwqD,gBAAA,SAAAV,GACAA,EAAArpD,GAAAiB,KAAAmoD,eAAAppD,GACAqpD,EAAAroD,GAAAC,KAAAmoD,eAAApoD,IACAC,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAAmoD,eAAAC,IAIAnQ,EAAA35C,UAAAyqD,gBAAA,WACA,OAAA/oD,KAAAmoD,gBAMAlQ,EAAA35C,UAAA0qD,iBAAA,SAAAC,GACAA,GAAAjpD,KAAAuoD,kBACAvoD,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAAuoD,gBAAAU,IAIAhR,EAAA35C,UAAA4qD,iBAAA,WACA,OAAAlpD,KAAAuoD,iBAGAtQ,EAAA35C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAAsuB,eAGAqe,EAAA35C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAquB,eAGAqe,EAAA35C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAAsL,EAAAlN,KAAAyjD,kBAGAxL,EAAA35C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAA0jD,kBAGAzL,EAAA35C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAmE,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAwZ,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GAAAi4B,EAAA9uC,EAAAvD,IAAAsa,GAGA1a,KAAA+wC,KAAAptC,EAAAa,QAAAguC,EAAA3yC,EAAAkD,IAAA/C,KAAAixC,iBACAjxC,KAAAgxC,KAAArtC,EAAAa,QAAAiuC,EAAA5yC,EAAAkD,IAAA/C,KAAAkxC,iBAWA,IAAA/2B,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAEA91B,EAAA,IAAArT,EAsBA,GArBAqT,EAAApT,GAAArJ,EAAAob,EAAAE,EAAAD,EAAApa,KAAA+wC,KAAAhxC,EAAAC,KAAA+wC,KAAAhxC,EAAAua,EAAAta,KAAAgxC,KAAAjxC,EACAC,KAAAgxC,KAAAjxC,EACAyb,EAAApT,GAAArI,GAAAqa,EAAApa,KAAA+wC,KAAAhyC,EAAAiB,KAAA+wC,KAAAhxC,EAAAua,EAAAta,KAAAgxC,KAAAjyC,EAAAiB,KAAAgxC,KAAAjxC,EACAyb,EAAAnT,GAAAtJ,EAAAyc,EAAApT,GAAArI,EACAyb,EAAAnT,GAAAtI,EAAAoa,EAAAE,EAAAD,EAAApa,KAAA+wC,KAAAhyC,EAAAiB,KAAA+wC,KAAAhyC,EAAAub,EAAAta,KAAAgxC,KAAAjyC,EACAiB,KAAAgxC,KAAAjyC,EAEAiB,KAAA6jD,aAAAroC,EAAAlT,aAEAtI,KAAA8jD,cAAA1pC,EAAAE,EACAta,KAAA8jD,cAAA,IACA9jD,KAAA8jD,cAAA,EAAA9jD,KAAA8jD,eAGA9jD,KAAAyoD,cAAA5oD,EAAAI,OACAD,KAAAyoD,cAAAnnD,WAAA,EAAAmZ,EAAA,EAAAza,KAAAgxC,MACAhxC,KAAAyoD,cAAAhnD,WAAA,EAAA8Y,EAAA,EAAAva,KAAA+wC,MACA/wC,KAAAyoD,cAAA9mD,IAAAgC,EAAAa,QAAAguC,EAAAxyC,KAAAmoD,iBAEAnoD,KAAA0oD,eAAAhuC,EAAAF,EAAAxa,KAAAuoD,gBAEAh7C,EAAAsJ,aAAA,CAEA7W,KAAAyjD,gBAAA7hD,IAAA2L,EAAAuJ,SACA9W,KAAA0jD,kBAAAn2C,EAAAuJ,QAEA,IAAA4E,EAAA7b,EAAAO,IAAAJ,KAAAyjD,gBAAA1kD,EAAAiB,KAAAyjD,gBAAA1jD,GAEAic,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAAA1b,KAAA0jD,kBAEAxnC,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,GAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,GAAA1b,KAAA0jD,uBAGA1jD,KAAAyjD,gBAAA7iD,UACAZ,KAAA0jD,iBAAA,EAGA1jD,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGA87B,EAAA35C,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAkZ,EAAAna,KAAAmxC,WAAA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QAAA/2B,EAAAta,KAAAsxC,QAEA3c,EAAApnB,EAAAulC,GACAqW,EAAA57C,EAAAL,OAIAylC,EAAAx2B,EAAAF,EAAAktC,EAAAnpD,KAAAwoD,mBAAAxoD,KAAA0oD,eACAjtC,GAAAzb,KAAA8jD,cAAAnR,EAEAC,EAAA5yC,KAAA0jD,iBACA7Q,EAAAle,EAAA30B,KAAA4jD,YACA5jD,KAAA0jD,iBAAA/kD,EAAAe,MAAAM,KAAA0jD,iBAAAjoC,GACAo3B,KAGA52B,GAAA7B,GAFAqB,EAAAzb,KAAA0jD,iBAAA9Q,GAGAz2B,GAAA7B,EAAAmB,GAKAk3B,EAAA9yC,EAAAI,QACAqB,WAAA,EAAA4a,EAAA,EAAArc,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,OACA2B,EAAAlxC,WAAA,EAAAua,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAA+wC,OACA4B,EAAApxC,OAAA4nD,EAAAnpD,KAAAwoD,mBAAAxoD,KAAAyoD,eAEAhtC,EAAA5b,EAAAkD,IAAAoF,EAAA3D,QAAAxE,KAAA6jD,aAAAlR,IACAC,EAAA/yC,EAAAQ,MAAAL,KAAAyjD,iBACAzjD,KAAAyjD,gBAAAriD,IAAAqa,GAEAo3B,EAAAle,EAAA30B,KAAA2jD,WAEA3jD,KAAAyjD,gBAAA/jD,MAAAmzC,GAEAp3B,EAAA5b,EAAA8B,IAAA3B,KAAAyjD,gBAAA7Q,GAEA52B,EAAAta,OAAAyY,EAAAsB,GACAQ,GAAA7B,EAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAt1B,GAEAS,EAAA3a,OAAA8Y,EAAAoB,GACAU,GAAA7B,EAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAv1B,GAGAzb,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGA87B,EAAA35C,UAAAmP,yBAAA,SAAAF,GACA,2BCvVA,IACA3N,GAAsD,EAEtDnD,EAAAD,QAAA07C,EAEA,IAAAp4C,EAAaxD,EAAQ,GACrB04B,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GAErBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAEnB6L,GADW7L,EAAQ,GACPA,EAAQ,IAEpBqH,GADYrH,EAAQ,IACVA,EAAQ,IAElBuI,GADYvI,EAAQ,IACJA,EAAQ,IAIxBsO,GAHetO,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB47C,EAAApzB,KAAA,cAEAozB,EAAArzB,OAAAja,EACAstC,EAAA55C,UAAAN,EAAAk6C,EAAArzB,OAAAvmB,WAmBA,IAAAmxC,EAAA,CACA8T,SAAA,EACAvB,YAAA,EACAC,aAAA,GACAh2C,QAAA,GAgBA,SAAAisC,EAAAhtC,EAAAC,EAAAC,EAAAyhC,GACA,KAAA7sC,gBAAAk4C,GACA,WAAAA,EAAAhtC,EAAAC,EAAAC,EAAAyhC,GAGA3hC,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA6sC,EAAApzB,KAEAllB,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAq4C,WAAAr4C,EAAAq4C,UAAA,GACA3jD,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAA82C,cAAA92C,EAAA82C,aAAA,GACApiD,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAA+2C,eAAA/2C,EAAA+2C,cAAA,GAEAjiD,KAAAopD,UAAAvc,EAAAhtC,EAAAQ,MAAAwsC,GAAA3hC,EAAA2hC,QAAAhtC,EAAAI,OACAD,KAAAmwC,eAAAtrC,EAAAD,SAAAwG,EAAA9B,eAAAtJ,KAAAopD,WAEAppD,KAAA2jD,WAAAz4C,EAAAq4C,SACAvjD,KAAAuwC,UAAA1wC,EAAAI,OAEAD,KAAAqiD,cAAAn3C,EAAA82C,YACAhiD,KAAAsiD,eAAAp3C,EAAA+2C,aAEAjiD,KAAAqpD,OAAA,EACArpD,KAAAuiD,QAAA,EAGAviD,KAAAgxC,KAAAnxC,EAAAI,OACAD,KAAAkxC,eAAArxC,EAAAI,OACAD,KAAAoxC,WAAA,EACApxC,KAAAsxC,QAAA,EACAtxC,KAAAgoB,KAAA,IAAA7f,EACAnI,KAAAspD,IAAAzpD,EAAAI,OAcAi4C,EAAA55C,UAAAirD,UAAA,SAAA1c,GACA,GAAA7sC,KAAAuL,QAAA8tB,WACAr5B,KAAAuL,QAAA4N,UAAA,GAEAnZ,KAAAopD,UAAAvpD,EAAAQ,MAAAwsC,IAGAqL,EAAA55C,UAAAkrD,UAAA,WACA,OAAAxpD,KAAAopD,WAMAlR,EAAA55C,UAAAylD,YAAA,SAAA1oB,GACAr7B,KAAA2jD,WAAAtoB,GAGA6c,EAAA8L,YAAA,WACA,OAAAhkD,KAAA2jD,YAMAzL,EAAA55C,UAAAskD,aAAA,SAAAC,GACA7iD,KAAAqiD,cAAAQ,GAGA3K,EAAA55C,UAAAwkD,aAAA,WACA,OAAA9iD,KAAAqiD,eAMAnK,EAAA55C,UAAAykD,gBAAA,SAAAnI,GACA56C,KAAAsiD,eAAA1H,GAGA1C,EAAA55C,UAAA0kD,gBAAA,WACA,OAAAhjD,KAAAsiD,gBAGApK,EAAA55C,UAAAyO,WAAA,WACA,OAAAlN,EAAAQ,MAAAL,KAAAopD,YAGAlR,EAAA55C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGA+H,EAAA55C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAAsL,EAAAlN,KAAAuwC,YAGA2H,EAAA55C,UAAA6O,kBAAA,SAAAD,GACA,SAAAA,GAGAgrC,EAAA55C,UAAA8O,YAAA,SAAAC,GACArN,KAAAopD,UAAAznD,IAAA0L,IAGA6qC,EAAA55C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAtR,EAAA9E,KAAAuL,QAAAwO,WACA0vC,EAAAzpD,KAAAuL,QAAAuO,WAEAW,EAAA3V,EAAA/H,EACA2d,EAAA5V,EAAA/D,EACAmb,EAAAutC,EAAAnpD,EACA6b,EAAAstC,EAAAxoD,EAEAwxC,EAAA9uC,EAAAvD,IAAAsa,GAEAsN,EAAAhoB,KAAAuL,QAAAuvB,UAGAsoB,EAAA,EAAAzkD,EAAAwH,GAAAnG,KAAAqiD,cAGArlD,EAAA,EAAAgrB,EAAAhoB,KAAAsiD,eAAAc,EAGAt0B,EAAA9G,GAAAo7B,KAKAzuB,EAAApnB,EAAAulC,GACAlzC,GAAAE,EAAAb,OAAAjC,EAAA23B,EAAA7F,EAAAnwB,EAAAE,SACAmB,KAAAuiD,QAAA5tB,GAAA33B,EAAA23B,EAAA7F,GACA,GAAA9uB,KAAAuiD,UACAviD,KAAAuiD,QAAA,EAAAviD,KAAAuiD,SAEAviD,KAAAqpD,OAAA10B,EAAA7F,EAAA9uB,KAAAuiD,QAGAviD,KAAAgxC,KAAArtC,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBAOA,IAAA11B,EAAA,IAAArT,EACAqT,EAAApT,GAAArJ,EAAAiB,KAAAoxC,WAAApxC,KAAAsxC,QAAAtxC,KAAAgxC,KAAAjxC,EAAAC,KAAAgxC,KAAAjxC,EACAC,KAAAuiD,QACA/mC,EAAApT,GAAArI,GAAAC,KAAAsxC,QAAAtxC,KAAAgxC,KAAAjyC,EAAAiB,KAAAgxC,KAAAjxC,EACAyb,EAAAnT,GAAAtJ,EAAAyc,EAAApT,GAAArI,EACAyb,EAAAnT,GAAAtI,EAAAC,KAAAoxC,WAAApxC,KAAAsxC,QAAAtxC,KAAAgxC,KAAAjyC,EAAAiB,KAAAgxC,KAAAjyC,EACAiB,KAAAuiD,QAEAviD,KAAAy2B,OAAAjb,EAAAlT,aAEAtI,KAAAspD,IAAAzoD,IAAA4Z,GACAza,KAAAspD,IAAAhoD,WAAA,EAAAtB,KAAAgxC,MAAA,EAAAhxC,KAAAopD,WACAppD,KAAAspD,IAAA1nD,IAAA5B,KAAAqpD,QAGAltC,GAAA,IAEA5O,EAAAsJ,cACA7W,KAAAuwC,UAAA3uC,IAAA2L,EAAAuJ,SACAoF,EAAA3a,OAAAvB,KAAAoxC,WAAApxC,KAAAuwC,WACAp0B,GAAAnc,KAAAsxC,QAAAzxC,EAAA+C,MAAA5C,KAAAgxC,KAAAhxC,KAAAuwC,YAGAvwC,KAAAuwC,UAAA3vC,UAGA6oD,EAAAnpD,EAAAO,IAAAqb,GACAutC,EAAAxoD,EAAAkb,GAGA+7B,EAAA55C,UAAAkP,yBAAA,SAAAD,GACA,IAAAk8C,EAAAzpD,KAAAuL,QAAAuO,WACAoC,EAAArc,EAAAQ,MAAAopD,EAAAnpD,GACA6b,EAAAstC,EAAAxoD,EAIA0xC,EAAA9yC,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,MACA2B,EAAAvxC,IAAA8a,GAEAy2B,EAAArxC,WAAA,EAAAtB,KAAAspD,IAAAtpD,KAAAuiD,QAAAviD,KAAAuwC,WACAoC,EAAA5vC,MAEA,IAAA0Y,EAAAtT,EAAA3D,QAAAxE,KAAAy2B,OAAAkc,GAEAC,EAAA/yC,EAAAQ,MAAAL,KAAAuwC,WACAvwC,KAAAuwC,UAAAnvC,IAAAqa,GACA,IAAAo3B,EAAAtlC,EAAAulC,GAAA9yC,KAAA2jD,WACA3jD,KAAAuwC,UAAA7wC,MAAAmzC,GACAp3B,EAAA5b,EAAA8B,IAAA3B,KAAAuwC,UAAAqC,GAEA12B,EAAA3a,OAAAvB,KAAAoxC,WAAA31B,GACAU,GAAAnc,KAAAsxC,QAAAzxC,EAAA+C,MAAA5C,KAAAgxC,KAAAv1B,GAEAguC,EAAAnpD,EAAAO,IAAAqb,GACAutC,EAAAxoD,EAAAkb,GAGA+7B,EAAA55C,UAAAmP,yBAAA,SAAAF,GACA,2BCxRA,IACA3N,GAAsD,EAEtDnD,EAAAD,QAAA27C,EAEA,IAAAr4C,EAAaxD,EAAQ,GACrB04B,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB67C,EAAArzB,KAAA,eACAqzB,EAAAuR,kBAAA,EAEAvR,EAAAtzB,OAAAja,EACAutC,EAAA75C,UAAAN,EAAAm6C,EAAAtzB,OAAAvmB,WAkBA,IAAAqrD,EAAA,CACAj+C,kBAAA,EACAO,QAAA,GAkBA,SAAAksC,EAAAjtC,EAAAC,EAAAC,EAAAw+C,EAAAC,EAAA3H,EAAAC,EAAAvH,GACA,KAAA56C,gBAAAm4C,GACA,WAAAA,EAAAjtC,EAAAC,EAAAC,EAAAw+C,EAAAC,EAAA3H,EAAAC,EAAAvH,GAGA1vC,EAAA8pB,EAAA9pB,EAAAy+C,GACA/+C,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA8sC,EAAArzB,KACA9kB,KAAA8pD,gBAAAF,IAAA1+C,EAAA6+C,eAAAlqD,EAAAO,KAAA,MACAJ,KAAAgqD,gBAAAH,IAAA3+C,EAAA++C,eAAApqD,EAAAO,IAAA,MACAJ,KAAAiwC,eAAAiS,EAAA/2C,EAAAsxB,cAAAylB,GAAAh3C,EAAAglC,cAAArwC,EAAAO,KAAA,KACAJ,KAAAmwC,eAAAgS,EAAA/2C,EAAAqxB,cAAA0lB,GAAAj3C,EAAAklC,cAAAvwC,EAAAO,IAAA,KACAJ,KAAAkqD,UAAAvrD,EAAAG,SAAAoM,EAAAi/C,SAAAj/C,EAAAi/C,QAAAtqD,EAAAwC,SAAA6/C,EAAA0H,GACA5pD,KAAAoqD,UAAAzrD,EAAAG,SAAAoM,EAAAm/C,SAAAn/C,EAAAm/C,QAAAxqD,EAAAwC,SAAA8/C,EAAA0H,GACA7pD,KAAAykD,QAAA9lD,EAAAG,SAAA87C,KAAA1vC,EAAA0vC,MAEAh7C,GAAAE,EAAAb,OAAA27C,EAAAj8C,EAAAE,SAEAmB,KAAA4lD,WAAA5lD,KAAAkqD,UAAAlqD,KAAAykD,QAAAzkD,KAAAoqD,UAEApqD,KAAAuwC,UAAA,EAGAvwC,KAAAsqD,KACAtqD,KAAAuqD,KACAvqD,KAAA+wC,KACA/wC,KAAAgxC,KACAhxC,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QACAtxC,KAAAy2B,OAmBA0hB,EAAA75C,UAAAksD,iBAAA,WACA,OAAAxqD,KAAA8pD,iBAMA3R,EAAA75C,UAAAmsD,iBAAA,WACA,OAAAzqD,KAAAgqD,iBAMA7R,EAAA75C,UAAAosD,WAAA,WACA,OAAA1qD,KAAAkqD,WAMA/R,EAAA75C,UAAAqsD,WAAA,WACA,OAAA3qD,KAAAoqD,WAMAjS,EAAA75C,UAAA4oD,SAAA,WACA,OAAAlnD,KAAAykD,SAMAtM,EAAA75C,UAAAssD,kBAAA,WACA,IAAApsD,EAAAwB,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,gBACAxxC,EAAAuB,KAAA8pD,gBACA,OAAAjqD,EAAAwC,SAAA7D,EAAAC,IAMA05C,EAAA75C,UAAAusD,kBAAA,WACA,IAAArsD,EAAAwB,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,gBACA1xC,EAAAuB,KAAAgqD,gBACA,OAAAnqD,EAAAwC,SAAA7D,EAAAC,IAGA05C,EAAA75C,UAAA8O,YAAA,SAAAC,GACArN,KAAA8pD,gBAAAnoD,IAAA0L,GACArN,KAAAgqD,gBAAAroD,IAAA0L,IAGA8qC,EAAA75C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGAkI,EAAA75C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGAgI,EAAA75C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAA5B,KAAAuwC,UAAAvwC,KAAAuqD,MAAA3oD,IAAAsL,IAGAirC,EAAA75C,UAAA6O,kBAAA,SAAAD,GACA,UAGAirC,EAAA75C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAmE,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAwZ,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA1a,KAAA+wC,KAAAptC,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAjxC,KAAAgxC,KAAArtC,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBAGAlxC,KAAAsqD,KAAAzqD,EAAA8B,IAAA9B,EAAAuB,IAAAmZ,EAAAva,KAAA+wC,MAAA/wC,KAAA8pD,iBACA9pD,KAAAuqD,KAAA1qD,EAAA8B,IAAA9B,EAAAuB,IAAAqZ,EAAAza,KAAAgxC,MAAAhxC,KAAAgqD,iBAEA,IAAAG,EAAAnqD,KAAAsqD,KAAAzoD,SACAwoD,EAAArqD,KAAAuqD,KAAA1oD,SAEAsoD,EAAA,GAAAxkD,EAAAK,WACAhG,KAAAsqD,KAAA1oD,IAAA,EAAAuoD,GAEAnqD,KAAAsqD,KAAA1pD,UAGAypD,EAAA,GAAA1kD,EAAAK,WACAhG,KAAAuqD,KAAA3oD,IAAA,EAAAyoD,GAEArqD,KAAAuqD,KAAA3pD,UAIA,IAAAkqD,EAAAjrD,EAAA+C,MAAA5C,KAAA+wC,KAAA/wC,KAAAsqD,MACAS,EAAAlrD,EAAA+C,MAAA5C,KAAAgxC,KAAAhxC,KAAAuqD,MAEApwC,EAAAna,KAAAmxC,WAAAnxC,KAAAqxC,QAAAyZ,IACAzwC,EAAAra,KAAAoxC,WAAApxC,KAAAsxC,QAAAyZ,IAQA,GANA/qD,KAAAy2B,OAAAtc,EAAAna,KAAAykD,QAAAzkD,KAAAykD,QAAApqC,EAEAra,KAAAy2B,OAAA,IACAz2B,KAAAy2B,OAAA,EAAAz2B,KAAAy2B,QAGAlpB,EAAAsJ,aAAA,CAEA7W,KAAAuwC,WAAAhjC,EAAAuJ,QAGA,IAAAk0C,EAAAnrD,EAAA+B,KAAA5B,KAAAuwC,UAAAvwC,KAAAsqD,MACAW,EAAAprD,EAAA+B,KAAA5B,KAAAykD,QAAAzkD,KAAAuwC,UAAAvwC,KAAAuqD,MAEAvuC,EAAAza,OAAAvB,KAAAmxC,WAAA6Z,GACA/uC,GAAAjc,KAAAqxC,QAAAxxC,EAAA+C,MAAA5C,KAAA+wC,KAAAia,GAEA9uC,EAAA3a,OAAAvB,KAAAoxC,WAAA6Z,GACA9uC,GAAAnc,KAAAsxC,QAAAzxC,EAAA+C,MAAA5C,KAAAgxC,KAAAia,QAGAjrD,KAAAuwC,UAAA,EAGAvwC,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAg8B,EAAA75C,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAoiD,EAAAxjD,EAAAuB,IAAA4a,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAA+wC,OACAuS,EAAAzjD,EAAAuB,IAAA8a,EAAArc,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,OAEA2B,GAAA9yC,EAAA8C,IAAA3C,KAAAsqD,KAAAjH,GAAArjD,KAAAykD,QACA5kD,EAAA8C,IAAA3C,KAAAuqD,KAAAjH,GACA7nC,GAAAzb,KAAAy2B,OAAAkc,EACA3yC,KAAAuwC,WAAA90B,EAEA,IAAAuvC,EAAAnrD,EAAA+B,KAAA6Z,EAAAzb,KAAAsqD,MACAW,EAAAprD,EAAA+B,KAAA5B,KAAAykD,QAAAhpC,EAAAzb,KAAAuqD,MACAvuC,EAAAza,OAAAvB,KAAAmxC,WAAA6Z,GACA/uC,GAAAjc,KAAAqxC,QAAAxxC,EAAA+C,MAAA5C,KAAA+wC,KAAAia,GACA9uC,EAAA3a,OAAAvB,KAAAoxC,WAAA6Z,GACA9uC,GAAAnc,KAAAsxC,QAAAzxC,EAAA+C,MAAA5C,KAAAgxC,KAAAia,GAEAjrD,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAg8B,EAAA75C,UAAAmP,yBAAA,SAAAF,GACA,IAAAgN,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACA0Z,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EAEAyxC,EAAA7uC,EAAAvD,IAAAoa,GAAAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA5F,EAAAnR,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAl8B,EAAApR,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBAGAga,EAAArrD,EAAA8B,IAAA9B,EAAAuB,IAAAmZ,EAAAva,KAAA+wC,MAAA/wC,KAAA8pD,iBACAqB,EAAAtrD,EAAA8B,IAAA9B,EAAAuB,IAAAqZ,EAAAza,KAAAgxC,MAAAhxC,KAAAgqD,iBAEAG,EAAAe,EAAArpD,SACAwoD,EAAAc,EAAAtpD,SAEAsoD,EAAA,GAAAxkD,EAAAK,WACAklD,EAAAtpD,IAAA,EAAAuoD,GAEAe,EAAAtqD,UAGAypD,EAAA,GAAA1kD,EAAAK,WACAmlD,EAAAvpD,IAAA,EAAAyoD,GAEAc,EAAAvqD,UAIA,IAAAkqD,EAAAjrD,EAAA+C,MAAAkS,EAAAo2C,GACAH,EAAAlrD,EAAA+C,MAAAmS,EAAAo2C,GAEAhxC,EAAAna,KAAAmxC,WAAAnxC,KAAAqxC,QAAAyZ,IACAzwC,EAAAra,KAAAoxC,WAAApxC,KAAAsxC,QAAAyZ,IAEA/iC,EAAA7N,EAAAna,KAAAykD,QAAAzkD,KAAAykD,QAAApqC,EAEA2N,EAAA,IACAA,EAAA,EAAAA,GAGA,IAAA3M,EAAArb,KAAA4lD,WAAAuE,EAAAnqD,KAAAykD,QAAA4F,EACA9U,EAAA52C,EAAAqE,IAAAqY,GAEAI,GAAAuM,EAAA3M,EAEA2vC,EAAAnrD,EAAA+B,KAAA6Z,EAAAyvC,GACAD,EAAAprD,EAAA+B,KAAA5B,KAAAykD,QAAAhpC,EAAA0vC,GAYA,OAVA5wC,EAAAhZ,OAAAvB,KAAAmxC,WAAA6Z,GACAxwC,GAAAxa,KAAAqxC,QAAAxxC,EAAA+C,MAAAkS,EAAAk2C,GACAvwC,EAAAlZ,OAAAvB,KAAAoxC,WAAA6Z,GACAvwC,GAAA1a,KAAAsxC,QAAAzxC,EAAA+C,MAAAmS,EAAAk2C,GAEAjrD,KAAAsL,QAAAyO,WAAAhd,EAAAwd,EACAva,KAAAsL,QAAAyO,WAAAhZ,EAAAyZ,EACAxa,KAAAuL,QAAAwO,WAAAhd,EAAA0d,EACAza,KAAAuL,QAAAwO,WAAAhZ,EAAA2Z,EAEA66B,EAAA5vC,EAAAK,6BCpWAvJ,EAAAD,QAAA47C,EAEA,IAAApjB,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBkzC,EAAA,EAKA4I,EAAAtzB,KAAA,aAEAszB,EAAAvzB,OAAAja,EACAwtC,EAAA95C,UAAAN,EAAAo6C,EAAAvzB,OAAAvmB,WAgBA,IAAAmxC,EAAA,CACA2b,UAAA,EACAn/C,QAAA,GAkBA,SAAAmsC,EAAAltC,EAAAC,EAAAC,EAAA4kC,GACA,KAAAhwC,gBAAAo4C,GACA,WAAAA,EAAAltC,EAAAC,EAAAC,EAAA4kC,GAGA9kC,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA+sC,EAAAtzB,KACA9kB,KAAAiwC,eAAAD,EAAA7kC,EAAAsxB,cAAAuT,GAAA9kC,EAAAglC,cAAArwC,EAAAO,KAAA,KACAJ,KAAAmwC,eAAAH,EAAA5kC,EAAAqxB,cAAAuT,GAAA9kC,EAAAklC,cAAAvwC,EAAAO,IAAA,KAEAJ,KAAAqrD,YAAAngD,EAAAkgD,UAEAprD,KAAAy2B,OAAA,EACAz2B,KAAAuwC,UAAA,EACAvwC,KAAAoiD,SAAA,EACApiD,KAAAsrD,QAAA9b,EAGAxvC,KAAAyiD,IACAziD,KAAA+wC,KACA/wC,KAAAgxC,KACAhxC,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QACAtxC,KAAAy2B,OAcA2hB,EAAA95C,UAAAmzC,gBAAA,WACA,OAAAzxC,KAAAiwC,gBAMAmI,EAAA95C,UAAAozC,gBAAA,WACA,OAAA1xC,KAAAmwC,gBAMAiI,EAAA95C,UAAAitD,aAAA,SAAA1pD,GACA7B,KAAAqrD,YAAAxpD,GAGAu2C,EAAA95C,UAAAktD,aAAA,WACA,OAAAxrD,KAAAqrD,aAGAjT,EAAA95C,UAAAmtD,cAAA,WAEA,OAAAzrD,KAAAsrD,SAGAlT,EAAA95C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGAmI,EAAA95C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGAiI,EAAA95C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAA5B,KAAAuwC,UAAAvwC,KAAAyiD,KAAA7gD,IAAAsL,IAGAkrC,EAAA95C,UAAA6O,kBAAA,SAAAD,GACA,UAGAkrC,EAAA95C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAmE,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAwZ,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA1a,KAAA+wC,KAAAptC,EAAAc,OAAA+tC,EAAAxyC,KAAAiwC,eAAAjwC,KAAAixC,gBACAjxC,KAAAgxC,KAAArtC,EAAAc,OAAAguC,EAAAzyC,KAAAmwC,eAAAnwC,KAAAkxC,gBACAlxC,KAAAyiD,IAAA5iD,EAAAI,OACAD,KAAAyiD,IAAAnhD,WAAA,EAAAmZ,EAAA,EAAAza,KAAAgxC,MACAhxC,KAAAyiD,IAAAhhD,WAAA,EAAA8Y,EAAA,EAAAva,KAAA+wC,MAEA/wC,KAAAoiD,SAAApiD,KAAAyiD,IAAA5gD,SAEA,IAAAwZ,EAAArb,KAAAoiD,SAAApiD,KAAAqrD,YAOA,GALArrD,KAAAsrD,QADAjwC,EAAA,EAhKA,EAmKAm0B,IAGAxvC,KAAAoiD,SAAAz8C,EAAAK,YAMA,OAHAhG,KAAAyiD,IAAA7hD,UACAZ,KAAAy2B,OAAA,OACAz2B,KAAAuwC,UAAA,GAJAvwC,KAAAyiD,IAAA7gD,IAAA,EAAA5B,KAAAoiD,UASA,IAAAsJ,EAAA7rD,EAAA+C,MAAA5C,KAAA+wC,KAAA/wC,KAAAyiD,KACAkJ,EAAA9rD,EAAA+C,MAAA5C,KAAAgxC,KAAAhxC,KAAAyiD,KACAU,EAAAnjD,KAAAmxC,WAAAnxC,KAAAqxC,QAAAqa,IAAA1rD,KAAAoxC,WACApxC,KAAAsxC,QAAAqa,IAIA,GAFA3rD,KAAAy2B,OAAA,GAAA0sB,EAAA,EAAAA,EAAA,EAEA51C,EAAAsJ,aAAA,CAEA7W,KAAAuwC,WAAAhjC,EAAAuJ,QAEA,IAAA4E,EAAA7b,EAAA+B,IAAA5B,KAAAuwC,UAAAvwC,KAAAyiD,KAEAzmC,EAAAta,OAAA1B,KAAAmxC,WAAAz1B,GACAO,GAAAjc,KAAAqxC,QAAAxxC,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAEAQ,EAAA3a,OAAAvB,KAAAoxC,WAAA11B,GACAS,GAAAnc,KAAAsxC,QAAAzxC,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,QAGA1b,KAAAuwC,UAAA,EAGAvwC,KAAAsL,QAAAwO,WAAAxZ,EAAAO,IAAAmb,GACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAAO,IAAAqb,GACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAi8B,EAAA95C,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAGAoiD,EAAAxjD,EAAAgD,SAAAmZ,EAAAC,EAAAjc,KAAA+wC,MACAuS,EAAAzjD,EAAAgD,SAAAqZ,EAAAC,EAAAnc,KAAAgxC,MACA31B,EAAArb,KAAAoiD,SAAApiD,KAAAqrD,YACA1Y,EAAA9yC,EAAA8C,IAAA3C,KAAAyiD,IAAA5iD,EAAA8B,IAAA2hD,EAAAD,IAGAhoC,EAAA,IACAs3B,GAAAplC,EAAAL,OAAAmO,GAGA,IAAAI,GAAAzb,KAAAy2B,OAAAkc,EACAC,EAAA5yC,KAAAuwC,UACAvwC,KAAAuwC,UAAA5xC,EAAAa,IAAA,EAAAQ,KAAAuwC,UAAA90B,GACAA,EAAAzb,KAAAuwC,UAAAqC,EAEA,IAAAl3B,EAAA7b,EAAA+B,IAAA6Z,EAAAzb,KAAAyiD,KACAzmC,EAAAta,OAAA1B,KAAAmxC,WAAAz1B,GACAO,GAAAjc,KAAAqxC,QAAAxxC,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GACAQ,EAAA3a,OAAAvB,KAAAoxC,WAAA11B,GACAS,GAAAnc,KAAAsxC,QAAAzxC,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,GAEA1b,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAi8B,EAAA95C,UAAAmP,yBAAA,SAAAF,GACA,IAAAgN,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACA0Z,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EAEAyxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA5F,EAAAnR,EAAAc,OAAA+tC,EAAAxyC,KAAAiwC,eAAAjwC,KAAAixC,gBACAl8B,EAAApR,EAAAc,OAAAguC,EAAAzyC,KAAAmwC,eAAAnwC,KAAAkxC,gBACA2L,EAAAh9C,EAAAI,OACA48C,EAAAv7C,WAAA,EAAAmZ,EAAA,EAAA1F,GACA8nC,EAAAp7C,WAAA,EAAA8Y,EAAA,EAAAzF,GAEA,IAAAjT,EAAAg7C,EAAA76C,YACAqZ,EAAAxZ,EAAA7B,KAAAqrD,YAEAhwC,EAAA1c,EAAAe,MAAA2b,EAAA,EAAA1V,EAAAe,qBAEA,IAAA+U,GAAAzb,KAAAy2B,OAAApb,EACAK,EAAA7b,EAAA+B,IAAA6Z,EAAAohC,GAYA,OAVAtiC,EAAA7Y,OAAA1B,KAAAmxC,WAAAz1B,GACAlB,GAAAxa,KAAAqxC,QAAAxxC,EAAA+C,MAAAkS,EAAA4G,GACAjB,EAAAlZ,OAAAvB,KAAAoxC,WAAA11B,GACAhB,GAAA1a,KAAAsxC,QAAAzxC,EAAA+C,MAAAmS,EAAA2G,GAEA1b,KAAAsL,QAAAyO,WAAAhd,EAAA8D,IAAA0Z,GACAva,KAAAsL,QAAAyO,WAAAhZ,EAAAyZ,EACAxa,KAAAuL,QAAAwO,WAAAhd,EAAA8D,IAAA4Z,GACAza,KAAAuL,QAAAwO,WAAAhZ,EAAA2Z,EAEA7Y,EAAA7B,KAAAqrD,YAAA1lD,EAAAK,6BCrSAvJ,EAAAD,QAAA67C,EAEA,IAAArjB,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnB2L,EAAW3L,EAAQ,GAEnBsN,GADYtN,EAAQ,GACRA,EAAQ,KACpBqH,EAAUrH,EAAQ,GAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB+7C,EAAAvzB,KAAA,aAEAuzB,EAAAxzB,OAAAja,EACAytC,EAAA/5C,UAAAN,EAAAq6C,EAAAxzB,OAAAvmB,WAmBA,IAAAmxC,EAAA,CACAuS,YAAA,EACAC,aAAA,EACAh2C,QAAA,GAWA,SAAAosC,EAAAntC,EAAAC,EAAAC,EAAA4kC,GACA,KAAAhwC,gBAAAq4C,GACA,WAAAA,EAAAntC,EAAAC,EAAAC,EAAA4kC,GAGA9kC,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAgtC,EAAAvzB,KAEA9kB,KAAAiwC,eAAAD,EAAA7kC,EAAAsxB,cAAAuT,GAAA9kC,EAAAglC,cAAArwC,EAAAI,OACAD,KAAAmwC,eAAAH,EAAA5kC,EAAAqxB,cAAAuT,GAAA9kC,EAAAklC,cAAAvwC,EAAAI,OACAD,KAAAqwC,iBAAA1xC,EAAAG,SAAAoM,EAAAolC,gBAAAplC,EAAAolC,eAAAllC,EAAAlH,WAAAiH,EAAAjH,WAEAlE,KAAAqiD,cAAAn3C,EAAA82C,YACAhiD,KAAAsiD,eAAAp3C,EAAA+2C,aAEAjiD,KAAAuwC,UAAAtoC,IAEAjI,KAAAwiD,OAAA,EACAxiD,KAAAuiD,QAAA,EAGAviD,KAAA+wC,KACA/wC,KAAAgxC,KACAhxC,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QACAtxC,KAAAy2B,OAAA,IAAA7sB,EAoBAyuC,EAAA/5C,UAAAmzC,gBAAA,WACA,OAAAzxC,KAAAiwC,gBAMAoI,EAAA/5C,UAAAozC,gBAAA,WACA,OAAA1xC,KAAAmwC,gBAMAkI,EAAA/5C,UAAAqzC,kBAAA,WACA,OAAA3xC,KAAAqwC,kBAMAgI,EAAA/5C,UAAAskD,aAAA,SAAAC,GACA7iD,KAAAqiD,cAAAQ,GAGAxK,EAAA/5C,UAAAwkD,aAAA,WACA,OAAA9iD,KAAAqiD,eAMAhK,EAAA/5C,UAAAykD,gBAAA,SAAAnI,GACA56C,KAAAsiD,eAAA1H,GAGAvC,EAAA/5C,UAAA0kD,gBAAA,WACA,OAAAhjD,KAAAsiD,gBAGAjK,EAAA/5C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGAoI,EAAA/5C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGAkI,EAAA/5C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAAO,IAAAJ,KAAAuwC,UAAAxxC,EAAAiB,KAAAuwC,UAAAxwC,GAAA6B,IAAAsL,IAGAmrC,EAAA/5C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAAuwC,UAAAroC,GAGAmwC,EAAA/5C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAAoE,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAyZ,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GAAAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA1a,KAAA+wC,KAAAptC,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAjxC,KAAAgxC,KAAArtC,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBAWA,IAAA/2B,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAEA91B,EAAA,IAAA5R,EAaA,GAZA4R,EAAApT,GAAArJ,EAAAob,EAAAE,EAAAra,KAAA+wC,KAAAhxC,EAAAC,KAAA+wC,KAAAhxC,EAAAqa,EAAApa,KAAAgxC,KAAAjxC,EAAAC,KAAAgxC,KAAAjxC,EACAua,EACAkB,EAAAnT,GAAAtJ,GAAAiB,KAAA+wC,KAAAhxC,EAAAC,KAAA+wC,KAAAhyC,EAAAqb,EAAApa,KAAAgxC,KAAAjxC,EAAAC,KAAAgxC,KAAAjyC,EAAAub,EACAkB,EAAA3R,GAAA9K,GAAAiB,KAAA+wC,KAAAhxC,EAAAqa,EAAApa,KAAAgxC,KAAAjxC,EAAAua,EACAkB,EAAApT,GAAArI,EAAAyb,EAAAnT,GAAAtJ,EACAyc,EAAAnT,GAAAtI,EAAAoa,EAAAE,EAAAra,KAAA+wC,KAAAhyC,EAAAiB,KAAA+wC,KAAAhyC,EAAAqb,EAAApa,KAAAgxC,KAAAjyC,EAAAiB,KAAAgxC,KAAAjyC,EACAub,EACAkB,EAAA3R,GAAA9J,EAAAC,KAAA+wC,KAAAhyC,EAAAqb,EAAApa,KAAAgxC,KAAAjyC,EAAAub,EACAkB,EAAApT,GAAAF,EAAAsT,EAAA3R,GAAA9K,EACAyc,EAAAnT,GAAAH,EAAAsT,EAAA3R,GAAA9J,EACAyb,EAAA3R,GAAA3B,EAAAkS,EAAAE,EAEAta,KAAAqiD,cAAA,GACA7mC,EAAApR,aAAApK,KAAAy2B,QAEA,IAAAm1B,EAAAxxC,EAAAE,EACAxd,EAAA8uD,EAAA,IAAAA,EAAA,EAEAvwC,EAAAX,EAAAF,EAAAxa,KAAAqwC,iBAGA+S,EAAA,EAAAzkD,EAAAwH,GAAAnG,KAAAqiD,cAGArlD,EAAA,EAAAF,EAAAkD,KAAAsiD,eAAAc,EAGAt0B,EAAAhyB,EAAAsmD,IAGAzuB,EAAApnB,EAAAulC,GACA9yC,KAAAuiD,QAAA5tB,GAAA33B,EAAA23B,EAAA7F,GACA9uB,KAAAuiD,QAAA,GAAAviD,KAAAuiD,QAAA,EAAAviD,KAAAuiD,QAAA,EACAviD,KAAAwiD,OAAAnnC,EAAAsZ,EAAA7F,EAAA9uB,KAAAuiD,QAEAqJ,GAAA5rD,KAAAuiD,QACAviD,KAAAy2B,OAAA5sB,GAAA3B,EAAA,GAAA0jD,EAAA,EAAAA,EAAA,OACG,GAAApwC,EAAA3R,GAAA3B,GACHsT,EAAApR,aAAApK,KAAAy2B,QACAz2B,KAAAuiD,QAAA,EACAviD,KAAAwiD,OAAA,IAEAhnC,EAAAlR,gBAAAtK,KAAAy2B,QACAz2B,KAAAuiD,QAAA,EACAviD,KAAAwiD,OAAA,GAGA,GAAAj1C,EAAAsJ,aAAA,CAEA7W,KAAAuwC,UAAA3uC,IAAA2L,EAAAuJ,SAEA,IAAA4E,EAAA7b,EAAAO,IAAAJ,KAAAuwC,UAAAxxC,EAAAiB,KAAAuwC,UAAAxwC,GAEAic,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAAA1b,KAAAuwC,UAAAroC,GAEAgU,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,GAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,GAAA1b,KAAAuwC,UAAAroC,QAGAlI,KAAAuwC,UAAA3vC,UAGAZ,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAk8B,EAAA/5C,UAAAkP,yBAAA,SAAAD,GACA,IAAAyO,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAkZ,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAEA,GAAAtxC,KAAAqiD,cAAA,GACA,IAAArP,EAAA72B,EAAAF,EAEA4vC,GAAA7rD,KAAAy2B,OAAA5sB,GAAA3B,GACA8qC,EAAAhzC,KAAAwiD,OAAAxiD,KAAAuiD,QAAAviD,KAAAuwC,UAAAroC,GACAlI,KAAAuwC,UAAAroC,GAAA2jD,EAEA5vC,GAAA7B,EAAAyxC,EACA1vC,GAAA7B,EAAAuxC,GAEA9Y,EAAAlzC,EAAAI,QACAqB,WAAA,EAAA4a,EAAA,EAAArc,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,OACA+B,EAAAtxC,WAAA,EAAAua,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAA+wC,OAEA,IAAA2E,EAAA71C,EAAAkD,IAAA6G,EAAApF,QAAAxE,KAAAy2B,OAAAsc,IACA/yC,KAAAuwC,UAAAxxC,GAAA22C,EAAA32C,EACAiB,KAAAuwC,UAAAxwC,GAAA21C,EAAA31C,EAEA,IAAA2b,EAAA7b,EAAAQ,MAAAq1C,GAEA15B,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAEAQ,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,EAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,OACG,CACH,IAAAq3B,KAAAlzC,EAAAI,QACAqB,WAAA,EAAA4a,EAAA,EAAArc,EAAA+C,MAAAuZ,EAAAnc,KAAAgxC,OACA+B,EAAAtxC,WAAA,EAAAua,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAA+wC,OACAiC,EAAA72B,EAAAF,EAAA,IACA02B,EAAA1qC,EAAA8qC,EAAAh0C,EAAAg0C,EAAAhzC,EAAAizC,GAEAv3B,EAAAxT,EAAAlF,IAAA6G,EAAAc,QAAA1K,KAAAy2B,OAAAkc,IACA3yC,KAAAuwC,UAAAnvC,IAAAqa,GAEAC,EAAA7b,EAAAO,IAAAqb,EAAA1c,EAAA0c,EAAA1b,GAEAic,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAA+wC,KAAAr1B,GAAAD,EAAAvT,GAEAgU,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,GAAAza,EAAA+C,MAAA5C,KAAAgxC,KAAAt1B,GAAAD,EAAAvT,GAGAlI,KAAAsL,QAAAwO,WAAAxZ,EAAA0b,EACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAA4b,EACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAk8B,EAAA/5C,UAAAmP,yBAAA,SAAAF,GACA,IAaA4lC,EAAAC,EAbA74B,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACA0Z,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EAEAyxC,EAAA7uC,EAAAvD,IAAAoa,GAAAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEAP,EAAAna,KAAAmxC,WAAA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QAAA/2B,EAAAta,KAAAsxC,QAEAx8B,EAAAnR,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAl8B,EAAApR,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBAIA11B,EAAA,IAAA5R,EAWA,GAVA4R,EAAApT,GAAArJ,EAAAob,EAAAE,EAAAvF,EAAA/U,EAAA+U,EAAA/U,EAAAqa,EAAArF,EAAAhV,EAAAgV,EAAAhV,EAAAua,EACAkB,EAAAnT,GAAAtJ,GAAA+V,EAAA/U,EAAA+U,EAAA/V,EAAAqb,EAAArF,EAAAhV,EAAAgV,EAAAhW,EAAAub,EACAkB,EAAA3R,GAAA9K,GAAA+V,EAAA/U,EAAAqa,EAAArF,EAAAhV,EAAAua,EACAkB,EAAApT,GAAArI,EAAAyb,EAAAnT,GAAAtJ,EACAyc,EAAAnT,GAAAtI,EAAAoa,EAAAE,EAAAvF,EAAA/V,EAAA+V,EAAA/V,EAAAqb,EAAArF,EAAAhW,EAAAgW,EAAAhW,EAAAub,EACAkB,EAAA3R,GAAA9J,EAAA+U,EAAA/V,EAAAqb,EAAArF,EAAAhW,EAAAub,EACAkB,EAAApT,GAAAF,EAAAsT,EAAA3R,GAAA9K,EACAyc,EAAAnT,GAAAH,EAAAsT,EAAA3R,GAAA9J,EACAyb,EAAA3R,GAAA3B,EAAAkS,EAAAE,EAEAta,KAAAqiD,cAAA,IACA/M,EAAAz1C,EAAAI,QACAqB,WAAA,EAAAmZ,EAAA,EAAA1F,GACAugC,EAAA7zC,WAAA,EAAA8Y,EAAA,EAAAzF,GAEAq+B,EAAAmC,EAAAzzC,SACAuxC,EAAA,EAEA,IAAA13B,EAAA7b,EAAAkD,IAAAyY,EAAAzR,QAAAurC,IAEA/6B,EAAA7Y,OAAAyY,EAAAuB,GACAlB,GAAAJ,EAAAva,EAAA+C,MAAAkS,EAAA4G,GAEAjB,EAAAlZ,OAAA8Y,EAAAqB,GACAhB,GAAAJ,EAAAza,EAAA+C,MAAAmS,EAAA2G,OACG,CACH,IAAA45B,KAAAz1C,EAAAI,QACAqB,WAAA,EAAAmZ,EAAA,EAAA1F,GACAugC,EAAA7zC,WAAA,EAAA8Y,EAAA,EAAAzF,GAEA,IAAA0gC,EAAA96B,EAAAF,EAAAxa,KAAAqwC,iBAEA8C,EAAAmC,EAAAzzC,SACAuxC,EAAAz0C,EAAAqE,IAAAwyC,GAEA,IAAAn6B,EAAApT,EAAAqtC,EAAAv2C,EAAAu2C,EAAAv1C,EAAAy1C,GAEA/5B,EAAAxT,IACA,GAAAuT,EAAA3R,GAAA3B,EAAA,EACAuT,EAAAxT,EAAAlF,IAAAyY,EAAA1R,QAAAuR,QACK,CACL,IAAAwwC,EAAAhsD,EAAAkD,IAAAyY,EAAAzR,QAAAurC,IACA75B,EAAA5a,IAAAgrD,EAAA9sD,EAAA8sD,EAAA9rD,EAAA,GAGA2b,EAAA7b,EAAAO,IAAAqb,EAAA1c,EAAA0c,EAAA1b,GAEAwa,EAAA7Y,OAAAyY,EAAAuB,GACAlB,GAAAJ,GAAAva,EAAA+C,MAAAkS,EAAA4G,GAAAD,EAAAvT,GAEAuS,EAAAlZ,OAAA8Y,EAAAqB,GACAhB,GAAAJ,GAAAza,EAAA+C,MAAAmS,EAAA2G,GAAAD,EAAAvT,GAQA,OALAlI,KAAAsL,QAAAyO,WAAAhd,EAAAwd,EACAva,KAAAsL,QAAAyO,WAAAhZ,EAAAyZ,EACAxa,KAAAuL,QAAAwO,WAAAhd,EAAA0d,EACAza,KAAAuL,QAAAwO,WAAAhZ,EAAA2Z,EAEAy4B,GAAAxtC,EAAAK,YACAotC,GAAAztC,EAAAO,8BCvZAzJ,EAAAD,QAAA87C,EAEA,IAAAtjB,EAAc14B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBg8C,EAAAxzB,KAAA,cAEAwzB,EAAAzzB,OAAAja,EACA0tC,EAAAh6C,UAAAN,EAAAs6C,EAAAzzB,OAAAvmB,WAuBA,IAAAmxC,EAAA,CACAM,aAAA,EACAH,eAAA,EACAC,WAAA,EACAmS,YAAA,EACAC,aAAA,GACAh2C,QAAA,GAaA,SAAAqsC,EAAAptC,EAAAC,EAAAC,EAAA4kC,EAAA0D,GACA,KAAA1zC,gBAAAs4C,GACA,WAAAA,EAAAptC,EAAAC,EAAAC,EAAA4kC,EAAA0D,GAGAxoC,EAAA8pB,EAAA9pB,EAAAukC,GACA7kC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAitC,EAAAxzB,KAEA9kB,KAAAiwC,eAAAD,EAAA7kC,EAAAsxB,cAAAuT,GAAA9kC,EAAAglC,cAAArwC,EAAAI,OACAD,KAAAmwC,eAAAH,EAAA5kC,EAAAqxB,cAAAuT,GAAA9kC,EAAAklC,cAAAvwC,EAAAI,OACAD,KAAA8rD,YAAApY,EAAAvoC,EAAAuxB,eAAAgX,GAAAxoC,EAAA0oC,YAAA/zC,EAAAO,IAAA,KAEAJ,KAAA2zC,cAAA3zC,KAAA8rD,YACA9rD,KAAA6zC,cAAAh0C,EAAA+C,MAAA,EAAA5C,KAAA2zC,eAEA3zC,KAAAy2B,OAAA,EACAz2B,KAAAuwC,UAAA,EACAvwC,KAAAuxC,YAAA,EACAvxC,KAAAwwC,eAAA,EACAxwC,KAAA+rD,aAAA,EACA/rD,KAAAgsD,gBAAA,EAEAhsD,KAAA2wC,iBAAAzlC,EAAA0kC,eACA5vC,KAAA4wC,aAAA1lC,EAAA2kC,WACA7vC,KAAA8wC,cAAA5lC,EAAA6kC,YAEA/vC,KAAAqiD,cAAAn3C,EAAA82C,YACAhiD,KAAAsiD,eAAAp3C,EAAA+2C,aAEAjiD,KAAAwiD,OAAA,EACAxiD,KAAAuiD,QAAA,EAGAviD,KAAAixC,eACAjxC,KAAAkxC,eACAlxC,KAAAmxC,WACAnxC,KAAAoxC,WACApxC,KAAAqxC,QACArxC,KAAAsxC,QAEAtxC,KAAAisD,KAAApsD,EAAAI,OACAD,KAAAksD,KAAArsD,EAAAI,OACAD,KAAAmsD,MACAnsD,KAAAosD,MACApsD,KAAAqsD,MACArsD,KAAAssD,MAyBAhU,EAAAh6C,UAAAmzC,gBAAA,WACA,OAAAzxC,KAAAiwC,gBAMAqI,EAAAh6C,UAAAozC,gBAAA,WACA,OAAA1xC,KAAAmwC,gBAMAmI,EAAAh6C,UAAAi2C,cAAA,WACA,OAAAv0C,KAAA2zC,eAMA2E,EAAAh6C,UAAAk2C,oBAAA,WACA,IAAA3C,EAAA7xC,KAAAsL,QACAmpC,EAAAz0C,KAAAuL,QAEA+f,EAAAumB,EAAAzX,cAAAp6B,KAAAiwC,gBACA1kB,EAAAkpB,EAAAra,cAAAp6B,KAAAmwC,gBACAnzC,EAAA6C,EAAA8B,IAAA4pB,EAAAD,GACAooB,EAAA7B,EAAAtV,eAAAv8B,KAAA2zC,eAGA,OADA9zC,EAAA8C,IAAA3F,EAAA02C,IAOA4E,EAAAh6C,UAAAwzC,cAAA,WACA,IAAA71B,EAAAjc,KAAAsL,QAAAyrB,kBAEA,OADA/2B,KAAAuL,QAAAwrB,kBACA9a,GAMAq8B,EAAAh6C,UAAAyzC,eAAA,WACA,OAAA/xC,KAAA8wC,eAMAwH,EAAAh6C,UAAAyxC,YAAA,SAAAzjC,GACAtM,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA8wC,cAAAxkC,GAMAgsC,EAAAh6C,UAAA2zC,cAAA,SAAA/5B,GACAlY,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA4wC,aAAA14B,GAMAogC,EAAAh6C,UAAA4zC,cAAA,WACA,OAAAlyC,KAAA4wC,cAMA0H,EAAAh6C,UAAA6zC,kBAAA,SAAA1W,GACAz7B,KAAAsL,QAAA6N,UAAA,GACAnZ,KAAAuL,QAAA4N,UAAA,GACAnZ,KAAA2wC,iBAAAlV,GAGA6c,EAAAh6C,UAAAiuD,kBAAA,WACA,OAAAvsD,KAAA2wC,kBAMA2H,EAAAh6C,UAAA0zC,eAAA,SAAA9kC,GACA,OAAAA,EAAAlN,KAAAwwC,gBAOA8H,EAAAh6C,UAAAkuD,qBAAA,SAAA3J,GACA7iD,KAAAqiD,cAAAQ,GAGAvK,EAAAh6C,UAAAmuD,qBAAA,WACA,OAAAzsD,KAAAqiD,eAMA/J,EAAAh6C,UAAAouD,sBAAA,SAAA9R,GACA56C,KAAAsiD,eAAA1H,GAGAtC,EAAAh6C,UAAAquD,sBAAA,WACA,OAAA3sD,KAAAsiD,gBAGAhK,EAAAh6C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA8uB,cAAAp6B,KAAAiwC,iBAGAqI,EAAAh6C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAA6uB,cAAAp6B,KAAAmwC,iBAGAmI,EAAAh6C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAAiD,QAAA9C,KAAAuwC,UAAAvwC,KAAAksD,KAAAlsD,KAAAgsD,gBAAAhsD,KAAAisD,MAAArqD,IAAAsL,IAGAorC,EAAAh6C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAAwwC,gBAGA8H,EAAAh6C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAixC,eAAAjxC,KAAAsL,QAAA+K,QAAArN,YACAhJ,KAAAkxC,eAAAlxC,KAAAuL,QAAA8K,QAAArN,YACAhJ,KAAAmxC,WAAAnxC,KAAAsL,QAAA6K,UACAnW,KAAAoxC,WAAApxC,KAAAuL,QAAA4K,UACAnW,KAAAqxC,QAAArxC,KAAAsL,QAAA8K,OACApW,KAAAsxC,QAAAtxC,KAAAuL,QAAA6K,OAEA,IAAA+D,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAEA/2B,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACAib,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EAEAwZ,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EACAmb,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAEAuxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAGA5F,EAAAnR,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAl8B,EAAApR,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBAuBA,IAtBAl0C,EAAA6C,EAAAI,QACAqB,WAAA,EAAAmZ,EAAA,EAAA1F,GACA/X,EAAAyE,WAAA,EAAA8Y,EAAA,EAAAzF,GAIA9U,KAAAksD,KAAAvoD,EAAAa,QAAAguC,EAAAxyC,KAAA6zC,eACA7zC,KAAAqsD,MAAAxsD,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA8X,GAAA9U,KAAAksD,MACAlsD,KAAAssD,MAAAzsD,EAAA+C,MAAAmS,EAAA/U,KAAAksD,MAEAlsD,KAAAy2B,OAAAtc,EAAAE,EAAAD,EAAApa,KAAAqsD,MAAArsD,KAAAqsD,MAAA/xC,EAAAta,KAAAssD,MACAtsD,KAAAssD,MAEAtsD,KAAAy2B,OAAA,IACAz2B,KAAAy2B,OAAA,EAAAz2B,KAAAy2B,QAKAz2B,KAAA+rD,aAAA,EACA/rD,KAAAwiD,OAAA,EACAxiD,KAAAuiD,QAAA,EACAviD,KAAAqiD,cAAA,GACAriD,KAAAisD,KAAAtoD,EAAAa,QAAAguC,EAAAxyC,KAAA2zC,eACA3zC,KAAAmsD,MAAAtsD,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA8X,GAAA9U,KAAAisD,MACAjsD,KAAAosD,MAAAvsD,EAAA+C,MAAAmS,EAAA/U,KAAAisD,MAEA,IAAA9I,EAAAhpC,EAAAE,EAAAD,EAAApa,KAAAmsD,MAAAnsD,KAAAmsD,MAAA7xC,EAAAta,KAAAosD,MACApsD,KAAAosD,MAEA,GAAAjJ,EAAA,GACAnjD,KAAA+rD,aAAA,EAAA5I,EAEA,IAAA9nC,EAAAxb,EAAA8C,IAAA3F,EAAAgD,KAAAisD,MAGA7I,EAAA,EAAAzkD,EAAAwH,GAAAnG,KAAAqiD,cAGArlD,EAAA,EAAAgD,KAAA+rD,aAAA/rD,KAAAsiD,eAAAc,EAGAt0B,EAAA9uB,KAAA+rD,aAAA3I,IAGAzuB,EAAApnB,EAAAulC,GACA9yC,KAAAuiD,QAAA5tB,GAAA33B,EAAA23B,EAAA7F,GACA9uB,KAAAuiD,QAAA,IACAviD,KAAAuiD,QAAA,EAAAviD,KAAAuiD,SAGAviD,KAAAwiD,OAAAnnC,EAAAsZ,EAAA7F,EAAA9uB,KAAAuiD,QAEAviD,KAAA+rD,aAAA5I,EAAAnjD,KAAAuiD,QACAviD,KAAA+rD,aAAA,IACA/rD,KAAA+rD,aAAA,EAAA/rD,KAAA+rD,oBAIA/rD,KAAAgsD,gBAAA,EAcA,GAVAhsD,KAAA8wC,eACA9wC,KAAAuxC,YAAAn3B,EAAAE,EACAta,KAAAuxC,YAAA,IACAvxC,KAAAuxC,YAAA,EAAAvxC,KAAAuxC,eAGAvxC,KAAAuxC,YAAA,EACAvxC,KAAAwwC,eAAA,GAGAjjC,EAAAsJ,aAAA,CAEA7W,KAAAuwC,WAAAhjC,EAAAuJ,QACA9W,KAAAgsD,iBAAAz+C,EAAAuJ,QACA9W,KAAAwwC,gBAAAjjC,EAAAuJ,QAEA,IAAA4E,EAAA7b,EAAAiD,QAAA9C,KAAAuwC,UAAAvwC,KAAAksD,KAAAlsD,KAAAgsD,gBAAAhsD,KAAAisD,MACAjX,EAAAh1C,KAAAuwC,UAAAvwC,KAAAqsD,MAAArsD,KAAAgsD,gBAAAhsD,KAAAmsD,MAAAnsD,KAAAwwC,eACAyE,EAAAj1C,KAAAuwC,UAAAvwC,KAAAssD,MAAAtsD,KAAAgsD,gBAAAhsD,KAAAosD,MAAApsD,KAAAwwC,eAEAx0B,EAAAta,OAAA1B,KAAAmxC,WAAAz1B,GACAO,GAAAjc,KAAAqxC,QAAA2D,EAEA94B,EAAA3a,OAAAvB,KAAAoxC,WAAA11B,GACAS,GAAAnc,KAAAsxC,QAAA2D,OAGAj1C,KAAAuwC,UAAA,EACAvwC,KAAAgsD,gBAAA,EACAhsD,KAAAwwC,eAAA,EAGAxwC,KAAAsL,QAAAwO,WAAAxZ,EAAAO,IAAAmb,GACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAAO,IAAAqb,GACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAm8B,EAAAh6C,UAAAkP,yBAAA,SAAAD,GACA,IAAA4M,EAAAna,KAAAmxC,WACA92B,EAAAra,KAAAoxC,WACAh3B,EAAApa,KAAAqxC,QACA/2B,EAAAta,KAAAsxC,QAEAt1B,EAAAhc,KAAAsL,QAAAwO,WAAAxZ,EACA2b,EAAAjc,KAAAsL,QAAAwO,WAAA7Y,EACAib,EAAAlc,KAAAuL,QAAAuO,WAAAxZ,EACA6b,EAAAnc,KAAAuL,QAAAuO,WAAA7Y,EAIA0xC,EAAA9yC,EAAA8C,IAAA3C,KAAAisD,KAAA/vC,GAAArc,EAAA8C,IAAA3C,KAAAisD,KAAAjwC,GAAAhc,KAAAosD,MACAjwC,EAAAnc,KAAAmsD,MAAAlwC,EACAR,GAAAzb,KAAA+rD,cACApZ,EAAA3yC,KAAAwiD,OAAAxiD,KAAAuiD,QAAAviD,KAAAgsD,iBACAhsD,KAAAgsD,iBAAAvwC,EAEA,IAAAC,EAAA7b,EAAA+B,IAAA6Z,EAAAzb,KAAAisD,MACAjX,EAAAv5B,EAAAzb,KAAAmsD,MACAlX,EAAAx5B,EAAAzb,KAAAosD,MAEApwC,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAA46B,EAEA94B,EAAA3a,OAAA8Y,EAAAqB,GAMAi3B,GALAx2B,GAAA7B,EAAA26B,GAKAh5B,EAAAjc,KAAA4wC,aACAn1B,GAAAzb,KAAAuxC,YAAAoB,EADA,IAGAC,EAAA5yC,KAAAwwC,eACAqC,EAAAtlC,EAAAulC,GAAA9yC,KAAA2wC,iBACA3wC,KAAAwwC,eAAA7xC,EAAAe,MAAAM,KAAAwwC,eAAA/0B,GACAo3B,KAGA52B,GAAA7B,GAFAqB,EAAAzb,KAAAwwC,eAAAoC,GAGAz2B,GAAA7B,EAAAmB,EAKAk3B,EAAA9yC,EAAA8C,IAAA3C,KAAAksD,KAAAhwC,GAAArc,EAAA8C,IAAA3C,KAAAksD,KAAAlwC,GAAAhc,KAAAssD,MACAnwC,EAAAnc,KAAAqsD,MAAApwC,EACAR,GAAAzb,KAAAy2B,OAAAkc,EACA3yC,KAAAuwC,WAAA90B,EAEAC,EAAA7b,EAAA+B,IAAA6Z,EAAAzb,KAAAksD,MACAlX,EAAAv5B,EAAAzb,KAAAqsD,MACApX,EAAAx5B,EAAAzb,KAAAssD,MAEAtwC,EAAAta,OAAAyY,EAAAuB,GACAO,GAAA7B,EAAA46B,EAEA94B,EAAA3a,OAAA8Y,EAAAqB,GACAS,GAAA7B,EAAA26B,EAGAj1C,KAAAsL,QAAAwO,WAAAxZ,EAAAO,IAAAmb,GACAhc,KAAAsL,QAAAwO,WAAA7Y,EAAAgb,EACAjc,KAAAuL,QAAAuO,WAAAxZ,EAAAO,IAAAqb,GACAlc,KAAAuL,QAAAuO,WAAA7Y,EAAAkb,GAGAm8B,EAAAh6C,UAAAmP,yBAAA,SAAAF,GACA,IAAAgN,EAAAva,KAAAsL,QAAAyO,WAAAhd,EACAyd,EAAAxa,KAAAsL,QAAAyO,WAAAhZ,EACA0Z,EAAAza,KAAAuL,QAAAwO,WAAAhd,EACA2d,EAAA1a,KAAAuL,QAAAwO,WAAAhZ,EAEAyxC,EAAA7uC,EAAAvD,IAAAoa,GACAi4B,EAAA9uC,EAAAvD,IAAAsa,GAEA5F,EAAAnR,EAAAa,QAAAguC,EAAA3yC,EAAA8B,IAAA3B,KAAAiwC,eAAAjwC,KAAAixC,iBACAl8B,EAAApR,EAAAa,QAAAiuC,EAAA5yC,EAAA8B,IAAA3B,KAAAmwC,eAAAnwC,KAAAkxC,iBACAl0C,EAAA6C,EAAAI,OACAjD,EAAAsE,WAAA,EAAAmZ,EAAA,EAAA1F,GACA/X,EAAAyE,WAAA,EAAA8Y,EAAA,EAAAzF,GAEA,IAUA2G,EAVAmxC,EAAAjpD,EAAAa,QAAAguC,EAAAxyC,KAAA6zC,eAEAgZ,EAAAhtD,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA8X,GAAA83C,GACAE,EAAAjtD,EAAA+C,MAAAmS,EAAA63C,GAEAvxC,EAAAxb,EAAA8C,IAAA3F,EAAA4vD,GAEA99B,EAAA9uB,KAAAmxC,WAAAnxC,KAAAoxC,WAAApxC,KAAAqxC,QAAArxC,KAAAqsD,MACArsD,KAAAqsD,MAAArsD,KAAAsxC,QAAAtxC,KAAAssD,MAAAtsD,KAAAssD,MAIA7wC,EADA,GAAAqT,GACAzT,EAAAyT,EAEA,EAGA,IAAApT,EAAA7b,EAAA+B,IAAA6Z,EAAAmxC,GACA5X,EAAAv5B,EAAAoxC,EACA5X,EAAAx5B,EAAAqxC,EAYA,OAVAvyC,EAAA7Y,OAAA1B,KAAAmxC,WAAAz1B,GACAlB,GAAAxa,KAAAqxC,QAAA2D,EACAv6B,EAAAlZ,OAAAvB,KAAAoxC,WAAA11B,GACAhB,GAAA1a,KAAAsxC,QAAA2D,EAEAj1C,KAAAsL,QAAAyO,WAAAhd,EAAA8D,IAAA0Z,GACAva,KAAAsL,QAAAyO,WAAAhZ,EAAAyZ,EACAxa,KAAAuL,QAAAwO,WAAAhd,EAAA8D,IAAA4Z,GACAza,KAAAuL,QAAAwO,WAAAhZ,EAAA2Z,EAEA/b,EAAAqE,IAAAqY,IAAA1V,EAAAK,6BC3hBA,IAAA8a,EAAYxkB,EAAQ,IACpBsC,EAAWtC,EAAQ,IAEnB,SAAAywD,EAAAC,EAAApS,GACA,iBAAAoS,GACAhtD,KAAA6iB,IAAAmqC,EAAApS,GAIAmS,EAAAzuD,UAAA2uD,KAAA,WACA,WAAAF,EAAA/sD,OAMA+sD,EAAAzuD,UAAAukB,IAAA,SAAA9jB,EAAAgB,EAAAkB,EAAA0zB,GACA,oBAAA51B,EAAA,CACA,IAAAiuD,EAAAjuD,EAAA67C,EAAA76C,GAAA,EAEAC,KAAAktD,OAAAF,EACAhtD,KAAAmtD,IAAAntD,KAAAotD,IAAA,EACAptD,KAAAqtD,IAAArtD,KAAAstD,IAAA,EACAttD,KAAAutD,IAAAvtD,KAAAwtD,IAAAR,EAAAj6B,MAAA6nB,EACA56C,KAAAytD,IAAAztD,KAAA0tD,IAAAV,EAAAx+B,OAAAosB,EAEA56C,KAAA+yB,MAAAi6B,EAAAj6B,MAAA6nB,EACA56C,KAAAwuB,OAAAw+B,EAAAx+B,OAAAosB,EAEA56C,KAAA46C,kBAGA,IAAA35C,GACAA,EAAAlC,EAAA41B,EAAA50B,IAEAC,KAAAmtD,IAAApuD,EAAAiB,KAAAqtD,IAAAttD,GAEAC,KAAAutD,IAAAvtD,KAAAwtD,IAAAvsD,EACAjB,KAAAytD,IAAAztD,KAAA0tD,IAAA/4B,EAEA30B,KAAA+yB,MAAA9xB,EACAjB,KAAAwuB,OAAAmG,EAEA,OAAA30B,MAMA+sD,EAAAzuD,UAAAqvD,KAAA,SAAA5uD,EAAAgB,EAAAkB,EAAA0zB,GAOA,OANA30B,KAAAotD,IAAAruD,EAAAiB,KAAAstD,IAAAvtD,EACAC,KAAAotD,IAAAruD,EAAAiB,KAAAstD,IAAAvtD,OACA,IAAAkB,IACAjB,KAAAwtD,IAAAvsD,EAAAjB,KAAA0tD,IAAA/4B,EACA30B,KAAA+yB,MAAA9xB,EAAAjB,KAAAwuB,OAAAmG,GAEA30B,MAGA+sD,EAAAzuD,UAAA2/B,KAAA,SAAAH,EAAA8vB,EAAAh/B,EAAAi/B,EAAA3+B,EAAA4+B,EAAAC,EAAAC,EAAAC,GACA,IAAAjB,EAAAhtD,KAAAktD,OACA,UAAAF,GAAA,iBAAAA,EAAA,CAIA,IAAAkB,EAAAluD,KAAAmtD,IAAAgB,EAAAnuD,KAAAqtD,IACAe,EAAApuD,KAAAutD,IAAAc,EAAAruD,KAAAytD,IACAnrD,EAAAtC,KAAAotD,IAAA7qD,EAAAvC,KAAAstD,IACAgB,EAAAtuD,KAAAwtD,IAAAe,EAAAvuD,KAAA0tD,SAEA,IAAAI,GACAF,EAAAhvD,EAAA4vD,MAAAZ,EAAA,EAAA5tD,KAAAutD,KAAAM,EAAAjvD,EAAA4vD,MAAAX,EAAA,EAAA7tD,KAAAutD,IAAAK,GAEAM,GAAAN,EAAAO,GADAv/B,EAAAhwB,EAAA4vD,MAAA5/B,EAAA,EAAA5uB,KAAAytD,KACAW,EAAAP,EAAAQ,EADAn/B,EAAAtwB,EAAA4vD,MAAAt/B,EAAA,EAAAlvB,KAAAytD,IAAA7+B,GAEAtsB,EAAAwrD,EAAAvrD,EAAAwrD,EAAAO,EAAAN,EAAAO,EAAAN,QAEG,IAAAJ,GACHvrD,EAAAsrD,EAAArrD,EAAAqsB,EAAA0/B,EAAAT,EAAAU,EAAAr/B,QAEG,IAAA0+B,IACHU,EAAAV,EAAAW,EAAA3/B,GAGA,IAAAgsB,EAAA56C,KAAA46C,OAAA,EACAsT,GAAAtT,EAAAuT,GAAAvT,EAAAwT,GAAAxT,EAAAyT,GAAAzT,EAEA,IACA,mBAAAoS,EAAA/uB,KACA+uB,EAAA/uB,KAAAH,EAAAowB,EAAAC,EAAAC,EAAAC,EAAA/rD,EAAAC,EAAA+rD,EAAAC,IAEAztC,EAAAmd,OACAH,EAAA2wB,UAAAzB,EAAAkB,EAAAC,EAAAC,EAAAC,EAAA/rD,EAAAC,EAAA+rD,EAAAC,IAEG,MAAAnmD,GACH4kD,EAAA0B,eACAC,QAAAjrD,IAAA,mBAAAspD,GACA2B,QAAAjrD,IAAA0E,GACA4kD,EAAA0B,cAAA,MAKAjyD,EAAAD,QAAAuwD,mBCtGA,IAAA/uD,EAAa1B,EAAQ,IACrBoC,EAAAC,KAEAlC,EAAAD,QAAAwB,EAAAW,MAEAlC,EAAAD,QAAAmD,OAAA,SAAAH,EAAAC,GAMA,YALA,IAAAD,GACAC,EAAA,EAAAD,EAAA,QACG,IAAAC,IACHA,EAAAD,IAAA,GAEAA,GAAAC,EAAAD,EAAAd,EAAAiB,UAAAF,EAAAD,MAGA/C,EAAAD,QAAA+1B,OAAA,SAAAhzB,EAAAC,EAAAC,GAMA,YALA,IAAAD,GACAC,EAAA,EAAAD,EAAA,QACG,IAAAC,IACHA,EAAAD,IAAA,GAEAC,EAAAD,GACAD,KAAAC,IAAAC,EAAAD,KACAD,EAAA,EAAAE,EAAAD,IAEAD,KAAAE,IAAAD,EAAAC,KACAF,GAAA,EAAAC,EAAAC,IAIAhD,EAAAD,QAAAgyD,MAAA,SAAAjvD,EAAAC,EAAAC,GACA,OAAAF,EAAAC,EACAA,EACGD,EAAAE,EACHA,EAEAF,GAIA9C,EAAAD,QAAAqF,OAAA,SAAA9C,EAAAgB,GACA,OAAArB,EAAAS,KAAAJ,IAAAgB,qBCxCA,SAAAovB,EAAApuB,EAAAC,EAAAjE,EAAAC,EAAAkrB,EAAAnX,GACA/Q,KAAA2vB,MAAA5uB,EAAAC,EAAAjE,EAAAC,EAAAkrB,EAAAnX,GAGAoe,EAAA7wB,UAAAiC,SAAA,WACA,UAAAP,KAAAe,EAAA,KAAAf,KAAAgB,EAAA,KAAAhB,KAAAjD,EAAA,KAAAiD,KAAAhD,EAAA,KACAgD,KAAAkoB,EAAA,KAAAloB,KAAA+Q,EAAA,KAGAoe,EAAA7wB,UAAA+B,MAAA,WACA,WAAA8uB,EAAAnvB,KAAAe,EAAAf,KAAAgB,EAAAhB,KAAAjD,EAAAiD,KAAAhD,EAAAgD,KAAAkoB,EAAAloB,KAAA+Q,IAGAoe,EAAA7wB,UAAAqxB,MAAA,SAAA5uB,EAAAC,EAAAjE,EAAAC,EAAAkrB,EAAAnX,GAWA,OAVA/Q,KAAA4uD,QAAA,EACA,iBAAA7tD,GACAf,KAAAe,MAAAf,KAAAhD,EAAA+D,EAAA/D,EACAgD,KAAAgB,EAAAD,EAAAC,EAAAhB,KAAAjD,EAAAgE,EAAAhE,EACAiD,KAAAkoB,EAAAnnB,EAAAmnB,EAAAloB,KAAA+Q,EAAAhQ,EAAAgQ,IAEA/Q,KAAAe,KAAA,EAAAf,KAAAhD,KAAA,EACAgD,KAAAgB,KAAA,EAAAhB,KAAAjD,KAAA,EACAiD,KAAAkoB,KAAA,EAAAloB,KAAA+Q,KAAA,GAEA/Q,MAGAmvB,EAAA7wB,UAAAyF,SAAA,WAQA,OAPA/D,KAAA4uD,QAAA,EACA5uD,KAAAe,EAAA,EACAf,KAAAgB,EAAA,EACAhB,KAAAjD,EAAA,EACAiD,KAAAhD,EAAA,EACAgD,KAAAkoB,EAAA,EACAloB,KAAA+Q,EAAA,EACA/Q,MAGAmvB,EAAA7wB,UAAAi0B,OAAA,SAAA3uB,GACA,IAAAA,EACA,OAAA5D,KAGAA,KAAA4uD,QAAA,EAEA,IAAA/R,EAAAj5C,EAAAjF,KAAAsF,IAAAL,GAAA,EAEAtD,EAAAsD,EAAAjF,KAAAqF,IAAAJ,GAAA,EAEA7C,EAAA87C,EAAA78C,KAAAe,EAAAT,EAAAN,KAAAgB,EACAA,EAAA67C,EAAA78C,KAAAgB,EAAAV,EAAAN,KAAAe,EACAhE,EAAA8/C,EAAA78C,KAAAjD,EAAAuD,EAAAN,KAAAhD,EACAA,EAAA6/C,EAAA78C,KAAAhD,EAAAsD,EAAAN,KAAAjD,EACAmrB,EAAA20B,EAAA78C,KAAAkoB,EAAA5nB,EAAAN,KAAA+Q,EACAA,EAAA8rC,EAAA78C,KAAA+Q,EAAAzQ,EAAAN,KAAAkoB,EASA,OAPAloB,KAAAe,IACAf,KAAAgB,IACAhB,KAAAjD,IACAiD,KAAAhD,IACAgD,KAAAkoB,IACAloB,KAAA+Q,IAEA/Q,MAGAmvB,EAAA7wB,UAAA+zB,UAAA,SAAAtzB,EAAAgB,GACA,OAAAhB,GAAAgB,GAGAC,KAAA4uD,QAAA,EACA5uD,KAAAkoB,GAAAnpB,EACAiB,KAAA+Q,GAAAhR,EACAC,MALAA,MAQAmvB,EAAA7wB,UAAAg0B,MAAA,SAAAvzB,EAAAgB,GACA,OAAAhB,EAAA,GAAAgB,EAAA,GAGAC,KAAA4uD,QAAA,EACA5uD,KAAAe,GAAAhC,EACAiB,KAAAgB,GAAAjB,EACAC,KAAAjD,GAAAgC,EACAiB,KAAAhD,GAAA+C,EACAC,KAAAkoB,GAAAnpB,EACAiB,KAAA+Q,GAAAhR,EACAC,MATAA,MAYAmvB,EAAA7wB,UAAAoE,KAAA,SAAA3D,EAAAgB,GACA,IAAAhB,IAAAgB,EACA,OAAAC,KAEAA,KAAA4uD,QAAA,EAEA,IAAA7tD,EAAAf,KAAAe,EAAAf,KAAAgB,EAAAjC,EACAiC,EAAAhB,KAAAgB,EAAAhB,KAAAe,EAAAhB,EACAhD,EAAAiD,KAAAjD,EAAAiD,KAAAhD,EAAA+B,EACA/B,EAAAgD,KAAAhD,EAAAgD,KAAAjD,EAAAgD,EACAmoB,EAAAloB,KAAAkoB,EAAAloB,KAAA+Q,EAAAhS,EACAgS,EAAA/Q,KAAA+Q,EAAA/Q,KAAAkoB,EAAAnoB,EAQA,OANAC,KAAAe,IACAf,KAAAgB,IACAhB,KAAAjD,IACAiD,KAAAhD,IACAgD,KAAAkoB,IACAloB,KAAA+Q,IACA/Q,MAGAmvB,EAAA7wB,UAAA4zB,OAAA,SAAAp1B,GACAkD,KAAA4uD,QAAA,EAEA,IAAAzwD,EAAA6B,KAEAe,EAAA5C,EAAA4C,EAAAjE,EAAAiE,EAAA5C,EAAA6C,EAAAlE,EAAAC,EACAiE,EAAA7C,EAAA6C,EAAAlE,EAAAE,EAAAmB,EAAA4C,EAAAjE,EAAAkE,EACAjE,EAAAoB,EAAApB,EAAAD,EAAAiE,EAAA5C,EAAAnB,EAAAF,EAAAC,EACAC,EAAAmB,EAAAnB,EAAAF,EAAAE,EAAAmB,EAAApB,EAAAD,EAAAkE,EACAknB,EAAA/pB,EAAA+pB,EAAAprB,EAAAiE,EAAAjE,EAAAorB,EAAA/pB,EAAA4S,EAAAjU,EAAAC,EACAgU,EAAA5S,EAAA4S,EAAAjU,EAAAE,EAAAF,EAAAiU,EAAA5S,EAAA+pB,EAAAprB,EAAAkE,EASA,OAPAhB,KAAAe,IACAf,KAAAgB,IACAhB,KAAAjD,IACAiD,KAAAhD,IACAgD,KAAAkoB,IACAloB,KAAA+Q,IAEA/Q,MAGAmvB,EAAA7wB,UAAAuwD,QAAA1/B,EAAA7wB,UAAAwwD,QAAA,WACA,GAAA9uD,KAAA4uD,OAAA,CACA5uD,KAAA4uD,QAAA,EACA5uD,KAAA+uD,SAAA/uD,KAAA+uD,UAAA,IAAA5/B,EACA,IAAAjnB,EAAAlI,KAAAe,EAAAf,KAAAhD,EAAAgD,KAAAgB,EAAAhB,KAAAjD,EACAiD,KAAA+uD,SAAAhuD,EAAAf,KAAAhD,EAAAkL,EACAlI,KAAA+uD,SAAA/tD,GAAAhB,KAAAgB,EAAAkH,EACAlI,KAAA+uD,SAAAhyD,GAAAiD,KAAAjD,EAAAmL,EACAlI,KAAA+uD,SAAA/xD,EAAAgD,KAAAe,EAAAmH,EACAlI,KAAA+uD,SAAA7mC,GAAAloB,KAAAjD,EAAAiD,KAAA+Q,EAAA/Q,KAAAkoB,EAAAloB,KAAAhD,GAAAkL,EACAlI,KAAA+uD,SAAAh+C,GAAA/Q,KAAAkoB,EAAAloB,KAAAgB,EAAAhB,KAAAe,EAAAf,KAAA+Q,GAAA7I,EAEA,OAAAlI,KAAA+uD,UAGA5/B,EAAA7wB,UAAA0wD,IAAA,SAAAxwD,EAAAwG,GAIA,OAHAA,KAAA,IACAjG,EAAAiB,KAAAe,EAAAvC,EAAAO,EAAAiB,KAAAjD,EAAAyB,EAAAuB,EAAAC,KAAAkoB,EACAljB,EAAAjF,EAAAC,KAAAgB,EAAAxC,EAAAO,EAAAiB,KAAAhD,EAAAwB,EAAAuB,EAAAC,KAAA+Q,EACA/L,GAGAmqB,EAAA7wB,UAAA2wD,KAAA,SAAAlwD,EAAAgB,GAGA,MAFA,iBAAAhB,IACAgB,EAAAhB,EAAAgB,EAAAhB,OACAiB,KAAAe,EAAAhC,EAAAiB,KAAAjD,EAAAgD,EAAAC,KAAAkoB,GAGAiH,EAAA7wB,UAAA4wD,KAAA,SAAAnwD,EAAAgB,GAGA,MAFA,iBAAAhB,IACAgB,EAAAhB,EAAAgB,EAAAhB,OACAiB,KAAAgB,EAAAjC,EAAAiB,KAAAhD,EAAA+C,EAAAC,KAAA+Q,GAGAtU,EAAAD,QAAA2yB,mBCxKA,IAAAggC,EAAa7yD,EAAQ,IACrB8yD,EAAY9yD,EAAQ,IAgWpB,SAAA+yD,EAAAl5B,EAAAjU,GACAmtC,EAAAxqC,OAAAhoB,KAAAmD,MACAA,KAAAsvD,MAAA,UAEAptC,KAAA,GAEA,IAAA8S,EAAAh1B,KAAAuvD,SAAA,GACAvvD,KAAAuvD,SAAAr3C,MAAAgK,EAAAhK,OAAA,EACAlY,KAAAuvD,SAAA1M,GAAA3gC,EAAA2gC,IAAA,GACAlkD,KAAAqE,IAAAhD,KAAAuvD,SAAA1M,IAAA,IACA7iD,KAAAuvD,SAAA1M,GAAA,EAAA7iD,KAAAuvD,SAAA1M,IAEA7iD,KAAAuvD,SAAA3U,MAAA14B,EAAA04B,OAAA,GACA56C,KAAAuvD,SAAAC,UAAA,EAAAxvD,KAAAuvD,SAAA3U,MAEA56C,KAAAyvD,OAAAt5B,EAEA,IAAAoQ,EAAA,EAAAvmC,KAAAuvD,SAAA1M,GACA6M,EAAA,EACA1vD,KAAA4+B,KAAA,SAAAkU,GAGA,IADA4c,GADA5c,EAAA,KAAAA,EAAA9d,EAAA9c,MAEAw3C,EAAAnpB,GACApQ,EAAA5oB,KAAAg5B,GACAmpB,GAAAnpB,EAGA,OADAvmC,KAAA2vD,eACA,IACG,GAEHx5B,EAAAgR,GAAA,0BAAAjnC,GACAA,EAAA0vD,IAAA1vD,EAAA0vD,GAAAC,WAGA15B,EAAAgR,GAAA,wBAAAjnC,GACAA,EAAA0vD,IAAA1vD,EAAA0vD,GAAAC,WAjYApzD,EAAAD,QAAA2yD,EAQAA,EAAAW,QAAA,SAAA5tC,EAAA1D,GACA,mBAAA0D,IACA1D,EAAA0D,EACAA,EAAA,MAGAktC,EAAA,SAAAhtC,EAAAC,GAEAD,EAAA+kB,GAAAioB,EAAAW,MAAAC,MAAA,WACApsC,OAAAqsC,QACAltC,SAAAmtC,eAAAntC,SAAAmtC,cAAAC,OACA9tC,EAAA4tC,UAGA7tC,EAAAmc,WAAA,OACA,IAAA1+B,EAAAsvD,EAAAtvD,KAEAiwD,EAAA,GACAA,EAAAztC,SAEA,IAAA+tC,GAAA,EACAhuC,EAAA+kB,GAAA,oBACAipB,GAAA,EACAN,EAAAO,SAAAP,EAAAO,YAEAjuC,EAAA+kB,GAAA,mBACAipB,GAAA,EACAN,EAAAQ,QAAAR,EAAAQ,WAEAR,EAAAS,SAAA,WACA,OAAAH,GAEAN,EAAAU,YAAA,WACAJ,EAAAN,EAAAnsC,SAAAmsC,EAAApsC,SAEAosC,EAAApsC,MAAA,WACAtB,EAAAsB,SAEAosC,EAAAnsC,OAAA,WACAvB,EAAAuB,SACAmsC,EAAAG,SAEAH,EAAAG,MAAA,WACAltC,SAAAmtC,eAAAntC,SAAAmtC,cAAAC,OACA9tC,EAAA4tC,SAGAH,EAAAvsD,OAAA,EACAusD,EAAA/8B,MAAA,GACA+8B,EAAAthC,OAAA,GACAshC,EAAA/wD,EAAA,EACA+wD,EAAA/vD,GAAA,GACA+vD,EAAAlV,MAAA,GACAkV,EAAAjN,GAAA,GACAiN,EAAA53C,MAAA,EACA43C,EAAAW,WAAA,GACAX,EAAAY,WAAA,UAEA,IAAAC,EAAA,GACAC,EAAA,GAEA,SAAAC,EAAA5zD,EAAAU,GACA,mBAAAA,GAAA,iBAAAA,IACAizD,EAAA3zD,GAAAU,GAUAmyD,EAAAgB,OAAA,SAAA/vD,EAAAC,QACA,IAAAA,EACA6vD,EAAA9vD,EAAAC,GACOD,GAAA,iBAAAA,EATP,SAAAb,GACA,QAAAjC,KAAAiC,EACA2wD,EAAA5yD,EAAAiC,EAAAjC,IAQA8yD,CAAAhwD,GACO,iBAAAA,IACP4vD,EAAA5vD,GAGA+uD,EAAAkB,SAAAlB,EAAAkB,QAAAL,EAAAC,IAGAd,EAAAmB,KAAA,SAAAC,GACApB,EAAAqB,OAAArB,EAAAqB,MAAAD,IAGA,IAAAE,EAAA,GAAAC,EAAA,IAEA,WACA,IAAAC,EAAA,IAAAlC,EAAArC,QACA3qC,EAAAmvC,OAAAnC,EAAApC,MAAAsE,IAEA,IAAAE,EAAA,GACApvC,EAAAwc,KAAA,WACA4yB,EAAA3vD,OAAA,IACO,GAEPyvD,EAAArzB,KAAA,SAAAwzB,GACAA,EAAAC,OACAD,EAAArjD,UAAA,UAAA0hD,EAAA/wD,GAAA+wD,EAAA/vD,GACA0xD,EAAAjC,UAAA,EAAAM,EAAAlV,MACA6W,EAAAE,QAAA,QACA,QAAAC,EAAAJ,EAAA/tC,QAA0CmuC,EAASA,EAAAJ,EAAA/tC,QACnDmuC,EAAAH,EAAA3B,EAAAlV,OAEA6W,EAAAI,WAGA/B,EAAAgC,UAAA,SAAAtzD,EAAAhB,EAAAu0D,GACAP,EAAA/vC,KAAA,SAAAgwC,EAAA7W,GACA6W,EAAAO,YACAP,EAAAQ,IAAAzzD,EAAAO,EAAAP,EAAAuB,EAAA,EAAA66C,EAAA,IAAAj8C,KAAAwH,IACAsrD,EAAAS,YAAAH,EACAN,EAAAU,WAEAd,GAAA,QAAA7yD,EAAAO,EAAA,IAAAP,EAAAuB,EAAA,IAAAvC,EAAA,IAAAu0D,GAGAjC,EAAAsC,WAAA,SAAA5zD,EAAAhB,EAAAu0D,GACAP,EAAA/vC,KAAA,SAAAgwC,GACAA,EAAAO,YACAP,EAAAQ,IAAAzzD,EAAAO,EAAAP,EAAAuB,EAAAvC,EAAA,IAAAmB,KAAAwH,IACAsrD,EAAAS,YAAAH,EACAN,EAAAU,WAEAd,GAAA,SAAA7yD,EAAAO,EAAA,IAAAP,EAAAuB,EAAA,IAAAvC,EAAA,IAAAu0D,GAGAjC,EAAAuC,YAAA,SAAAtxD,EAAAC,EAAA+wD,GACAP,EAAA/vC,KAAA,SAAAgwC,GACAA,EAAAO,YACAP,EAAAa,OAAAvxD,EAAAhC,EAAAgC,EAAAhB,GACA0xD,EAAAc,OAAAvxD,EAAAjC,EAAAiC,EAAAjB,GACA0xD,EAAAS,YAAAH,EACAN,EAAAU,WAEAd,GAAA,UAAAtwD,EAAAhC,EAAA,IAAAgC,EAAAhB,EAAA,IAAAiB,EAAAjC,EAAA,IAAAiC,EAAAjB,EAAA,IAAAgyD,GAGAjC,EAAA0C,YAAA,SAAA77C,EAAAo7C,GACA,GAAAp7C,KAAA9U,OAAA,CAGA2vD,EAAA/vC,KAAA,SAAAgwC,GACAA,EAAAO,YACAP,EAAAa,OAAA37C,EAAA,GAAA5X,EAAA4X,EAAA,GAAA5W,GACA,QAAArD,EAAA,EAAyBA,EAAAia,EAAA9U,OAAmBnF,IAC5C+0D,EAAAc,OAAA57C,EAAAja,GAAAqC,EAAA4X,EAAAja,GAAAqD,GAEA0xD,EAAAS,YAAAH,EACAN,EAAAgB,YACAhB,EAAAU,WAEAd,GAAA,UACA,QAAA30D,EAAA,EAAuBA,EAAAia,EAAA9U,OAAmBnF,IAC1C20D,GAAA16C,EAAAja,GAAAqC,EAAA,IAAA4X,EAAAja,GAAAqD,EAAA,IAEAsxD,GAAAU,IAGAjC,EAAA4C,SAAA,SAAAnkD,EAAAwjD,GACAP,EAAA/vC,KAAA,SAAAgwC,GACAA,EAAAO,YACAP,EAAAa,OAAA/jD,EAAAU,WAAAlQ,EAAAwP,EAAAU,WAAAlP,GACA0xD,EAAAc,OAAAhkD,EAAAW,WAAAnQ,EAAAwP,EAAAU,WAAAlP,GACA0xD,EAAAc,OAAAhkD,EAAAW,WAAAnQ,EAAAwP,EAAAW,WAAAnP,GACA0xD,EAAAc,OAAAhkD,EAAAU,WAAAlQ,EAAAwP,EAAAW,WAAAnP,GACA0xD,EAAAS,YAAAH,EACAN,EAAAgB,YACAhB,EAAAU,WAEAd,GAAA,OACAA,GAAA9iD,EAAAU,WAAAlQ,EAAA,IAAAwP,EAAAU,WAAAlP,EAAA,IACAsxD,GAAA9iD,EAAAW,WAAAnQ,EAAA,IAAAwP,EAAAW,WAAAnP,EAAA,IACAsxD,GAAAU,GAGAjC,EAAAiC,MAAA,SAAAv0D,EAAAm1D,EAAA3xD,GAIA,cAHAxD,EAAA,IAAAA,EAAA,GAGA,MAFAm1D,EAAA,IAAAA,EAAA,GAEA,MADA3xD,EAAA,IAAAA,EAAA,GACA,KA7FA,GAkGA,IAAAm1B,EAAA3X,EAAAsxC,GAEA8C,EAAA,IAAAvD,EAAAl5B,EAAA25B,GAEA+C,EAAA,EAAAC,EAAA,EACA1wC,EAAAwc,KAAA,SAAAkU,EAAAl1C,GAEAi1D,IAAA/C,EAAA/wD,GAAA+zD,IAAAhD,EAAA/vD,IACA6yD,EAAArzC,QAAAuwC,EAAA/wD,GAAA+wD,EAAA/vD,GACA8yD,EAAA/C,EAAA/wD,EAAA+zD,EAAAhD,EAAA/vD,KAIA6yD,EAAAh0B,KAAA,SAAAkU,EAAAl1C,GAgBA,MAdA,mBAAAkyD,EAAAviD,MACAuiD,EAAAviD,KAAAulC,EAAAl1C,GAGAm1D,GACAjD,EAAAuC,YAAAU,EAAAn5B,cAAAo5B,EAAA,yBAGA5B,IAAAC,IACAD,EAAAC,EACAjvC,EAAAyQ,SAEAw+B,EAAA,IAEA,IAIAjvC,EAAAsuC,WAAAZ,EAAAY,YACAtuC,EAAA6wC,QAAAnD,EAAA/8B,MAAA+8B,EAAAthC,QACApM,EAAA6N,IAAA,cACA7N,EAAA6N,IAAA,cACA7N,EAAA8wC,QAAAN,GAkBA,IACAO,EAEAJ,EAHAK,EAAAj9B,EAAAyP,aAIAotB,EAAA,CAAqBj0D,EAAA,EAAAgB,EAAA,GAErB6yD,EAAAS,KAAA,UAAAlsB,GAAAioB,EAAAW,MAAAC,MAAA,SAAAp1C,GAEA,GADAA,EAAA,CAAe7b,EAAA6b,EAAA7b,EAAAgB,GAAA6a,EAAA7a,IACfgzD,EAAA,CAIA,IAAA3vC,EA5BA,SAAAxI,GACA,IAAAwI,EACA7U,EAAA4gD,EAAAngD,KAAA4L,KAWA,OAVAub,EAAA6L,UAAAzzB,EAAA,SAAA0tB,GACA,IAAA7Y,GAGA6Y,EAAAlmB,UAAAgiB,aAAAkE,EAAAjuB,UAAA4M,GAIA,OADAwI,EAAA6Y,EAAAlmB,WACA,IAEAqN,EAeAkwC,CAAA14C,GACAwI,IAIA0sC,EAAAyD,WACAR,EAAA3vC,GAGA+vC,EAAAhE,EAAAjX,WAAA,CAAwCqL,SAAA,KAAe6P,EAAAhwC,EAAAvjB,EAAA+a,IACvDub,EAAAiQ,YAAA+sB,QAGKhsB,GAAAioB,EAAAW,MAAAyD,KAAA,SAAA54C,GACLA,EAAA,CAAe7b,EAAA6b,EAAA7b,EAAAgB,GAAA6a,EAAA7a,GACfozD,GACAA,EAAA5J,UAAA3uC,GAGAo4C,EAAAj0D,EAAA6b,EAAA7b,EACAi0D,EAAAjzD,EAAA6a,EAAA7a,IACKonC,GAAAioB,EAAAW,MAAA0D,IAAA,SAAA74C,GAML,GALAA,EAAA,CAAe7b,EAAA6b,EAAA7b,EAAAgB,GAAA6a,EAAA7a,GACfozD,IACAh9B,EAAA+P,aAAAitB,GACAA,EAAA,MAEAJ,EAAA,CACA,IAAA13B,EAAAx7B,EAAA8B,IAAAiZ,EAAAm4C,EAAAn5B,eACAm5B,EAAAx3B,mBAAAF,EAAAz5B,IAAAkuD,EAAAyD,aAAA,GACAR,EAAA,QAGK5rB,GAAAioB,EAAAW,MAAA2D,OAAA,SAAA94C,GACLA,EAAA,CAAe7b,EAAA6b,EAAA7b,EAAAgB,GAAA6a,EAAA7a,GACfozD,IACAh9B,EAAA+P,aAAAitB,GACAA,EAAA,MAEAJ,IACAA,EAAA,QAIAnvC,OAAAX,iBAAA,mBAAAiF,GACA,OAAAA,EAAAyrC,SACA,QAAAC,WAAA,GACA9D,EAAAU,iBAGK,GAEL,IAAAqD,EAAA,GACAjwC,OAAAX,iBAAA,mBAAAiF,GACA,IAAAyrC,EAAAzrC,EAAAyrC,QACAE,EAAAF,IAAA,EACAG,EAAAH,GAAA,GACA7D,EAAAiE,SAAAjE,EAAAiE,QAAAJ,EAAAK,OAAAC,aAAAN,MAEA/vC,OAAAX,iBAAA,iBAAAiF,GACA,IAAAyrC,EAAAzrC,EAAAyrC,QACAE,EAAAF,IAAA,EACAG,EAAAH,GAAA,GACA7D,EAAAoE,OAAApE,EAAAoE,MAAAP,EAAAK,OAAAC,aAAAN,MAGA,IAAAlD,EAAAX,EAAAW,WACA,SAAAqD,EAAAH,EAAAQ,GACA,IAAAC,EAAAJ,OAAAC,aAAAN,GACA,KAAA/wC,KAAAwxC,KACA3D,EAAA2D,GAAAD,GAEA1D,EAAA4D,MAAAR,EAAA,KAAApD,EAAA,EACAA,EAAA6D,KAAAT,EAAA,KAAApD,EAAA,EACAA,EAAA8D,GAAAV,EAAA,KAAApD,EAAA,EACAA,EAAA0D,KAAAN,EAAA,KAAApD,EAAA,EACAA,EAAA+D,KAAAX,EAAA,KAAAA,EAAA,QAOAxE,EAAAxqC,OAAAuqC,EACAC,EAAA/wD,UAAA8wD,EAAAqF,QAAApF,EAAAxqC,OAAAvmB,WAyCA+wD,EAAA/wD,UAAAqxD,YAAA,SAAAx5B,GAIA,IAHA,IAGAn1B,GAHAm1B,EAAAn2B,KAAAyvD,QAGA3rB,cAAmC9iC,EAAGA,IAAA0L,UACtC,QAAAqE,EAAA/P,EAAA22B,iBAAoC5mB,EAAGA,IAAArE,UAAA,CAEvC,IAAAqE,EAAA6+C,GAAA,CACA7+C,EAAA8sB,QAAA9sB,EAAA8sB,OAAAs0B,OACAnyD,KAAAuvD,SAAA2C,YAAAnhD,EAAA8sB,OAAAs0B,OACSnxD,EAAA68B,QAAA78B,EAAA68B,OAAAs0B,OACTnyD,KAAAuvD,SAAA2C,YAAAlxD,EAAA68B,OAAAs0B,OACSnxD,EAAA+2B,YACT/3B,KAAAuvD,SAAA2C,YAAA,wBACSlxD,EAAAg3B,cACTh4B,KAAAuvD,SAAA2C,YAAA,wBACSlxD,EAAA82B,aACT93B,KAAAuvD,SAAA2C,YAAA,yBAGAnhD,EAAA8sB,QAAA9sB,EAAA8sB,OAAA62B,KACA10D,KAAAuvD,SAAAoF,UAAA5jD,EAAA8sB,OAAA62B,KACS1zD,EAAA68B,QAAA78B,EAAA68B,OAAA62B,KACT10D,KAAAuvD,SAAAoF,UAAA3zD,EAAA68B,OAAA62B,KAEA10D,KAAAuvD,SAAAoF,UAAA,GAGA,IAAAr+C,EAAAvF,EAAAxE,UACAqB,EAAAmD,EAAA8E,WACA,UAAAS,IACAvF,EAAA6+C,GA7BA5vD,KA6BAoyD,WAAAxkD,EAAA5N,KAAAuvD,WAEA,QAAAj5C,IACAvF,EAAA6+C,GAhCA5vD,KAgCA40D,SAAAhnD,EAAA5N,KAAAuvD,WAEA,WAAAj5C,IACAvF,EAAA6+C,GAnCA5vD,KAmCAwyD,YAAA5kD,EAAA5N,KAAAuvD,WAEA,SAAAj5C,IACAvF,EAAA6+C,GAtCA5vD,KAsCA60D,UAAAjnD,EAAA5N,KAAAuvD,WAGAx+C,EAAA6+C,IACA7+C,EAAA6+C,GAAAkF,SA1CA90D,MA8CA,GAAA+Q,EAAA6+C,GAAA,CACA,IAAApxD,EAAAwC,EAAA44B,cAAAp8B,EAAAwD,EAAAkD,WACA6M,EAAA6+C,GAAAmF,UAAAv2D,EAAAO,GAAAgS,EAAA6+C,GAAAoF,UAAAx2D,EAAAuB,GAAAgR,EAAA6+C,GAAAqF,UAAAz3D,IACAuT,EAAA6+C,GAAAmF,QAAAv2D,EAAAO,EACAgS,EAAA6+C,GAAAoF,QAAAx2D,EAAAuB,EACAgR,EAAA6+C,GAAAqF,QAAAz3D,EACAuT,EAAA6+C,GAAArwC,OAAA/gB,EAAAO,GAAAP,EAAAuB,GACAgR,EAAA6+C,GAAAr9B,QAAA/0B,KAOA,QAAAiZ,EAAA0f,EAAAyB,eAAoCnhB,EAAGA,IAAA/J,UAAA,CACvC4J,EAAAG,EAAAlK,UAAA,IACAxL,EAAA0V,EAAA1J,aACA/L,EAAAyV,EAAAzJ,aAYA,GAVAyJ,EAAAm5C,KACA5vD,KAAAuvD,SAAA2C,YAAA,wBAEAz7C,EAAAm5C,GApEA5vD,KAoEAk1D,UAAAz+C,EAAAzW,KAAAuvD,UACA94C,EAAAm5C,GAAA3/B,IAAA,aACAxZ,EAAAm5C,IACAn5C,EAAAm5C,GAAAkF,SAvEA90D,OA2EAyW,EAAAm5C,GAAA,CACA,IAAAuF,EAAA,IAAAp0D,EAAAhC,EAAAiC,EAAAjC,GACAq2D,EAAA,KAAAr0D,EAAAhB,EAAAiB,EAAAjB,GACAuC,EAAAvB,EAAAhC,EAAAiC,EAAAjC,EACAwD,GAAAxB,EAAAhB,IAAAiB,EAAAjB,EACA/C,EAAA2B,KAAAQ,KAAAmD,IAAAC,KACAkU,EAAAm5C,GAAA78B,MAAA/1B,GACAyZ,EAAAm5C,GAAAr9B,OAAA5zB,KAAAwF,MAAA5B,EAAAD,IACAmU,EAAAm5C,GAAArwC,OAAA41C,EAAAC,MAMA/F,EAAA/wD,UAAA42D,UAAA,SAAAnqD,EAAAiqB,GACA,IAAAqgC,EAAArgC,EAAAw6B,UACA5U,EAAA5lB,EAAA4lB,MAIA0a,EAAAlG,EAAA/sC,OAAA,SAAAovC,GAEAzxD,KAAA60B,KAJA,GAIA,EAAAwgC,EAAA,EAAAA,EAAAza,GAEA6W,EAAAn/B,MAAAsoB,KACA6W,EAAAO,YACAP,EAAAa,OAAA+C,KACA5D,EAAAc,OAAA8C,EATA,GASAA,GAEA5D,EAAAE,QAAA,QACAF,EAAAjC,UAAAx6B,EAAAw6B,UACAiC,EAAAS,YAAAl9B,EAAAk9B,YACAT,EAAAU,WAIA,OADA/C,EAAApC,MAAAsI,GAAAC,WAIAlG,EAAA/wD,UAAA8zD,WAAA,SAAAxkD,EAAAonB,GACA,IAAAqgC,EAAArgC,EAAAw6B,UACA5U,EAAA5lB,EAAA4lB,MAEAp9C,EAAAoQ,EAAAD,SACAwnD,EAAA33D,EAAA63D,EACAD,EAAA53D,EAAA63D,EACAp0D,EAAA,EAAAzD,EAAA,EAAA63D,EACA1gC,EAAA,EAAAn3B,EAAA,EAAA63D,EAEAC,EAAAlG,EAAA/sC,OAAA,SAAAovC,GAEAzxD,KAAA60B,KAAA5zB,EAAA0zB,EAAAimB,GAEA6W,EAAAn/B,MAAAsoB,KACA6W,EAAAQ,IAAAkD,EAAAC,EAAA53D,EAAA,IAAAmB,KAAAwH,IACA6uB,EAAA2/B,YACAlD,EAAAkD,UAAA3/B,EAAA2/B,UACAlD,EAAAiD,QAEAjD,EAAAc,OAAA4C,EAAAC,GACA3D,EAAAjC,UAAAx6B,EAAAw6B,UACAiC,EAAAS,YAAAl9B,EAAAk9B,YACAT,EAAAU,WAEAnF,EAAAoC,EAAApC,MAAAsI,GACA/1C,OAAA3R,EAAAqf,IAAAluB,EAAAo2D,GAAAvnD,EAAAqf,IAAAltB,EAAAq1D,GAEA,OADAhG,EAAApxD,SAAAuzD,OAAAvE,IAIAqC,EAAA/wD,UAAAs2D,SAAA,SAAAxuC,EAAA4O,GACA,IAAAqgC,EAAArgC,EAAAw6B,UACA5U,EAAA5lB,EAAA4lB,MAEAl2B,EAAA0B,EAAAmH,UACA5I,EAAAyB,EAAAoH,UAEAlrB,EAAAqiB,EAAA5lB,EAAA2lB,EAAA3lB,EACAwD,EAAAoiB,EAAA5kB,EAAA2kB,EAAA3kB,EAEA8B,EAAAlD,KAAAQ,KAAAmD,IAAAC,KAEA+yD,EAAAlG,EAAA/sC,OAAA,SAAAovC,GAEAzxD,KAAA60B,KAAAhzB,EAAA,EAAAwzD,EAAA,EAAAA,EAAAza,GAEA6W,EAAAn/B,MAAAsoB,KACA6W,EAAAO,YACAP,EAAAa,OAAA+C,KACA5D,EAAAc,OAAA8C,EAAAxzD,EAAAwzD,GAEA5D,EAAAE,QAAA,QACAF,EAAAjC,UAAAx6B,EAAAw6B,UACAiC,EAAAS,YAAAl9B,EAAAk9B,YACAT,EAAAU,WAGA3qC,EAAA7oB,KAAAa,IAAAklB,EAAA3lB,EAAA4lB,EAAA5lB,GACA0oB,EAAA9oB,KAAAa,KAAAklB,EAAA3kB,GAAA4kB,EAAA5kB,GAEAitD,EAAAoC,EAAApC,MAAAsI,GAIA,OAHAtI,EAAAz6B,QAAA5zB,KAAAwF,MAAA5B,EAAAD,IACA0qD,EAAAztC,OAAAiI,EAAA6tC,EAAA5tC,EAAA4tC,GACAjG,EAAApxD,SAAAuzD,OAAAvE,IAIAqC,EAAA/wD,UAAAk0D,YAAA,SAAA5kD,EAAAonB,GACA,IAAAqgC,EAAArgC,EAAAw6B,UACA5U,EAAA5lB,EAAA4lB,MAEAh2B,EAAAhX,EAAAoX,WAEA,GAAAJ,EAAA/iB,OAAA,CAMA,IAFA,IAAA2lB,EAAA9W,IAAA+W,EAAA/W,IACAsV,GAAAtV,IAAAuV,GAAAvV,IACAhU,EAAA,EAAiBA,EAAAkoB,EAAA/iB,SAAqBnF,EAAA,CACtC,IAAA4D,EAAAskB,EAAAloB,GACA8qB,EAAA7oB,KAAAa,IAAAgoB,EAAAlnB,EAAAvB,GACAinB,EAAArnB,KAAAc,IAAAumB,EAAA1lB,EAAAvB,GACA0oB,EAAA9oB,KAAAa,IAAAioB,GAAAnnB,EAAAP,GACAkmB,EAAAtnB,KAAAc,IAAAwmB,GAAA3lB,EAAAP,GAGA,IAAAgzB,EAAA/M,EAAAwB,EACAgH,EAAAvI,EAAAwB,EAEA6tC,EAAAlG,EAAA/sC,OAAA,SAAAovC,GAEAzxD,KAAA60B,KAAA9B,EAAA,EAAAsiC,EAAA7mC,EAAA,EAAA6mC,EAAAza,GAEA6W,EAAAn/B,MAAAsoB,KACA6W,EAAAO,YACA,QAAAt1D,EAAA,EAAmBA,EAAAkoB,EAAA/iB,SAAqBnF,EAAA,CACxC,IAAA4D,EAAAskB,EAAAloB,GACAqC,EAAAuB,EAAAvB,EAAAyoB,EAAA6tC,EACAt1D,GAAAO,EAAAP,EAAA0nB,EAAA4tC,EACA,GAAA34D,EACA+0D,EAAAa,OAAAvzD,EAAAgB,GAEA0xD,EAAAc,OAAAxzD,EAAAgB,GAGA6kB,EAAA/iB,OAAA,GACA4vD,EAAAgB,YAGAz9B,EAAA2/B,YACAlD,EAAAkD,UAAA3/B,EAAA2/B,UACAlD,EAAAiD,OACAjD,EAAAgB,aAGAhB,EAAAE,QAAA,QACAF,EAAAjC,UAAAx6B,EAAAw6B,UACAiC,EAAAS,YAAAl9B,EAAAk9B,YACAT,EAAAU,WAGAnF,EAAAoC,EAAApC,MAAAsI,GAGA,OAFAtI,EAAAztC,OAAAiI,EAAA6tC,EAAA5tC,EAAA4tC,GACAjG,EAAApxD,SAAAuzD,OAAAvE,KAIAqC,EAAA/wD,UAAAu2D,UAAA,SAAAjnD,EAAAonB,GACA,IAAAqgC,EAAArgC,EAAAw6B,UACA5U,EAAA5lB,EAAA4lB,MAEAh2B,EAAAhX,EAAAoX,WAEA,GAAAJ,EAAA/iB,OAAA,CAMA,IAFA,IAAA2lB,EAAA9W,IAAA+W,EAAA/W,IACAsV,GAAAtV,IAAAuV,GAAAvV,IACAhU,EAAA,EAAiBA,EAAAkoB,EAAA/iB,SAAqBnF,EAAA,CACtC,IAAA4D,EAAAskB,EAAAloB,GACA8qB,EAAA7oB,KAAAa,IAAAgoB,EAAAlnB,EAAAvB,GACAinB,EAAArnB,KAAAc,IAAAumB,EAAA1lB,EAAAvB,GACA0oB,EAAA9oB,KAAAa,IAAAioB,GAAAnnB,EAAAP,GACAkmB,EAAAtnB,KAAAc,IAAAwmB,GAAA3lB,EAAAP,GAGA,IAAAgzB,EAAA/M,EAAAwB,EACAgH,EAAAvI,EAAAwB,EAEA6tC,EAAAlG,EAAA/sC,OAAA,SAAAovC,GAEAzxD,KAAA60B,KAAA9B,EAAA,EAAAsiC,EAAA7mC,EAAA,EAAA6mC,EAAAza,GAEA6W,EAAAn/B,MAAAsoB,KACA6W,EAAAO,YACA,QAAAt1D,EAAA,EAAmBA,EAAAkoB,EAAA/iB,SAAqBnF,EAAA,CACxC,IAAA4D,EAAAskB,EAAAloB,GACAqC,EAAAuB,EAAAvB,EAAAyoB,EAAA6tC,EACAt1D,GAAAO,EAAAP,EAAA0nB,EAAA4tC,EACA,GAAA34D,EACA+0D,EAAAa,OAAAvzD,EAAAgB,GAEA0xD,EAAAc,OAAAxzD,EAAAgB,GAIA6kB,EAAA/iB,OAIAmzB,EAAA2/B,YACAlD,EAAAkD,UAAA3/B,EAAA2/B,UACAlD,EAAAiD,OACAjD,EAAAgB,aAGAhB,EAAAE,QAAA,QACAF,EAAAjC,UAAAx6B,EAAAw6B,UACAiC,EAAAS,YAAAl9B,EAAAk9B,YACAT,EAAAU,WAGAnF,EAAAoC,EAAApC,MAAAsI,GAGA,OAFAtI,EAAAztC,OAAAiI,EAAA6tC,EAAA5tC,EAAA4tC,GACAjG,EAAApxD,SAAAuzD,OAAAvE,sBCvrBAvwD,EAAAD,QAAiBF,EAAQ,IAEzBG,EAAAD,QAAA+6C,SAAA,GAEAj7C,EAAQ,IACRG,EAAAD,QAAA+6C,SAAAie,MAAgCl5D,EAAQ,IACxCA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRG,EAAAD,QAAAuzD,MAAuBzzD,EAAQ,IAC/BG,EAAAD,QAAAmC,KAAsBrC,EAAQ,IAC9BG,EAAAD,QAAAi5D,QAAyBn5D,EAAQ,IACjCG,EAAAD,QAAAi4D,QAAyBn4D,EAAQ,IAEjCA,EAAQ,qBCfRG,EAAAD,QAAiBF,EAAQ,IACzBG,EAAAD,QAAA2yB,OAAwB7yB,EAAQ,IAChCG,EAAAD,QAAAuwD,QAAyBzwD,EAAQ,IACjCA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IAERA,EAAQ,IACRA,EAAQ,mBCTRG,EAAAD,QAAA,WACA,IAAA8pB,EAAA,EACA,SAAAovC,EAAAv0C,EAAAhjB,GAEA,OADAmoB,GAAAnoB,EAAA,iBAAAA,MAAA,EAAAA,EAAA,EACA,WACAgjB,KAAAE,MAAArhB,KAAAshB,WACAnjB,EAAA,IACAA,IAAAmoB,IAKA,WACA,OAAAA,EACA,KAAA/C,EAAA1hB,QACAw9B,WAAA9b,EAAAE,QAAA,GARA5mB,KAIA,IAAA0mB,EAAA,GAeA,OAPAmyC,EAAAnyC,KAAA,SAAApC,GACA,IAAAmF,EACA+Y,WAAAle,EAAA,GAEAoC,EAAA9B,KAAAN,IAGAu0C,oBCvBA,IAAAz0C,EAAY3kB,EAAQ,IACpBywD,EAAczwD,EAAQ,IAEtB2T,EAAa3T,EAAQ,IACrB0B,EAAa1B,EAAQ,IACrBykB,EAASzkB,EAAQ,IAEjBulB,EAAavlB,EAAQ,IAGrBq5D,EAAA,GAEAC,EAAA,GA6CA,SAAAC,EAAA3qD,GACA2qD,EAAAhxC,OAAAhoB,KAAAmD,MAEA,IAAAuhB,EAAAvhB,KAEA81D,EAAA5qD,EAAA,UACA4qD,EAAA5qD,EAAA,WACA4qD,EAAA5qD,EAAA,WACA4qD,EAAA5qD,EAAA,WAEA,IAAA8jD,EAAA9jD,EAAA8jD,KAAA9jD,EAAA+1B,OACA80B,EAAA7qD,EAAA6qD,KAAA7qD,EAAA0vC,OAAA,EACAob,EAAA9qD,EAAA8qD,MAAA,EACAC,EAAA/qD,EAAA+qD,SACAC,EAAAhrD,EAAAgrD,QACAC,EAAAjrD,EAAAirD,SAAAjrD,EAAAkrD,QAEA,SAAAC,EAAAnrD,GACA,IAAAA,GAAA6V,EAAAI,GAAAjW,EAAA+yB,MACA,OAAA/yB,EAGAA,EAAA+E,EAAA,GAAmB/E,GAEnB6V,EAAAI,GAAA6tC,KACA9jD,EAAA8jD,EAAA9jD,IAGA,GAAA6qD,IACA7qD,EAAAnM,GAAAg3D,EAAA7qD,EAAAnL,GAAAg2D,EACA7qD,EAAA6nB,OAAAgjC,EAAA7qD,EAAAsjB,QAAAunC,EACA7qD,EAAAorD,KAAAP,EAAA7qD,EAAAqrD,QAAAR,EACA7qD,EAAAopD,MAAAyB,EAAA7qD,EAAAmpD,OAAA0B,GAGA,GAAAC,IACA9qD,EAAAnM,GAAAi3D,EAAA9qD,EAAAnL,GAAAi2D,EACA9qD,EAAA6nB,OAAA,EAAAijC,EAAA9qD,EAAAsjB,QAAA,EAAAwnC,EACA9qD,EAAAorD,KAAAN,EAAA9qD,EAAAqrD,QAAAP,EACA9qD,EAAAopD,MAAA0B,EAAA9qD,EAAAmpD,OAAA2B,GAGA,IAAAV,EAAA/zC,EAAA0rC,OAIA,OAHAqI,EAAAgB,IAAAprD,EAAAorD,IAAAhB,EAAAiB,OAAArrD,EAAAqrD,OACAjB,EAAAhB,KAAAppD,EAAAopD,KAAAgB,EAAAjB,MAAAnpD,EAAAmpD,MACAiB,EAAAzyC,IAAA3X,EAAAnM,EAAAmM,EAAAnL,EAAAmL,EAAA6nB,MAAA7nB,EAAAsjB,QACA8mC,EAGA,SAAAlmB,EAAAnK,GACA,GAAAgxB,EAAA,CACA,GAAAl1C,EAAAI,GAAA80C,GACA,OAAAA,EAAAhxB,GACO,GAAAlkB,EAAAo2B,KAAA8e,GACP,OAAAA,EAAAhxB,GAGA,GAAAkxB,EAAA,CAEA,IADA,IAAAnmD,EAAA,KAAA7R,EAAA,EACAzB,EAAA,EAAqBA,EAAAy5D,EAAAt0D,OAAoBnF,IACzCmlB,EAAA20C,WAAAL,EAAAz5D,GAAAO,KAAAgoC,KACA,IAAA9mC,EACA6R,EAAAmmD,EAAAz5D,GACW,IAAAyB,EACX6R,EAAA,CAAAA,EAAAmmD,EAAAz5D,IAEAsT,EAAAyR,KAAA00C,EAAAz5D,IAEAyB,KAQA,OALA,IAAAA,GAAA4iB,EAAAI,GAAA+0C,KACAlmD,EAAA,SAAAymD,GACA,OAAAP,EAAAjxB,GAAAwxB,GAAA,OAGAzmD,GAIAhQ,KAAA02D,OAAA,SAAAzxB,GACA,IAAAA,EAEA,WAAA0xB,EAAA32D,KAAAitD,QAEA,IAAA7wB,EAAAgT,EAAAnK,GACA,OAAA7I,EACA,IAAAu6B,EAAAv6B,EAAAgT,EAAAinB,QADA,GA9HAp1C,EAAAM,MAAA,SAAArW,GACA,IAAAqW,EAAAR,EAAAI,GAAAjW,EAAA+yB,MAAA/yB,EAAA,IAAA2qD,EAAA3qD,GACAA,EAAAjO,OACA04D,EAAAzqD,EAAAjO,MAAAskB,GAEAq0C,EAAAn0C,KAAAF,GAEAu0C,EAAA5qD,EAAA,aACA4qD,EAAA5qD,EAAA,cAEA,IAAAwX,EAAAxX,EAAA0rD,UACAhc,EAAA1vC,EAAA2rD,YAAA,EAuBA,OAtBA91C,EAAAc,OAAA3W,EAAA8hD,OACAtqC,EAAAxX,EAAA8hD,MACGjsC,EAAAo2B,KAAAjsC,EAAA8hD,SACHtqC,EAAAxX,EAAA8hD,MAAAnqC,KAAA3X,EAAA8hD,MAAAtqC,IACAk4B,EAAA1vC,EAAA8hD,MAAApS,UAEAl4B,GAAAzB,EAAAuB,QAAA,SAAA+qB,GACA7qB,EAAAzB,EAAA0B,QAAAD,GAEAzB,EAAAW,OAAA,eAEAk1C,CAAAp0C,EAAA,SAAAsqC,GAEAzrC,EAAAsB,IAAAmqC,EAAApS,GACArN,KAEK,SAAA9pC,GAEL8pC,QAIAhsB,GAGAs0C,EAAAhxC,OAAAkoC,EACA8I,EAAAv3D,UAAAN,EAAA63D,EAAAhxC,OAAAvmB,WA+FA,IAAAy4D,EAAA,IAAAhK,EACAgK,EAAAh4D,EAAAg4D,EAAAh3D,EAAAg3D,EAAAhkC,MAAAgkC,EAAAvoC,OAAA,EACAuoC,EAAA9J,KAAA8J,EAAAl0C,IAAAk0C,EAAApJ,KAAA,WACA,OAAA3tD,MAEA+2D,EAAA94B,KAAA,aAGA,IAAA+4B,EAAA,IAAAL,EAAAI,GAEA,SAAAJ,EAAA3mD,EAAAo/B,EAAAinB,GACA,SAAAY,EAAAjnD,EAAAymD,GACA,OAAAzmD,EAGK+Q,EAAAI,GAAAnR,EAAAiuB,MACLjuB,EAEK+Q,EAAAo2B,KAAAnnC,IAAA+Q,EAAA81B,OAAA7mC,EAAA+iB,QACLhS,EAAA81B,OAAA7mC,EAAAwe,SAAAzN,EAAAI,GAAAk1C,GACAA,EAAArmD,GAEK+Q,EAAAo2B,KAAAnnC,IAAA+Q,EAAAk1B,QAAAwgB,GACLQ,EAAAjnD,EAAAymD,IAEK11C,EAAAI,GAAAnR,GACLinD,EAAAjnD,EAAAymD,IAEK11C,EAAA01B,MAAAzmC,GACLinD,EAAAjnD,EAAA,IAEK+Q,EAAAc,OAAA7R,IAAA+Q,EAAAI,GAAAiuB,GACL6nB,EAAA7nB,EAAAp/B,SADK,EAlBL+mD,EAuBA/2D,KAAAk3D,IAAA,SAAAT,GACA,OAAAQ,EAAAjnD,EAAAymD,IAGAz2D,KAAAy2C,MAAA,SAAArxC,GACA,IAAAqxC,EAAA11B,EAAA01B,MAAArxC,KAAA,GACA,GAAA2b,EAAA01B,MAAAzmC,GACA,QAAAtT,EAAA,EAAqBA,EAAAsT,EAAAnO,OAAmBnF,IACxC+5C,EAAA/5C,GAAAu6D,EAAAjnD,EAAAtT,SAGA+5C,EAAA,GAAAwgB,EAAAjnD,GAEA,OAAAymC,GAgCA,SAAAqf,EAAA3e,EAAAl6C,EAAAk6D,GACAl6D,KAAAk6C,GACAwX,QAAAjrD,IAAAyzD,IAAAC,QAAA,QAAAn6D,GAAA,IAAAA,EACA,2CA/BAgkB,EAAAq0C,QAAA,SAAArwB,GACA,IAAAlkB,EAAAc,OAAAojB,GACA,WAAA0xB,EAAA1xB,GAGA,IAAA1jB,EAAA7kB,EAAAsT,EAAA,KAWA,KATAtT,EAAAuoC,EAAAhG,QAAA,SAAAgG,EAAApjC,OAAAnF,EAAA,IAEAsT,GADAuR,EAAAo0C,EAAA1wB,EAAAoyB,MAAA,EAAA36D,MACA6kB,EAAAm1C,OAAAzxB,EAAAoyB,MAAA36D,EAAA,MAGAsT,IAAAuR,EAAAo0C,EAAA1wB,MACAj1B,EAAAuR,EAAAm1C,UAGAh6D,EAAA,GAAasT,GAAAtT,EAAAk5D,EAAA/zD,OAAoCnF,IACjDsT,EAAA4lD,EAAAl5D,GAAAg6D,OAAAzxB,GAQA,OALAj1B,IACA2+C,QAAA2I,MAAA,sBAAAryB,GACAj1B,EAAAgnD,GAGAhnD,GASAvT,EAAAD,QAAAq5D,iBChPAp5D,EAAAD,QAAAg6D,WAAA,SAAAe,EAAA51D,GACA,uBAAA41D,GAAA,iBAAA51D,GACA41D,EAAAhzC,UAAA,EAAA5iB,EAAAE,SAAAF,oBCFA,IAAAsf,EAAY3kB,EAAQ,IACpBykB,EAASzkB,EAAQ,IAEjB8yB,EAAA,EAoMA,SAAAmiC,EAAA3pB,EAAA1J,GACAs5B,EAAAt5B,GACAs5B,EAAA5vB,GAEA1J,EAAA2xB,SAEAjoB,EAAA6vB,QACA7vB,EAAA6vB,MAAAr5B,MAAAF,EACAA,EAAAw5B,MAAA9vB,EAAA6vB,OAGAv5B,EAAA1O,QAAAoY,EACAA,EAAA6vB,MAAAv5B,EAEA0J,EAAAzJ,SACAyJ,EAAAzJ,OAAAD,GAGAA,EAAA1O,QAAAqP,MAAAX,GAAA,GAEAA,EAAAy5B,aAAAvoC,EACAwY,EAAAgwB,eAAAxoC,EACAwY,EAAA/U,QAGA,SAAAqgC,EAAAtrB,EAAA1J,GACAs5B,EAAAt5B,GACAs5B,EAAA5vB,GAEA1J,EAAA2xB,SAEAjoB,EAAAzJ,SACAyJ,EAAAzJ,OAAAu5B,MAAAx5B,EACAA,EAAAE,MAAAwJ,EAAAzJ,QAGAD,EAAA1O,QAAAoY,EACAA,EAAAzJ,OAAAD,EAEA0J,EAAA6vB,QACA7vB,EAAA6vB,MAAAv5B,GAGAA,EAAA1O,QAAAqP,MAAAX,GAAA,GAEAA,EAAAy5B,aAAAvoC,EACAwY,EAAAgwB,eAAAxoC,EACAwY,EAAA/U,QAGA,SAAAglC,EAAAl2B,EAAA12B,GACAusD,EAAA71B,GACA61B,EAAAvsD,GAEA02B,EAAAkuB,SAEA,IAAAjoB,EAAA38B,EAAAukB,QACAxkB,EAAAC,EAAAysD,MAEAzsD,EAAAysD,MAAA/1B,EACA32B,MAAAozB,MAAAuD,IAAAiG,MAAAzJ,OAAAwD,GAEAA,EAAAnS,QAAAoY,EACAjG,EAAA+1B,MAAA1sD,EACA22B,EAAAvD,MAAAnzB,EAEA02B,EAAAnS,QAAAqP,MAAA8C,GAAA,GAEAA,EAAAg2B,aAAAvoC,EACAuS,EAAA9O,QAGA,SAAAilC,EAAAn2B,EAAA32B,GACAwsD,EAAA71B,GACA61B,EAAAxsD,GAEA22B,EAAAkuB,SAEA,IAAAjoB,EAAA58B,EAAAwkB,QACAvkB,EAAAD,EAAAozB,MAEApzB,EAAAozB,MAAAuD,EACA12B,MAAAysD,MAAA/1B,IAAAiG,MAAA6vB,MAAA91B,GAEAA,EAAAnS,QAAAoY,EACAjG,EAAA+1B,MAAA1sD,EACA22B,EAAAvD,MAAAnzB,EAEA02B,EAAAnS,QAAAqP,MAAA8C,GAAA,GAEAA,EAAAg2B,aAAAvoC,EACAuS,EAAA9O,QAkHA,SAAA2kC,EAAAt3D,GACA,GAAAA,gBAAA+gB,EACA,OAAA/gB,EAEA,sBAAAA,EAjZA+gB,EAAA3iB,UAAAy5D,OAAA,GAEA92C,EAAA3iB,UAAAy/B,UAAA,EAEA9c,EAAA3iB,UAAAkxB,QAAA,KACAvO,EAAA3iB,UAAA8/B,MAAA,KACAnd,EAAA3iB,UAAAo5D,MAAA,KAEAz2C,EAAA3iB,UAAA6/B,OAAA,KACAld,EAAA3iB,UAAAm5D,MAAA,KAEAx2C,EAAA3iB,UAAA05D,OAAA,KACA/2C,EAAA3iB,UAAA25D,OAAA,KAEAh3C,EAAA3iB,UAAAiC,SAAA,WACA,UAAAP,KAAA+3D,OAAA,KAMA92C,EAAA3iB,UAAA4a,GAAA,SAAAA,GACA,OAAAlZ,KAAAsvD,MAAAp2C,IAGA+H,EAAA3iB,UAAAgxD,MAAA,SAAAA,GACA,gBAAAA,EACAtvD,KAAA+3D,QAEA/3D,KAAA+3D,OAAAzI,EACAtvD,OAGAihB,EAAA3iB,UAAA+0D,KAAA,SAAAp2D,EAAAU,GACA,gBAAAA,EACA,OAAAqC,KAAAg4D,OAAAh4D,KAAAg4D,OAAA/6D,QAAA85C,IAEA,OAAA/2C,KAAAg4D,OAAAh4D,KAAAg4D,OAAAh4D,KAAAg4D,OAAA,IAAwD/6D,GAAAU,EACxDqC,OAGAihB,EAAA3iB,UAAA45D,QAAA,SAAAA,GACA,gBAAAA,EACAl4D,KAAA+9B,UAEA/9B,KAAA+9B,SAAAm6B,EACAl4D,KAAAwvB,UAAAxvB,KAAAwvB,QAAAooC,eAAAxoC,GACApvB,KAAA4yB,UAAAxD,EACApvB,KAAA6yB,QACA7yB,OAGAihB,EAAA3iB,UAAA65D,KAAA,WACA,OAAAn4D,KAAAk4D,SAAA,IAGAj3C,EAAA3iB,UAAA85D,KAAA,WACA,OAAAp4D,KAAAk4D,SAAA,IAGAj3C,EAAA3iB,UAAAspC,OAAA,WACA,OAAA5nC,KAAAwvB,SAGAvO,EAAA3iB,UAAA2M,KAAA,SAAAitD,GAEA,IADA,IAAAjtD,EAAAjL,KAAAo+B,MACAnzB,GAAAitD,IAAAjtD,EAAA8yB,UACA9yB,IAAAmzB,MAEA,OAAAnzB,GAGAgW,EAAA3iB,UAAA0M,KAAA,SAAAktD,GAEA,IADA,IAAAltD,EAAAhL,KAAA03D,MACA1sD,GAAAktD,IAAAltD,EAAA+yB,UACA/yB,IAAA0sD,MAEA,OAAA1sD,GAGAiW,EAAA3iB,UAAA+5D,MAAA,SAAAH,GAEA,IADA,IAAAjtD,EAAAjL,KAAAm+B,OACAlzB,GAAAitD,IAAAjtD,EAAA8yB,UACA9yB,IAAAmzB,MAEA,OAAAnzB,GAGAgW,EAAA3iB,UAAAogC,KAAA,SAAAw5B,GAEA,IADA,IAAAltD,EAAAhL,KAAAy3D,MACAzsD,GAAAktD,IAAAltD,EAAA+yB,UACA/yB,IAAA0sD,MAEA,OAAA1sD,GAGAiW,EAAA3iB,UAAAg6D,MAAA,SAAAC,EAAA1rD,GACA,IAAAiiD,EAAAyJ,EAAAzJ,QACAoJ,EAAAK,EAAAL,QACA,IAAAK,EAAAj2C,QAAAi2C,EAAAj2C,MAAAtiB,KAAA6M,GAAA,CAIA,IADA,IAAAqxB,EAAAjzB,EAAA6jD,EAAA9uD,KAAA0+B,KAAAw5B,GAAAl4D,KAAAq4D,MAAAH,GACAh6B,EAAAjzB,GAEA,GADAA,EAAA6jD,EAAA5wB,EAAAlzB,KAAAktD,GAAAh6B,EAAAjzB,KAAAitD,GACAh6B,EAAAo6B,MAAAC,EAAA1rD,GACA,SAGA,OAAA0rD,EAAAC,KAAAD,EAAAC,IAAAx4D,KAAA6M,KAGAoU,EAAA3iB,UAAAizD,OAAA,SAAArzB,EAAAu6B,GACA,GAAA13C,EAAA01B,MAAAvY,GACA,QAAAxhC,EAAA,EAAmBA,EAAAwhC,EAAAr8B,OAAkBnF,IACrC60D,EAAAvxD,KAAAk+B,EAAAxhC,SAEA,YAAA+7D,EACA,IAAA/7D,EAAA,EAAmBA,EAAA4kB,UAAAzf,OAAsBnF,IACzC60D,EAAAvxD,KAAAshB,UAAA5kB,cAEA,IAAAwhC,GACAqzB,EAAAvxD,KAAAk+B,GAEA,OAAAl+B,MAGAihB,EAAA3iB,UAAA40D,QAAA,SAAAh1B,EAAAu6B,GACA,GAAA13C,EAAA01B,MAAAvY,GACA,QAAAxhC,EAAAwhC,EAAAr8B,OAAA,EAAkCnF,GAAA,EAAQA,IAC1Cw2D,EAAAlzD,KAAAk+B,EAAAxhC,SAEA,YAAA+7D,EACA,IAAA/7D,EAAA4kB,UAAAzf,OAAA,EAAsCnF,GAAA,EAAQA,IAC9Cw2D,EAAAlzD,KAAAshB,UAAA5kB,cAEA,IAAAwhC,GACAg1B,EAAAlzD,KAAAk+B,GAEA,OAAAl+B,MAGAihB,EAAA3iB,UAAAw2D,SAAA,SAAAltB,GAEA,OADA2pB,EAAA3pB,EAAA5nC,MACAA,MAGAihB,EAAA3iB,UAAAo6D,UAAA,SAAA9wB,GAEA,OADAsrB,EAAAtrB,EAAA5nC,MACAA,MAGAihB,EAAA3iB,UAAAq6D,WAAA,SAAAtvB,EAAAovB,GACA,GAAA13C,EAAA01B,MAAApN,GACA,QAAA3sC,EAAA,EAAmBA,EAAA2sC,EAAAxnC,OAAoBnF,IACvCo7D,EAAAzuB,EAAA3sC,GAAAsD,WAEA,YAAAy4D,EACA,IAAA/7D,EAAA,EAAmBA,EAAA4kB,UAAAzf,OAAsBnF,IACzCo7D,EAAAx2C,UAAA5kB,GAAAsD,gBAEA,IAAAqpC,GACAyuB,EAAAzuB,EAAArpC,MAEA,OAAAA,MAGAihB,EAAA3iB,UAAAs6D,WAAA,SAAAvvB,EAAAovB,GACA,GAAA13C,EAAA01B,MAAApN,GACA,QAAA3sC,EAAA2sC,EAAAxnC,OAAA,EAAoCnF,GAAA,EAAQA,IAC5Cm7D,EAAAxuB,EAAA3sC,GAAAsD,WAEA,YAAAy4D,EACA,IAAA/7D,EAAA4kB,UAAAzf,OAAA,EAAsCnF,GAAA,EAAQA,IAC9Cm7D,EAAAv2C,UAAA5kB,GAAAsD,gBAEA,IAAAqpC,GACAwuB,EAAAxuB,EAAArpC,MAEA,OAAAA,MAGAihB,EAAA3iB,UAAAw5D,YAAA,SAAA9sD,GAEA,OADA8sD,EAAA93D,KAAAgL,GACAhL,MAGAihB,EAAA3iB,UAAAu5D,aAAA,SAAA5sD,GAEA,OADA4sD,EAAA73D,KAAAiL,GACAjL,MAiGAihB,EAAA3iB,UAAAuxD,OAAA,SAAA3xB,EAAAu6B,GACA,YAAAv6B,EAAA,CACA,GAAAnd,EAAA01B,MAAAvY,GACA,QAAAxhC,EAAA,EAAqBA,EAAAwhC,EAAAr8B,OAAkBnF,IACvC86D,EAAAt5B,EAAAxhC,IAAAmzD,cAEK,YAAA4I,EACL,IAAA/7D,EAAA,EAAqBA,EAAA4kB,UAAAzf,OAAsBnF,IAC3C86D,EAAAl2C,UAAA5kB,IAAAmzD,cAGA2H,EAAAt5B,GAAA2xB,SAEA,OAAA7vD,KA4BA,OAzBAA,KAAA03D,QACA13D,KAAA03D,MAAAt5B,MAAAp+B,KAAAo+B,OAEAp+B,KAAAo+B,QACAp+B,KAAAo+B,MAAAs5B,MAAA13D,KAAA03D,OAGA13D,KAAAwvB,UACAxvB,KAAAwvB,QAAA2O,SAAAn+B,OACAA,KAAAwvB,QAAA2O,OAAAn+B,KAAAo+B,OAEAp+B,KAAAwvB,QAAAioC,QAAAz3D,OACAA,KAAAwvB,QAAAioC,MAAAz3D,KAAA03D,OAGA13D,KAAAwvB,QAAAqP,MAAA7+B,MAAA,GAEAA,KAAAwvB,QAAAooC,eAAAxoC,EACApvB,KAAAwvB,QAAAqD,SAGA7yB,KAAA03D,MAAA13D,KAAAo+B,MAAAp+B,KAAAwvB,QAAA,KACAxvB,KAAA23D,aAAAvoC,EAGApvB,MAGAihB,EAAA3iB,UAAA43C,MAAA,WAEA,IADA,IAAAhY,EAAAjzB,EAAAjL,KAAAm+B,OACAD,EAAAjzB,GACAA,EAAAizB,EAAAE,MACAF,EAAAw5B,MAAAx5B,EAAAE,MAAAF,EAAA1O,QAAA,KAEAxvB,KAAA6+B,MAAAX,GAAA,GAOA,OAJAl+B,KAAAm+B,OAAAn+B,KAAAy3D,MAAA,KAEAz3D,KAAA43D,eAAAxoC,EACApvB,KAAA6yB,QACA7yB,MAGAihB,EAAA3iB,UAAAu0B,MAAA,WAGA,OAFA7yB,KAAA64D,YAAAzpC,EACApvB,KAAAwvB,SAAAxvB,KAAAwvB,QAAAqD,QACA7yB,MAMAihB,EAAA3iB,UAAAugC,MAAA,SAAA3+B,EAAAjD,GACA,YAAAA,EACA,cAAA+C,KAAAi4D,QAAAj4D,KAAAi4D,OAAA/3D,IAAA,EAiBA,GAfA,iBAAAA,IACAjD,GACA+C,KAAAi4D,OAAAj4D,KAAAi4D,QAAA,IACAj4D,KAAAi4D,OAAA/3D,IAAAF,KAAAwvB,SACAxvB,KAAAwvB,QAAAqP,MAAA3+B,GAAA,GAEAF,KAAAi4D,OAAA/3D,IAAAF,KAAAi4D,OAAA/3D,IAAA,MAEKF,KAAAi4D,QAAAj4D,KAAAi4D,OAAA/3D,GAAA,IACL,GAAAF,KAAAi4D,OAAA/3D,IAAAF,KAAAwvB,SACAxvB,KAAAwvB,QAAAqP,MAAA3+B,GAAA,GAEAF,KAAAi4D,OAAA/3D,GAAAF,KAAAi4D,OAAA/3D,GAAA,IAGA,iBAAAA,GACAA,EAAA+3D,OACA,QAAA3hD,KAAApW,EAAA+3D,OACA/3D,EAAA+3D,OAAA3hD,GAAA,GACAtW,KAAA6+B,MAAAvoB,EAAArZ,GAKA,OAAA+C,MAMAihB,EAAA3iB,UAAAw6D,QAAA,SAAAC,GACA,QAAA/4D,KAAAqzD,KAAA,QAGA0F,EAAAh6D,GAAA,GAAAg6D,EAAAh6D,GAAAiB,KAAA4vB,KAAAQ,QAAA2oC,EAAAh5D,GAAA,GACAg5D,EAAAh5D,GAAAC,KAAA4vB,KAAAS,SAUA5zB,EAAAD,QAAAykB,mBC3ZA3kB,EAAQ,GAARA,CAAwBA,EAAQ,IAAQgC,UAAA,SAAA4B,EAAAjD,EAAAkqC,GACxCjnC,EAAA2+B,MAAA5hC,EAAAkqC,oBCDA1qC,EAAAD,QAAA,SAAA8B,EAAAkgB,GAEAlgB,EAAA4oC,WAAA,KAEA5oC,EAAA6oC,GAAA7oC,EAAA06D,OAAA,SAAAC,EAAAzgD,GACA,IAAAygD,MAAAp3D,QAAA,mBAAA2W,EACA,OAAAxY,KAMA,GAJA,OAAAA,KAAAknC,aACAlnC,KAAAknC,WAAA,IAGA+xB,GADA,iBAAAA,GAAA,mBAAAA,EAAAC,KACAD,EAAAC,KAAA,KAAAD,GAAA/0C,MAAA,QACA,QAAAxnB,EAAA,EAAqBA,EAAAu8D,EAAAp3D,OAAkBnF,IAAA,CACvC,IAAA4Z,EAAA2iD,EAAAv8D,GACAsD,KAAAknC,WAAA5wB,GAAAtW,KAAAknC,WAAA5wB,IAAA,GACAtW,KAAAknC,WAAA5wB,GAAAmL,KAAAjJ,GACA,mBAAAgG,GACAA,EAAAxe,KAAAsW,GAAA,GAIA,OAAAtW,MAGA1B,EAAA8oC,IAAA,SAAA6xB,EAAAzgD,GACA,IAAAygD,MAAAp3D,QAAA,mBAAA2W,EACA,OAAAxY,KAEA,UAAAA,KAAAknC,WACA,OAAAlnC,KAGA,GAAAi5D,GADA,iBAAAA,GAAA,mBAAAA,EAAAC,KACAD,EAAAC,KAAA,KAAAD,GAAA/0C,MAAA,QACA,QAAAxnB,EAAA,EAAqBA,EAAAu8D,EAAAp3D,OAAkBnF,IAAA,CACvC,IAAA4oB,EAAAhP,EAAA2iD,EAAAv8D,GAAA03B,EAAAp0B,KAAAknC,WAAA5wB,GACA8d,IAAA9O,EAAA8O,EAAA6K,QAAAzmB,KAAA,IACA4b,EAAA8K,OAAA5Z,EAAA,GACA8O,EAAAvyB,eACA7B,KAAAknC,WAAA5wB,GAEA,mBAAAkI,GACAA,EAAAxe,KAAAsW,GAAA,IAKA,OAAAtW,MAGA1B,EAAA+oC,UAAA,SAAA/wB,GACA,OAAAtW,KAAAknC,YAAAlnC,KAAAknC,WAAA5wB,IAGAhY,EAAAg+B,QAAA,SAAAr/B,EAAAumB,GACA,IAAA6jB,EAAArnC,KAAAqnC,UAAApqC,GACA,IAAAoqC,MAAAxlC,OACA,SAEA,QAAAlF,EAAA,EAAmBA,EAAA0qC,EAAAxlC,OAAsBlF,IACzC0qC,EAAA1qC,GAAA0kB,MAAArhB,KAAAwjB,GAEA,OAAA6jB,EAAAxlC,QAGAvD,EAAA66D,QAAA,SAAAl8D,EAAAumB,GAEA,OADAxjB,KAAAs8B,QAAAr/B,EAAAumB,GACAxjB,wBCnEA,IAAAihB,EAAY3kB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAER,IAAAwkB,EAAYxkB,EAAQ,IACpB0B,EAAa1B,EAAQ,IACrB2T,EAAa3T,EAAQ,IASrB,SAAA88D,EAAAC,EAAAx7B,GACAu7B,EAAAv0C,OAAAhoB,KAAAmD,MACAA,KAAAsvD,MAAA,QAEA,IAAAc,GAAA,EAEAzuB,EAAA3hC,KACAs5D,EAAA,EACAx8B,EAAA,SAAA3Z,GACA,QAAAitC,EAAA,CAIAtvC,EAAA8d,KAAA9d,EAAAub,KAAAvb,EAAAmd,KAAA,EAEA,IAAAS,EAAA46B,GAAAn2C,EACAsb,EAAAtb,EAAAub,EACA46B,EAAAn2C,EAEA,IAAAwb,EAAAgD,EAAAnD,MAAAC,EAAAtb,EAAAub,GACAiD,EAAA43B,WAAA53B,EAAAk3B,WACAl3B,EAAA43B,UAAA53B,EAAAk3B,UACAh7B,EAAA8D,GACA03B,EAAAv8B,IACK6B,EACL06B,EAAAv8B,GAEAszB,GAAA,EAGAtvC,EAAA04C,IAAA/6B,EAAA,IAAAA,EAAA,IAGAz+B,KAAAsiB,MAAA,WACA,OAAAtiB,KAAA2jB,UAGA3jB,KAAA2jB,OAAA,WAMA,OALAysC,IACApwD,KAAAs8B,QAAA,UACA8zB,GAAA,EACAiJ,EAAAv8B,IAEA98B,MAGAA,KAAA0jB,MAAA,WAKA,OAJA0sC,GACApwD,KAAAs8B,QAAA,SAEA8zB,GAAA,EACApwD,MAGAA,KAAAy5D,WAAAz5D,KAAA6yB,MACA7yB,KAAA6yB,MAAA,WAEA,OADA7yB,KAAA2jB,SACA3jB,KAAAy5D,cAhEAL,EAAAv0C,OAAA5D,EACAm4C,EAAA96D,UAAAN,EAAAo7D,EAAAv0C,OAAAvmB,WAEA2iB,EAAAkrB,KAAA,SAAAktB,EAAAx7B,GACA,WAAAu7B,EAAAC,EAAAx7B,IAgEAu7B,EAAA96D,UAAAoyD,WAAA,SAAAqB,GAEA,OAAA/xD,MAGAo5D,EAAA96D,UAAAo7D,SAAA,SAAA3mC,EAAAvE,EAAAosB,GACA,YAAA7nB,EACA,OAAA9iB,EAAA,GAAoBjQ,KAAA25D,WAEpB35D,KAAA25D,UAAA,CACA5mC,QACAvE,SACAosB,SAAA,GAEA56C,KAAAizD,UACA,IAAApmD,EAAAoD,EAAA,GAAsBjQ,KAAA25D,WAStB,OARA35D,KAAAs4D,MAAA,CACAh2C,MAAA,SAAA+Z,GACA,IAAAA,EAAAwC,MAAA,YACA,SAEAxC,EAAAC,QAAA,YAAAzvB,OAGA7M,MAIAo5D,EAAA96D,UAAA20D,QAAA,SAAAlgC,EAAAvE,EAAA3wB,GACA,iBAAAk1B,GAAA,iBAAAvE,IACAxuB,KAAA45D,SAAA,CACA7mC,QACAvE,SACA3wB,KAAA,6BAAA+kB,KAAA/kB,KAAA,WAIA,IAAAg8D,EAAA75D,KAAA45D,SACA/kC,EAAA70B,KAAA25D,UAcA,OAbA9kC,GAAAglC,GACA75D,KAAAiwB,IAAA,CACA8C,MAAA8mC,EAAA9mC,MACAvE,OAAAqrC,EAAArrC,SAEAxuB,KAAAq0B,QAAAQ,EAAA9B,MAAA8B,EAAArG,OAAAqrC,EAAAh8D,OACGg3B,GACH70B,KAAAiwB,IAAA,CACA8C,MAAA8B,EAAA9B,MACAvE,OAAAqG,EAAArG,SAIAxuB,uBChIA,IAAAihB,EAAY3kB,EAAQ,IACpBywD,EAAczwD,EAAQ,IAEtB2kB,EAAAoB,OAAA,SAAA/L,EAAAwjD,EAAAt7C,GACA,iBAAAlI,EACA,iBAAAwjD,IAEA,mBAAAA,IACAt7C,EAAAs7C,GAEAA,EAAA,KAGA,mBAAAxjD,IACAkI,EAAAlI,GAEAwjD,EAAA,GACAxjD,EAAA,MAGA,IAAA+L,EAAAU,SAAAC,cAAA,UACA8a,EAAAzb,EAAA03C,WAAAzjD,EAAAwjD,GACAxE,EAAA,IAAAvI,EAAA1qC,GA2BA,OAzBAizC,EAAAx3B,QAAA,WACA,OAAAA,GAGAw3B,EAAAzgC,KAAA,SAAA9B,EAAAvE,EAAAosB,GAKA,OAJAA,KAAA,EACAv4B,EAAA0Q,QAAA6nB,EACAv4B,EAAAmM,SAAAosB,EACA56C,KAAA6iB,IAAAR,EAAAu4B,GACA56C,MAGAs1D,EAAAjzC,OAAA,SAAAlB,GAMA,MALA,mBAAAA,EACAA,EAAAtkB,KAAAmD,KAAA89B,QACK,IAAA3c,GAAA,mBAAA3C,GACLA,EAAA3hB,KAAAmD,KAAA89B,GAEA99B,MAGA,mBAAAwe,GACAA,EAAA3hB,KAAAy4D,EAAAx3B,GAGAw3B,oBCjDA,IAAAr0C,EAAY3kB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAER,IAAA09D,EAAa19D,EAAQ,IACrB0B,EAAa1B,EAAQ,IAarB,SAAAk5D,IACAA,EAAA3wC,OAAAhoB,KAAAmD,MACAA,KAAAsvD,MAAA,SACAtvD,KAAA49B,UAAA,GACA59B,KAAAktD,OAAA,KAfAzwD,EAAAD,QAAAg5D,EAEAv0C,EAAA+rC,MAAA,SAAAA,GACA,IAAAiN,EAAA,IAAAzE,EAEA,OADAxI,GAAAiN,EAAAjN,SACAiN,GAGAzE,EAAA3wC,OAAA5D,EACAu0C,EAAAl3D,UAAAN,EAAAw3D,EAAA3wC,OAAAvmB,WAYAk3D,EAAAl3D,UAAA47D,SAAA,SAAAn5D,EAAAC,EAAAjE,GACA,OAAAiD,KAAAgtD,MAAAjsD,EAAAC,EAAAjE,IAGAy4D,EAAAl3D,UAAA0uD,MAAA,SAAAA,GAMA,OALAhtD,KAAAktD,OAAAjsC,EAAAq0C,QAAAtI,GAAAkK,MACAl3D,KAAAiwB,IAAA,QAAAjwB,KAAAktD,OAAAltD,KAAAktD,OAAAn6B,MAAA,GACA/yB,KAAAiwB,IAAA,SAAAjwB,KAAAktD,OAAAltD,KAAAktD,OAAA1+B,OAAA,GACAxuB,KAAA49B,UAAA,GAAA59B,KAAAktD,OAAAD,OACAjtD,KAAA49B,UAAA/7B,OAAA,EACA7B,MAGAw1D,EAAAl3D,UAAA67D,KAAA,SAAAC,GAEA,OADAp6D,KAAAq6D,SAAA,EAAAD,GACAp6D,MAGAw1D,EAAAl3D,UAAAi3D,QAAA,SAAA6E,GAEA,OADAp6D,KAAAq6D,SAAA,EAAAD,GACAp6D,MAGAw1D,EAAAl3D,UAAA+7D,QAAA,SAAA9E,EAAA6E,GACA,IAAAz4B,EAAA3hC,KAaA,SAAAs6D,EAAA59D,EAAAwxD,EAAAC,EAAAC,EAAAC,EAAA/rD,EAAAC,EAAA+rD,EAAAC,GACA,IAAAyL,EAAAr4B,EAAA/D,UAAA/7B,OAAAnF,EAAAilC,EAAA/D,UAAAlhC,GACAilC,EAAA/D,UAAAlhC,GAAAilC,EAAAurB,OAAAD,OACA+M,EAAAn3C,IAAAqrC,EAAAC,EAAAC,EAAAC,GACA2L,EAAArM,KAAArrD,EAAAC,EAAA+rD,EAAAC,GAhBAvuD,KAAAg/B,OAAAh/B,KAAAu6D,eACAv6D,KAAA4+B,KAAA5+B,KAAAu6D,cAAA,WACA,GAAAv6D,KAAAw6D,aAAAx6D,KAAA4vB,KAAA+B,cAAA,CAGA3xB,KAAAw6D,YAAAx6D,KAAA4vB,KAAA+B,cACA,IAAAoB,EAAA/yB,KAAAiwB,IAAA,SACAzB,EAAAxuB,KAAAiwB,IAAA,UACAjwB,KAAA49B,UAAA/7B,OAAAm4D,EAAAh6D,KAAAktD,OAAAn6B,EAAAvE,EAAA+mC,EAAA6E,EACAE,sBC9DA79D,EAAAD,QAAA,SAAAy9D,EAAAQ,EAAAC,EAAAnF,EAAA6E,EAAAE,GAEA,IAAAvnC,EAAAknC,EAAAlnC,MACAvE,EAAAyrC,EAAAzrC,OACA8lC,EAAA2F,EAAA3F,KACAD,EAAA4F,EAAA5F,MACAiC,EAAA2D,EAAA3D,IACAC,EAAA0D,EAAA1D,OAOAxjC,KALAuhC,EAAA,iBAAAA,UAAA,IACAD,EAAA,iBAAAA,UAAA,GAKA7lC,KAJA8nC,EAAA,iBAAAA,UAAA,IACAC,EAAA,iBAAAA,UAAA,GAKA6D,IACAK,EAAA97D,KAAAc,IAAAg7D,EAAAnG,EAAAD,EAAA,GACAqG,EAAA/7D,KAAAc,IAAAi7D,EAAApE,EAAAC,EAAA,IAGA,IAAA75D,EAAA,EAYA,GAVA45D,EAAA,GAAAhC,EAAA,GACAgG,EAAA59D,IAAA,IAAA43D,EAAAgC,EAAA,IAAAhC,EAAAgC,GACAC,EAAA,GAAAjC,EAAA,GACAgG,EAAA59D,IAAA,EAAA8xB,EAAA8nC,EAAAhC,EAAAiC,EAAA,EAAAmE,EAAApE,EAAAhC,EAAAiC,GACAD,EAAA,GAAAjC,EAAA,GACAiG,EAAA59D,IAAAq2B,EAAAuhC,EAAA,EAAAD,EAAAiC,EAAAmE,EAAAnG,EAAA,EAAAD,EAAAiC,GACAC,EAAA,GAAAlC,EAAA,GACAiG,EAAA59D,IAAAq2B,EAAAuhC,EAAA9lC,EAAA8nC,EAAAjC,EAAAkC,EAAAkE,EAAAnG,EACAoG,EAAApE,EAAAjC,EAAAkC,GAEAhB,EACAe,EAAA,GACAgE,EAAA59D,IAAA43D,EAAA,EAAAvhC,EAAAujC,EAAAhC,EAAA,EAAAmG,EAAAnE,GACAC,EAAA,GACA+D,EAAA59D,IAAA43D,EAAA9lC,EAAA8nC,EAAAvjC,EAAAwjC,EAAAjC,EAAAoG,EAAApE,EACAmE,EAAAlE,GACAjC,EAAA,GACAgG,EAAA59D,IAAA,EAAA45D,EAAAhC,EAAA9lC,EAAA,EAAA8nC,EAAAhC,EAAAoG,GACArG,EAAA,GACAiG,EAAA59D,IAAAq2B,EAAAuhC,EAAAgC,EAAAjC,EAAA7lC,EAAAisC,EAAAnG,EAAAgC,EAAAjC,EACAqG,GAEAJ,EAAA59D,IAAA43D,EAAAgC,EAAAvjC,EAAAvE,EAAA8lC,EAAAgC,EAAAmE,EAAAC,QAIA,IADA,IAAAz5D,EAAAtE,EAAA23D,EAAA92D,EAAAi9D,EACAj9D,EAAA,IACAyD,EAAAtC,KAAAa,IAAAuzB,EAAAv1B,MAAAu1B,EAEA,IADA,IAAA4B,EAAA/2B,EAAA04D,EAAAt1D,EAAA05D,EACA15D,EAAA,GACA2zB,EAAAh2B,KAAAa,IAAAgvB,EAAAxtB,MAAAwtB,EACA8rC,EAAA59D,IAAA43D,EAAAgC,EAAAr1D,EAAA0zB,EAAAh4B,EAAAiB,EAAAqD,EAAA0zB,GACAn3B,GAAA,IACA82D,GACAgG,EAAA59D,IAAA,EAAA45D,EAAAhC,EAAA3/B,EAAA,EAAA/2B,EAAA02D,EAAA3/B,GACA0/B,GACAiG,EAAA59D,IAAAq2B,EAAAuhC,EAAAgC,EAAAjC,EAAA1/B,EAAAh4B,EAAAsE,EAAArD,EAAAy2D,EAAA1/B,IAEA/2B,GAAA+2B,EAEA2hC,GACAgE,EAAA59D,IAAA43D,EAAA,EAAArzD,EAAAq1D,EAAA35D,EAAA,EAAAsE,EAAAq1D,GACAC,GACA+D,EAAA59D,IAAA43D,EAAA9lC,EAAA8nC,EAAAr1D,EAAAs1D,EAAA55D,EAAAiB,EAAAqD,EAAAs1D,GACA55D,GAAAsE,EAIA,OAAAvE,oBCxEA,IAAAukB,EAAY3kB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAER,IAAA0B,EAAa1B,EAAQ,IACrBsC,EAAWtC,EAAQ,IAiBnB,SAAAq+D,IACAA,EAAA91C,OAAAhoB,KAAAmD,MACAA,KAAAsvD,MAAA,QAEAtvD,KAAA49B,UAAA,GAEA59B,KAAA46D,KAAA35C,EAAA05C,KAAAE,IACA76D,KAAA86D,IAAA,IAAA96D,KAAA46D,KAEA56D,KAAA+6D,OAAA,EACA/6D,KAAAq6D,QAAA,EAEAr6D,KAAAg7D,OAAA,EACAh7D,KAAAi7D,QAAA,GAEA,IAAA3B,EAAA,EACAt5D,KAAA4+B,KAAA,SAAAhhC,EAAAulB,EAAAub,GACA,KAAA1+B,KAAA+6D,MAAA,GAAA/6D,KAAAi7D,QAAAp5D,QAAA,IAKA,IAAAq5D,EAAA5B,GAAA56B,EAEA,GADA46B,EAAAn2C,EACA+3C,EACA,SAIA,GADAl7D,KAAA+6D,OAAAn9D,EACAoC,KAAA+6D,MAAA/6D,KAAA86D,IACA,SAEA,IAAA38D,EAAA6B,KAAA+6D,MAAA/6D,KAAA86D,IAAA,EAGA,OAFA96D,KAAA+6D,OAAA58D,EAAA6B,KAAA86D,IACA96D,KAAAm7D,UAAAh9D,KACA6B,KAAAq6D,QAAA,IAAAr6D,KAAAq6D,SAAAl8D,IAAA,KACA6B,KAAAo7D,OACAp7D,KAAAq7D,WAAAr7D,KAAAq7D,aACA,MAGG,GAxDHp6C,EAAAq6C,KAAA,SAAAC,EAAA/B,GACA,IAAA8B,EAAA,IAAAX,EAGA,OAFAW,EAAAC,UAAAC,UAAA,GACAhC,GAAA8B,EAAA9B,OACA8B,GAGAX,EAAA91C,OAAA5D,EACA05C,EAAAr8D,UAAAN,EAAA28D,EAAA91C,OAAAvmB,WAGA2iB,EAAA05C,KAAA,CACAE,IAAA,IA+CAF,EAAAr8D,UAAAk7D,IAAA,SAAAA,GACA,gBAAAA,EACAx5D,KAAA46D,MAEA56D,KAAA46D,KAAApB,EAAA,EAAAA,EAAAv4C,EAAA05C,KAAAE,IACA76D,KAAA86D,IAAA,IAAA96D,KAAA46D,KACA56D,OAMA26D,EAAAr8D,UAAAm9D,UAAA,SAAA16D,EAAAC,EAAAjE,GACA,OAAAiD,KAAAu7D,OAAAx6D,EAAAC,EAAAjE,IAGA49D,EAAAr8D,UAAAi9D,OAAA,SAAAA,GAIA,OAHAv7D,KAAAg7D,OAAA,EACAh7D,KAAAi7D,QAAAh6C,EAAAq0C,QAAAiG,GAAA9kB,QACAz2C,KAAA6yB,QACA7yB,MAGA26D,EAAAr8D,UAAAuD,OAAA,WACA,OAAA7B,KAAAi7D,QAAAj7D,KAAAi7D,QAAAp5D,OAAA,GAGA84D,EAAAr8D,UAAAk9D,UAAA,SAAAE,EAAAC,GASA,OARA37D,KAAAg7D,OAAA,EAAAp8D,EAAA2zB,OAAAmpC,EAAA17D,KAAAi7D,QAAAp5D,QACA85D,MAAA37D,KAAA49B,UAAA,GACA59B,KAAA49B,UAAA,GAAA59B,KAAAi7D,QAAAj7D,KAAAg7D,QACAW,IACA37D,KAAAiwB,IAAA,QAAAjwB,KAAA49B,UAAA,GAAA7K,OACA/yB,KAAAiwB,IAAA,SAAAjwB,KAAA49B,UAAA,GAAApP,SAEAxuB,KAAA6yB,QACA7yB,MAGA26D,EAAAr8D,UAAA68D,UAAA,SAAAS,GACA,OAAA57D,KAAAw7D,UAAAx7D,KAAAg7D,OAAAY,IAGAjB,EAAAr8D,UAAA07D,OAAA,SAAAA,EAAAx7C,GAIA,OAHAxe,KAAAq6D,QAAAL,EAAAh6D,KAAAi7D,QAAAp5D,OAAA,EACA7B,KAAAq7D,UAAA78C,EACAxe,KAAA67D,OACA77D,MAGA26D,EAAAr8D,UAAAu9D,KAAA,SAAAH,GASA,YARA,IAAAA,GACA17D,KAAAw7D,UAAAE,GACA17D,KAAA+6D,MAAA,GACG/6D,KAAA+6D,MAAA,IACH/6D,KAAA+6D,MAAA,GAGA/6D,KAAA6yB,QACA7yB,MAGA26D,EAAAr8D,UAAA88D,KAAA,SAAAM,GAKA,OAJA17D,KAAA+6D,OAAA,OACA,IAAAW,GACA17D,KAAAw7D,UAAAE,GAEA17D,uBCrIA,IAAAihB,EAAY3kB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAER,IAAA0B,EAAa1B,EAAQ,IACrBykB,EAASzkB,EAAQ,IASjB,SAAAw/D,IACAA,EAAAj3C,OAAAhoB,KAAAmD,MACAA,KAAAsvD,MAAA,UACAtvD,KAAA49B,UAAA,GAVA3c,EAAAY,OAAA,SAAA05C,GACA,WAAAO,GAAAP,WAGAO,EAAAj3C,OAAA5D,EACA66C,EAAAx9D,UAAAN,EAAA89D,EAAAj3C,OAAAvmB,WAWAw9D,EAAAx9D,UAAAy9D,QAAA,SAAAh7D,EAAAC,EAAAjE,GACA,OAAAiD,KAAAu7D,OAAAx6D,EAAAC,EAAAjE,IAGA++D,EAAAx9D,UAAAi9D,OAAA,SAAAA,GAcA,OAbAv7D,KAAA49B,UAAA,GACA,iBAAA29B,GACAA,EAAAt6C,EAAAq0C,QAAAiG,GACAv7D,KAAAg8D,MAAA,SAAAr+D,GACA,OAAA49D,EAAArE,IAAAv5D,KAEG,iBAAA49D,EACHv7D,KAAAg8D,MAAA,SAAAr+D,GACA,OAAA49D,EAAA59D,IAEG,mBAAA49D,IACHv7D,KAAAg8D,MAAAT,GAEAv7D,MAMA87D,EAAAx9D,UAAA29D,SAAA,SAAAl7D,EAAAC,EAAAjE,GACA,OAAAiD,KAAArC,MAAAoD,EAAAC,EAAAjE,IAGA++D,EAAAx9D,UAAAX,MAAA,SAAAA,GACA,YAAAA,EACA,OAAAqC,KAAAk8D,OAEA,GAAAl8D,KAAAk8D,SAAAv+D,EACA,OAAAqC,KAEAA,KAAAk8D,OAAAv+D,EAEA,OAAAA,EACAA,EAAA,GACG,iBAAAA,GAAAojB,EAAA01B,MAAA94C,KACHA,IAAA4C,YAGAP,KAAAm8D,SAAAn8D,KAAAm8D,UAAA,EAGA,IADA,IAAAppC,EAAA,EAAAvE,EAAA,EACA9xB,EAAA,EAAiBA,EAAAiB,EAAAkE,OAAkBnF,IAAA,CACnC,IAAAswD,EAAAhtD,KAAA49B,UAAAlhC,GAAAsD,KAAAg8D,MAAAr+D,EAAAjB,IACAq2B,GAAAr2B,EAAA,EAAAsD,KAAAm8D,SAAA,EACAnP,EAAAW,KAAA56B,EAAA,GACAA,GAAAi6B,EAAAj6B,MACAvE,EAAA7vB,KAAAc,IAAA+uB,EAAAw+B,EAAAx+B,QAKA,OAHAxuB,KAAAiwB,IAAA,QAAA8C,GACA/yB,KAAAiwB,IAAA,SAAAzB,GACAxuB,KAAA49B,UAAA/7B,OAAAlE,EAAAkE,OACA7B,uBC/EA,IAAAihB,EAAY3kB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAEKA,EAAQ,IAErB2kB,EAAAm7C,IAAA,SAAAnoC,GACA,OAAAhT,EAAAjjB,SAAAo+D,IAAAnoC,GAAAq7B,MAAA,QAGAruC,EAAA3iB,UAAA89D,IAAA,SAAAnoC,GAEA,OADAj0B,KAAAq8D,SAAA,MAAApoC,GACAj0B,MAGAihB,EAAAq7C,OAAA,SAAAroC,GACA,OAAAhT,EAAAjjB,SAAAs+D,OAAAroC,GAAAq7B,MAAA,QAGAruC,EAAA3iB,UAAAg+D,OAAA,SAAAroC,GAEA,OADAj0B,KAAAq8D,SAAA,SAAApoC,GACAj0B,MAGAihB,EAAAo7C,SAAA,SAAA/lD,EAAA2d,GACA,OAAAhT,EAAAjjB,SAAAq+D,SAAA/lD,EAAA2d,GAAAq7B,MAAA,aAGAruC,EAAA3iB,UAAA+9D,SAAA,SAAA/lD,EAAA2d,GA+CA,OA7CAj0B,KAAAu8D,SAAAv8D,KAAAu8D,UAAA,EACAv8D,KAAAm8D,SAAAn8D,KAAAm8D,UAAA,EAEAn8D,KAAAg/B,OAAAh/B,KAAAw8D,cACAx8D,KAAA4+B,KAAA5+B,KAAAw8D,aAAA,WACA,GAAAx8D,KAAAy8D,SAAAz8D,KAAA64D,UAAA,CAGA74D,KAAAy8D,QAAAz8D,KAAA64D,UAEA,IAAA6D,EAAA18D,KAAA28D,cAAA38D,KAAA43D,aACA53D,KAAA28D,aAAA38D,KAAA43D,aAMA,IAJA,IAEA15B,EAFAnL,EAAA,EAAAvE,EAAA,EAEAvjB,EAAAjL,KAAAq4D,OAAA,GACAA,GAAA,EACAn6B,EAAAjzB,GAAA,CACAA,EAAAizB,EAAAjzB,MAAA,GAEAizB,EAAArO,QAAA,GACA,IAAA5uB,EAAAi9B,EAAAjO,IAAA,YACA0E,EAAAuJ,EAAAjO,IAAA,aAEA,UAAA3Z,IACA+hD,IAAA7pC,GAAAxuB,KAAAm8D,UACAj+B,EAAAjO,IAAA,YAAAzB,GAAA0P,EAAAjO,IAAA,UAAAzB,GACAuE,EAAAp0B,KAAAc,IAAAszB,EAAA9xB,GACAutB,GAAAmG,EACA+nC,GAAAx+B,EAAAjO,IAAA,SAAAgE,IAEO,OAAA3d,KACP+hD,IAAAtlC,GAAA/yB,KAAAm8D,UACAj+B,EAAAjO,IAAA,YAAA8C,GAAAmL,EAAAjO,IAAA,UAAA8C,GACAA,GAAA9xB,EACAutB,EAAA7vB,KAAAc,IAAA+uB,EAAAmG,GACA+nC,GAAAx+B,EAAAjO,IAAA,SAAAgE,IAEAokC,GAAA,EAEAtlC,GAAA,EAAA/yB,KAAAu8D,SACA/tC,GAAA,EAAAxuB,KAAAu8D,SACAv8D,KAAAiwB,IAAA,UAAA8C,GAAA/yB,KAAAiwB,IAAA,QAAA8C,GACA/yB,KAAAiwB,IAAA,WAAAzB,GAAAxuB,KAAAiwB,IAAA,SAAAzB,MAEAxuB,MAGAihB,EAAA44C,IAAA,WACA,OAAA54C,EAAAjjB,SAAA67D,MAAAvK,MAAA,QAGAruC,EAAA3iB,UAAAu7D,IAAA,WAyBA,OAxBA75D,KAAAu8D,SAAAv8D,KAAAu8D,UAAA,EAEAv8D,KAAAg/B,OAAAh/B,KAAAw8D,cACAx8D,KAAA4+B,KAAA5+B,KAAAw8D,aAAA,WACA,GAAAx8D,KAAA48D,SAAA58D,KAAA64D,UAAA,CAGA74D,KAAA48D,QAAA58D,KAAA64D,UAIA,IAFA,IACA36B,EADAnL,EAAA,EAAAvE,EAAA,EACAvjB,EAAAjL,KAAAq4D,OAAA,GACAn6B,EAAAjzB,GAAA,CACAA,EAAAizB,EAAAjzB,MAAA,GACAizB,EAAArO,QAAA,GACA,IAAA5uB,EAAAi9B,EAAAjO,IAAA,YACA0E,EAAAuJ,EAAAjO,IAAA,aACA8C,EAAAp0B,KAAAc,IAAAszB,EAAA9xB,GACAutB,EAAA7vB,KAAAc,IAAA+uB,EAAAmG,GAEA5B,GAAA,EAAA/yB,KAAAu8D,SACA/tC,GAAA,EAAAxuB,KAAAu8D,SACAv8D,KAAAiwB,IAAA,UAAA8C,GAAA/yB,KAAAiwB,IAAA,QAAA8C,GACA/yB,KAAAiwB,IAAA,WAAAzB,GAAAxuB,KAAAiwB,IAAA,SAAAzB,MAEAxuB,MAGAihB,EAAA47C,MAAA,WACA,OAAA57C,EAAAjjB,SAAA6+D,QAAAvN,MAAA,UAGAruC,EAAA3iB,UAAAu+D,MAAA,WAgBA,OAdA78D,KAAAg/B,OAAAh/B,KAAAw8D,cACAx8D,KAAA4+B,KAAA5+B,KAAAw8D,aAAA,WACA,IAAA50B,EAAA5nC,KAAA4nC,SACA,GAAAA,EAAA,CACA,IAAA7U,EAAA6U,EAAA3X,IAAA,SACAjwB,KAAAiwB,IAAA,UAAA8C,GACA/yB,KAAAiwB,IAAA,QAAA8C,GAEA,IAAAvE,EAAAoZ,EAAA3X,IAAA,UACAjwB,KAAAiwB,IAAA,WAAAzB,GACAxuB,KAAAiwB,IAAA,SAAAzB,MAGG,GACHxuB,MAIAihB,EAAA3iB,UAAAw+D,QAAA,SAAAC,GAEA,OADA/8D,KAAAu8D,SAAAQ,EACA/8D,MAGAihB,EAAA3iB,UAAA0+D,QAAA,SAAAC,GAEA,OADAj9D,KAAAm8D,SAAAc,EACAj9D,uBC7IA,IAAAk9D,EAAa5gE,EAAQ,IACrB2kB,EAAY3kB,EAAQ,IACpB+yB,EAAU/yB,EAAQ,IAyDlB,SAAA6gE,EAAA7tC,EAAA8tC,EAAAC,GACAr9D,KAAAs9D,KAAA,GACAt9D,KAAAu9D,UAAAH,GAAA,IACAp9D,KAAAw9D,OAAAH,GAAA,EAEAr9D,KAAAuvB,OAAAD,EACAtvB,KAAA+6D,MAAA,EA4FA,SAAA0C,EAAAphC,EAAA2yB,EAAA/wD,EAAAN,GACA,iBAAA0+B,EAAApM,IAAAhyB,GACA+wD,EAAA/wD,GAAAN,EACG,iBAAA0+B,EAAApM,IAAAhyB,EAAA,MACH,iBAAAo+B,EAAApM,IAAAhyB,EAAA,OACA+wD,EAAA/wD,EAAA,KAAAN,EACAqxD,EAAA/wD,EAAA,KAAAN,GA/JAsjB,EAAA3iB,UAAAo/D,MAAA,SAAAN,EAAAC,EAAA9L,GAOA,GANA,iBAAA6L,GACA7L,EAAA6L,EAAAC,EAAA,EAAAD,EAAA,GACG,iBAAAC,IACH9L,EAAA8L,IAAA,IAGAr9D,KAAA29D,QAAA,CACA39D,KAAA29D,QAAA,GACA,IAAAC,EAAA,EACA59D,KAAA4+B,KAAA,SAAAH,EAAAtb,EAAAub,GACA,GAAA1+B,KAAA29D,QAAA97D,OAAA,CAKA,IAAAq5D,EAAA0C,GAAAl/B,EAEA,GADAk/B,EAAAz6C,EACA+3C,EACA,SAGA,IAAA2C,EAAA79D,KAAA29D,QAAA,GAEA1yD,EAAA4yD,EAAAj/B,KAAA5+B,KAAAy+B,EAAAtb,EAAAub,GAMA,GAJAzzB,GAAA4yD,IAAA79D,KAAA29D,QAAA,IACA39D,KAAA29D,QAAAl6C,QAGA,mBAAAxY,EACA,IACAA,EAAApO,KAAAmD,MACS,MAAAkoB,GACTymC,QAAAjrD,IAAAwkB,GAQA,MAJA,iBAAAjd,GACAjL,KAAA29D,QAAAG,QAAA7yD,IAGA,KACK,GAGLjL,KAAA6yB,QACA0+B,IACAvxD,KAAA29D,QAAA97D,OAAA,GAEA,IAAA67D,EAAA,IAAAP,EAAAn9D,KAAAo9D,EAAAC,GAEA,OADAr9D,KAAA29D,QAAAl8C,KAAAi8C,GACAA,GAYAP,EAAA7+D,UAAAsgC,KAAA,SAAAvC,EAAAoC,EAAAtb,EAAAub,GAGA,GAFA1+B,KAAA+6D,OAAAt8B,IAEAz+B,KAAA+6D,MAAA/6D,KAAAw9D,QAAA,CAIA,IASAh/D,EAAAu/D,EATA3+B,EAAAp/B,KAAA+6D,MAAA/6D,KAAAw9D,OAEA,IAAAx9D,KAAAg+D,OAEA,QAAA//D,KADA+B,KAAAg+D,OAAA,GACAh+D,KAAAs9D,KACAt9D,KAAAg+D,OAAA//D,GAAA+B,KAAAuvB,OAAAU,IAAAhyB,GAKAmhC,EAAAp/B,KAAAu9D,WACA/+D,EAAA4gC,EAAAp/B,KAAAu9D,UACAQ,GAAA,IAEAv/D,EAAA,EACAu/D,GAAA,GAGA,mBAAA/9D,KAAAi+D,UACAz/D,EAAAwB,KAAAi+D,QAAAz/D,IAGA,IAAAwG,EAAA,EAAAxG,EAEA,QAAAP,KAAA+B,KAAAs9D,KACAt9D,KAAAuvB,OAAAU,IAAAhyB,EAAA+B,KAAAg+D,OAAA//D,GAAA+G,EAAAhF,KAAAs9D,KAAAr/D,GAAAO,GAGA,OAAAu/D,EACA/9D,KAAAo+B,OAAAp+B,KAAAk+D,QAAA,OADA,IAKAf,EAAA7+D,UAAAo/D,MAAA,SAAAN,EAAAC,GACA,OAAAr9D,KAAAo+B,MAAA,IAAA++B,EAAAn9D,KAAAuvB,OAAA6tC,EAAAC,IAGAF,EAAA7+D,UAAA8+D,SAAA,SAAAA,GAEA,OADAp9D,KAAAu9D,UAAAH,EACAp9D,MAGAm9D,EAAA7+D,UAAA++D,MAAA,SAAAA,GAEA,OADAr9D,KAAAw9D,OAAAH,EACAr9D,MAGAm9D,EAAA7+D,UAAA6/D,KAAA,SAAAC,GAEA,OADAp+D,KAAAi+D,QAAAf,EAAAkB,GACAp+D,MAGAm9D,EAAA7+D,UAAAivC,KAAA,SAAApsB,GAEA,OADAnhB,KAAAk+D,MAAA/8C,EACAnhB,MAGAm9D,EAAA7+D,UAAA65D,KAAA,WAIA,OAHAn4D,KAAAutC,KAAA,WACAvtC,KAAAm4D,SAEAn4D,MAGAm9D,EAAA7+D,UAAAuxD,OAAA,WAIA,OAHA7vD,KAAAutC,KAAA,WACAvtC,KAAA6vD,WAEA7vD,MAGAm9D,EAAA7+D,UAAA2xB,IAAA,SAAAlvB,EAAAC,GACA,oBAAAD,EACA,QAAAsyD,KAAAtyD,EACA08D,EAAAz9D,KAAAuvB,OAAAvvB,KAAAs9D,KAAAjK,EAAAtyD,EAAAsyD,cAEG,IAAAryD,GACHy8D,EAAAz9D,KAAAuvB,OAAAvvB,KAAAs9D,KAAAv8D,EAAAC,GAEA,OAAAhB,MAaAqvB,EAAAuF,eAAAuoC,GAKAA,EAAA7+D,UAAAilB,KAAA,SAAApC,GAEA,OADAnhB,KAAAutC,KAAApsB,GACAnhB,MAMAm9D,EAAA7+D,UAAAg8C,MAAA,SAAA5wC,GACA,OAAA1J,MAGAvD,EAAAD,QAAA2gE,iBCxLA,SAAAkB,EAAAt/D,GACA,OAAAA,EAEA,IAAAu/D,EAAA,GACAC,EAAA,GACAC,EAAA,GAEA,SAAAtB,EAAAuB,GACA,sBAAAA,EACA,OAAAA,EAEA,oBAAAA,EACA,OAAAJ,EAEA,IAAAl9C,EAAAm9C,EAAAG,GACA,GAAAt9C,EACA,OAAAA,EAEA,IAAA+C,EAAA,gDAAAw6C,KAAAD,GACA,IAAAv6C,MAAAriB,OACA,OAAAw8D,EAEA,IAAAD,EAAAI,EAAAt6C,EAAA,IACArmB,EAAA0gE,EAAAr6C,EAAA,IACAy6C,EAAAz6C,EAAA,GAcA,OAZA/C,EADAi9C,KAAAj9C,GACAi9C,EAAAj9C,GACGi9C,KAAAQ,GACHR,EAAAQ,GAAAv9C,MAAA+8C,EAAAQ,GAAAD,GACAA,EAAAvH,QAAA,UAAAnzC,MAAA,MAEAo6C,EAEAxgE,IACAsjB,EAAAtjB,EAAAsjB,OAGAm9C,EAAAG,GAAAt9C,EACAA,EAGA+7C,EAAA97D,IAAA,SAAAyL,GAGA,IADA,IAAAgyD,GAAAhyD,EAAA5P,MAAA4P,EAAAhP,MAAAomB,MAAA,OACAvnB,EAAA,EAAiBA,EAAAmiE,EAAAh9D,OAAkBnF,IAAA,CACnC,IAAAO,EAAA4hE,EAAAniE,GACAO,KACA4P,EAAA5P,KAAAuhE,EAAAD,GAAAthE,GAAA4P,KAKAqwD,EAAA97D,IAAA,CACAvD,KAAA,KACAsjB,GAAA,SAAApQ,GACA,OAAAA,KAIAmsD,EAAA97D,IAAA,CACAvD,KAAA,MACAsjB,GAAA,SAAApQ,GACA,gBAAAnT,GACA,SAAAmT,EAAA,EAAAnT,OAKAs/D,EAAA97D,IAAA,CACAvD,KAAA,SACAsjB,GAAA,SAAApQ,GACA,gBAAAnT,GACA,OAAAA,EAAA,GAAAmT,EAAA,EAAAnT,GAAA,IAAAmT,EAAA,KAAAnT,IAAA,MAKAs/D,EAAA97D,IAAA,CACAvD,KAAA,SACAsjB,GAAA,SAAApQ,GACA,gBAAAnT,GACA,OAAAA,EAAA,KAAAmT,EAAA,KAAAnT,IAAA,EAAAmT,EAAA,EAAAnT,GAAA,MAKAs/D,EAAA97D,IAAA,CACAnE,KAAA,SACAkkB,GAAA,SAAAvjB,GACA,OAAAA,KAIAs/D,EAAA97D,IAAA,CACAnE,KAAA,OACAkkB,GAAA,SAAAvjB,GACA,OAAAA,OAIAs/D,EAAA97D,IAAA,CACAnE,KAAA,QACAkkB,GAAA,SAAAvjB,GACA,OAAAA,SAIAs/D,EAAA97D,IAAA,CACAnE,KAAA,QACAkkB,GAAA,SAAAvjB,GACA,OAAAA,WAIAs/D,EAAA97D,IAAA,CACAnE,KAAA,QACAkkB,GAAA,SAAAvjB,GACA,OAAAA,aAIAs/D,EAAA97D,IAAA,CACAnE,KAAA,WACAkkB,GAAA,SAAAvjB,GACA,SAAAe,KAAAsF,IAAArG,EAAAe,KAAAwH,GAAA,MAIA+2D,EAAA97D,IAAA,CACAnE,KAAA,WACAkkB,GAAA,SAAAvjB,GACA,UAAAA,EAAA,EAAAe,KAAA0I,IAAA,MAAAzJ,EAAA,OAIAs/D,EAAA97D,IAAA,CACAnE,KAAA,cACAkkB,GAAA,SAAAvjB,GACA,SAAAe,KAAAQ,KAAA,EAAAvB,QAIAs/D,EAAA97D,IAAA,CACAnE,KAAA,SACAkkB,GAAA,SAAAvjB,GACA,OAAAA,EAAA,cAAAA,MAAA,eACAA,GAAA,UAAAA,EAAA,IAAAA,EAAA,iBACAA,GAAA,WAAAA,EAAA,cAAAA,GAAA,YAAAA,EACA,WAIAs/D,EAAA97D,IAAA,CACAnE,KAAA,OACA2hE,GAAA,SAAA12C,GACA,gBAAAtqB,GACA,OAAAe,KAAA0I,IAAAzJ,EAAAsqB,OAKAg1C,EAAA97D,IAAA,CACAnE,KAAA,UACA2hE,GAAA,SAAA79D,EAAAvC,GAEAuC,KAAA,EACA,IAAAtC,GAFAD,KAAA,MAEA,EAAAG,KAAAwH,IAAAxH,KAAAmgE,KAAA,EAAA/9D,GACA,gBAAAnD,GACA,SAAAmD,EAAApC,KAAA0I,IAAA,MAAAzJ,GACAe,KAAAqF,KAAApG,EAAAa,IAAA,EAAAE,KAAAwH,IAAA3H,OAKA0+D,EAAA97D,IAAA,CACAnE,KAAA,OACA2hE,GAAA,SAAAngE,GAEA,OADAA,OAAA,IAAAA,IAAA,QACA,SAAAb,GACA,OAAAA,MAAAa,EAAA,GAAAb,EAAAa,OAKAhC,EAAAD,QAAA0gE,mBC3GA,SAAAnN,EAAA3tC,EAAA28C,GACA,GAAA/+D,gBAAA+vD,EAAA,CAKA,IAAAnV,EAAAx4B,EAAAs3C,WAAA9e,OAAA,EAEAx4B,EAAA+kB,GAAA,oBAAAtS,GACA+lB,EAAA/lB,EAAA+lB,WAGA56C,KAAAjB,EAAA,EACAiB,KAAAD,EAAA,EACAC,KAAAO,SAAA,WACA,SAAAP,KAAAjB,GAAA,OAAAiB,KAAAD,IAEAC,KAAAg/D,OAAA,SAAAC,IA+FA,SAAAn8C,EAAAo8C,EAAAC,GAEAD,EAAAE,SAAAF,EAAAE,QAAAv9D,QACAs9D,EAAApgE,EAAAmgE,EAAAE,QAAA,GAAAC,QACAF,EAAAp/D,EAAAm/D,EAAAE,QAAA,GAAAE,UAEAH,EAAApgE,EAAAmgE,EAAAG,QACAF,EAAAp/D,EAAAm/D,EAAAI,SAEA,IAAAC,EAAAz8C,EAAA08C,wBACAL,EAAApgE,GAAAwgE,EAAAjL,KACA6K,EAAAp/D,GAAAw/D,EAAAjJ,IACA6I,EAAApgE,GAAA,EAAA+jB,EAAA28C,WACAN,EAAAp/D,GAAA,EAAA+iB,EAAA48C,UA3GAC,CAAAZ,EAAAE,EAAAj/D,MACAA,KAAAjB,GAAA67C,EACA56C,KAAAD,GAAA66C,GAEA56C,KAAA4/D,OAAA,SAAAtpD,EAAAupD,GACA7/D,KAAAsW,OACAtW,KAAAmsC,KAAA/pB,EACApiB,KAAAi/D,MAAA,KACAY,EAAAh+D,OAAA,EACA7B,KAAA6/D,UAEA7/D,KAAAmsC,KAAAmsB,MAAAt4D,KAAAu4D,QAAAv4D,OAEAA,KAAAs8B,QAAA,SAAAhmB,EAAA2oD,EAAAa,GAWA,GAVA9/D,KAAAsW,OACAtW,KAAAmsC,KAAA/pB,EACApiB,KAAAi/D,QACAj/D,KAAA6/D,SAAA,EACA7/D,KAAA+/D,UAAA78C,KAAAC,MAMA28C,EAAA,CACA,KAAAA,EAAAj+D,SACA7B,KAAAu4D,QAAAC,IAAAsH,EAAAr8C,QAAAzjB,QAEA8/D,EAAAj+D,OAAA,OAEA7B,KAAAmsC,KAAAmsB,MAAAt4D,KAAAu4D,QAAAv4D,OAGAA,KAAAu4D,QAAA,CACAzJ,SAAA,EACAoJ,SAAA,EACA51C,MAAA,SAAA+Z,EAAA2jC,GACA,OAAA3jC,EAAAwC,MAAAmhC,EAAA1pD,OAEAkiD,IAAA,SAAAn8B,EAAA2jC,GAEA5tC,EAAA6tC,IAAAD,EAAAf,MACA7sC,EAAA9b,KAAA0pD,EAAA1pD,KACA8b,EAAA2tC,UAAAC,EAAAD,UACA3tC,EAAApvB,IAAAjE,EAAAihE,EAAAjhE,EACAqzB,EAAApvB,IAAAjD,EAAAigE,EAAAjgE,EAEA,IAAAsnC,EAAAhL,EAAAgL,UAAA24B,EAAA1pD,MACA,GAAA+wB,IAGAhL,EAAAxM,SAAAg/B,UAAAG,IAAAgR,EAAA5tC,IACAiK,IAAA2jC,EAAA7zB,MAAA9P,EAAAy8B,QAAA1mC,MAGA4tC,EAAAH,SACAG,EAAAH,QAAAp+C,KAAA4a,GAEA2jC,EAAAf,QAAA,CAEA,IADA,IAAAiB,GAAA,EACAvjE,EAAA,EAAuBA,EAAA0qC,EAAAxlC,OAAsBlF,IAC7CujE,IAAA74B,EAAA1qC,GAAAE,KAAAw/B,EAAAjK,IAAA8tC,EAEA,OAAAA,MA3JA5jE,EAAQ,IAASolB,MAAA,SAAAU,EAAA28C,GACjBhP,EAAAoQ,UAAA/9C,EAAA28C,KAKAhP,EAAAqQ,MAAA,QACArQ,EAAAC,MAAA,uBACAD,EAAAyD,KAAA,sBACAzD,EAAA0D,IAAA,mBACA1D,EAAA2D,OAAA,0BAEA3D,EAAAoQ,UAAA,SAAA/9C,EAAA28C,GACA,IAAA38C,EAAA49C,MAAA,CAIA59C,EAAA49C,MAAA,IAAAjQ,EAAA3tC,EAAA28C,GAKAA,EAAA97C,iBAAA,aAAAo9C,GACAtB,EAAA97C,iBAAA,WAAAq9C,GACAvB,EAAA97C,iBAAA,YAAAs9C,GACAxB,EAAA97C,iBAAA,cAAAu9C,GAEAzB,EAAA97C,iBAAA,YAAAo9C,GACAtB,EAAA97C,iBAAA,UAAAq9C,GACAvB,EAAA97C,iBAAA,YAAAs9C,GAEAx9C,SAAAE,iBAAA,UAAAu9C,GACA58C,OAAAX,iBAAA,OAAAu9C,GAEA,IAAAC,EAAA,GAAAC,EAAA,GAEA,SAAAL,EAAApB,GACAA,EAAA0B,iBACAv+C,EAAA49C,MAAAhB,OAAAC,GAEA78C,EAAA49C,MAAA1jC,QAAA2iC,EAAA3oD,KAAA2oD,GAEA78C,EAAA49C,MAAAJ,OAAA,QAAAa,GACAr+C,EAAA49C,MAAAJ,OAAA,cAAAc,GAGA,SAAAH,EAAAtB,GACAA,EAAA0B,iBACAv+C,EAAA49C,MAAAhB,OAAAC,GACA78C,EAAA49C,MAAA1jC,QAAA2iC,EAAA3oD,KAAA2oD,GAGA,SAAAqB,EAAArB,GACAA,EAAA0B,iBAGAv+C,EAAA49C,MAAA1jC,QAAA2iC,EAAA3oD,KAAA2oD,GAEAwB,EAAA5+D,QAEAugB,EAAA49C,MAAA1jC,QAAA,QAAA2iC,EAAAwB,GAEAC,EAAA7+D,OAAA,EAGA,SAAA2+D,EAAAvB,GACAyB,EAAA7+D,QAEAugB,EAAA49C,MAAA1jC,QAAA,cAAA2iC,EAAAyB,GAEAD,EAAA5+D,OAAA,IA4FA,IAAAuwB,EAAA,GAAYpvB,EAAA,GAkBZ,SAAA49D,EAAA1gE,EAAAjD,EAAAU,GACAP,OAAAC,eAAA6C,EAAAjD,EAAA,CACAU,UAlBAijE,EAAAxuC,EAAA,iBAAAlyB,GAEA,OADAA,KAAA,IAAiBnB,EAAAiB,KAAAjB,EAAAmB,EAAAH,EAAAC,KAAAD,EACjBG,IAEA0gE,EAAAxuC,EAAA,sBACA,SAAApyB,KAAAjB,GAAA,OAAAiB,KAAAD,GAAA,KAAAC,KAAAgD,IAAA,MAEA49D,EAAAxuC,EAAA,MAAApvB,GACA49D,EAAA59D,EAAA,iBAAA9C,GAEA,OADAA,KAAA,IAAiBnB,EAAAiB,KAAAjB,EAAAmB,EAAAH,EAAAC,KAAAD,EACjBG,IAEA0gE,EAAA59D,EAAA,sBACA,SAAAhD,KAAAjB,GAAA,OAAAiB,KAAAD,KA0BAtD,EAAAD,QAAAuzD,mBCvMA,IAGAgP,EAHA99C,EAAY3kB,EAAQ,IAEpB2kB,EAAA4/C,eACA9B,EAAAh8C,SAAAC,cAAA,WACA+2C,aAAAgF,EAAAhF,WAAA,OAGAn2C,OAAAX,iBAAA,kBAEAhC,EAAA4/C,YACA5/C,EAAAqB,UAGC,GAEDrB,EAAAW,OAAA,CACAk/C,aAIA,SAAA1/C,EAAA2/C,GAEA,IAAA1+C,GADA0+C,KAAA,IACA1+C,OAAAyb,EAAA,KAAAkjC,GAAA,EACAjuC,EAAA,EAAAvE,EAAA,EAAAosB,EAAA,EAEA,iBAAAv4B,IACAA,EAAAU,SAAAk+C,eAAA5+C,IAGAA,IACAA,EAAAU,SAAAk+C,eAAA,UACAl+C,SAAAk+C,eAAA,UAGA,IAAA5+C,EAAA,CACA2+C,GAAA,GAEA3+C,EAAAU,SAAAC,cAAA,WACAk+C,MAAAp8D,SAAA,WACAud,EAAA6+C,MAAA5K,IAAA,IACAj0C,EAAA6+C,MAAA5M,KAAA,IAEA,IAAAlxC,EAAAL,SAAAK,KACAA,EAAAy0C,aAAAx1C,EAAAe,EAAA+9C,YAGArjC,EAAAzb,EAAA03C,WAAA,MAEA,IAAAqH,EAAAx9C,OAAAw9C,kBAAA,EACAC,EAAAvjC,EAAAwjC,8BACAxjC,EAAAyjC,2BAAAzjC,EAAA0jC,0BACA1jC,EAAA2jC,yBAAA3jC,EAAA4jC,wBAAA,EACA9mB,EAAAwmB,EAAAC,EAEA,IAAAM,EAAA/9C,OAAA+9C,uBACA/9C,OAAAg+C,yBAAAh+C,OAAAi+C,0BACAj+C,OAAAk+C,6BAAAl+C,OAAAm+C,wBACA,SAAAvjD,GACA,OAAAoF,OAAAyb,WAAA7gB,EAAA,SAIA,IAAA2tB,EAAAlrB,EAAAkrB,KAAAw1B,EAAA9jC,GAEA,SAAAA,IACAC,EAAA10B,aAAA,aACA00B,EAAAkkC,UAAA,IAAAjvC,EAAAvE,GACA2d,EAAAtO,OAAAC,GAcA,SAAA69B,IAEAqF,GAEAjuC,EAAAnP,OAAAq+C,WAAA,EAAAr+C,OAAAq+C,WAAAC,OAAAnvC,MACAvE,EAAA5K,OAAAu+C,YAAA,EAAAv+C,OAAAu+C,YAAAD,OAAA1zC,OAEAnM,EAAA6+C,MAAAnuC,QAAA,KACA1Q,EAAA6+C,MAAA1yC,SAAA,OAGAuE,EAAA1Q,EAAA+/C,YACA5zC,EAAAnM,EAAAggD,cAGAtvC,GAAA6nB,EACApsB,GAAAosB,EAEAv4B,EAAA0Q,WAAA1Q,EAAAmM,aAIAnM,EAAA0Q,QACA1Q,EAAAmM,SAIA2d,EAAAutB,SAAA3mC,EAAAvE,EAAAosB,GAEA/c,KAxCAsO,EAAAukB,WAAA,SAAAqB,GAEA,OADA1vC,EAAA6+C,MAAAoB,gBAAAvQ,EACA/xD,MAGAohB,EAAA+qB,EAAA9pB,GAEAs5C,IACA/3C,OAAAX,iBAAA,SAAA04C,GAAA,GACA/3C,OAAAX,iBAAA,oBAAA04C,GAAA,IA9DA4G,eAiGA,SAAA1/C,EAAA2/C,EAAAlL,GAEA,IAAAtK,EAAA,IAAAwI,MACAxI,EAAAyV,OAAA,WACAD,EAAAxV,IAEAA,EAAA0V,QAAApL,EACAtK,EAAAnqC","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\n/**\n * Creates zero vector.\n *\n * @return {Vec2} Zero vector.\n */\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\n/**\n * Zero vector for internal usage. Must not be modified.\n */\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns this vector.\n */\nVec2.prototype.normal = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return this;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return this;\n};\n\n/**\n * Rotates current vector inline by specified rotation angle.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Rotates current vector inline by rotation angle negative to the specified one.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_activeFlag = def.active;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive or joint itself is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_activeFlag && this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This joint will be used in physics callculations if true, and skipped if false.\n */\nJoint.prototype.setActive = function(flag) {\n  this.m_activeFlag = flag;\n};\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n\n/**\n * Tests if current shape overlaps with a provided shape.\n *\n * @param {planck.Shape} shape A shape to test for overlapping with a current one.\n * @param {Transform} transform The transform applied to the shape.\n * @param {Number} childIndex The child shape index\n * @return {Boolean} True if shapes overlap, false otherwise.\n */\nShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2(), rot = new Rot();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  /*if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }*/\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  if (this.m_vertices[3]) {\n    this.m_vertices[0].set(-hx, -hy);\n    this.m_vertices[1].set(hx, -hy);\n    this.m_vertices[2].set(hx, hy);\n    this.m_vertices[3].set(-hx, hy);\n  } else {\n    this.m_vertices[0] = Vec2.neo(-hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, -hy);\n    this.m_vertices[2] = Vec2.neo(hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, hy);\n  }\n  if (this.m_normals[3]) {\n    this.m_normals[0].set(0.0, -1.0);\n    this.m_normals[1].set(1.0, 0.0);\n    this.m_normals[2].set(0.0, 1.0);\n    this.m_normals[3].set(-1.0, 0.0);\n  } else {\n    this.m_normals[0] = Vec2.neo(0.0, -1.0);\n    this.m_normals[1] = Vec2.neo(1.0, 0.0);\n    this.m_normals[2] = Vec2.neo(0.0, 1.0);\n    this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n  }\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center) &&\n    (center.x < -Math.EPSILON || Math.EPSILON < center.x ||\n    center.y < -Math.EPSILON || Math.EPSILON < center.y)) {\n    \n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n    rot.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = this.m_vertices[i].rot(rot).add(center);\n      this.m_normals[i] = this.m_normals[i].rot(rot);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    d = d.set(this.m_outsidePoint).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    v1.set(this.m_vertices[i]);\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set(v1).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (-Math.EPSION <= denominator && denominator <= Math.EPSION) { // Ray is parallel to poligon's side.\n      continue;\n    }\n\n    var a = numerator / denominator;\n    p.set(d).mul(a).add(p1);\n\n    v2.set( this.m_vertices[ i + 1 < this.m_count ? i + 1 : 0 ] ); // Set second vertex.\n    var intersects = Vec2.dot(v1.sub(p), v2.sub(p)) < 0.0; // If ray line intersects polygon side.\n    if (!intersects) {\n      continue;\n    }\n\n    lower = 0.0;\n    upper = maxFraction;\n\n    intersects = lower <= a; // If half-line intersects polygon side.\n    if (intersects) {\n      ++count;\n    }\n\n    if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n      // Increase lower.\n      // The segment enters this half-space.\n      lower = a;\n    } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n      // Decrease upper.\n      // The segment exits this half-space.\n      upper = a;\n    } else { // No intersection.\n      continue;\n    }\n\n    if (lower <= upper) {\n      index = i; // Save closest intersection.\n      if (a < lowest) {\n        lowest = a;\n      }\n    }\n\n  }\n\n  if (count & 1) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = isPoint ? Vec2.ZERO : d.neg().normal().rot(xf.q);\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = d.set(this.m_normals[index]).rot(xf.q);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), r = new Vec2();\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n  var r = Vec2.sub(input.p2, input.p1);\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = r.neg().normal();\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r)).normal();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n\nCircleShape.prototype.testOverlap = function(transform, childIndex, shape, shapeTransform, shapeChildIndex) {\n  if (shape.m_type != CircleShape.TYPE) {\n    return; // Only circles are supported.\n  }\n\n  p = p.set(this.m_p).rot(transform.q).add(transform.p);\n  r = r.set(shape.m_p).rot(shapeTransform.q).add(shapeTransform.p);\n\n  var lengthSquared = p.sub(r).lengthSquared();\n  var radiusSum = this.m_radius + shape.m_radius;\n\n  return radiusSum * radiusSum > lengthSquared\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n *\n * @param {Number} radius Radius extending around the edge.\n */\nfunction EdgeShape(v1, v2, radius) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n    this.m_noAlignRot = true; // This rotation is used to align the edge to y axis,\n                              // so v1 is in origin and (v1, v2) is codirectional with y.\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  this.m_noAlignRot = true;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  clone.m_edgeRadius = this.m_edgeRadius;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nEdgeShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0) { // No radius => we never inside.\n    return false;\n  }\n  // Put the point into the edge's frame of reference.\n  p = p1.set(p).sub(xf.p).rotT(xf.q);\n\n  // Transform all points so v2 is on y axis, positive half-space, v1 is in (0, 0).\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n  p = this._alignPoint(p);\n  var v2 = this.m_alignedV2;\n\n  var radius = this.m_edgeRadius;\n  if (p.y > v2.y) {\n    var dx = p.x - v2.x, dy = p.y - v2.y;\n    return dx * dx + dy * dy < radius * radius;\n  }\n  if (p.y < 0.0) {\n    return p.x * p.x + p.y * p.y < radius * radius;\n  }\n  return -radius < p.x && p.x < radius;\n};\n\n/**\n * Creates a rotation to be used to align the edge to y axis.\n *\n * @return {Rot} Rotation used to align points.\n */\nEdgeShape.prototype._getAlignRot = function() {\n  var rot = this.m_alignRot = this.m_alignRot || new Rot();\n  this.m_noAlignRot = false;\n\n  var v1 = this.m_vertex1, v2 = this.m_vertex2;\n  var length = d.set(v2).sub(v1).length();\n\n  if (length <= Math.EPSILON) {\n    return rot;\n  }\n\n  // cos = ( x1 * x2 + y1 * y2 ) / ( length1 * length2 )\n  // sin = ( x1 * y2 - x2 * y1 ) / ( length1 * length2 )\n  // x1 = d.x, y1 = d.y\n  // x2 = 0, y2 = 1\n  // length1 = length, length2 = 1\n  rot.c = d.y / length;\n  rot.s = d.x / length;\n\n  return rot;\n};\n\n/**\n * Inline-transforms provided point so it's in coordinate system where current edge is aligned to y axis.\n *\n * @param {Vec2} p Point.\n * @return {Vec2} The transformed point.\n */\nEdgeShape.prototype._alignPoint = function(p) {\n  return p.sub(this.m_vertex1).rot(this.m_alignRot);\n};\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  if (this.m_edgeRadius > 0.0) {\n    return this.rayCastWithRadius(output, input, xf);\n  }\n\n  v1 = v1.set(this.m_vertex1);\n  v2 = v2.set(this.m_vertex2);\n  v2 = v2.sub(v1);\n  var r = v2;\n  p = p.set(r.y, -r.x);\n  var normal = p;\n  var length = normal.normalize();\n\n  if (length <= Math.EPSILON) { // The edge is a point, can't intersect.\n    return false;\n  }\n\n  // Put the ray into the edge's frame of reference.\n  p1 = p1.set(input.p1).sub(xf.p).rotT(xf.q);\n  p2 = p2.set(input.p2).sub(xf.p).rotT(xf.q);\n  d = d.set(p2).sub(p1);\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator <= Math.EPSILON) { // Ray is parallel to the edge.\n    return false;\n  }\n\n  p2 = p2.set(v1).sub(p1);\n  var numerator = Vec2.dot(normal, p2);\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var rr = length * length;\n\n  // q = p1 + t * d\n  d = d.mul(t);\n  p1 = p1.add(d);\n  var q = p1;\n\n  q = q.sub(v1);\n  var s = Vec2.dot(q, r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = normal.rot(xf.q).neg(); // We are safe to return a reference as it's coppied in c# wrapper.\n  } else {\n    output.normal = normal.rot(xf.q); // We are safe to return a reference as it's coppied in c# wrapper.\n  }\n  return true;\n};\n\n/**\n * Used internally to do ray casts if current edge has positive radius.\n *\n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n */\nEdgeShape.prototype.rayCastWithRadius = function(output, input, xf) {\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n\n  var radius = this.m_edgeRadius;\n\n  // Put the ray into the edge's frame of reference.\n  p1 = this._alignPoint( p1.set(input.p1).sub(xf.p).rotT(xf.q) );\n  p2 = this._alignPoint( p2.set(input.p2).sub(xf.p).rotT(xf.q) );\n  d = d.set(p2).sub(p1);\n  var dx = d.x;\n\n  if (-Math.EPSILON <= dx && dx <= Math.EPSILON) { // The ray runs parallel to edge y axis.\n    var px = p1.x; // Intersection point x component.\n    if (px <= -radius || radius <= px) { // The ray runs parallel to the edge and fully outside of its radius.\n      return false;\n    }\n    var height = this.m_alignedV2.y;\n    var ry = Math.sqrt(radius * radius - px * px);\n    var py = height + ry; // Intersection point y component.\n\n    if (p1.y >= py) { // The ray starts above top.\n      if (p2.y >= py) { // The ray ends above top, it's fully outside.\n        return false;\n      }\n      output.fraction = (p1.y - py) / d.length();\n      output.normal = p.set(px, ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else if (p1.y <= -ry) { // The ray starts below bottom.\n      if (p2.y <= -ry) { // The ray ends below bottom, it's fully outside.\n        return false;\n      }\n      output.fraction = (-p1.y - ry) / d.length();\n      output.normal = p.set(px, -ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else { // The ray starts between top and bottom.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n    }\n  } else { // The ray is not parallel to edge y axis.\n    var p1x = p1.x;\n    var t1 = (-radius - p1x) / dx; // Intersection points of the ray line and cylinder containing edge with radius.\n    var t2 = (radius - p1x) / dx;\n\n    if ( (t1 <= 0.0 && t2 <= 0.0) || (t1 >= 1.0 && t2 >= 1.0) ) { // Intersections are outside of the ray.\n      return false;\n    }\n\n    if (t1 > t2) {\n      var t = t1;\n      t1 = t2;\n      t2 = t;\n    }\n\n    var dy = d.y;\n    var p1y = p1.y;\n    var y1 = p1y + t1 * dy;\n    if (y1 > height) { // Line intersects cylinder above edge top.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n      var k = p1x * dx + dy * (p1y - height);\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect top circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and top circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy - height); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and top circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 >= height) { // Line and top circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects bottom semicircle of the top circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 < 0.0) { // Line intersects cylinder below edge bottom, i. e. intersects bottom circle.\n\n            c += height * (2 * p1y - height);\n            k += dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from bottom circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (y1 < 0.0) { // Line intersects cylinder below edge bottom.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + p1y * p1y - radius * radius;\n      var k = p1x * dx + p1y * dy;\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect bottom circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and bottom circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and bottom circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 <= 0.0) { // Line and bottom circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects top semicircle of the bottom circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 > height) { // Line intersects cylinder above edge bottom, i. e. intersects top circle.\n\n            c -= height * (2 * p1y - height);\n            k -= dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from top circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (t1 >= 0.0) { // The ray intersects cylinder between top and bottom (first intersection point).\n      output.fraction = t1;\n      output.normal = p.set(dx > 0.0 ? -1.0 : 1.0, 0.0); // Will be coppied in c# wrapper.\n    } else { // Start point is inside of cylinder and the ray is pointing away from first intersection point.\n      var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n\n      if (y2 > height) { // Line intersects cylinder above edge top.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n        var k = p1x * dx + dy * (p1y - height);\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and top circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the top circle.\n          return false;\n        }\n      } else if (y2 < 0.0) { // Line intersects cylinder below edge bottom.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + p1y * p1y - radius * radius;\n        var k = p1x * dx + p1y * dy;\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and bottom circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the bottom circle.\n          return false;\n        }\n      }\n      // The ray starts inside of the shape.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal();\n    }\n  }\n\n  output.normal.rotT(this.m_alignRot).rot(xf.q);\n  return true;\n};\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an impulse to the center of mass. This immediately modifies the velocity.\n * This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulseToCenter = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.isActive()) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = fixture.isActive();\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n *\n * @param {Number} radius Radius extending around the chain.\n */\nfunction ChainShape(vertices, loop, radius) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_count = this.m_vertices.length = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count > 0 ? this.m_count - 1 : 0;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n  edge.m_edgeRadius = this.m_edgeRadius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0 || this.m_count < 2) {\n    return false;\n  }\n  var vertices = this.m_vertices;\n  var edgeShape = new EdgeShape(vertices[0], vertices[1], this.m_edgeRadius);\n  if (edgeShape.testPoint(xf, p)) {\n    return true;\n  }\n  for (var count = this.m_count, i = 2; i < count; ++i) {\n    edgeShape._set(vertices[i - 1], vertices[i]);\n    if (edgeShape.testPoint(xf, p)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1), this.m_edgeRadius);\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  if (this.m_activeFlag) {\n    var childCount = this.m_proxyCount = this.m_shape.getChildCount();\n    for (var i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * Gets aabb proxy id.\n *\n * @param {Number} childIndex Child index to get proxy id for.\n */\nFixture.prototype.getProxyId = function(childIndex) {\n  return this.m_proxies[childIndex].proxyId;\n};\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  broadPhase = broadPhase || this.m_body.getWorld().m_broadPhase;\n  xf = xf || this.m_body.getTransform();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxies.length = this.m_proxyCount = this.m_shape.getChildCount();\n\n  // Create proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i] = this.m_proxies[i] || new FixtureProxy(this, i);\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null || !this.m_activeFlag) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\n/**\n * If this fixture is used in physics calculations.\n *\n * @return {boolean} True if active, false otherwise.\n */\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This fixture will be used in physics callculations if true, and skipped if false.\n */\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n\n/**\n * @function Fixture~overlapCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap current fixture.\n *\n * @param {Fixture~overlapCallback} callback Called for each fixture found.\n */\nFixture.prototype.queryOverlaps = function(callback) {\n  if (!this.m_activeFlag || this.m_proxyCount == 0) {\n    return;\n  }\n  var world = this.m_body.getWorld();\n  if (world == null) {\n    return;\n  }\n  if (this._reportOverlap == Fixture.prototype._reportOverlap) {\n    var self = this;\n    this._reportOverlap = function(fixture, proxy) {\n      Fixture.prototype._reportOverlap.call(self, fixture, proxy);\n    };\n  }\n  this._overlaps = {};\n  this._overlapCallback = callback;\n  this._transform = this.m_body.getTransform();\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    this._childIndex = i;\n    world.queryAABB(this.m_proxies[i].aabb, this._reportOverlap);\n  }\n  this._transform = this._childIndex = this._overlaps = this._overlapCallback = callback = null;\n};\n\n/**\n * Called for each overlapping fixture. Used internally.\n */\nFixture.prototype._reportOverlap = function(fixture, proxy) {\n  if (fixture == this) {\n    return true;\n  }\n  var id = fixture.m_proxies[0].proxyId;\n  if (this._overlaps[id] ||\n    !this.m_shape.testOverlap(this._transform, this._childIndex, fixture.m_shape, fixture.m_body.getTransform(), proxy.childIndex)) {\n    return true;\n  }\n  this._overlaps[id] = true;\n  return this._overlapCallback(fixture); // Dynamic tree must not be modified here.\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n * @param proxy\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  World._reportFixtureCallback = queryCallback;\n  this.m_broadPhase.query(aabb, this._queryAABBCallback);\n  World._reportFixtureCallback = null;\n};\n\n/**\n * Called for each fixture found in the query AABB.\n * Used internally.\n */\nWorld.prototype._queryAABBCallback = function(proxyId, proxy) {\n  return World._reportFixtureCallback(proxy.fixture, proxy);\n};\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  if (this._raycastCallback == World.prototype._raycastCallback) {\n    var self = this;\n    this._raycastCallback = function(input, proxyId, proxy) {\n      World.prototype._raycastCallback.call(self, input, proxyId, proxy);\n    };\n  }\n  this._hits = {};\n  this._reportFixtureCallback = reportFixtureCallback;\n  this.m_broadPhase.rayCast(null, this._raycastCallback, point1, point2, 1.0);\n  this._hits = this._reportFixtureCallback = reportFixtureCallback = null;\n};\n\n/**\n * A function that is called for each proxy that is hit by the ray.\n * Used internally.\n */\nWorld.prototype._raycastCallback = function(input, proxyId, proxy) {\n  var fixture = proxy.fixture;\n  var id = fixture.getProxyId(0);\n  if (this._hits[id]) {\n    return input.maxFraction;\n  }\n  var index = proxy.childIndex;\n  var output = {}; // TODO GC\n  var hit = fixture.rayCast(output, input, index);\n  if (hit) {\n    this._hits[id] = true;\n    var fraction = output.fraction;\n    var point = input.p1.mul(1.0 - fraction).add(input.p2.mul(fraction));\n    return this._reportFixtureCallback(fixture, point, output.normal, fraction);\n  }\n  return input.maxFraction;\n};\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyA = fixtureA.getBody();\n    if (!bodyA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyB = fixtureB.getBody();\n    if (!bodyB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id, node.userData);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  p1 = p1 || input.p1;\n  p2 = p2 || input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  maxFraction = maxFraction >= 0.0 ? maxFraction : input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(p1);\n      subInput.p2 = Vec2.clone(p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id, node.userData);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false,\n  active: true\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0,\n  active: true\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) {\n  this.m_tree.rayCast(input, rayCastCallback, p1, p2, maxFraction);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        var fixtureA = contact.m_fixtureA;\n        var fixtureB = contact.m_fixtureB;\n\n        if (!(fixtureA.isActive() && fixtureB.isActive())) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = fixtureA.m_isSensor;\n        var sensorB = fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true || je.joint.m_activeFlag == false) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        if (!(fA.isActive() && fB.isActive())) {\n          continue;\n        }\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n    var offset = Vec2.dot(n, v1);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - offset;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = edgeA.m_radius + polygonB.m_radius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n  active: true\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0,\n  active: true\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3,\n  active: true\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true,\n  active: true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n  active: true\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, -1, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          this._options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          this._options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          this._options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          this._options.fillStyle = b.render.fill;\n        } else {\n          this._options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, this._options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, this._options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, this._options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, this._options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, -p.y);\n          f.ui.rotate(-r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      this._options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, this._options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = (-a.y + -b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = -a.y - -b.y;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, -shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(-v1.y, -v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(-Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}