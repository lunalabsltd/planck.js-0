{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","normal","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_activeFlag","active","m_userData","userData","isActive","setActive","flag","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","body","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","EdgeShape","radius","m_vertex1","m_vertex2","m_edgeRadius","m_noAlignRot","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","m_alignRot","_getAlignRot","m_alignedV2","_alignPoint","rayCastWithRadius","height","ry","p1x","p1y","y1","discr","k","t3","discrSqrt","t4","y2","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","scale","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","edgeShape","_textures","render","context","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","indexOf","splice","timeout","time","setTimeout","timer","clearTimeout","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","destroyProxy","createProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","_reportFixtureCallback","_raycastCallback","undefined","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","Iterator","iterator","close","parents","states","root","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","x2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","reverse","inversed","map","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","ctx","save","lineCap","drawing","restore","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","str","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","self","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","join","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;uBACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,sBC5DanC,EAAQ,GAHrB,IAIA0B,EAAa1B,EAAQ,GACrBoC,EAAAC,KACAC,EAAAnC,EAAAD,QAAAwB,EAAAU,GAEAE,EAAAC,QAAA,KAMAD,EAAAE,SAAA,SAAAC,GACA,uBAAAA,GAAAD,SAAAC,KAAAC,MAAAD,IAGAH,EAAAK,OAAA,SAAAF,KAWAH,EAAAM,QAAA,SAAAH,GAEA,SAAAL,EAAAS,KAAAJ,IAUAH,EAAAQ,eAAA,SAAAL,GAOA,OALAA,MAAA,EACAA,MAAA,EACAA,MAAA,EACAA,MAAA,GACAA,MAAA,IACA,GAGAH,EAAAS,aAAA,SAAAN,GACA,OAAAA,EAAA,OAAAA,IAAA,IAGAH,EAAAU,IAAA,SAAAC,EAAAC,EAAAC,GAMA,YALA,IAAAD,GACAC,EAAA,EAAAD,EAAA,QACG,IAAAC,IACHA,EAAAD,IAAA,GAEAC,EAAAD,GACAD,KAAAC,IAAAC,EAAAD,KACAD,EAAA,EAAAE,EAAAD,IAEAD,KAAAE,IAAAD,EAAAC,KACAF,GAAA,EAAAC,EAAAC,IAIAb,EAAAc,MAAA,SAAAH,EAAAC,EAAAC,GACA,OAAAF,EAAAC,EACAA,EACGD,EAAAE,EACHA,EAEAF,GAIAX,EAAAe,OAAA,SAAAH,EAAAC,GAQA,YAPA,IAAAD,GACAC,EAAA,EACAD,EAAA,QACG,IAAAC,IACHA,EAAAD,EACAA,EAAA,GAEAA,GAAAC,EAAAD,EAAAd,EAAAiB,UAAAF,EAAAD,uBCxFA,IACAI,GAAsD,EAEtDnD,EAAAD,QAAAqD,EAEA,IAAAC,EAAaxD,EAAQ,GACrBqC,EAAWrC,EAAQ,GAEnB,SAAAuD,EAAAd,EAAAgB,GACA,KAAAC,gBAAAH,GACA,WAAAA,EAAAd,EAAAgB,QAEA,IAAAhB,GACAiB,KAAAjB,EAAA,EACAiB,KAAAD,EAAA,GACG,iBAAAhB,GACHiB,KAAAjB,MACAiB,KAAAD,EAAAhB,EAAAgB,IAEAC,KAAAjB,IACAiB,KAAAD,KAEAH,GAAAC,EAAAZ,OAAAe,MAQAH,EAAAI,KAAA,WACA,IAAAC,EAAA9C,OAAAY,OAAA6B,EAAAvB,WAGA,OAFA4B,EAAAnB,EAAA,EACAmB,EAAAH,EAAA,EACAG,GAMAL,EAAAM,KAAAN,EAAAI,OAEAJ,EAAAO,IAAA,SAAArB,EAAAgB,GACA,IAAAG,EAAA9C,OAAAY,OAAA6B,EAAAvB,WAGA,OAFA4B,EAAAnB,IACAmB,EAAAH,IACAG,GAGAL,EAAAQ,MAAA,SAAAC,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAT,EAAAO,IAAAE,EAAAvB,EAAAuB,EAAAP,IAGAF,EAAAvB,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,OAMAH,EAAAa,QAAA,SAAAJ,GACA,OAAAA,GAAA3B,EAAAG,SAAAwB,EAAAvB,IAAAJ,EAAAG,SAAAwB,EAAAP,IAGAF,EAAAZ,OAAA,SAAA9B,GACA,GAAAyC,IACAC,EAAAa,QAAAvD,GAEA,UAAAwD,MAAA,kBAIAd,EAAAvB,UAAA+B,MAAA,WACA,OAAAR,EAAAQ,MAAAL,OAQAH,EAAAvB,UAAAsC,QAAA,WAGA,OAFAZ,KAAAjB,EAAA,EACAiB,KAAAD,EAAA,EACAC,MAQAH,EAAAvB,UAAAuC,IAAA,SAAA9B,EAAAgB,GAWA,MAVA,iBAAAhB,GACAa,GAAAC,EAAAZ,OAAAF,GACAiB,KAAAjB,MACAiB,KAAAD,EAAAhB,EAAAgB,IAEAH,GAAAjB,EAAAM,OAAAF,GACAa,GAAAjB,EAAAM,OAAAc,GACAC,KAAAjB,IACAiB,KAAAD,KAEAC,MAMAH,EAAAvB,UAAAwC,KAAA,SAAAC,EAAAT,EAAAU,EAAAC,GACA,gBAAAD,QAAA,IAAAC,EACAjB,KAAAkB,WAAAH,EAAAT,EAAAU,EAAAC,GAEAjB,KAAAmB,OAAAJ,EAAAT,IAOAT,EAAAvB,UAAA4C,WAAA,SAAAH,EAAAT,EAAAU,EAAAC,GACArB,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAA+B,GACApB,GAAAC,EAAAZ,OAAAgC,GACA,IAAAlC,EAAAgC,EAAAT,EAAAvB,EAAAiC,EAAAC,EAAAlC,EACAgB,EAAAgB,EAAAT,EAAAP,EAAAiB,EAAAC,EAAAlB,EAKA,OAFAC,KAAAjB,IACAiB,KAAAD,IACAC,MAGAH,EAAAvB,UAAA6C,OAAA,SAAAJ,EAAAT,GACAV,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACA,IAAAvB,EAAAgC,EAAAT,EAAAvB,EACAgB,EAAAgB,EAAAT,EAAAP,EAIA,OAFAC,KAAAjB,IACAiB,KAAAD,IACAC,MAQAH,EAAAvB,UAAA8C,IAAA,SAAAH,GAIA,OAHArB,GAAAC,EAAAZ,OAAAgC,GACAjB,KAAAjB,GAAAkC,EAAAlC,EACAiB,KAAAD,GAAAkB,EAAAlB,EACAC,MAMAH,EAAAvB,UAAA+C,KAAA,SAAAN,EAAAT,EAAAU,EAAAC,GACA,gBAAAD,QAAA,IAAAC,EACAjB,KAAAsB,WAAAP,EAAAT,EAAAU,EAAAC,GAEAjB,KAAAuB,OAAAR,EAAAT,IAOAT,EAAAvB,UAAAgD,WAAA,SAAAP,EAAAT,EAAAU,EAAAC,GACArB,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAA+B,GACApB,GAAAC,EAAAZ,OAAAgC,GAEA,IAAAlC,EAAAgC,EAAAT,EAAAvB,EAAAiC,EAAAC,EAAAlC,EACAgB,EAAAgB,EAAAT,EAAAP,EAAAiB,EAAAC,EAAAlB,EAKA,OAFAC,KAAAjB,KACAiB,KAAAD,KACAC,MAGAH,EAAAvB,UAAAiD,OAAA,SAAAR,EAAAT,GACAV,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACA,IAAAvB,EAAAgC,EAAAT,EAAAvB,EACAgB,EAAAgB,EAAAT,EAAAP,EAIA,OAFAC,KAAAjB,KACAiB,KAAAD,KACAC,MAMAH,EAAAvB,UAAAkD,KAAA,SAAAT,EAAAT,EAAAU,EAAAC,GACA,gBAAAD,QAAA,IAAAC,EACAjB,KAAAyB,WAAAV,EAAAT,EAAAU,EAAAC,GAEAjB,KAAA0B,OAAAX,EAAAT,IAMAT,EAAAvB,UAAAmD,WAAA,SAAAV,EAAAT,EAAAU,EAAAC,GACArB,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAA+B,GACApB,GAAAC,EAAAZ,OAAAgC,GACA,IAAAlC,EAAAgC,EAAAT,EAAAvB,EAAAiC,EAAAC,EAAAlC,EACAgB,EAAAgB,EAAAT,EAAAP,EAAAiB,EAAAC,EAAAlB,EAKA,OAFAC,KAAAjB,KACAiB,KAAAD,KACAC,MAGAH,EAAAvB,UAAAoD,OAAA,SAAAX,EAAAT,GACAV,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAAqB,GACA,IAAAvB,EAAAgC,EAAAT,EAAAvB,EACAgB,EAAAgB,EAAAT,EAAAP,EAIA,OAFAC,KAAAjB,KACAiB,KAAAD,KACAC,MAQAH,EAAAvB,UAAAqD,IAAA,SAAAV,GAIA,OAHArB,GAAAC,EAAAZ,OAAAgC,GACAjB,KAAAjB,GAAAkC,EAAAlC,EACAiB,KAAAD,GAAAkB,EAAAlB,EACAC,MAQAH,EAAAvB,UAAAsD,IAAA,SAAA9E,GAIA,OAHA8C,GAAAjB,EAAAM,OAAAnC,GACAkD,KAAAjB,GAAAjC,EACAkD,KAAAD,GAAAjD,EACAkD,MAQAH,EAAAvB,UAAAuD,OAAA,WACA,OAAAhC,EAAAiC,SAAA9B,OAMAH,EAAAvB,UAAAyD,cAAA,WACA,OAAAlC,EAAAkC,cAAA/B,OAQAH,EAAAvB,UAAA0D,UAAA,WACA,IAAAH,EAAA7B,KAAA6B,SACA,GAAAA,EAAAlD,EAAAE,QACA,SAEA,IAAAoD,EAAA,EAAAJ,EAGA,OAFA7B,KAAAjB,GAAAkD,EACAjC,KAAAD,GAAAkC,EACAJ,GAQAhC,EAAAvB,UAAA4D,OAAA,WACA,IAAAL,EAAA7B,KAAA6B,SACA,GAAAA,EAAAlD,EAAAE,QACA,OAAAmB,KAEA,IAAAiC,EAAA,EAAAJ,EAGA,OAFA7B,KAAAjB,GAAAkD,EACAjC,KAAAD,GAAAkC,EACAjC,MASAH,EAAAvB,UAAA6D,IAAA,SAAAA,GACA,IAAApD,EAAAiB,KAAAjB,EACAgB,EAAAC,KAAAD,EAGA,OAFAC,KAAAjB,EAAAoD,EAAApF,EAAAgC,EAAAoD,EAAA1D,EAAAsB,EACAC,KAAAD,EAAAoC,EAAA1D,EAAAM,EAAAoD,EAAApF,EAAAgD,EACAC,MASAH,EAAAvB,UAAA8D,KAAA,SAAAD,GACA,IAAApD,EAAAiB,KAAAjB,EACAgB,EAAAC,KAAAD,EAGA,OAFAC,KAAAjB,EAAAoD,EAAApF,EAAAgC,EAAAoD,EAAA1D,EAAAsB,EACAC,KAAAD,GAAAoC,EAAA1D,EAAAM,EAAAoD,EAAApF,EAAAgD,EACAC,MAQAH,EAAAiC,SAAA,SAAAxB,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACA3B,EAAAQ,KAAAmB,EAAAvB,EAAAuB,EAAAvB,EAAAuB,EAAAP,EAAAO,EAAAP,IAMAF,EAAAkC,cAAA,SAAAzB,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAA,EAAAvB,EAAAuB,EAAAvB,EAAAuB,EAAAP,EAAAO,EAAAP,GAGAF,EAAAwC,SAAA,SAAA/B,EAAAW,GACArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACA,IAAAqB,EAAAhC,EAAAvB,EAAAkC,EAAAlC,EAAAwD,EAAAjC,EAAAP,EAAAkB,EAAAlB,EACA,OAAApB,EAAAQ,KAAAmD,IAAAC,MAGA1C,EAAA2C,gBAAA,SAAAlC,EAAAW,GACArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACA,IAAAqB,EAAAhC,EAAAvB,EAAAkC,EAAAlC,EAAAwD,EAAAjC,EAAAP,EAAAkB,EAAAlB,EACA,OAAAuC,IAAAC,KAGA1C,EAAA4C,SAAA,SAAAnC,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACAX,GAAAW,GAAA,iBAAAA,GAAA,OAAAA,GAAAX,EAAAvB,IAAAkC,EAAAlC,GAAAuB,EAAAP,IAAAkB,EAAAlB,GAMAF,EAAA6C,KAAA,SAAApC,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAT,EAAAO,KAAAE,EAAAP,EAAAO,EAAAvB,IAMAc,EAAA8C,IAAA,SAAArC,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACAX,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,GASAF,EAAA+C,MAAA,SAAAtC,EAAAW,GACA,uBAAAA,GACArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAAgC,GACApB,EAAAO,IAAAa,EAAAX,EAAAP,GAAAkB,EAAAX,EAAAvB,IAEG,iBAAAuB,GACHV,GAAAjB,EAAAM,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,KAAAE,EAAAW,EAAAlB,EAAAO,EAAAW,EAAAlC,KAGAa,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACAX,EAAAvB,EAAAkC,EAAAlB,EAAAO,EAAAP,EAAAkB,EAAAlC,IAOAc,EAAAgD,SAAA,SAAA9B,EAAAT,EAAAW,GACA,uBAAAA,GACArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAjB,EAAAM,OAAAgC,GACApB,EAAAO,IAAAa,EAAAX,EAAAP,EAAAgB,EAAAhC,GAAAkC,EAAAX,EAAAvB,EAAAgC,EAAAhB,IAEG,iBAAAO,GACHV,GAAAjB,EAAAM,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,KAAAE,EAAAW,EAAAlB,EAAAgB,EAAAhC,EAAAuB,EAAAW,EAAAlC,EAAAgC,EAAAhB,SAGAH,GAAAE,EAAAb,QAAA,KAGAY,EAAAuB,IAAA,SAAAd,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAAE,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,IAMAF,EAAAwB,KAAA,SAAAN,EAAAT,EAAAU,EAAAC,GACA,gBAAAD,QAAA,IAAAC,EACApB,EAAAiD,QAAA/B,EAAAT,EAAAU,EAAAC,GAEApB,EAAA+B,IAAAb,EAAAT,IAIAT,EAAAiD,QAAA,SAAA/B,EAAAT,EAAAU,EAAAC,GACA,OAAApB,EAAAI,OAAAiB,WAAAH,EAAAT,EAAAU,EAAAC,IAGApB,EAAA8B,IAAA,SAAArB,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAAE,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,IAGAF,EAAA+B,IAAA,SAAAb,EAAAC,GACA,uBAAAD,GACAnB,GAAAC,EAAAZ,OAAA8B,GACAnB,GAAAjB,EAAAM,OAAA+B,GACAnB,EAAAO,IAAAW,EAAAhC,EAAAiC,EAAAD,EAAAhB,EAAAiB,IAEG,iBAAAA,GACHpB,GAAAjB,EAAAM,OAAA8B,GACAnB,GAAAC,EAAAZ,OAAA+B,GACAnB,EAAAO,IAAAW,EAAAC,EAAAjC,EAAAgC,EAAAC,EAAAjB,SAHG,GAOHF,EAAAvB,UAAAyE,IAAA,WAGA,OAFA/C,KAAAjB,GAAAiB,KAAAjB,EACAiB,KAAAD,GAAAC,KAAAD,EACAC,MAGAH,EAAAkD,IAAA,SAAAzC,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAT,EAAAO,KAAAE,EAAAvB,GAAAuB,EAAAP,IAGAF,EAAAmD,IAAA,SAAA1C,GAEA,OADAV,GAAAC,EAAAZ,OAAAqB,GACAT,EAAAO,IAAAzB,EAAAqE,IAAA1C,EAAAvB,GAAAJ,EAAAqE,IAAA1C,EAAAP,KAGAF,EAAAoD,IAAA,SAAA3C,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAA,IAAAE,EAAAvB,EAAAkC,EAAAlC,GAAA,IAAAuB,EAAAP,EAAAkB,EAAAlB,KAGAF,EAAAqD,MAAA,SAAA5C,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAAzB,EAAAc,IAAAa,EAAAvB,EAAAkC,EAAAlC,GAAAJ,EAAAc,IAAAa,EAAAP,EAAAkB,EAAAlB,KAGAF,EAAAsD,MAAA,SAAA7C,EAAAW,GAGA,OAFArB,GAAAC,EAAAZ,OAAAqB,GACAV,GAAAC,EAAAZ,OAAAgC,GACApB,EAAAO,IAAAzB,EAAAa,IAAAc,EAAAvB,EAAAkC,EAAAlC,GAAAJ,EAAAa,IAAAc,EAAAP,EAAAkB,EAAAlB,KAGAF,EAAAvB,UAAAoB,MAAA,SAAAD,GACA,IAAA2D,EAAApD,KAAAjB,EAAAiB,KAAAjB,EAAAiB,KAAAD,EAAAC,KAAAD,EACA,GAAAqD,EAAA3D,IAAA,CACA,IAAAwC,EAAAtD,EAAAO,QAAAkE,GACApD,KAAAjB,GAAAkD,EAAAxC,EACAO,KAAAD,GAAAkC,EAAAxC,EAEA,OAAAO,MAGAH,EAAAH,MAAA,SAAAY,EAAAb,GAGA,OAFAa,EAAAT,EAAAO,IAAAE,EAAAvB,EAAAuB,EAAAP,IACAL,MAAAD,GACAa,GAMAT,EAAAwD,QAAA,SAAAtE,EAAAgB,GACA,gBAAAO,GACA,OAAAT,EAAAO,IAAAE,EAAAvB,IAAAuB,EAAAP,OAOAF,EAAAyD,YAAA,SAAAvE,EAAAgB,GACA,gBAAAO,GACA,OAAAT,EAAAO,IAAAE,EAAAvB,IAAAuB,EAAAP,wBCziBAvD,EAAA+G,MAAA,aAKA/G,EAAAyC,OAAA,SAAAuE,EAAAC,EAAAC,sBCcAjH,EAAAD,QAAAmH,EAEarH,EAAQ,GAArB,IACAuD,EAAWvD,EAAQ,GACnBqC,EAAWrC,EAAQ,GAOnB,SAAAqH,EAAAC,GACA,KAAA5D,gBAAA2D,GACA,WAAAA,EAAAC,GAEA,iBAAAA,EACA5D,KAAA6D,SAAAD,GACG,iBAAAA,EACH5D,KAAAa,IAAA+C,GAEA5D,KAAA8D,cAIAH,EAAAvD,IAAA,SAAAwD,GACA,IAAA1D,EAAA9C,OAAAY,OAAA2F,EAAArF,WAEA,OADA4B,EAAA2D,SAAAD,GACA1D,GAGAyD,EAAAtD,MAAA,SAAA8B,GAEA,IAAAjC,EAAA9C,OAAAY,OAAA2F,EAAArF,WAGA,OAFA4B,EAAAzB,EAAA0D,EAAA1D,EACAyB,EAAAnD,EAAAoF,EAAApF,EACAmD,GAGAyD,EAAAI,SAAA,WACA,IAAA7D,EAAA9C,OAAAY,OAAA2F,EAAArF,WAGA,OAFA4B,EAAAzB,EAAA,EACAyB,EAAAnD,EAAA,EACAmD,GAGAyD,EAAAjD,QAAA,SAAAvD,GACA,OAAAA,GAAAwB,EAAAG,SAAA3B,EAAAsB,IAAAE,EAAAG,SAAA3B,EAAAJ,IAGA4G,EAAA1E,OAAA,SAAA9B,KAWAwG,EAAArF,UAAAwF,YAAA,WACA9D,KAAAvB,EAAA,EACAuB,KAAAjD,EAAA,GAGA4G,EAAArF,UAAAuC,IAAA,SAAA+C,GACA,iBAAAA,GAEA5D,KAAAvB,EAAAmF,EAAAnF,EACAuB,KAAAjD,EAAA6G,EAAA7G,IAKAiD,KAAAvB,EAAAE,EAAAqF,IAAAJ,GACA5D,KAAAjD,EAAA4B,EAAAsF,IAAAL,KAOAD,EAAArF,UAAAuF,SAAA,SAAAD,GAGA5D,KAAAvB,EAAAE,EAAAqF,IAAAJ,GACA5D,KAAAjD,EAAA4B,EAAAsF,IAAAL,IAMAD,EAAArF,UAAA4F,SAAA,WACA,OAAAvF,EAAAwF,MAAAnE,KAAAvB,EAAAuB,KAAAjD,IAMA4G,EAAArF,UAAA8F,SAAA,WACA,OAAAvE,EAAAO,IAAAJ,KAAAjD,EAAAiD,KAAAvB,IAMAkF,EAAArF,UAAA+F,SAAA,WACA,OAAAxE,EAAAO,KAAAJ,KAAAvB,EAAAuB,KAAAjD,IAYA4G,EAAA/B,IAAA,SAAAO,EAAArF,GAEA,SAAAA,GAAA,MAAAA,EAAA,CAMA,IAAAwH,EAAAX,EAAAI,WAGA,OAFAO,EAAA7F,EAAA0D,EAAA1D,EAAA3B,EAAAC,EAAAoF,EAAApF,EAAAD,EAAA2B,EACA6F,EAAAvH,EAAAoF,EAAApF,EAAAD,EAAAC,EAAAoF,EAAA1D,EAAA3B,EAAA2B,EACA6F,EAEG,SAAAxH,GAAA,MAAAA,EAEH,OAAA+C,EAAAO,IAAA+B,EAAApF,EAAAD,EAAAiC,EAAAoD,EAAA1D,EAAA3B,EAAAiD,EAAAoC,EAAA1D,EAAA3B,EAAAiC,EAAAoD,EAAApF,EAAAD,EAAAiD,IAIA4D,EAAAY,OAAA,SAAApC,EAAArF,GAOA,IAAAwH,EAAAX,EAAAI,WAGA,OAFAO,EAAA7F,EAAA0D,EAAA1D,EAAA3B,EAAAC,EAAAoF,EAAApF,EAAAD,EAAA2B,EACA6F,EAAAvH,EAAAoF,EAAApF,EAAAD,EAAAC,EAAAoF,EAAA1D,EAAA3B,EAAA2B,EACA6F,GAGAX,EAAAa,QAAA,SAAArC,EAAArF,GAGA,OAAA+C,EAAAO,IAAA+B,EAAApF,EAAAD,EAAAiC,EAAAoD,EAAA1D,EAAA3B,EAAAiD,EAAAoC,EAAA1D,EAAA3B,EAAAiC,EAAAoD,EAAApF,EAAAD,EAAAiD,IAGA4D,EAAAc,OAAA,SAAAtC,EAAA7B,EAAAW,GACA,IAAAlC,EAAAoD,EAAApF,GAAAuD,EAAAvB,EAAAkC,EAAAlC,GAAAoD,EAAA1D,GAAA6B,EAAAP,EAAAkB,EAAAlB,GACAA,EAAAoC,EAAA1D,GAAA6B,EAAAvB,EAAAkC,EAAAlB,GAAAoC,EAAApF,GAAAuD,EAAAP,EAAAkB,EAAAlB,GACA,OAAAF,EAAAO,IAAArB,EAAAgB,IAYA4D,EAAAe,KAAA,SAAAvC,EAAArF,GACA,SAAAA,GAAA,MAAAA,EAAA,CAMA,IAAAwH,EAAAX,EAAAI,WAGA,OAFAO,EAAA7F,EAAA0D,EAAApF,EAAAD,EAAA2B,EAAA0D,EAAA1D,EAAA3B,EAAAC,EACAuH,EAAAvH,EAAAoF,EAAApF,EAAAD,EAAAC,EAAAoF,EAAA1D,EAAA3B,EAAA2B,EACA6F,EAEG,SAAAxH,GAAA,MAAAA,EAEH,OAAA+C,EAAAO,IAAA+B,EAAApF,EAAAD,EAAAiC,EAAAoD,EAAA1D,EAAA3B,EAAAiD,GAAAoC,EAAA1D,EAAA3B,EAAAiC,EAAAoD,EAAApF,EAAAD,EAAAiD,IAIA4D,EAAAgB,QAAA,SAAAxC,EAAArF,GAMA,IAAAwH,EAAAX,EAAAI,WAGA,OAFAO,EAAA7F,EAAA0D,EAAApF,EAAAD,EAAA2B,EAAA0D,EAAA1D,EAAA3B,EAAAC,EACAuH,EAAAvH,EAAAoF,EAAApF,EAAAD,EAAAC,EAAAoF,EAAA1D,EAAA3B,EAAA2B,EACA6F,GAGAX,EAAAiB,SAAA,SAAAzC,EAAArF,GAEA,OAAA+C,EAAAO,IAAA+B,EAAApF,EAAAD,EAAAiC,EAAAoD,EAAA1D,EAAA3B,EAAAiD,GAAAoC,EAAA1D,EAAA3B,EAAAiC,EAAAoD,EAAApF,EAAAD,EAAAiD,qBC5MAtD,EAAAD,QAAAqI,EAEavI,EAAQ,GAArB,IACAuD,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAYlB,SAAAuI,EAAAC,EAAAC,GACA,KAAA/E,gBAAA6E,GACA,WAAAA,EAAAC,EAAAC,GAEA/E,KAAAxB,EAAAqB,EAAAI,OACAD,KAAAgF,EAAArB,EAAAI,gBACA,IAAAe,GACA9E,KAAAxB,EAAAqC,IAAAiE,QAEA,IAAAC,GACA/E,KAAAgF,EAAAnE,IAAAkE,GAIAF,EAAAxE,MAAA,SAAA4E,GACA,IAAA/E,EAAA9C,OAAAY,OAAA6G,EAAAvG,WAGA,OAFA4B,EAAA1B,EAAAqB,EAAAQ,MAAA4E,EAAAzG,GACA0B,EAAA8E,EAAArB,EAAAtD,MAAA4E,EAAAD,GACA9E,GAGA2E,EAAAzE,IAAA,SAAA0E,EAAAC,GACA,IAAA7E,EAAA9C,OAAAY,OAAA6G,EAAAvG,WAGA,OAFA4B,EAAA1B,EAAAqB,EAAAQ,MAAAyE,GACA5E,EAAA8E,EAAArB,EAAAtD,MAAA0E,GACA7E,GAGA2E,EAAAd,SAAA,WACA,IAAA7D,EAAA9C,OAAAY,OAAA6G,EAAAvG,WAGA,OAFA4B,EAAA1B,EAAAqB,EAAAI,OACAC,EAAA8E,EAAArB,EAAAI,WACA7D,GAMA2E,EAAAvG,UAAAwF,YAAA,WACA9D,KAAAxB,EAAAoC,UACAZ,KAAAgF,EAAAlB,eAMAe,EAAAvG,UAAAuC,IAAA,SAAAE,EAAAC,QACA,IAAAA,GACAhB,KAAAxB,EAAAqC,IAAAE,EAAAvC,GACAwB,KAAAgF,EAAAnE,IAAAE,EAAAiE,KAEAhF,KAAAxB,EAAAqC,IAAAE,GACAf,KAAAgF,EAAAnE,IAAAG,KAIA6D,EAAAnE,QAAA,SAAAvD,GACA,OAAAA,GAAA0C,EAAAa,QAAAvD,EAAAqB,IAAAmF,EAAAjD,QAAAvD,EAAA6H,IAGAH,EAAA5F,OAAA,SAAA9B,KAiBA0H,EAAAjD,IAAA,SAAAb,EAAAC,GAEA,GAAAkE,MAAAC,QAAAnE,GAAA,CAEA,IADA,IAAAoE,EAAA,GACA1I,EAAA,EAAmBA,EAAAsE,EAAAa,OAAcnF,IACjC0I,EAAA1I,GAAAmI,EAAAjD,IAAAb,EAAAC,EAAAtE,IAEA,OAAA0I,EAEG,SAAApE,GAAA,MAAAA,EAAA,CAEH,IAAAjC,EAAAgC,EAAAiE,EAAAjI,EAAAiE,EAAAjC,EAAAgC,EAAAiE,EAAAvG,EAAAuC,EAAAjB,EAAAgB,EAAAvC,EAAAO,EACAgB,EAAAgB,EAAAiE,EAAAvG,EAAAuC,EAAAjC,EAAAgC,EAAAiE,EAAAjI,EAAAiE,EAAAjB,EAAAgB,EAAAvC,EAAAuB,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,GAEG,SAAAiB,GAAA,MAAAA,EAAA,CAIH,IAAAiE,EAAAJ,EAAAd,WAGA,OAFAkB,EAAAD,EAAArB,EAAAY,OAAAxD,EAAAiE,EAAAhE,EAAAgE,GACAC,EAAAzG,EAAAqB,EAAAuB,IAAAuC,EAAAa,QAAAzD,EAAAiE,EAAAhE,EAAAxC,GAAAuC,EAAAvC,GACAyG,IAOAJ,EAAAQ,OAAA,SAAAtE,EAAAC,GAGA,IADA,IAAAoE,EAAA,GACA1I,EAAA,EAAiBA,EAAAsE,EAAAa,OAAcnF,IAC/B0I,EAAA1I,GAAAmI,EAAAjD,IAAAb,EAAAC,EAAAtE,IAEA,OAAA0I,GAMAP,EAAAS,MAAA,SAAAvE,GAEA,gBAAAC,GACA,OAAA6D,EAAAjD,IAAAb,EAAAC,KAIA6D,EAAAL,QAAA,SAAAzD,EAAAC,GAGA,IAAAjC,EAAAgC,EAAAiE,EAAAjI,EAAAiE,EAAAjC,EAAAgC,EAAAiE,EAAAvG,EAAAuC,EAAAjB,EAAAgB,EAAAvC,EAAAO,EACAgB,EAAAgB,EAAAiE,EAAAvG,EAAAuC,EAAAjC,EAAAgC,EAAAiE,EAAAjI,EAAAiE,EAAAjB,EAAAgB,EAAAvC,EAAAuB,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,IAGA8E,EAAAU,MAAA,SAAAxE,EAAAC,GAKA,IAAAiE,EAAAJ,EAAAd,WAGA,OAFAkB,EAAAD,EAAArB,EAAAY,OAAAxD,EAAAiE,EAAAhE,EAAAgE,GACAC,EAAAzG,EAAAqB,EAAAuB,IAAAuC,EAAAa,QAAAzD,EAAAiE,EAAAhE,EAAAxC,GAAAuC,EAAAvC,GACAyG,GAYAJ,EAAAH,KAAA,SAAA3D,EAAAC,GAEA,SAAAA,GAAA,MAAAA,EAAA,CAEA,IAAAwE,EAAAxE,EAAAjC,EAAAgC,EAAAvC,EAAAO,EACA0G,EAAAzE,EAAAjB,EAAAgB,EAAAvC,EAAAuB,EACAhB,EAAAgC,EAAAiE,EAAAjI,EAAAyI,EAAAzE,EAAAiE,EAAAvG,EAAAgH,EACA1F,GAAAgB,EAAAiE,EAAAvG,EAAA+G,EAAAzE,EAAAiE,EAAAjI,EAAA0I,EACA,OAAA5F,EAAAO,IAAArB,EAAAgB,GAEG,SAAAiB,GAAA,MAAAA,EAAA,CAIH,IAAAiE,EAAAJ,EAAAd,WAGA,OAFAkB,EAAAD,EAAAnE,IAAA8C,EAAAgB,QAAA5D,EAAAiE,EAAAhE,EAAAgE,IACAC,EAAAzG,EAAAqC,IAAA8C,EAAAiB,SAAA7D,EAAAiE,EAAAnF,EAAA8B,IAAAX,EAAAxC,EAAAuC,EAAAvC,KACAyG,IAIAJ,EAAAD,SAAA,SAAA7D,EAAAC,GAGA,IAAAwE,EAAAxE,EAAAjC,EAAAgC,EAAAvC,EAAAO,EACA0G,EAAAzE,EAAAjB,EAAAgB,EAAAvC,EAAAuB,EACAhB,EAAAgC,EAAAiE,EAAAjI,EAAAyI,EAAAzE,EAAAiE,EAAAvG,EAAAgH,EACA1F,GAAAgB,EAAAiE,EAAAvG,EAAA+G,EAAAzE,EAAAiE,EAAAjI,EAAA0I,EACA,OAAA5F,EAAAO,IAAArB,EAAAgB,IAGA8E,EAAAa,OAAA,SAAA3E,EAAAC,GAKA,IAAAiE,EAAAJ,EAAAd,WAGA,OAFAkB,EAAAD,EAAAnE,IAAA8C,EAAAgB,QAAA5D,EAAAiE,EAAAhE,EAAAgE,IACAC,EAAAzG,EAAAqC,IAAA8C,EAAAiB,SAAA7D,EAAAiE,EAAAnF,EAAA8B,IAAAX,EAAAxC,EAAAuC,EAAAvC,KACAyG,oBCnNA,IAKAU,EAAAnJ,EAWAmJ,EAAAC,kBAAA,EAMAD,EAAAE,mBAAA,GAMAF,EAAAG,cAAA,GAOAH,EAAAI,eAAA,EAMAJ,EAAAK,WAAA,KACAL,EAAAM,kBAAAN,EAAAK,WAAAL,EAAAK,WAMAL,EAAAO,YAAA,MAAAvH,KAAAwH,GAQAR,EAAAS,cAAA,EAAAT,EAAAK,WAKAL,EAAAU,YAAA,EAOAV,EAAAW,eAAA,GAKAX,EAAAY,iBAAA,GAKAZ,EAAAa,qBAAA,GAMAb,EAAAc,kBAAA,EAMAd,EAAAe,oBAAA,GAMAf,EAAAgB,qBAAA,MAAAhI,KAAAwH,GAMAR,EAAAiB,eAAA,EACAjB,EAAAkB,sBAAAlB,EAAAiB,eAAAjB,EAAAiB,eAMAjB,EAAAmB,YAAA,GAAAnI,KAAAwH,GACAR,EAAAoB,mBAAApB,EAAAmB,YAAAnB,EAAAmB,YAOAnB,EAAAqB,UAAA,GACArB,EAAAsB,YAAA,IAOAtB,EAAAuB,YAAA,GAKAvB,EAAAwB,qBAAA,IAEAxB,EAAAyB,wBAAAzI,KAAA0I,IAAA1B,EAAAwB,qBAAA,GAKAxB,EAAA2B,sBAAA,MAAA3I,KAAAwH,GAEAR,EAAA4B,yBAAA5I,KAAA0I,IAAA1B,EAAA2B,sBAAA,kBC9JA,sBAAAlK,OAAAY,OACAvB,EAAAD,QAAA,SAAAgL,EAAAC,GACA,OAAArK,OAAAY,OAAAnB,KAAAO,OAAAoK,EAAAC,QAEC,CASD,SAAAC,KARAjL,EAAAD,QAAA,SAAAgL,EAAAC,GACA,GAAAA,EACA,MAAA9G,MAAA,qCACA,oBAAA6G,GAAA,OAAAA,EACA,MAAA7G,MAAA,sBAEA,OADA+G,EAAApJ,UAAAkJ,EACA,IAAAE,qBCRAtK,OAAAkB,UAAAqJ,qBAEAlL,EAAAD,QAAA,SAAAoL,EAAAC,GAKA,QAAA5J,KAJA2J,UACAA,EAAA,IAGAC,EACAA,EAAAtJ,eAAAN,SAAA,IAAA2J,EAAA3J,KACA2J,EAAA3J,GAAA4J,EAAA5J,IAIA,sBAAAb,OAAA0K,sBAEA,IADA,IAAAC,EAAA3K,OAAA0K,sBAAAD,GACAnL,EAAA,EAAmBA,EAAAqL,EAAAlG,OAAoBnF,IAAA,CACvC,IAAAsL,EAAAD,EAAArL,GACAmL,EAAAF,qBAAAK,SAAA,IAAAJ,EAAA3J,KACA2J,EAAAI,GAAAH,EAAAG,IAIA,OAAAJ,oBCNA,IACAhI,GAAsD,EAEtDnD,EAAAD,QAAAyL,EAEa3L,EAAQ,GAArB,IACAqC,EAAWrC,EAAQ,GAEnB,SAAA2L,EAAAlJ,EAAAgB,EAAAmI,GACA,KAAAlI,gBAAAiI,GACA,WAAAA,EAAAlJ,EAAAgB,EAAAmI,QAEA,IAAAnJ,GACAiB,KAAAjB,EAAA,EAAAiB,KAAAD,EAAA,EAAAC,KAAAkI,EAAA,GACG,iBAAAnJ,GACHiB,KAAAjB,MAAAiB,KAAAD,EAAAhB,EAAAgB,EAAAC,KAAAkI,EAAAnJ,EAAAmJ,IAEAlI,KAAAjB,IAAAiB,KAAAD,IAAAC,KAAAkI,KAEAtI,GAAAqI,EAAAhJ,OAAAe,MAGAiI,EAAA7H,IAAA,SAAArB,EAAAgB,EAAAmI,GACA,IAAAhI,EAAA9C,OAAAY,OAAAiK,EAAA3J,WAIA,OAHA4B,EAAAnB,IACAmB,EAAAH,IACAG,EAAAgI,IACAhI,GAGA+H,EAAA5H,MAAA,SAAAC,GAEA,OADAV,GAAAqI,EAAAhJ,OAAAqB,GACA2H,EAAA7H,IAAAE,EAAAvB,EAAAuB,EAAAP,EAAAO,EAAA4H,IAGAD,EAAA3J,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,OAMAiI,EAAAvH,QAAA,SAAAJ,GACA,OAAAA,GAAA3B,EAAAG,SAAAwB,EAAAvB,IAAAJ,EAAAG,SAAAwB,EAAAP,IAAApB,EAAAG,SAAAwB,EAAA4H,IAGAD,EAAAhJ,OAAA,SAAA9B,GACA,GAAAyC,IACAqI,EAAAvH,QAAAvD,GAEA,UAAAwD,MAAA,kBAIAsH,EAAA3J,UAAAsC,QAAA,WAIA,OAHAZ,KAAAjB,EAAA,EACAiB,KAAAD,EAAA,EACAC,KAAAkI,EAAA,EACAlI,MAGAiI,EAAA3J,UAAAuC,IAAA,SAAA9B,EAAAgB,EAAAmI,GAIA,OAHAlI,KAAAjB,IACAiB,KAAAD,IACAC,KAAAkI,IACAlI,MAGAiI,EAAA3J,UAAA8C,IAAA,SAAAH,GAIA,OAHAjB,KAAAjB,GAAAkC,EAAAlC,EACAiB,KAAAD,GAAAkB,EAAAlB,EACAC,KAAAkI,GAAAjH,EAAAiH,EACAlI,MAGAiI,EAAA3J,UAAAqD,IAAA,SAAAV,GAIA,OAHAjB,KAAAjB,GAAAkC,EAAAlC,EACAiB,KAAAD,GAAAkB,EAAAlB,EACAC,KAAAkI,GAAAjH,EAAAiH,EACAlI,MAGAiI,EAAA3J,UAAAsD,IAAA,SAAA9E,GAIA,OAHAkD,KAAAjB,GAAAjC,EACAkD,KAAAD,GAAAjD,EACAkD,KAAAkI,GAAApL,EACAkD,MAGAiI,EAAAxF,SAAA,SAAAnC,EAAAW,GAGA,OAFArB,GAAAqI,EAAAhJ,OAAAqB,GACAV,GAAAqI,EAAAhJ,OAAAgC,GACAX,GAAAW,GACA,iBAAAX,GAAA,OAAAA,GACA,iBAAAW,GAAA,OAAAA,GACAX,EAAAvB,IAAAkC,EAAAlC,GAAAuB,EAAAP,IAAAkB,EAAAlB,GAAAO,EAAA4H,IAAAjH,EAAAiH,GAMAD,EAAAtF,IAAA,SAAArC,EAAAW,GACA,OAAAX,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,EAAAO,EAAA4H,EAAAjH,EAAAiH,GAMAD,EAAArF,MAAA,SAAAtC,EAAAW,GACA,WAAAgH,EACA3H,EAAAP,EAAAkB,EAAAiH,EAAA5H,EAAA4H,EAAAjH,EAAAlB,EACAO,EAAA4H,EAAAjH,EAAAlC,EAAAuB,EAAAvB,EAAAkC,EAAAiH,EACA5H,EAAAvB,EAAAkC,EAAAlB,EAAAO,EAAAP,EAAAkB,EAAAlC,IAIAkJ,EAAA7G,IAAA,SAAAd,EAAAW,GACA,WAAAgH,EAAA3H,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,EAAAO,EAAA4H,EAAAjH,EAAAiH,IAGAD,EAAAtG,IAAA,SAAArB,EAAAW,GACA,WAAAgH,EAAA3H,EAAAvB,EAAAkC,EAAAlC,EAAAuB,EAAAP,EAAAkB,EAAAlB,EAAAO,EAAA4H,EAAAjH,EAAAiH,IAGAD,EAAArG,IAAA,SAAAtB,EAAAxD,GACA,WAAAmL,EAAAnL,EAAAwD,EAAAvB,EAAAjC,EAAAwD,EAAAP,EAAAjD,EAAAwD,EAAA4H,IAGAD,EAAA3J,UAAAyE,IAAA,WAIA,OAHA/C,KAAAjB,GAAAiB,KAAAjB,EACAiB,KAAAD,GAAAC,KAAAD,EACAC,KAAAkI,GAAAlI,KAAAkI,EACAlI,MAGAiI,EAAAlF,IAAA,SAAAzC,GACA,WAAA2H,GAAA3H,EAAAvB,GAAAuB,EAAAP,GAAAO,EAAA4H,qBCrIAzL,EAAAD,QAAA2L,EAEa7L,EAAQ,GACVA,EAAQ,GADnB,IAEAuD,EAAWvD,EAAQ,GAKnB,SAAA6L,EAAApH,EAAAC,EAAAjE,EAAAC,GACA,iBAAA+D,GAAA,OAAAA,GACAf,KAAAoI,GAAAvI,EAAAQ,MAAAU,GACAf,KAAAqI,GAAAxI,EAAAQ,MAAAW,IACG,iBAAAD,GACHf,KAAAoI,GAAAvI,EAAAO,IAAAW,EAAAhE,GACAiD,KAAAqI,GAAAxI,EAAAO,IAAAY,EAAAhE,KAEAgD,KAAAoI,GAAAvI,EAAAI,OACAD,KAAAqI,GAAAxI,EAAAI,QAIAkI,EAAA7J,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,OAGAmI,EAAAzH,QAAA,SAAAvD,GACA,OAAAA,GAAA0C,EAAAa,QAAAvD,EAAAiL,KAAAvI,EAAAa,QAAAvD,EAAAkL,KAGAF,EAAAlJ,OAAA,SAAA9B,KAQAgL,EAAA7J,UAAAuC,IAAA,SAAAE,EAAAC,EAAAjE,EAAAC,GACA,iBAAA+D,GAAA,iBAAAC,GAAA,iBAAAjE,GACA,iBAAAC,GACAgD,KAAAoI,GAAAvH,IAAAE,EAAAhE,GACAiD,KAAAqI,GAAAxH,IAAAG,EAAAhE,IAEG,iBAAA+D,GAAA,iBAAAC,GACHhB,KAAAoI,GAAAvH,IAAAE,GACAf,KAAAqI,GAAAxH,IAAAG,IAEG,iBAAAD,IAEHf,KAAAoI,GAAAvH,IAAAE,EAAAqH,IACApI,KAAAqI,GAAAxH,IAAAE,EAAAsH,MAOAF,EAAA7J,UAAAwF,YAAA,WACA9D,KAAAoI,GAAArJ,EAAA,EACAiB,KAAAqI,GAAAtJ,EAAA,EACAiB,KAAAoI,GAAArI,EAAA,EACAC,KAAAqI,GAAAtI,EAAA,GAGAoI,EAAA7J,UAAAsC,QAAA,WACAZ,KAAAoI,GAAArJ,EAAA,EACAiB,KAAAqI,GAAAtJ,EAAA,EACAiB,KAAAoI,GAAArI,EAAA,EACAC,KAAAqI,GAAAtI,EAAA,GAGAoI,EAAA7J,UAAAgK,WAAA,WACA,IAAAvH,EAAAf,KAAAoI,GAAArJ,EACAiC,EAAAhB,KAAAqI,GAAAtJ,EACAhC,EAAAiD,KAAAoI,GAAArI,EACA/C,EAAAgD,KAAAqI,GAAAtI,EACAwI,EAAAxH,EAAA/D,EAAAgE,EAAAjE,EACA,GAAAwL,IACAA,EAAA,EAAAA,GAEA,IAAAC,EAAA,IAAAL,EAKA,OAJAK,EAAAJ,GAAArJ,EAAAwJ,EAAAvL,EACAwL,EAAAH,GAAAtJ,GAAAwJ,EAAAvH,EACAwH,EAAAJ,GAAArI,GAAAwI,EAAAxL,EACAyL,EAAAH,GAAAtI,EAAAwI,EAAAxH,EACAyH,GAOAL,EAAA7J,UAAAmK,MAAA,SAAAnI,GAEA,IAAAS,EAAAf,KAAAoI,GAAArJ,EACAiC,EAAAhB,KAAAqI,GAAAtJ,EACAhC,EAAAiD,KAAAoI,GAAArI,EACA/C,EAAAgD,KAAAqI,GAAAtI,EACAwI,EAAAxH,EAAA/D,EAAAgE,EAAAjE,EACA,GAAAwL,IACAA,EAAA,EAAAA,GAEA,IAAAtH,EAAApB,EAAAI,OAGA,OAFAgB,EAAAlC,EAAAwJ,GAAAvL,EAAAsD,EAAAvB,EAAAiC,EAAAV,EAAAP,GACAkB,EAAAlB,EAAAwI,GAAAxH,EAAAT,EAAAP,EAAAhD,EAAAuD,EAAAvB,GACAkC,GAOAkH,EAAAvG,IAAA,SAAA8G,EAAApI,GACA,GAAAA,GAAA,MAAAA,GAAA,MAAAA,EAAA,CAEA,IAAAvB,EAAA2J,EAAAN,GAAArJ,EAAAuB,EAAAvB,EAAA2J,EAAAL,GAAAtJ,EAAAuB,EAAAP,EACAA,EAAA2I,EAAAN,GAAArI,EAAAO,EAAAvB,EAAA2J,EAAAL,GAAAtI,EAAAO,EAAAP,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,GAEG,GAAAO,GAAA,OAAAA,GAAA,OAAAA,EAEH,WAAA6H,EAAAtI,EAAA+B,IAAA8G,EAAApI,EAAA8H,IAAAvI,EAAA+B,IAAA8G,EAAApI,EAAA+H,MAMAF,EAAA3D,QAAA,SAAAkE,EAAApI,GAEA,IAAAvB,EAAA2J,EAAAN,GAAArJ,EAAAuB,EAAAvB,EAAA2J,EAAAL,GAAAtJ,EAAAuB,EAAAP,EACAA,EAAA2I,EAAAN,GAAArI,EAAAO,EAAAvB,EAAA2J,EAAAL,GAAAtI,EAAAO,EAAAP,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,IAGAoI,EAAAQ,SAAA,SAAAD,EAAApI,GAEA,WAAA6H,EAAAtI,EAAA+B,IAAA8G,EAAApI,EAAA8H,IAAAvI,EAAA+B,IAAA8G,EAAApI,EAAA+H,MASAF,EAAAzD,KAAA,SAAAgE,EAAApI,GACA,OAAAA,GAAA,MAAAA,GAAA,MAAAA,EAEAT,EAAAO,IAAAP,EAAA8C,IAAArC,EAAAoI,EAAAN,IAAAvI,EAAA8C,IAAArC,EAAAoI,EAAAL,KAEG/H,GAAA,OAAAA,GAAA,OAAAA,EAIH,IAAA6H,EAFAtI,EAAAO,IAAAP,EAAA8C,IAAA+F,EAAAN,GAAA9H,EAAA8H,IAAAvI,EAAA8C,IAAA+F,EAAAL,GAAA/H,EAAA8H,KACAvI,EAAAO,IAAAP,EAAA8C,IAAA+F,EAAAN,GAAA9H,EAAA+H,IAAAxI,EAAA8C,IAAA+F,EAAAL,GAAA/H,EAAA+H,WAHG,GAUHF,EAAAvD,SAAA,SAAA8D,EAAApI,GAGA,OAAAT,EAAAO,IAAAP,EAAA8C,IAAArC,EAAAoI,EAAAN,IAAAvI,EAAA8C,IAAArC,EAAAoI,EAAAL,MAGAF,EAAAS,UAAA,SAAAF,EAAApI,GAKA,WAAA6H,EAFAtI,EAAAO,IAAAP,EAAA8C,IAAA+F,EAAAN,GAAA9H,EAAA8H,IAAAvI,EAAA8C,IAAA+F,EAAAL,GAAA/H,EAAA8H,KACAvI,EAAAO,IAAAP,EAAA8C,IAAA+F,EAAAN,GAAA9H,EAAA+H,IAAAxI,EAAA8C,IAAA+F,EAAAL,GAAA/H,EAAA+H,OAIAF,EAAAnF,IAAA,SAAA0F,GAEA,WAAAP,EAAAtI,EAAAmD,IAAA0F,EAAAN,IAAAvI,EAAAmD,IAAA0F,EAAAL,MAGAF,EAAA/G,IAAA,SAAAyH,EAAAC,GAGA,WAAAX,EAAAtI,EAAAuB,IAAAyH,EAAAT,GAAAU,EAAAV,IAAAvI,EAAAuB,IAAAyH,EAAAR,GAAAS,EAAAT,uBC1LA,IACAzI,GAAsD,EAEtDnD,EAAAD,QAAAuM,EAEA,IAAAjJ,EAAaxD,EAAQ,GACrBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAClBuI,EAAgBvI,EAAQ,GAcxB,SAAAyM,EAAAhM,EAAAgE,GACAnB,GAAAE,EAAAb,YAAA,IAAAlC,GACA6C,GAAAE,EAAAb,YAAA,IAAA8B,GACAf,KAAAgJ,YAAAnJ,EAAAI,OACAD,KAAAjD,EAAA8C,EAAAI,OACAD,KAAAe,EAAA,EACAf,KAAAiJ,OAAA,EACAjJ,KAAAkJ,GAAArJ,EAAAI,OACAD,KAAAmJ,GAAA,EAGAJ,EAAAzK,UAAA8K,aAAA,SAAAnE,GACA,IAAAlI,EAAA8H,EAAAL,QAAAS,EAAAjF,KAAAgJ,aACAhJ,KAAAjD,EAAA8D,IAAA9D,GACAiD,KAAAkJ,GAAArI,IAAA9D,GAEAiD,KAAAe,EAAAkE,EAAAD,EAAAd,WACAlE,KAAAmJ,GAAAlE,EAAAD,EAAAd,YAGA6E,EAAAzK,UAAA+K,eAAA,SAAAL,EAAA/D,GACAjF,KAAAgJ,YAAAnI,IAAAmI,GAEA,IAAAjM,EAAA8H,EAAAL,QAAAS,EAAAjF,KAAAgJ,aACAhJ,KAAAjD,EAAA8D,IAAA9D,GACAiD,KAAAkJ,GAAArI,IAAA9D,IASAgM,EAAAzK,UAAAgL,aAAA,SAAArE,EAAAsE,GACAA,OAAA,IAAAA,EAAA,EAAAA,EACAtE,EAAAD,EAAAnB,UAAA,EAAA0F,GAAAvJ,KAAAmJ,GAAAI,EAAAvJ,KAAAe,GACAkE,EAAAzG,EAAA0C,WAAA,EAAAqI,EAAAvJ,KAAAkJ,GAAAK,EAAAvJ,KAAAjD,GAGAkI,EAAAzG,EAAAmD,IAAAgC,EAAAa,QAAAS,EAAAD,EAAAhF,KAAAgJ,eAQAD,EAAAzK,UAAAkL,QAAA,SAAAC,GACA7J,GAAAE,EAAAb,OAAAe,KAAAiJ,OAAA,GACA,IAAAM,GAAAE,EAAAzJ,KAAAiJ,SAAA,EAAAjJ,KAAAiJ,QACAjJ,KAAAkJ,GAAAhI,WAAAqI,EAAAvJ,KAAAjD,EAAA,EAAAwM,EAAAvJ,KAAAkJ,IACAlJ,KAAAmJ,GAAAI,EAAAvJ,KAAAe,GAAA,EAAAwI,GAAAvJ,KAAAmJ,GACAnJ,KAAAiJ,OAAAQ,GAGAV,EAAAzK,UAAAoL,QAAA,WACA1J,KAAAmJ,GAAAnJ,KAAAe,EACAf,KAAAkJ,GAAArI,IAAAb,KAAAjD,IAMAgM,EAAAzK,UAAA0D,UAAA,WACA,IAAAmH,EAAAxK,EAAAW,IAAAU,KAAAmJ,IAAAxK,EAAAwH,IAAAxH,EAAAwH,IACAnG,KAAAe,GAAAf,KAAAmJ,KACAnJ,KAAAmJ,MAGAJ,EAAAzK,UAAA+B,MAAA,WACA,IAAAA,EAAA,IAAA0I,EAOA,OANA1I,EAAA2I,YAAAnI,IAAAb,KAAAgJ,aACA3I,EAAA4I,OAAAjJ,KAAAiJ,OACA5I,EAAA8I,GAAAnJ,KAAAmJ,GACA9I,EAAAU,EAAAf,KAAAe,EACAV,EAAA6I,GAAArI,IAAAb,KAAAkJ,IACA7I,EAAAtD,EAAA8D,IAAAb,KAAAjD,GACAsD,GAGA0I,EAAAzK,UAAAuC,IAAA,SAAA8I,GACA3J,KAAAgJ,YAAAnI,IAAA8I,EAAAX,aACAhJ,KAAAiJ,OAAAU,EAAAV,OACAjJ,KAAAmJ,GAAAQ,EAAAR,GACAnJ,KAAAe,EAAA4I,EAAA5I,EACAf,KAAAkJ,GAAArI,IAAA8I,EAAAT,IACAlJ,KAAAjD,EAAA8D,IAAA8I,EAAA5M,qBC3GAN,EAAAD,QAAAoN,EAEatN,EAAQ,GACVA,EAAQ,GADnB,IAEAuD,EAAWvD,EAAQ,GACnB2L,EAAW3L,EAAQ,GAKnB,SAAAsN,EAAA7I,EAAAC,EAAAjE,GACA,iBAAAgE,GAAA,OAAAA,GACAf,KAAAoI,GAAAH,EAAA5H,MAAAU,GACAf,KAAAqI,GAAAJ,EAAA5H,MAAAW,GACAhB,KAAA6J,GAAA5B,EAAA5H,MAAAtD,KAEAiD,KAAAoI,GAAAH,IACAjI,KAAAqI,GAAAJ,IACAjI,KAAA6J,GAAA5B,KAIA2B,EAAAtL,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,OAGA4J,EAAAlJ,QAAA,SAAAvD,GACA,OAAAA,GAAA8K,EAAAvH,QAAAvD,EAAAiL,KAAAH,EAAAvH,QAAAvD,EAAAkL,KAAAJ,EAAAvH,QAAAvD,EAAA0M,KAGAD,EAAA3K,OAAA,SAAA9B,KAWAyM,EAAAtL,UAAAsC,QAAA,WAIA,OAHAZ,KAAAoI,GAAAxH,UACAZ,KAAAqI,GAAAzH,UACAZ,KAAA6J,GAAAjJ,UACAZ,MAUA4J,EAAAtL,UAAAwL,QAAA,SAAAxJ,GACA,IAAAiI,EAAAN,EAAAtF,IAAA3C,KAAAoI,GAAAH,EAAArF,MAAA5C,KAAAqI,GAAArI,KAAA6J,KACA,GAAAtB,IACAA,EAAA,EAAAA,GAEA,IAAA/K,EAAA,IAAAyK,EAIA,OAHAzK,EAAAuB,EAAAwJ,EAAAN,EAAAtF,IAAArC,EAAA2H,EAAArF,MAAA5C,KAAAqI,GAAArI,KAAA6J,KACArM,EAAAuC,EAAAwI,EAAAN,EAAAtF,IAAA3C,KAAAoI,GAAAH,EAAArF,MAAAtC,EAAAN,KAAA6J,KACArM,EAAA0K,EAAAK,EAAAN,EAAAtF,IAAA3C,KAAAoI,GAAAH,EAAArF,MAAA5C,KAAAqI,GAAA/H,IACA9C,GAYAoM,EAAAtL,UAAAyL,QAAA,SAAAzJ,GACA,IAAA0J,EAAAhK,KAAAoI,GAAArJ,EACAkL,EAAAjK,KAAAqI,GAAAtJ,EACAmL,EAAAlK,KAAAoI,GAAArI,EACAoK,EAAAnK,KAAAqI,GAAAtI,EACAwI,EAAAyB,EAAAG,EAAAF,EAAAC,EACA,GAAA3B,IACAA,EAAA,EAAAA,GAEA,IAAA/K,EAAAqC,EAAAI,OAGA,OAFAzC,EAAAuB,EAAAwJ,GAAA4B,EAAA7J,EAAAvB,EAAAkL,EAAA3J,EAAAP,GACAvC,EAAAuC,EAAAwI,GAAAyB,EAAA1J,EAAAP,EAAAmK,EAAA5J,EAAAvB,GACAvB,GASAoM,EAAAtL,UAAA8L,aAAA,SAAAC,GACA,IAAAtJ,EAAAf,KAAAoI,GAAArJ,EACAiC,EAAAhB,KAAAqI,GAAAtJ,EACAhC,EAAAiD,KAAAoI,GAAArI,EACA/C,EAAAgD,KAAAqI,GAAAtI,EACAwI,EAAAxH,EAAA/D,EAAAgE,EAAAjE,EACA,GAAAwL,IACAA,EAAA,EAAAA,GAEA8B,EAAAjC,GAAArJ,EAAAwJ,EAAAvL,EACAqN,EAAAhC,GAAAtJ,GAAAwJ,EAAAvH,EACAqJ,EAAAjC,GAAAF,EAAA,EACAmC,EAAAjC,GAAArI,GAAAwI,EAAAxL,EACAsN,EAAAhC,GAAAtI,EAAAwI,EAAAxH,EACAsJ,EAAAhC,GAAAH,EAAA,EACAmC,EAAAR,GAAA9K,EAAA,EACAsL,EAAAR,GAAA9J,EAAA,EACAsK,EAAAR,GAAA3B,EAAA,GASA0B,EAAAtL,UAAAgM,gBAAA,SAAAD,GACA,IAAA9B,EAAAN,EAAAtF,IAAA3C,KAAAoI,GAAAH,EAAArF,MAAA5C,KAAAqI,GAAArI,KAAA6J,KACA,GAAAtB,IACAA,EAAA,EAAAA,GAEA,IAAAyB,EAAAhK,KAAAoI,GAAArJ,EACAkL,EAAAjK,KAAAqI,GAAAtJ,EACAwL,EAAAvK,KAAA6J,GAAA9K,EACAoL,EAAAnK,KAAAqI,GAAAtI,EACAyK,EAAAxK,KAAA6J,GAAA9J,EACA0K,EAAAzK,KAAA6J,GAAA3B,EAEAmC,EAAAjC,GAAArJ,EAAAwJ,GAAA4B,EAAAM,EAAAD,KACAH,EAAAjC,GAAArI,EAAAwI,GAAAgC,EAAAC,EAAAP,EAAAQ,GACAJ,EAAAjC,GAAAF,EAAAK,GAAA0B,EAAAO,EAAAD,EAAAJ,GAEAE,EAAAhC,GAAAtJ,EAAAsL,EAAAjC,GAAArI,EACAsK,EAAAhC,GAAAtI,EAAAwI,GAAAyB,EAAAS,EAAAF,KACAF,EAAAhC,GAAAH,EAAAK,GAAAgC,EAAAN,EAAAD,EAAAQ,GAEAH,EAAAR,GAAA9K,EAAAsL,EAAAjC,GAAAF,EACAmC,EAAAR,GAAA9J,EAAAsK,EAAAhC,GAAAH,EACAmC,EAAAR,GAAA3B,EAAAK,GAAAyB,EAAAG,EAAAF,MAWAL,EAAAhI,IAAA,SAAAb,EAAAC,GAEA,GAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,EAAA,CAEA,IAAAjC,EAAAgC,EAAAqH,GAAArJ,EAAAiC,EAAAjC,EAAAgC,EAAAsH,GAAAtJ,EAAAiC,EAAAjB,EAAAgB,EAAA8I,GAAA9K,EAAAiC,EAAAkH,EACAnI,EAAAgB,EAAAqH,GAAArI,EAAAiB,EAAAjC,EAAAgC,EAAAsH,GAAAtI,EAAAiB,EAAAjB,EAAAgB,EAAA8I,GAAA9J,EAAAiB,EAAAkH,EACAA,EAAAnH,EAAAqH,GAAAF,EAAAlH,EAAAjC,EAAAgC,EAAAsH,GAAAH,EAAAlH,EAAAjB,EAAAgB,EAAA8I,GAAA3B,EAAAlH,EAAAkH,EACA,WAAAD,EAAAlJ,EAAAgB,EAAAmI,GAEG,GAAAlH,GAAA,MAAAA,GAAA,MAAAA,EAAA,CAEHjC,EAAAgC,EAAAqH,GAAArJ,EAAAiC,EAAAjC,EAAAgC,EAAAsH,GAAAtJ,EAAAiC,EAAAjB,EACAA,EAAAgB,EAAAqH,GAAArI,EAAAiB,EAAAjC,EAAAgC,EAAAsH,GAAAtI,EAAAiB,EAAAjB,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,KAMA6J,EAAAc,QAAA,SAAA3J,EAAAC,GAGA,IAAAjC,EAAAgC,EAAAqH,GAAArJ,EAAAiC,EAAAjC,EAAAgC,EAAAsH,GAAAtJ,EAAAiC,EAAAjB,EAAAgB,EAAA8I,GAAA9K,EAAAiC,EAAAkH,EACAnI,EAAAgB,EAAAqH,GAAArI,EAAAiB,EAAAjC,EAAAgC,EAAAsH,GAAAtI,EAAAiB,EAAAjB,EAAAgB,EAAA8I,GAAA9J,EAAAiB,EAAAkH,EACAA,EAAAnH,EAAAqH,GAAAF,EAAAlH,EAAAjC,EAAAgC,EAAAsH,GAAAH,EAAAlH,EAAAjB,EAAAgB,EAAA8I,GAAA3B,EAAAlH,EAAAkH,EACA,WAAAD,EAAAlJ,EAAAgB,EAAAmI,IAGA0B,EAAApF,QAAA,SAAAzD,EAAAC,GAGA,IAAAjC,EAAAgC,EAAAqH,GAAArJ,EAAAiC,EAAAjC,EAAAgC,EAAAsH,GAAAtJ,EAAAiC,EAAAjB,EACAA,EAAAgB,EAAAqH,GAAArI,EAAAiB,EAAAjC,EAAAgC,EAAAsH,GAAAtI,EAAAiB,EAAAjB,EACA,OAAAF,EAAAO,IAAArB,EAAAgB,IAGA6J,EAAAxI,IAAA,SAAAL,EAAAC,GAGA,WAAA4I,EACA3B,EAAA7G,IAAAL,EAAAqH,GAAApH,EAAAoH,IACAH,EAAA7G,IAAAL,EAAAsH,GAAArH,EAAAqH,IACAJ,EAAA7G,IAAAL,EAAA8I,GAAA7I,EAAA6I,uBCtMApN,EAAAD,QAQA,WACAwD,KAAAM,EAAAT,EAAAI,OACAD,KAAAiB,EAAA,GARA,IAAApB,EAAWvD,EAAQ,oBCFnBG,EAAAD,QAAAmO,EAEA,IAAA9K,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAMlB,SAAAqO,IACA3K,KAAAjD,EAAA8C,EAAAI,OACAD,KAAAe,EAAA,EAGA4J,EAAArM,UAAAgL,aAAA,SAAArE,EAAAzG,GAGA,OAFAyG,EAAAD,EAAAnE,IAAAb,KAAAe,GACAkE,EAAAzG,EAAAqC,IAAAhB,EAAA8B,IAAA3B,KAAAjD,EAAA4G,EAAAa,QAAAS,EAAAD,EAAAxG,KACAyG,oBCpBA,IACArF,GAAsD,EAEtDnD,EAAAD,QAAAoO,EAEA,IAAA9K,EAAaxD,EAAQ,GAarB,SAAAuO,IACA7K,KAAA8K,MAAA,KACA9K,KAAA+K,MAAA,KACA/K,KAAAgL,KAAA,KACAhL,KAAAiL,KAAA,KA4BA,SAAAL,EAAAM,EAAAC,EAAAC,GACAD,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,SAEAxL,GAAAE,EAAAb,OAAAkM,GACAvL,GAAAE,EAAAb,OAAAmM,GACAxL,GAAAE,EAAAb,OAAAkM,GAAAC,GAEApL,KAAAqL,OAAA,gBAEArL,KAAAsL,QAAAH,EACAnL,KAAAuL,QAAAH,EAEApL,KAAAwL,QAAA,EACAxL,KAAAyL,qBAAAP,EAAAQ,iBAEA1L,KAAA2L,OAAA,KACA3L,KAAA4L,OAAA,KAEA5L,KAAA6L,QAAA,IAAAhB,EACA7K,KAAA8L,QAAA,IAAAjB,EAEA7K,KAAA+L,cAAA,EACA/L,KAAAgM,aAAAd,EAAAe,OACAjM,KAAAkM,WAAAhB,EAAAiB,SAQAvB,EAAAtM,UAAA8N,SAAA,WACA,OAAApM,KAAAgM,cAAAhM,KAAAsL,QAAAc,YAAApM,KAAAuL,QAAAa,YAQAxB,EAAAtM,UAAA+N,UAAA,SAAAC,GACAtM,KAAAgM,aAAAM,GAQA1B,EAAAtM,UAAAiO,QAAA,WACA,OAAAvM,KAAAqL,QAQAT,EAAAtM,UAAAkO,SAAA,WACA,OAAAxM,KAAAsL,SAQAV,EAAAtM,UAAAmO,SAAA,WACA,OAAAzM,KAAAuL,SAQAX,EAAAtM,UAAAoO,QAAA,WACA,OAAA1M,KAAA4L,QAGAhB,EAAAtM,UAAAqO,YAAA,WACA,OAAA3M,KAAAkM,YAGAtB,EAAAtM,UAAAsO,YAAA,SAAAC,GACA7M,KAAAkM,WAAAW,GAUAjC,EAAAtM,UAAAwO,oBAAA,WACA,OAAA9M,KAAAyL,oBAQAb,EAAAtM,UAAAyO,WAAA,aAQAnC,EAAAtM,UAAA0O,WAAA,aASApC,EAAAtM,UAAA2O,iBAAA,SAAAC,KASAtC,EAAAtM,UAAA6O,kBAAA,SAAAD,KAQAtC,EAAAtM,UAAA8O,YAAA,SAAAC,KAKAzC,EAAAtM,UAAAgP,wBAAA,SAAAC,KAKA3C,EAAAtM,UAAAkP,yBAAA,SAAAD,KAMA3C,EAAAtM,UAAAmP,yBAAA,SAAAF,sBC1MA9Q,EAAAD,QAAAkR,EAEWpR,EAAQ,GAOnB,SAAAoR,IACA1N,KAAAqL,OACArL,KAAA2N,SAGAD,EAAAhN,QAAA,SAAAkN,GACA,QAAAA,GAGAF,EAAApP,UAAAuP,UAAA,WACA,OAAA7N,KAAA2N,UASAD,EAAApP,UAAAiO,QAAA,WACA,OAAAvM,KAAAqL,QAQAqC,EAAApP,UAAAwP,OAAA,aAMAJ,EAAApP,UAAAyP,cAAA,aAUAL,EAAApP,UAAA0P,UAAA,SAAA/I,EAAAzG,KAWAkP,EAAApP,UAAA2P,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,KAWAX,EAAApP,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,KAUAX,EAAApP,UAAAkQ,YAAA,SAAAC,EAAAC,KAMAhB,EAAApP,UAAAqQ,qBAAA,SAAAC,sBC3FetS,EAAQ,GAHvB,IAIAqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInB,SAAAuS,EAAA1L,EAAAD,GACA,KAAAlD,gBAAA6O,GACA,WAAAA,EAAA1L,EAAAD,GAGAlD,KAAA8O,WAAAjP,EAAAI,OACAD,KAAA+O,WAAAlP,EAAAI,OAEA,iBAAAkD,GACAnD,KAAA8O,WAAAjO,IAAAsC,GAEA,iBAAAD,GACAlD,KAAA+O,WAAAlO,IAAAqC,GAdAzG,EAAAD,QAAAqS,EAqBAA,EAAAvQ,UAAAoC,QAAA,WACA,OAAAmO,EAAAnO,QAAAV,OAGA6O,EAAAnO,QAAA,SAAA6N,GACA,IAAAvR,EAAA6C,EAAA8B,IAAA4M,EAAAQ,WAAAR,EAAAO,YAEA,OADA9R,EAAA+B,GAAA,GAAA/B,EAAA+C,GAAA,GAAAF,EAAAa,QAAA6N,EAAAO,aAAAjP,EAAAa,QAAA6N,EAAAQ,aAIAF,EAAA5P,OAAA,SAAA9B,KAWA0R,EAAAvQ,UAAA0Q,UAAA,WACA,OAAAnP,EAAAO,IAAA,IAAAJ,KAAA8O,WAAA/P,EAAAiB,KAAA+O,WAAAhQ,GAAA,IAAAiB,KAAA8O,WAAA/O,EAAAC,KAAA+O,WAAAhP,KAMA8O,EAAAvQ,UAAA2Q,WAAA,WACA,OAAApP,EAAAO,IAAA,IAAAJ,KAAA+O,WAAAhQ,EAAAiB,KAAA8O,WAAA/P,GAAA,IAAAiB,KAAA+O,WAAAhP,EAAAC,KAAA8O,WAAA/O,KAMA8O,EAAAvQ,UAAA4Q,aAAA,WACA,UAAAlP,KAAA+O,WAAAhQ,EAAAiB,KAAA8O,WAAA/P,EAAAiB,KAAA+O,WAAAhP,EAAAC,KAAA8O,WAAA/O,IAMA8O,EAAAvQ,UAAAwE,QAAA,SAAA/B,EAAAC,GACA,IAAAmO,EAAApO,EAAA+N,WACAM,EAAArO,EAAAgO,WACAM,EAAArO,EAAA8N,WACAQ,EAAAtO,EAAA+N,WAEAQ,EAAA5Q,EAAAa,IAAA2P,EAAApQ,EAAAsQ,EAAAtQ,GACAyQ,EAAA7Q,EAAAa,IAAA2P,EAAApP,EAAAsP,EAAAtP,GACA0P,EAAA9Q,EAAAc,IAAA6P,EAAAvQ,EAAAqQ,EAAArQ,GACA2Q,EAAA/Q,EAAAc,IAAA6P,EAAAvP,EAAAqP,EAAArP,GAEAC,KAAA8O,WAAAjO,IAAA0O,EAAAC,GACAxP,KAAA+O,WAAAlO,IAAA4O,EAAAC,IAGAb,EAAAvQ,UAAAqR,cAAA,SAAA5O,EAAAC,GACAhB,KAAA8O,WAAAjO,IAAAlC,EAAAa,IAAAuB,EAAAhC,EAAAiC,EAAAjC,GAAAJ,EAAAa,IAAAuB,EAAAhB,EAAAiB,EAAAjB,IACAC,KAAA+O,WAAAlO,IAAAlC,EAAAc,IAAAsB,EAAAhC,EAAAiC,EAAAjC,GAAAJ,EAAAc,IAAAsB,EAAAhB,EAAAiB,EAAAjB,KAGA8O,EAAAvQ,UAAAuC,IAAA,SAAA0N,GACAvO,KAAA8O,WAAAjO,IAAA0N,EAAAO,WAAA/P,EAAAwP,EAAAO,WAAA/O,GACAC,KAAA+O,WAAAlO,IAAA0N,EAAAQ,WAAAhQ,EAAAwP,EAAAQ,WAAAhP,IAGA8O,EAAAvQ,UAAAsR,SAAA,SAAArB,GACA,IAAAsB,GAAA,EAKA,OADAA,GADAA,GADAA,GADAA,KAAA7P,KAAA8O,WAAA/P,GAAAwP,EAAAO,WAAA/P,IACAiB,KAAA8O,WAAA/O,GAAAwO,EAAAO,WAAA/O,IACAwO,EAAAQ,WAAAhQ,GAAAiB,KAAA+O,WAAAhQ,IACAwP,EAAAQ,WAAAhP,GAAAC,KAAA+O,WAAAhP,GAIA8O,EAAAvQ,UAAAwR,OAAA,SAAAnS,GACAkR,EAAAiB,OAAA9P,KAAArC,IAGAkR,EAAAiB,OAAA,SAAAvB,EAAA5Q,GACA4Q,EAAAO,WAAA/P,GAAApB,EACA4Q,EAAAO,WAAA/O,GAAApC,EACA4Q,EAAAQ,WAAAhQ,GAAApB,EACA4Q,EAAAQ,WAAAhP,GAAApC,GAGAkR,EAAAkB,YAAA,SAAAhP,EAAAC,GACA,IAAAgP,EAAAhP,EAAA8N,WAAA/P,EAAAgC,EAAAgO,WAAAhQ,EACAkR,EAAAlP,EAAA+N,WAAA/P,EAAAiC,EAAA+N,WAAAhQ,EAEAmR,EAAAlP,EAAA8N,WAAA/O,EAAAgB,EAAAgO,WAAAhP,EACAoQ,EAAApP,EAAA+N,WAAA/O,EAAAiB,EAAA+N,WAAAhP,EAEA,QAAAiQ,EAAA,GAAAE,EAAA,GAAAD,EAAA,GAAAE,EAAA,IAMAtB,EAAApM,SAAA,SAAA1B,EAAAC,GACA,OAAAnB,EAAA4C,SAAA1B,EAAA+N,WAAA9N,EAAA8N,aAAAjP,EAAA4C,SAAA1B,EAAAgO,WAAA/N,EAAA+N,aAGAF,EAAAuB,KAAA,SAAArP,EAAAC,GACA,IAAAqP,EAAA1R,EAAAc,IAAA,EAAAd,EAAAa,IAAAuB,EAAAgO,WAAAhQ,EAAAiC,EAAA+N,WAAAhQ,GAAAJ,EAAAc,IAAAuB,EAAA8N,WAAA/P,EAAAgC,EAAA+N,WAAA/P,IACAuR,EAAA3R,EAAAc,IAAA,EAAAd,EAAAa,IAAAuB,EAAAgO,WAAAhP,EAAAiB,EAAA+N,WAAAhP,GAAApB,EAAAc,IAAAuB,EAAA8N,WAAA/O,EAAAgB,EAAA+N,WAAA/O,IAQA,OANAgB,EAAAgO,WAAAhQ,EAAAgC,EAAA+N,WAAA/P,IACAgC,EAAAgO,WAAAhP,EAAAgB,EAAA+N,WAAA/O,IAEAiB,EAAA+N,WAAAhQ,EAAAiC,EAAA8N,WAAA/P,IACAiC,EAAA+N,WAAAhP,EAAAiB,EAAA8N,WAAA/O,GAEAsQ,EAAAC,GA4BAzB,EAAAvQ,UAAA2P,QAAA,SAAAC,EAAAC,GAYA,IATA,IAAAoC,GAAAC,IACAC,EAAAD,IAEAhS,EAAA2P,EAAAuC,GACA1T,EAAA6C,EAAA8B,IAAAwM,EAAAwC,GAAAxC,EAAAuC,IACAE,EAAA/Q,EAAAmD,IAAAhG,GAEAkF,EAAArC,EAAAI,OAEA4Q,EAAA,IAAmB,OAAAA,EAAYA,EAAA,MAAAA,EAAA,SAC/B,GAAAD,EAAA7R,EAAAJ,EAAAE,SAEA,GAAAL,EAAAqS,GAAA7Q,KAAA8O,WAAA+B,IAAA7Q,KAAA+O,WAAA8B,GAAArS,EAAAqS,GACA,aAEK,CACL,IAAAC,EAAA,EAAA9T,EAAA6T,GACAE,GAAA/Q,KAAA8O,WAAA+B,GAAArS,EAAAqS,IAAAC,EACAE,GAAAhR,KAAA+O,WAAA8B,GAAArS,EAAAqS,IAAAC,EAGArS,GAAA,EAEA,GAAAsS,EAAAC,EAAA,CACA,IAAAC,EAAAF,EACAA,EAAAC,IAAAC,EACAxS,EAAA,EAaA,GATAsS,EAAAR,IACArO,EAAAtB,UACAsB,EAAA2O,GAAApS,EACA8R,EAAAQ,GAMAR,GAFAE,EAAA9R,EAAAa,IAAAiR,EAAAO,IAGA,SAOA,QAAAT,EAAA,GAAApC,EAAA+C,YAAAX,KAKArC,EAAAiD,SAAAZ,EACArC,EAAAhM,UACA,IAGA2M,EAAAvQ,UAAAiC,SAAA,WACA,OAAAC,KAAAC,UAAAT,wBClOa1D,EAAQ,GALrB,IAOAqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnBuI,EAAgBvI,EAAQ,GACxB6L,EAAY7L,EAAQ,GACpBqH,EAAUrH,EAAQ,GAElBqJ,EAAerJ,EAAQ,GACvB8U,EAAe9U,EAAQ,IACvB+U,EAAe/U,EAAQ,IAevB,SAAAgV,EAAAC,GACAvR,KAAAuR,UACAvR,KAAAgL,KACAhL,KAAAiL,KACAjL,KAAA8K,MA0BA,SAAA0G,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA7R,KAAA8R,QAAA,IAAAR,EAAAtR,MACAA,KAAA+R,QAAA,IAAAT,EAAAtR,MAEAA,KAAAgS,WAAAP,EACAzR,KAAAiS,WAAAN,EAEA3R,KAAAkS,SAAAR,EACA1R,KAAAmS,SAAAP,EAEA5R,KAAAoS,cAAAP,EAEA7R,KAAAqS,WAAA,IAAAjB,EAEApR,KAAA2L,OAAA,KACA3L,KAAA4L,OAAA,KAEA5L,KAAAsS,MAAA,EACAtS,KAAAuS,WAAA,EAEAvS,KAAAwS,WAAA,EAEAxS,KAAAyS,WAAAC,EAAA1S,KAAAgS,WAAAS,WACAzS,KAAAiS,WAAAQ,YACAzS,KAAA2S,cAAAC,EAAA5S,KAAAgS,WAAAW,cACA3S,KAAAiS,WAAAU,eAEA3S,KAAA6S,eAAA,EAGA7S,KAAA8S,eAAA,EAGA9S,KAAA+L,cAAA,EAGA/L,KAAA+S,gBAAA,EAGA/S,KAAAgT,cAAA,EAGAhT,KAAAiT,iBAAA,EAEAjT,KAAAkT,SAAA,GACAlT,KAAAmT,SAAAtT,EAAAI,OACAD,KAAAoT,aAAA,IAAAjL,EACAnI,KAAAqT,IAAA,IAAAlL,EACAnI,KAAAsT,aAEAtT,KAAAuT,eACAvT,KAAAwT,WACAxT,KAAAyT,cAEAzT,KAAA0T,WACA1T,KAAA2T,WACA3T,KAAA4T,QACA5T,KAAA6T,QAEA7T,KAAA8T,cAAA,GACA9T,KAAA+T,cAAAlU,EAAAI,OACAD,KAAAgU,aAAAnU,EAAAI,OACAD,KAAAiU,eAAApU,EAAAI,OACAD,KAAAkU,eAAArU,EAAAI,OACAD,KAAAmU,OACAnU,KAAAoU,UACApU,KAAAqU,UACArU,KAAAsU,aAEAtU,KAAAuU,WACAvU,KAAAwU,WACAxU,KAAAyU,QACAzU,KAAA0U,QAybA,SAAAC,IACA3U,KAAA4U,GAAA/U,EAAAI,OACAD,KAAA6U,GAAAhV,EAAAI,OACAD,KAAA8U,cAAA,EACA9U,KAAA+U,eAAA,EACA/U,KAAAgV,WAAA,EACAhV,KAAAiV,YAAA,EACAjV,KAAAkV,aAAA,EAifA,SAAAxC,EAAAyC,EAAAC,GACA,OAAAzW,EAAAQ,KAAAgW,EAAAC,GAOA,SAAAxC,EAAAyC,EAAAC,GACA,OAAAD,EAAAC,EAAAD,EAAAC,EA9iCA7Y,EAAAD,QAAAgV,EAuHAA,EAAAlT,UAAAiX,eAAA,SAAAhI,GACA,IAAAiI,EAAAxV,KAAAgS,WACAyD,EAAAzV,KAAAiS,WAEAyD,EAAAF,EAAAG,WACAC,EAAAH,EAAAE,WAEAxK,EAAAqK,EAAAK,UACAzK,EAAAqK,EAAAI,UAEAC,EAAA9V,KAAA+V,cAEAC,EAAAF,EAAAE,WAGAhW,KAAA0T,WAAAvI,EAAA8K,UACAjW,KAAA2T,WAAAvI,EAAA6K,UACAjW,KAAA4T,QAAAzI,EAAA+K,OACAlW,KAAA6T,QAAAzI,EAAA8K,OAEAlW,KAAAwT,WAAAxT,KAAAyS,WACAzS,KAAAyT,cAAAzT,KAAA2S,cACA3S,KAAAuT,eAAAvT,KAAA6S,eAEA7S,KAAAsT,aAAA0C,EAEAhW,KAAAqT,IAAAzS,UACAZ,KAAAoT,aAAAxS,UAEAZ,KAAAuU,WAAApJ,EAAA8K,UACAjW,KAAAwU,WAAApJ,EAAA6K,UACAjW,KAAAyU,QAAAtJ,EAAA+K,OACAlW,KAAA0U,QAAAtJ,EAAA8K,OACAlW,KAAAiU,eAAApU,EAAAQ,MAAA8K,EAAAgL,QAAAnN,aACAhJ,KAAAkU,eAAArU,EAAAQ,MAAA+K,EAAA+K,QAAAnN,aAEAhJ,KAAAoU,UAAAsB,EAAA/H,SACA3N,KAAAqU,UAAAuB,EAAAjI,SAEA3N,KAAAmU,OAAA2B,EAAAM,KACApW,KAAA+T,cAAAlU,EAAAQ,MAAAyV,EAAAO,aACArW,KAAAgU,aAAAnU,EAAAQ,MAAAyV,EAAAQ,YACAtW,KAAAsU,aAAA0B,EAEA,QAAAO,EAAA,EAAiBA,EAAAP,IAAgBO,EAAA,CACjC,IAAAC,EAAAV,EAAAW,OAAAF,GACAG,EAAA1W,KAAAkT,SAAAqD,GAAA,IAAA5B,EAEApH,EAAAoJ,cACAD,EAAA5B,cAAAvH,EAAAqJ,QAAAJ,EAAA1B,cACA4B,EAAA3B,eAAAxH,EAAAqJ,QAAAJ,EAAAzB,iBAGA2B,EAAA5B,cAAA,EACA4B,EAAA3B,eAAA,GAGA2B,EAAA9B,GAAAhU,UACA8V,EAAA7B,GAAAjU,UACA8V,EAAA1B,WAAA,EACA0B,EAAAzB,YAAA,EACAyB,EAAAxB,aAAA,EAEAlV,KAAA8T,cAAAyC,GAAA1W,EAAAQ,MAAAmW,EAAAF,cASA9E,EAAAlT,UAAAyX,YAAA,WACA,OAAA/V,KAAAqS,YAQAb,EAAAlT,UAAAuY,iBAAA,SAAAC,GACA,IAAA3L,EAAAnL,KAAAgS,WAAA6D,UACAzK,EAAApL,KAAAiS,WAAA4D,UACAH,EAAA1V,KAAAgS,WAAA2D,WACAC,EAAA5V,KAAAiS,WAAA0D,WAEA,OAAA3V,KAAAqS,WAAAwE,iBAAAC,EAAA3L,EAAA7B,eACAoM,EAAA/H,SAAAvC,EAAA9B,eAAAsM,EAAAjI,WAQA6D,EAAAlT,UAAAyY,WAAA,SAAAzK,GACAtM,KAAA8S,gBAAAxG,GAMAkF,EAAAlT,UAAA0Y,UAAA,WACA,OAAAhX,KAAA8S,eAMAtB,EAAAlT,UAAA2Y,WAAA,WACA,OAAAjX,KAAA+S,gBAMAvB,EAAAlT,UAAAoO,QAAA,WACA,OAAA1M,KAAA4L,QAMA4F,EAAAlT,UAAA4Y,YAAA,WACA,OAAAlX,KAAAgS,YAMAR,EAAAlT,UAAA6Y,YAAA,WACA,OAAAnX,KAAAiS,YAMAT,EAAAlT,UAAA8Y,eAAA,WACA,OAAApX,KAAAkS,UAMAV,EAAAlT,UAAA+Y,eAAA,WACA,OAAArX,KAAAmS,UAMAX,EAAAlT,UAAAgZ,iBAAA,WACAtX,KAAAgT,cAAA,GAOAxB,EAAAlT,UAAAiZ,YAAA,SAAAC,GACAxX,KAAAyS,WAAA+E,GAMAhG,EAAAlT,UAAAmZ,YAAA,WACA,OAAAzX,KAAAyS,YAMAjB,EAAAlT,UAAAoZ,cAAA,WACA1X,KAAAyS,WAAAC,EAAA1S,KAAAgS,WAAAS,WACAzS,KAAAiS,WAAAQ,aAOAjB,EAAAlT,UAAAqZ,eAAA,SAAAC,GACA5X,KAAA2S,cAAAiF,GAMApG,EAAAlT,UAAAuZ,eAAA,WACA,OAAA7X,KAAA2S,eAMAnB,EAAAlT,UAAAwZ,iBAAA,WACA9X,KAAA2S,cAAAC,EAAA5S,KAAAgS,WAAAW,cACA3S,KAAAiS,WAAAU,gBAOAnB,EAAAlT,UAAAyZ,gBAAA,SAAAC,GACAhY,KAAA6S,eAAAmF,GAMAxG,EAAAlT,UAAA2Z,gBAAA,WACA,OAAAjY,KAAA6S,gBAMArB,EAAAlT,UAAA4Z,SAAA,SAAApC,EAAAqC,EAAAC,GACApY,KAAAoS,cAAA0D,EAAAqC,EAAAnY,KAAAgS,WAAAhS,KAAAkS,SAAAkG,EACApY,KAAAiS,WAAAjS,KAAAmS,WAYAX,EAAAlT,UAAA+Z,OAAA,SAAAC,GAGAtY,KAAA8S,eAAA,EAEA,IAAAyF,GAAA,EACAC,EAAAxY,KAAA+S,eAEA0F,EAAAzY,KAAAgS,WAAA0G,WACAC,EAAA3Y,KAAAiS,WAAAyG,WACAE,EAAAH,GAAAE,EAEAxN,EAAAnL,KAAAgS,WAAA6D,UACAzK,EAAApL,KAAAiS,WAAA4D,UACAsC,EAAAhN,EAAA7B,eACA8O,EAAAhN,EAAA9B,eAGA,GAAAsP,EAAA,CACA,IAAAlD,EAAA1V,KAAAgS,WAAA2D,WACAC,EAAA5V,KAAAiS,WAAA0D,WACA4C,EAAAlH,EAAAtB,YAAA2F,EAAA1V,KAAAkS,SAAA0D,EACA5V,KAAAmS,SAAAgG,EAAAC,GAGApY,KAAAqS,WAAA2D,WAAA,MACG,CAGH,IAAA6C,EAAA7Y,KAAAqS,WACArS,KAAAqS,WAAA,IAAAjB,EAEApR,KAAAkY,SAAAlY,KAAAqS,WAAA8F,EAAAC,GACAG,EAAAvY,KAAAqS,WAAA2D,WAAA,EAIA,QAAAtZ,EAAA,EAAmBA,EAAAsD,KAAAqS,WAAA2D,aAAgCtZ,EAAA,CACnD,IAAAoc,EAAA9Y,KAAAqS,WAAAoE,OAAA/Z,GACAoc,EAAAhE,cAAA,EACAgE,EAAA/D,eAAA,EAEA,QAAAwB,EAAA,EAAqBA,EAAAsC,EAAA7C,aAA4BO,EAAA,CACjD,IAAAwC,EAAAF,EAAApC,OAAAF,GACA,GAAAwC,EAAAC,GAAA/a,KAAA6a,EAAAE,GAAA/a,IAAA,CACA6a,EAAAhE,cAAAiE,EAAAjE,cACAgE,EAAA/D,eAAAgE,EAAAhE,eACA,QAKAwD,GAAAC,IACArN,EAAA8N,UAAA,GACA7N,EAAA6N,UAAA,IAIAjZ,KAAA+S,eAAAwF,EAEA,GAAAC,GAAA,GAAAD,GAAAD,GACAA,EAAAY,aAAAlZ,MAGA,GAAAwY,GAAA,GAAAD,GAAAD,GACAA,EAAAa,WAAAnZ,MAGA,GAAA4Y,GAAAL,GAAAD,GACAA,EAAAc,SAAApZ,KAAA6Y,IAIArH,EAAAlT,UAAA+a,wBAAA,SAAA9L,GACA,OAAAvN,KAAAsZ,yBAAA/L,GAAA,IAGAiE,EAAAlT,UAAAib,2BAAA,SAAAhM,EAAAiM,EAAAC,GACA,OAAAzZ,KAAAsZ,yBAAA/L,GAAA,EAAAiM,EAAAC,IAGAjI,EAAAlT,UAAAgb,yBAAA,SAAA/L,EAAAmM,EAAAF,EAAAC,GAEA,IAAAjE,EAAAxV,KAAAgS,WACAyD,EAAAzV,KAAAiS,WAEA9G,EAAAqK,EAAAK,UACAzK,EAAAqK,EAAAI,UAIA8D,GAFAxO,EAAAyO,WACAxO,EAAAwO,WACAzO,EAAA0O,YACAC,EAAA1O,EAAAyO,WAEAE,EAAAla,EAAAQ,MAAAL,KAAAiU,gBACA+F,EAAAna,EAAAQ,MAAAL,KAAAkU,gBAEA+F,EAAA,EACAC,EAAA,EACAR,GAAAvO,GAAAqO,GAAArO,GAAAsO,IACAQ,EAAAja,KAAAuU,WACA2F,EAAAla,KAAAyU,SAGA,IAAA0F,EAAA,EACAC,EAAA,EACAV,GAAAtO,GAAAoO,GAAApO,GAAAqO,IACAU,EAAAna,KAAAwU,WACA4F,EAAApa,KAAA0U,SAYA,IATA,IAAA2F,EAAAxa,EAAAQ,MAAAsZ,EAAA5c,GACAud,EAAAX,EAAA5Y,EAEAwZ,EAAA1a,EAAAQ,MAAAyZ,EAAA/c,GACAyd,EAAAV,EAAA/Y,EAEA0Z,EAAA,EAGAlE,EAAA,EAAiBA,EAAAvW,KAAAsU,eAAuBiC,EAAA,CACxC,IAQArU,EAAAwY,EAAAC,EARAxC,EAAAtT,EAAAd,WACAqU,EAAAvT,EAAAd,WAQA,OAPAoU,EAAAnT,EAAAnE,IAAAyZ,GACAlC,EAAApT,EAAAnE,IAAA2Z,GACArC,EAAA3Z,EAAAqB,EAAA8B,IAAA0Y,EAAA1W,EAAAa,QAAA2T,EAAAnT,EAAA+U,IACA3B,EAAA5Z,EAAAqB,EAAA8B,IAAA4Y,EAAA5W,EAAAa,QAAA4T,EAAApT,EAAAgV,IAIAha,KAAAmU,QACA,KAAA/C,EAAAwJ,UACA,IAAAC,EAAAhW,EAAAL,QAAA2T,EAAAnY,KAAAgU,cACA8G,EAAAjW,EAAAL,QAAA4T,EAAApY,KAAA8T,cAAA,KACA5R,EAAArC,EAAA8B,IAAAmZ,EAAAD,IACA7Y,YACA0Y,EAAA7a,EAAAiD,QAAA,GAAA+X,EAAA,GAAAC,GACAH,EAAA9a,EAAA8C,IAAA9C,EAAA8B,IAAAmZ,EAAAD,GAAA3Y,GAAAlC,KAAAoU,UACApU,KAAAqU,UACA,MAEA,KAAAjD,EAAA2J,QACA7Y,EAAAyB,EAAAa,QAAA2T,EAAAnT,EAAAhF,KAAA+T,eACA,IAAAiH,EAAAnW,EAAAL,QAAA2T,EAAAnY,KAAAgU,cACAiH,EAAApW,EAAAL,QAAA4T,EAAApY,KAAA8T,cAAAyC,IACAoE,EAAA9a,EAAA8C,IAAA9C,EAAA8B,IAAAsZ,EAAAD,GAAA9Y,GACAlC,KAAAoU,UAAApU,KAAAqU,UACAqG,EAAAO,EACA,MAEA,KAAA7J,EAAA8J,QACAhZ,EAAAyB,EAAAa,QAAA4T,EAAApT,EAAAhF,KAAA+T,eACAiH,EAAAnW,EAAAL,QAAA4T,EAAApY,KAAAgU,cACAiH,EAAApW,EAAAL,QAAA2T,EAAAnY,KAAA8T,cAAAyC,IACAoE,EAAA9a,EAAA8C,IAAA9C,EAAA8B,IAAAsZ,EAAAD,GAAA9Y,GACAlC,KAAAoU,UAAApU,KAAAqU,UACAqG,EAAAO,EAGA/Y,EAAAN,KAAA,GAIA,IAAAgT,EAAA/U,EAAA8B,IAAA+Y,EAAAL,GACAxF,EAAAhV,EAAA8B,IAAA+Y,EAAAH,GAGAE,EAAA9b,EAAAa,IAAAib,EAAAE,GAEA,IAAA3T,EAAA0S,EAAA/T,EAAAsB,YAAAtB,EAAAqB,UACAhB,EAAAL,EAAAK,WACAU,EAAAf,EAAAe,oBAGAyU,EAAAxc,EAAAe,MAAAsH,GAAA2T,EAAA3U,IACAU,EAAA,GAGA0U,EAAAvb,EAAA+C,MAAAgS,EAAA1S,GACAmZ,EAAAxb,EAAA+C,MAAAiS,EAAA3S,GACAoZ,EAAArB,EAAAE,EAAAD,EAAAkB,IAAAhB,EAAAiB,IAGAE,EAAAD,EAAA,GAAAH,EAAAG,EAAA,EAEAE,EAAA3b,EAAA+B,IAAA2Z,EAAArZ,GAEAmY,EAAA3Y,OAAAuY,EAAAuB,GACAlB,GAAAJ,EAAAra,EAAA+C,MAAAgS,EAAA4G,GAEAjB,EAAAhZ,OAAA4Y,EAAAqB,GACAhB,GAAAJ,EAAAva,EAAA+C,MAAAiS,EAAA2G,GASA,OANA7B,EAAA5c,EAAA8D,IAAAwZ,GACAV,EAAA5Y,EAAAuZ,EAEAR,EAAA/c,EAAA8D,IAAA0Z,GACAT,EAAA/Y,EAAAyZ,EAEAC,GAcAjJ,EAAAlT,UAAAmd,uBAAA,SAAAlO,GACA,IAAAiI,EAAAxV,KAAAgS,WACAyD,EAAAzV,KAAAiS,WAEA9G,EAAAqK,EAAAK,UACAzK,EAAAqK,EAAAI,UAEA6F,EAAAvQ,EAAAyO,WACA+B,EAAAvQ,EAAAwO,WAEAD,EAAAxO,EAAA0O,WACAC,EAAA1O,EAAAyO,WAEA+B,EAAA5b,KAAAoU,UACAyH,EAAA7b,KAAAqU,UACAyB,EAAA9V,KAAA+V,cAEAkE,EAAAja,KAAA0T,WACAyG,EAAAna,KAAA2T,WACAuG,EAAAla,KAAA4T,QACAwG,EAAApa,KAAA6T,QACAkG,EAAAla,EAAAQ,MAAAL,KAAAiU,gBACA+F,EAAAna,EAAAQ,MAAAL,KAAAkU,gBAEAmG,EAAAxa,EAAAQ,MAAAsZ,EAAA5c,GACAud,EAAAX,EAAA5Y,EACA+a,EAAAjc,EAAAQ,MAAAqb,EAAApb,GACAyb,EAAAL,EAAAza,EAEAsZ,EAAA1a,EAAAQ,MAAAyZ,EAAA/c,GACAyd,EAAAV,EAAA/Y,EACAib,EAAAnc,EAAAQ,MAAAsb,EAAArb,GACA2b,EAAAN,EAAA1a,EAIAkX,EAAAtT,EAAAd,WACAqU,EAAAvT,EAAAd,WACAoU,EAAAnT,EAAAnE,IAAAyZ,GACAlC,EAAApT,EAAAnE,IAAA2Z,GACArC,EAAA3Z,EAAA0C,WAAA,EAAAmZ,GAAA,EAAA1W,EAAAa,QAAA2T,EAAAnT,EAAA+U,IACA3B,EAAA5Z,EAAA0C,WAAA,EAAAqZ,GAAA,EAAA5W,EAAAa,QAAA4T,EAAApT,EAAAgV,IAEA,IAAAlD,EAAAhB,EAAAe,iBAAA,KAAAsB,EAAAyD,EAAAxD,EAAAyD,GAEA7b,KAAAmT,SAAAtS,IAAAiW,EAAA5U,QAEA,QAAAqU,EAAA,EAAiBA,EAAAvW,KAAAsT,eAAuBiD,EAAA,CACxC,IAAAG,EAAA1W,KAAAkT,SAAAqD,GAEAG,EAAA9B,GAAA/T,IAAAhB,EAAA8B,IAAAmV,EAAAL,OAAAF,GAAA8D,IACA3D,EAAA7B,GAAAhU,IAAAhB,EAAA8B,IAAAmV,EAAAL,OAAAF,GAAAgE,IAEA,IAAAa,EAAAvb,EAAA+C,MAAA8T,EAAA9B,GAAA5U,KAAAmT,UACAkI,EAAAxb,EAAA+C,MAAA8T,EAAA7B,GAAA7U,KAAAmT,UAEA+I,EAAAjC,EAAAE,EAAAD,EAAAkB,IAAAhB,EAAAiB,IAEA3E,EAAA1B,WAAAkH,EAAA,IAAAA,EAAA,EAEA,IAAAC,EAAAtc,EAAA+C,MAAA5C,KAAAmT,SAAA,GAEAiJ,EAAAvc,EAAA+C,MAAA8T,EAAA9B,GAAAuH,GACAE,EAAAxc,EAAA+C,MAAA8T,EAAA7B,GAAAsH,GAEAG,EAAArC,EAAAE,EAAAD,EAAAkC,IAAAhC,EAAAiC,IAEA3F,EAAAzB,YAAAqH,EAAA,IAAAA,EAAA,EAGA5F,EAAAxB,aAAA,EACA,IAAAqH,EAAA1c,EAAA8C,IAAA3C,KAAAmT,SAAA6I,GACAnc,EAAA8C,IAAA3C,KAAAmT,SAAAtT,EAAA+C,MAAAqZ,EAAAvF,EAAA7B,KACAhV,EAAA8C,IAAA3C,KAAAmT,SAAA2I,GACAjc,EAAA8C,IAAA3C,KAAAmT,SAAAtT,EAAA+C,MAAAmZ,EAAArF,EAAA9B,KACA2H,GAAA5W,EAAAc,oBACAiQ,EAAAxB,cAAAlV,KAAAyT,cAAA8I,GAKA,MAAAvc,KAAAsT,cAAA/F,EAAAiP,WAAA,CACA,IAAAC,EAAAzc,KAAAkT,SAAA,GACAwJ,EAAA1c,KAAAkT,SAAA,GAEAyJ,EAAA9c,EAAA+C,MAAA6Z,EAAA7H,GAAA5U,KAAAmT,UACAyJ,EAAA/c,EAAA+C,MAAA6Z,EAAA5H,GAAA7U,KAAAmT,UACA0J,EAAAhd,EAAA+C,MAAA8Z,EAAA9H,GAAA5U,KAAAmT,UACA2J,EAAAjd,EAAA+C,MAAA8Z,EAAA7H,GAAA7U,KAAAmT,UAEA4J,EAAA9C,EAAAE,EAAAD,EAAAyC,IAAAvC,EAAAwC,IACAI,EAAA/C,EAAAE,EAAAD,EAAA2C,IAAAzC,EAAA0C,IACAG,EAAAhD,EAAAE,EAAAD,EAAAyC,EAAAE,EAAAzC,EAAAwC,EAAAE,EAIAC,IADA,KACAA,EAAAC,EAAAC,MAEAjd,KAAAqT,IAAAjL,GAAAvH,IAAAkc,EAAAE,GACAjd,KAAAqT,IAAAhL,GAAAxH,IAAAoc,EAAAD,GACAhd,KAAAoT,aAAAvS,IAAAb,KAAAqT,IAAA/K,eAIAtI,KAAAsT,aAAA,EAIAqG,EAAA5c,EAAA8D,IAAAwZ,GACAV,EAAA5Y,EAAAuZ,EACAoB,EAAApb,EAAAO,IAAAib,GACAJ,EAAAza,EAAA8a,EAEAjC,EAAA/c,EAAA8D,IAAA0Z,GACAT,EAAA/Y,EAAAyZ,EACAmB,EAAArb,EAAAO,IAAAmb,GACAL,EAAA1a,EAAAgb,GAGAzK,EAAAlT,UAAA4e,oBAAA,SAAA3P,GAyBA,IAxBA,IAAAiI,EAAAxV,KAAAgS,WACAyD,EAAAzV,KAAAiS,WAEA9G,EAAAqK,EAAAK,UACAzK,EAAAqK,EAAAI,UAEA6F,EAAAvQ,EAAAyO,WACA+B,EAAAvQ,EAAAwO,WAIAK,GAHA9O,EAAA0O,WACAzO,EAAAyO,WAEA7Z,KAAA0T,YACAwG,EAAAla,KAAA4T,QACAuG,EAAAna,KAAA2T,WACAyG,EAAApa,KAAA6T,QAEAiI,EAAAjc,EAAAQ,MAAAqb,EAAApb,GACAyb,EAAAL,EAAAza,EACA+a,EAAAnc,EAAAQ,MAAAsb,EAAArb,GACA2b,EAAAN,EAAA1a,EAEAiB,EAAAlC,KAAAmT,SACAgJ,EAAAtc,EAAA+C,MAAAV,EAAA,GAEAqU,EAAA,EAAiBA,EAAAvW,KAAAsT,eAAuBiD,EAAA,CACxC,IAAAG,EAAA1W,KAAAkT,SAAAqD,GAEAiF,EAAA3b,EAAAiD,QAAA4T,EAAA5B,cAAA5S,EAAAwU,EAAA3B,eAAAoH,GACAJ,GAAA7B,EAAAra,EAAA+C,MAAA8T,EAAA9B,GAAA4G,GACAM,EAAApa,OAAAuY,EAAAuB,GACAS,GAAA7B,EAAAva,EAAA+C,MAAA8T,EAAA7B,GAAA2G,GACAQ,EAAAza,OAAA4Y,EAAAqB,GAGAE,EAAApb,EAAAO,IAAAib,GACAJ,EAAAza,EAAA8a,EACAJ,EAAArb,EAAAO,IAAAmb,GACAL,EAAA1a,EAAAgb,GAGAzK,EAAAlT,UAAA6e,wBAAA,SAAA5P,GAEA,IADA,IAAAuI,EAAA9V,KAAAqS,WACAkE,EAAA,EAAiBA,EAAAvW,KAAAsT,eAAuBiD,EACxCT,EAAAW,OAAAF,GAAAzB,cAAA9U,KAAAkT,SAAAqD,GAAAzB,cACAgB,EAAAW,OAAAF,GAAAxB,eAAA/U,KAAAkT,SAAAqD,GAAAxB,gBAIAvD,EAAAlT,UAAA8e,wBAAA,SAAA7P,GA4BA,IA3BA,IAAApC,EAAAnL,KAAAgS,WAAAqL,OACAjS,EAAApL,KAAAiS,WAAAoL,OAEA3B,EAAAvQ,EAAAyO,WAGA+B,GAFAxQ,EAAA0O,WAEAzO,EAAAwO,YAGAK,GAFA7O,EAAAyO,WAEA7Z,KAAA0T,YACAwG,EAAAla,KAAA4T,QACAuG,EAAAna,KAAA2T,WACAyG,EAAApa,KAAA6T,QAEAiI,EAAAjc,EAAAQ,MAAAqb,EAAApb,GACAyb,EAAAL,EAAAza,EACA+a,EAAAnc,EAAAQ,MAAAsb,EAAArb,GACA2b,EAAAN,EAAA1a,EAEAiB,EAAAlC,KAAAmT,SACAgJ,EAAAtc,EAAA+C,MAAAV,EAAA,GACAsV,EAAAxX,KAAAwT,WAMA+C,EAAA,EAAiBA,EAAAvW,KAAAsT,eAAuBiD,EAAA,CACxC,IAAAG,EAAA1W,KAAAkT,SAAAqD,IAGA+G,EAAAzd,EAAAI,QACAqB,WAAA,EAAA0a,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAvF,EAAA7B,KACAyI,EAAA7b,WAAA,EAAAqa,EAAA,EAAAjc,EAAA+C,MAAAmZ,EAAArF,EAAA9B,KAGA,IAAA2I,EAAA1d,EAAA8C,IAAA2a,EAAAnB,GAAAnc,KAAAuT,eACAiK,EAAA9G,EAAAzB,aAAAsI,EAGAE,EAAAjG,EAAAd,EAAA5B,cAGA0I,GAFAE,EAAA/e,EAAAe,MAAAgX,EAAA3B,eAAAyI,GAAAC,EACAA,IACA/G,EAAA3B,eACA2B,EAAA3B,eAAA2I,EAGA,IAAAlC,EAAA3b,EAAA+B,IAAA4b,EAAArB,GAEAL,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAra,EAAA+C,MAAA8T,EAAA9B,GAAA4G,GAEAQ,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,EAAAva,EAAA+C,MAAA8T,EAAA7B,GAAA2G,GAIA,MAAAxb,KAAAsT,cAAA,GAAA/F,EAAAiP,WACA,QAAA9f,EAAA,EAAmBA,EAAAsD,KAAAsT,eAAuB5W,EAAA,CAC1C,IAGA4gB,EAHA5G,EAAA1W,KAAAkT,SAAAxW,IAGA4gB,EAAAzd,EAAAI,QACAqB,WAAA,EAAA0a,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAvF,EAAA7B,KACAyI,EAAA7b,WAAA,EAAAqa,EAAA,EAAAjc,EAAA+C,MAAAmZ,EAAArF,EAAA9B,KAGA,IAIA8I,EAJAC,EAAA9d,EAAA8C,IAAA2a,EAAApb,GACAsb,GAAA9G,EAAA1B,YAAA2I,EAAAjH,EAAAxB,cAIAsI,GADAE,EAAA/e,EAAAc,IAAAiX,EAAA5B,cAAA0I,EAAA,IACA9G,EAAA5B,cACA4B,EAAA5B,cAAA4I,EAGAlC,EAAA3b,EAAA+B,IAAA4b,EAAAtb,GAEA4Z,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAra,EAAA+C,MAAA8T,EAAA9B,GAAA4G,GAEAQ,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,EAAAva,EAAA+C,MAAA8T,EAAA7B,GAAA2G,OAEG,CA0CH,IAAAiB,EAAAzc,KAAAkT,SAAA,GACAwJ,EAAA1c,KAAAkT,SAAA,GAEAnS,EAAAlB,EAAAO,IAAAqc,EAAA3H,cAAA4H,EAAA5H,eAIA8I,EAAA/d,EAAAI,OAAAmB,IAAA4a,GAAA5a,IAAAvB,EAAA+C,MAAAqZ,EAAAQ,EAAA5H,KAAAlT,IAAAma,GAAAna,IAAA9B,EAAA+C,MAAAmZ,EAAAU,EAAA7H,KACAiJ,EAAAhe,EAAAI,OAAAmB,IAAA4a,GAAA5a,IAAAvB,EAAA+C,MAAAqZ,EAAAS,EAAA7H,KAAAlT,IAAAma,GAAAna,IAAA9B,EAAA+C,MAAAmZ,EAAAW,EAAA9H,KAGAkJ,EAAAje,EAAA8C,IAAAib,EAAA1b,GACA6b,EAAAle,EAAA8C,IAAAkb,EAAA3b,GAEAlB,EAAAnB,EAAAO,IAAA0d,EAAArB,EAAAvH,aAAA6I,EAAArB,EAAAxH,cAGAlU,EAAAW,IAAAwG,EAAA3D,QAAAxE,KAAAqT,IAAAtS,IAKA,OAAW,CAUX,IAAAhC,EAAAoJ,EAAA3D,QAAAxE,KAAAoT,aAAApS,GAAA+B,MAEA,GAAAhE,KAAA,GAAAA,EAAAgB,GAAA,GAEA,IAAA/C,EAAA6C,EAAA8B,IAAA5C,EAAAgC,GAGAid,EAAAne,EAAA+B,IAAA5E,EAAA+B,EAAAmD,GACA+b,EAAApe,EAAA+B,IAAA5E,EAAA+C,EAAAmC,GAEA4Z,EAAAra,WAAAwY,EAAA+D,EAAA/D,EAAAgE,GACAlC,GAAA7B,GAAAra,EAAA+C,MAAA6Z,EAAA7H,GAAAoJ,GAAAne,EAAA+C,MAAA8Z,EAAA9H,GAAAqJ,IAEAjC,EAAA1a,WAAA6Y,EAAA6D,EAAA7D,EAAA8D,GACAhC,GAAA7B,GAAAva,EAAA+C,MAAA6Z,EAAA5H,GAAAmJ,GAAAne,EAAA+C,MAAA8Z,EAAA7H,GAAAoJ,IAGAxB,EAAA3H,cAAA/V,IACA2d,EAAA5H,cAAA/V,EAAAgB,EAcA,MAcA,GALAhB,KAAA0d,EAAAzH,WAAAhU,EAAAjC,EACAA,EAAAgB,EAAA,EACA+d,EAAA,EACAC,EAAA/d,KAAAqT,IAAAjL,GAAArI,EAAAhB,IAAAiC,EAAAjB,EAEAhB,KAAA,GAAAgf,GAAA,GAEA/gB,EAAA6C,EAAA8B,IAAA5C,EAAAgC,GAGAid,EAAAne,EAAA+B,IAAA5E,EAAA+B,EAAAmD,GACA+b,EAAApe,EAAA+B,IAAA5E,EAAA+C,EAAAmC,GACA4Z,EAAAra,WAAAwY,EAAA+D,EAAA/D,EAAAgE,GACAlC,GAAA7B,GAAAra,EAAA+C,MAAA6Z,EAAA7H,GAAAoJ,GAAAne,EAAA+C,MAAA8Z,EAAA9H,GAAAqJ,IAEAjC,EAAA1a,WAAA6Y,EAAA6D,EAAA7D,EAAA8D,GACAhC,GAAA7B,GAAAva,EAAA+C,MAAA6Z,EAAA5H,GAAAmJ,GAAAne,EAAA+C,MAAA8Z,EAAA7H,GAAAoJ,IAGAxB,EAAA3H,cAAA/V,IACA2d,EAAA5H,cAAA/V,EAAAgB,EAaA,MAcA,GALAhB,IAAA,EACAA,EAAAgB,GAAA2c,EAAA1H,WAAAhU,EAAAjB,EACA+d,EAAA9d,KAAAqT,IAAAhL,GAAAtJ,IAAAgB,EAAAiB,EAAAjC,EACAgf,EAAA,EAEAhf,EAAAgB,GAAA,GAAA+d,GAAA,GAEA9gB,EAAA6C,EAAA8B,IAAA5C,EAAAgC,GAGAid,EAAAne,EAAA+B,IAAA5E,EAAA+B,EAAAmD,GACA+b,EAAApe,EAAA+B,IAAA5E,EAAA+C,EAAAmC,GACA4Z,EAAAra,WAAAwY,EAAA+D,EAAA/D,EAAAgE,GACAlC,GAAA7B,GAAAra,EAAA+C,MAAA6Z,EAAA7H,GAAAoJ,GAAAne,EAAA+C,MAAA8Z,EAAA9H,GAAAqJ,IAEAjC,EAAA1a,WAAA6Y,EAAA6D,EAAA7D,EAAA8D,GACAhC,GAAA7B,GAAAva,EAAA+C,MAAA6Z,EAAA5H,GAAAmJ,GAAAne,EAAA+C,MAAA8Z,EAAA7H,GAAAoJ,IAGAxB,EAAA3H,cAAA/V,IACA2d,EAAA5H,cAAA/V,EAAAgB,EAaA,MAcA,GALAhB,IAAA,EACAA,EAAAgB,EAAA,EACA+d,EAAA9c,EAAAjC,EACAgf,EAAA/c,EAAAjB,EAEA+d,GAAA,GAAAC,GAAA,GAEA/gB,EAAA6C,EAAA8B,IAAA5C,EAAAgC,GAGAid,EAAAne,EAAA+B,IAAA5E,EAAA+B,EAAAmD,GACA+b,EAAApe,EAAA+B,IAAA5E,EAAA+C,EAAAmC,GACA4Z,EAAAra,WAAAwY,EAAA+D,EAAA/D,EAAAgE,GACAlC,GAAA7B,GAAAra,EAAA+C,MAAA6Z,EAAA7H,GAAAoJ,GAAAne,EAAA+C,MAAA8Z,EAAA9H,GAAAqJ,IAEAjC,EAAA1a,WAAA6Y,EAAA6D,EAAA7D,EAAA8D,GACAhC,GAAA7B,GAAAva,EAAA+C,MAAA6Z,EAAA5H,GAAAmJ,GAAAne,EAAA+C,MAAA8Z,EAAA7H,GAAAoJ,IAGAxB,EAAA3H,cAAA/V,IACA2d,EAAA5H,cAAA/V,EAAAgB,EAEA,MAKA,OAIA2b,EAAApb,EAAAO,IAAAib,GACAJ,EAAAza,EAAA8a,EAEAJ,EAAArb,EAAAO,IAAAmb,GACAL,EAAA1a,EAAAgb,GAmBA,IAAAiC,EAAA,GAKA1M,EAAA2M,QAAA,SAAAC,EAAAC,EAAAC,GAEAJ,EAAAE,GAAAF,EAAAE,IAAA,GACAF,EAAAE,GAAAC,GAAAC,GAGA9M,EAAAxT,OAAA,SAAAwX,EAAA9D,EAAA+D,EAAA7D,GACA,IAIAL,EAAAM,EAJA0M,EAAA/I,EAAAjJ,UACAiS,EAAA/I,EAAAlJ,UAIA,GAAAsF,EAAAqM,EAAAK,IAAAL,EAAAK,GAAAC,GACAjN,EAAA,IAAAC,EAAAgE,EAAA9D,EAAA+D,EAAA7D,EAAAC,OACG,MAAAA,EAAAqM,EAAAM,IAAAN,EAAAM,GAAAD,IAGH,YAFAhN,EAAA,IAAAC,EAAAiE,EAAA7D,EAAA4D,EAAA9D,EAAAG,GAMA2D,EAAAjE,EAAA2F,cACAzB,EAAAlE,EAAA4F,cACAzF,EAAAH,EAAA6F,iBACAxF,EAAAL,EAAA8F,iBACA,IAAAlM,EAAAqK,EAAAK,UACAzK,EAAAqK,EAAAI,UA8BA,OA3BAtE,EAAAO,QAAAP,UACAA,EAAAO,QAAAhH,MAAAM,EAEAmG,EAAAO,QAAA9G,KAAA,KACAuG,EAAAO,QAAA7G,KAAAE,EAAAsT,cACA,MAAAtT,EAAAsT,gBACAtT,EAAAsT,cAAAzT,KAAAuG,EAAAO,SAEA3G,EAAAsT,cAAAlN,EAAAO,QAGAP,EAAAQ,QAAAR,UACAA,EAAAQ,QAAAjH,MAAAK,EAEAoG,EAAAQ,QAAA/G,KAAA,KACAuG,EAAAQ,QAAA9G,KAAAG,EAAAqT,cACA,MAAArT,EAAAqT,gBACArT,EAAAqT,cAAAzT,KAAAuG,EAAAQ,SAEA3G,EAAAqT,cAAAlN,EAAAQ,QAGA,GAAAyD,EAAAkD,YAAA,GAAAjD,EAAAiD,aACAvN,EAAA8N,UAAA,GACA7N,EAAA6N,UAAA,IAGA1H,GAGAC,EAAAkN,QAAA,SAAAnN,EAAA+G,GACA,IAAA9C,EAAAjE,EAAAS,WACAyD,EAAAlE,EAAAU,WAEA9G,EAAAqK,EAAAK,UACAzK,EAAAqK,EAAAI,UAEAtE,EAAA0F,cACAqB,EAAAa,WAAA5H,GAIAA,EAAAO,QAAA9G,OACAuG,EAAAO,QAAA9G,KAAAC,KAAAsG,EAAAO,QAAA7G,MAGAsG,EAAAO,QAAA7G,OACAsG,EAAAO,QAAA7G,KAAAD,KAAAuG,EAAAO,QAAA9G,MAGAuG,EAAAO,SAAA3G,EAAAsT,gBACAtT,EAAAsT,cAAAlN,EAAAO,QAAA7G,MAIAsG,EAAAQ,QAAA/G,OACAuG,EAAAQ,QAAA/G,KAAAC,KAAAsG,EAAAQ,QAAA9G,MAGAsG,EAAAQ,QAAA9G,OACAsG,EAAAQ,QAAA9G,KAAAD,KAAAuG,EAAAQ,QAAA/G,MAGAuG,EAAAQ,SAAA3G,EAAAqT,gBACArT,EAAAqT,cAAAlN,EAAAQ,QAAA9G,MAGAsG,EAAAc,WAAA2D,WAAA,MAAAR,EAAAkD,YACA,GAAAjD,EAAAiD,aACAvN,EAAA8N,UAAA,GACA7N,EAAA6N,UAAA,IAGA,IAAAsF,EAAA/I,EAAAjJ,UACAiS,EAAA/I,EAAAlJ,UAEAoS,EAAAT,EAAAK,GAAAC,GAAAG,WACA,mBAAAA,GACAA,EAAApN,qBC/qCajV,EAAQ,GAHrB,IAKAuD,EAAWvD,EAAQ,GACnBuI,EAAgBvI,EAAQ,GACxBqC,EAAWrC,EAAQ,GACnBqH,EAAUrH,EAAQ,GAyClB,SAAA8U,IACApR,KAAAoW,KACApW,KAAAqW,YAAAxW,EAAAI,OACAD,KAAAsW,WAAAzW,EAAAI,OACAD,KAAAyW,OAAA,KAAAmI,EAAA,IAAAA,GACA5e,KAAAgW,WAAA,EAqBA,SAAA4I,IACA5e,KAAAsW,WAAAzW,EAAAI,OACAD,KAAA8U,cAAA,EACA9U,KAAA+U,eAAA,EACA/U,KAAAgZ,GAAA,IAAA6F,EAUA,SAAAA,IACA7e,KAAA8e,GAAA,IAAAC,EAwBA,SAAAA,IACA/e,KAAA0R,OACA1R,KAAA4R,OACA5R,KAAAue,MACAve,KAAAwe,MAiBA,SAAAQ,IACAhf,KAAAkC,OACAlC,KAAAyW,OAAA,GACAzW,KAAAif,YAAA,GAhIAxiB,EAAAD,QAAA4U,EACA3U,EAAAD,QAAA0iB,kBA6RA,SAAAC,EAAAC,EAAAld,EAAAmd,EAAAC,GAEA,IAAAC,EAAA,EAGAC,EAAA3f,EAAA8C,IAAAT,EAAAkd,EAAA,GAAA9e,GAAA+e,EACAI,EAAA5f,EAAA8C,IAAAT,EAAAkd,EAAA,GAAA9e,GAAA+e,EAGAG,GAAA,GACAL,EAAAI,KAAA1e,IAAAue,EAAA,IACAK,GAAA,GACAN,EAAAI,KAAA1e,IAAAue,EAAA,IAGA,GAAAI,EAAAC,EAAA,GAEA,IAAAC,EAAAF,KAAAC,GACAN,EAAAI,GAAAjf,EAAAY,WAAA,EAAAwe,EAAAN,EAAA,GAAA9e,EAAAof,EAAAN,EAAA,GAAA9e,GAGA6e,EAAAI,GAAAvG,GAAA8F,GAAApN,OAAA4N,EACAH,EAAAI,GAAAvG,GAAA8F,GAAAlN,OAAAwN,EAAA,GAAApG,GAAA8F,GAAAlN,OACAuN,EAAAI,GAAAvG,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACAR,EAAAI,GAAAvG,GAAA8F,GAAAN,MAAApN,EAAAwO,SACAL,EAGA,OAAAA,GAxTA9iB,EAAAD,QAAAqjB,WAAAC,EACArjB,EAAAD,QAAAujB,eAkOA,SAAAC,EAAAC,EAAAC,EAAAC,GAOA,QAAAzjB,EAAA,EAAiBA,EAAAwjB,EAAAlK,aAA0BtZ,EAAA,CAC3C,IAAAsc,EAAAkH,EAAAzJ,OAAA/Z,GAAAsc,GAEAgH,EAAAtjB,GAAA0jB,EAAAC,YAEA,QAAA9J,EAAA,EAAmBA,EAAA4J,EAAAnK,aAA0BO,EAC7C,GAAA4J,EAAA1J,OAAAF,GAAAyC,GAAA/a,KAAA+a,EAAA/a,IAAA,CACA+hB,EAAAtjB,GAAA0jB,EAAAE,aACA,OAMA,QAAA5jB,EAAA,EAAiBA,EAAAyjB,EAAAnK,aAA0BtZ,EAAA,CAC3C,IAAAsc,EAAAmH,EAAA1J,OAAA/Z,GAAAsc,GAEAiH,EAAAvjB,GAAA0jB,EAAAG,SAEA,QAAAhK,EAAA,EAAmBA,EAAA2J,EAAAlK,aAA0BO,EAC7C,GAAA2J,EAAAzJ,OAAAF,GAAAyC,GAAA/a,KAAA+a,EAAA/a,IAAA,CACAgiB,EAAAvjB,GAAA0jB,EAAAE,aACA,SA9PA7jB,EAAAD,QAAA4jB,aAGAhP,EAAAwJ,UAAA,EACAxJ,EAAA2J,QAAA,EACA3J,EAAA8J,QAAA,EAGA9J,EAAAuO,SAAA,EACAvO,EAAAwO,OAAA,EAsEAxiB,OAAAC,eAAAwhB,EAAAvgB,UAAA,OACAf,IAAA,WACA,OAAAyC,KAAA8e,GAAApN,OAAA,EAAA1R,KAAA8e,GAAAlN,OAAA,GAAA5R,KAAA8e,GAAAP,MAAA,GAAAve,KAAA8e,GAAAN,OAEAlhB,YAAA,EACAkjB,cAAA,IAGA3B,EAAAvgB,UAAAuC,IAAA,SAAA1D,GAEA6C,KAAA8e,GAAAje,IAAA1D,EAAA2hB,KAkBAC,EAAAzgB,UAAAuC,IAAA,SAAA1D,GACA6C,KAAA0R,OAAAvU,EAAAuU,OACA1R,KAAA4R,OAAAzU,EAAAyU,OACA5R,KAAAue,MAAAphB,EAAAohB,MACAve,KAAAwe,MAAArhB,EAAAqhB,OAuBApN,EAAA9S,UAAAuY,iBAAA,SAAA4J,EAAAtI,EAAAyD,EAAAxD,EAAAyD,GACA,MAAA7b,KAAAgW,WAAA,CAMA,IAAA9T,GAFAue,KAAA,IAAAzB,GAEA9c,OACAuU,EAAAgK,EAAAhK,OACAwI,EAAAwB,EAAAxB,YAGA,OAAAjf,KAAAoW,MACA,KAAAhF,EAAAwJ,UACA1Y,EAAArC,EAAAO,IAAA,KACA,IAAAya,EAAAhW,EAAAL,QAAA2T,EAAAnY,KAAAsW,YACAwE,EAAAjW,EAAAL,QAAA4T,EAAApY,KAAAyW,OAAA,GAAAH,YACAoK,EAAA7gB,EAAA8B,IAAAmZ,EAAAD,GACAhb,EAAAkC,cAAA2e,GAAA/hB,EAAAE,QAAAF,EAAAE,UACAqD,EAAArB,IAAA6f,GACAxe,EAAAF,aAEAyU,EAAA,GAAA5W,EAAAoD,IAAA4X,EAAAC,GACAmE,EAAA,IAAApD,EAAAD,EACAnF,EAAA5U,OAAA,EACAod,EAAApd,OAAA,EACA,MAEA,KAAAuP,EAAA2J,QACA7Y,EAAAyB,EAAAa,QAAA2T,EAAAnT,EAAAhF,KAAAqW,aAGA,IAFA,IAAA2E,EAAAnW,EAAAL,QAAA2T,EAAAnY,KAAAsW,YAEA5Z,EAAA,EAAmBA,EAAAsD,KAAAgW,aAAqBtZ,EAAA,CACxC,IAAAue,EAAApW,EAAAL,QAAA4T,EAAApY,KAAAyW,OAAA/Z,GAAA4Z,YACA+D,EAAAxa,EAAAQ,MAAA4a,GAAA1Z,OAAAqa,EAAA/b,EAAA8C,IAAA9C,EAAA8B,IAAAsZ,EAAAD,GAAA9Y,MACAqY,EAAA1a,EAAAQ,MAAA4a,GAAAvZ,OAAAma,EAAA3Z,GACAuU,EAAA/Z,GAAAmD,EAAAoD,IAAAoX,EAAAE,GACA0E,EAAAviB,GAAAmD,EAAA8C,IAAA9C,EAAA8B,IAAA4Y,EAAAF,GAAAnY,GAEAuU,EAAA5U,OAAA7B,KAAAgW,WACAiJ,EAAApd,OAAA7B,KAAAgW,WACA,MAEA,KAAA5E,EAAA8J,QACAhZ,EAAAyB,EAAAa,QAAA4T,EAAApT,EAAAhF,KAAAqW,aAGA,IAFA2E,EAAAnW,EAAAL,QAAA4T,EAAApY,KAAAsW,YAEA5Z,EAAA,EAAmBA,EAAAsD,KAAAgW,aAAqBtZ,EAAA,CACxCue,EAAApW,EAAAL,QAAA2T,EAAAnY,KAAAyW,OAAA/Z,GAAA4Z,YACAiE,EAAA1a,EAAAiD,QAAA,EAAAmY,EAAAY,EAAAhc,EAAA8C,IAAA9C,EAAA8B,IAAAsZ,EAAAD,GAAA9Y,MACAmY,EAAAxa,EAAAiD,QAAA,EAAAmY,GAAAW,EAAA1Z,GACAuU,EAAA/Z,GAAAmD,EAAAoD,IAAAoX,EAAAE,GACA0E,EAAAviB,GAAAmD,EAAA8C,IAAA9C,EAAA8B,IAAA0Y,EAAAE,GAAArY,GAEAuU,EAAA5U,OAAA7B,KAAAgW,WACAiJ,EAAApd,OAAA7B,KAAAgW,WAEA9T,EAAAN,KAAA,GAOA,OAHA6e,EAAAve,SACAue,EAAAhK,SACAgK,EAAAxB,cACAwB,IAWA,IAAAL,EAAA,CAEAO,UAAA,EACAJ,SAAA,EACAD,aAAA,EACAD,YAAA,GAoDA,SAAAP,IACA9f,KAAAM,EAAAT,EAAAI,OACAD,KAAAgZ,GAAA,IAAA6F,EAGAiB,EAAAxhB,UAAAuC,IAAA,SAAA1D,GACA6C,KAAAM,EAAAO,IAAA1D,EAAAmD,GACAN,KAAAgZ,GAAAnY,IAAA1D,EAAA6b,sBC/SA,IAAA4H,EAAYtkB,EAAQ,IACpBwT,EAAaxT,EAAQ,IACrBukB,EAASvkB,EAAQ,IACjBwkB,EAAaxkB,EAAQ,IAIrB,SAAAykB,EAAAC,GACA,KAAAhhB,gBAAA+gB,GACA,OAAAF,EAAAI,GAAAD,GACAD,EAAAG,IAAAC,MAAAJ,EAAAK,WACKP,EAAAziB,OAAA4iB,GACLD,EAAAM,MAAAF,MAAAJ,EAAAK,WAEAJ,EAIAJ,EAAA5iB,SAEA,QAAAtB,EAAA,EAAiBA,EAAA4kB,EAAAzf,OAAkBnF,IACnC4kB,EAAA5kB,GAAAG,KAAAmD,MAhBA4gB,EAAA5iB,OAAA,EAoBA,IAAAsjB,EAAA,GAEAP,EAAAO,MAAA,SAAAL,GACAK,EAAAC,KAAAN,IAGA,IAAAO,EAAA,GAEAT,EAAAS,MAAA,SAAAP,GACAO,EAAAD,KAAAN,IAGA,IAAAQ,EAAA,GAEAV,EAAAW,OAAA,WACA,OAAAN,UAAAvf,QAAAgf,EAAAc,OAAAP,UAAA,IACA,OAAAK,EAAAL,UAAA,IAEA,IAAAA,UAAAvf,QAAAgf,EAAAziB,OAAAgjB,UAAA,KACAtR,EAAA2R,EAAAL,UAAA,IAEA,IAAAA,UAAAvf,QAAAgf,EAAAc,OAAAP,UAAA,MACAA,UAAA,GAAAA,UAAA,KAIA,IAAAQ,EAAA,GAEAC,EAAA,GACAC,GAAA,EACAC,GAAA,EAEAhB,EAAAG,IAAA,SAAAA,EAAAc,GACAF,EAKAf,EAAAW,OAAA,aACAO,CAAA,SAAAC,EAAAC,GAEA,QAAAzlB,EAAA,EAAmBA,EAAA8kB,EAAA3f,OAAkBnF,IACrC8kB,EAAA9kB,GAAAG,KAAAmD,KAAAkiB,EAAAC,GAEAjB,EAAAgB,EAAAC,GACAN,EAAAN,KAAAW,GAEAA,EAAAE,SACGJ,GAdHJ,EAAAL,KAAAH,YAiBA,IAAAiB,EAAAvB,IAEAC,EAAAuB,QAAA,SAAAC,GACA,oBAAAA,EAAA,CACA,IAAAC,EAAAzB,EAAA0B,QAAAF,GACA,gBAAAG,KAAAF,KAEAD,EAAA,SAAAjE,IA4HA,SAAAqE,EAAArE,GACA,IAAAsE,EAAAC,SAAAC,cAAA,UACAF,EAAAG,iBAAA,kBACAzE,MAEAsE,EAAAG,iBAAA,iBAAAtf,GACA6a,EAAA7a,GAAA,yBAAAkf,KAEAC,EAAAD,MACAC,EAAA5J,GAAA,WAAAgK,KAAAC,MACAJ,SAAAK,KAAAC,YAAAP,GArIAQ,CAAAZ,EAAAlE,KAIA,mBAAAiE,GAOAA,EAAAF,MAGAtB,EAAAqB,MAAA,SAAAV,GAGAX,EAAAW,UASAW,EAAAgB,KAAA,WAGA,IADAvB,GAAA,EACAF,EAAA/f,QAAA,CACA,IAAAyhB,EAAA1B,EAAA2B,QACAxC,EAAAG,IAAAC,MAAAJ,EAAAuC,OAKAvC,EAAAyC,MAAA,WACA,IAAAzB,EAAA,CACAA,GAAA,EACA,QAAArlB,EAAAmlB,EAAAhgB,OAAA,EAAoCnF,GAAA,EAAQA,IAC5CmlB,EAAAnlB,GAAA8mB,UAKAzC,EAAA0C,OAAA,WACA,GAAA1B,EAAA,CACAA,GAAA,EACA,QAAArlB,EAAAmlB,EAAAhgB,OAAA,EAAoCnF,GAAA,EAAQA,IAC5CmlB,EAAAnlB,GAAA+mB,WAKA1C,EAAA/iB,OAAA,WACA,WAAA+iB,GAGAA,EAAA0B,QAAA,WAEA,uBAAAiB,QAAA,oBAAAb,SACA,gBAAAL,GACA,OAAAA,GAIA,IAAAmB,EAAAd,SAAAe,qBAAA,UA2CA,gBAAApB,GACA,WAAAE,KAAAF,GAAA,CACA,IAAAG,EA3CA,WAEA,GAAAE,SAAAgB,cACA,OAAAhB,SAAAgB,cAAAlB,IAIA,IAAAmB,EACA,IACA,IAAArgB,EAAA,IAAA9C,MACA,IAAA8C,EAAAqgB,MAGA,MAAArgB,EAFAqgB,EAAArgB,EAAAqgB,MAIK,MAAArgB,GACLqgB,EAAArgB,EAAAqgB,MAEA,oBAAAA,EAGA,QAAApnB,GAFAonB,IAAAC,MAAA,OAEAliB,OAAgCnF,KAAK,CACrC,IAAA8lB,EAAAsB,EAAApnB,GAAAsnB,MAAA,wCACA,GAAAxB,EACA,OAAAA,EAAA,GAMA,GAAAmB,EAAA9hB,QAAA,eAAA8hB,EAAA,GACA,IAAAjnB,EAAAinB,EAAA9hB,OAAkCnF,KAClC,mBAAAinB,EAAAjnB,GAAAunB,WACA,OAAAN,EAAAjnB,GAAAimB,IAKA,OAAAuB,SAAAC,KAKAC,GAEA5B,EADAG,EAAA0B,UAAA,EAAA1B,EAAA2B,YAAA,QACA9B,EAAA6B,UAAA,GAIA,OAAA7B,GA3DA,GA+DA/lB,EAAAD,QAAAukB,mBC7LA,IACAnhB,GAAsD,EAEtDnD,EAAAD,QAAA+nB,EAEA,IAAAzkB,EAAaxD,EAAQ,GACrB0B,EAAa1B,EAAQ,GAErBqC,GADcrC,EAAQ,GACXA,EAAQ,IACnBuI,EAAgBvI,EAAQ,GACxBqH,EAAUrH,EAAQ,GAClBuD,EAAWvD,EAAQ,GAEnBqJ,GADWrJ,EAAQ,IACJA,EAAQ,IACvBoR,EAAYpR,EAAQ,IAEpBkC,EAAA,IAAAqB,EAAA6Q,EAAA,IAAA7Q,EAAA8Q,EAAA,IAAA9Q,EAAA2kB,EAAA,IAAA3kB,EAAA4kB,EAAA,IAAA5kB,EAAA7C,EAAA,IAAA6C,EAAAsC,EAAA,IAAAwB,EAaA,SAAA4gB,EAAAG,GACA,KAAA1kB,gBAAAukB,GACA,WAAAA,EAAAG,GAGAH,EAAAI,OAAA9nB,KAAAmD,MAEAA,KAAAqL,OAAAkZ,EAAAK,KACA5kB,KAAA2N,SAAAhI,EAAAS,cACApG,KAAA6kB,WAAAhlB,EAAAI,OACAD,KAAA8kB,WAAA,GACA9kB,KAAA+kB,UAAA,GACA/kB,KAAAglB,QAAA,EACAhlB,KAAAilB,eAAA,IAAAplB,EAAA,KAEA6kB,KAAA7iB,QACA7B,KAAAklB,KAAAR,GA3BAH,EAAAI,OAAAjX,EACA6W,EAAAjmB,UAAAN,EAAAumB,EAAAI,OAAArmB,WAEAimB,EAAAK,KAAA,UA4BAL,EAAAjmB,UAAA6mB,UAAA,SAAAC,GAEA,OADAxlB,GAAAE,EAAAb,OAAA,GAAAmmB,KAAAplB,KAAAglB,SACAhlB,KAAA8kB,WAAAM,IAMAb,EAAAjmB,UAAAwP,OAAA,WACA,IAAAzN,EAAA,IAAAkkB,EACAlkB,EAAAgL,OAAArL,KAAAqL,OACAhL,EAAAsN,SAAA3N,KAAA2N,SACAtN,EAAA2kB,QAAAhlB,KAAAglB,QACA3kB,EAAAwkB,WAAAhkB,IAAAb,KAAA6kB,YACAxkB,EAAA4kB,eAAApkB,IAAAb,KAAAilB,gBACA,QAAAvoB,EAAA,EAAiBA,EAAAsD,KAAAglB,QAAkBtoB,IACnC2D,EAAAykB,WAAAvD,KAAAvhB,KAAA8kB,WAAApoB,GAAA2D,SAEA,IAAA3D,EAAA,EAAiBA,EAAAsD,KAAA+kB,UAAAljB,OAA2BnF,IAC5C2D,EAAA0kB,UAAAxD,KAAAvhB,KAAA+kB,UAAAroB,GAAA2D,SAEA,OAAAA,GAGAkkB,EAAAjmB,UAAAyP,cAAA,WACA,UA0DAwW,EAAAjmB,UAAA4mB,KAAA,SAAAR,GAEA,GADA9kB,GAAAE,EAAAb,OAAA,GAAAylB,EAAA7iB,QAAA6iB,EAAA7iB,QAAA8D,EAAAE,oBACA6e,EAAA7iB,OAAA,EACA7B,KAAAqlB,UAAA,SADA,CAUA,IALA,IAAAlnB,EAAAQ,EAAAa,IAAAklB,EAAA7iB,OAAA8D,EAAAE,oBAGAyf,EAAA,GACAC,EAAA,EACA7oB,EAAA,EAAiBA,EAAAyB,IAAOzB,EAAA,CAIxB,IAHA,IAAA4D,EAAAokB,EAAAhoB,GAEA8oB,GAAA,EACAjP,EAAA,EAAmBA,EAAAgP,IAAehP,EAClC,GAAA1W,EAAA2C,gBAAAlC,EAAAglB,EAAA/O,IAAA,IAAA5Q,EAAAM,kBAAA,CACAuf,GAAA,EACA,MAIAA,IACAF,EAAAC,KAAAjlB,GAKA,IADAnC,EAAAonB,GACA,EAIA,OAFA3lB,GAAAE,EAAAb,QAAA,QACAe,KAAAqlB,UAAA,KAQA,IAAAI,EAAA,EACAC,EAAAJ,EAAA,GAAAvmB,EACA,IAAArC,EAAA,EAAiBA,EAAAyB,IAAOzB,EAAA,CACxB,IAAAqC,EAAAumB,EAAA5oB,GAAAqC,GACAA,EAAA2mB,GAAA3mB,GAAA2mB,GAAAJ,EAAA5oB,GAAAqD,EAAAulB,EAAAG,GAAA1lB,KACA0lB,EAAA/oB,EACAgpB,EAAA3mB,GAQA,IAJA,IAAA4mB,EAAA,GACA7oB,EAAA,EACA8oB,EAAAH,IAES,CACTE,EAAA7oB,GAAA8oB,EAEA,IAAAC,EAAA,EACA,IAAAtP,EAAA,EAAmBA,EAAApY,IAAOoY,EAC1B,GAAAsP,GAAAD,EAAA,CAKA,IAAApoB,EAAAqC,EAAA8B,IAAA2jB,EAAAO,GAAAP,EAAAK,EAAA7oB,KAEAC,GADAuD,EAAAT,EAAA8B,IAAA2jB,EAAA/O,GAAA+O,EAAAK,EAAA7oB,KACA+C,EAAA+C,MAAApF,EAAA8C,IACAvD,EAAA,IACA8oB,EAAAtP,GAIA,GAAAxZ,GAAAuD,EAAAyB,gBAAAvE,EAAAuE,kBACA8jB,EAAAtP,QAbAsP,EAAAtP,EAoBA,KAHAzZ,EACA8oB,EAAAC,EAEAA,GAAAJ,EACA,MAIA,GAAA3oB,EAAA,EAIA,OAFA8C,GAAAE,EAAAb,QAAA,QACAe,KAAAqlB,UAAA,KAMA,GAFArlB,KAAAglB,QAAAloB,EAEAA,EAAA,GACA,IAAAgpB,GAAAtV,IAAAuV,EAAAD,EAGA,IAAAppB,EAAA,EAAsBA,EAAAI,IAAOJ,GAC7B4D,EAAAN,KAAA8kB,WAAApoB,GAAA4oB,EAAAK,EAAAjpB,KACAqC,EAAA+mB,IACAA,EAAAxlB,EAAAvB,GAEAuB,EAAAP,EAAAgmB,IACAA,EAAAzlB,EAAAP,GAIAC,KAAAilB,eAAAlmB,EAAA+mB,EAAA,EACA9lB,KAAAilB,eAAAllB,EAAAgmB,EAAA,EAIA,IAAArpB,EAAA,EAAiBA,EAAAI,IAAOJ,EAAA,CACxB,IAAAspB,EAAAtpB,EACAupB,EAAAvpB,EAAA,EAAAI,EAAAJ,EAAA,IACAwpB,EAAArmB,EAAA8B,IAAA3B,KAAA8kB,WAAAmB,GAAAjmB,KAAA8kB,WAAAkB,IACApmB,GAAAE,EAAAb,OAAAinB,EAAAnkB,gBAAApD,EAAAE,QAAAF,EAAAE,SACAmB,KAAA+kB,UAAAroB,GAAAmD,EAAA+C,MAAAsjB,EAAA,GACAlmB,KAAA+kB,UAAAroB,GAAAsF,YAIAhC,KAAA6kB,WAlLA,SAAAsB,EAAAC,GACAxmB,GAAAE,EAAAb,OAAAmnB,GAAA,GAkBA,IAhBA,IAAArpB,EAAA8C,EAAAI,OACAomB,EAAA,EAIAC,EAAAzmB,EAAAI,OAWAvD,EAAA,EAAiBA,EAAA0pB,IAAW1pB,EAAA,CAE5B,IAAAgU,EAAA4V,EACA3V,EAAAwV,EAAAzpB,GACA6pB,EAAA7pB,EAAA,EAAA0pB,EAAAD,EAAAzpB,EAAA,GAAAypB,EAAA,GAEAK,EAAA3mB,EAAA8B,IAAAgP,EAAAD,GACA+V,EAAA5mB,EAAA8B,IAAA4kB,EAAA7V,GAIAgW,EAAA,GAFA7mB,EAAA+C,MAAA4jB,EAAAC,GAGAJ,GAAAK,EAGA3pB,EAAAwE,OAAAmlB,GAjBA,KAiBAhW,GACA3T,EAAAwE,OAAAmlB,GAlBA,KAkBA/V,GACA5T,EAAAwE,OAAAmlB,GAnBA,KAmBAH,GAMA,OAFA3mB,GAAAE,EAAAb,OAAAonB,EAAA1nB,EAAAE,SACA9B,EAAA6E,IAAA,EAAAykB,GACAtpB,EAwIA4pB,CAAA3mB,KAAA8kB,WAAAhoB,KAMAynB,EAAAjmB,UAAA+mB,UAAA,SAAAuB,EAAAC,EAAAC,EAAAljB,GA0BA,GAzBA5D,KAAA8kB,WAAA,IACA9kB,KAAA8kB,WAAA,GAAAjkB,KAAA+lB,GAAAC,GACA7mB,KAAA8kB,WAAA,GAAAjkB,IAAA+lB,GAAAC,GACA7mB,KAAA8kB,WAAA,GAAAjkB,IAAA+lB,EAAAC,GACA7mB,KAAA8kB,WAAA,GAAAjkB,KAAA+lB,EAAAC,KAEA7mB,KAAA8kB,WAAA,GAAAjlB,EAAAO,KAAAwmB,GAAAC,GACA7mB,KAAA8kB,WAAA,GAAAjlB,EAAAO,IAAAwmB,GAAAC,GACA7mB,KAAA8kB,WAAA,GAAAjlB,EAAAO,IAAAwmB,EAAAC,GACA7mB,KAAA8kB,WAAA,GAAAjlB,EAAAO,KAAAwmB,EAAAC,IAEA7mB,KAAA+kB,UAAA,IACA/kB,KAAA+kB,UAAA,GAAAlkB,IAAA,MACAb,KAAA+kB,UAAA,GAAAlkB,IAAA,KACAb,KAAA+kB,UAAA,GAAAlkB,IAAA,KACAb,KAAA+kB,UAAA,GAAAlkB,KAAA,OAEAb,KAAA+kB,UAAA,GAAAllB,EAAAO,IAAA,MACAJ,KAAA+kB,UAAA,GAAAllB,EAAAO,IAAA,KACAJ,KAAA+kB,UAAA,GAAAllB,EAAAO,IAAA,KACAJ,KAAA+kB,UAAA,GAAAllB,EAAAO,KAAA,MAGAJ,KAAAglB,QAAA,EAEAnlB,EAAAa,QAAAomB,KACAA,EAAA/nB,GAAAJ,EAAAE,SAAAF,EAAAE,QAAAioB,EAAA/nB,GACA+nB,EAAA/mB,GAAApB,EAAAE,SAAAF,EAAAE,QAAAioB,EAAA/mB,GAAA,CAEA6D,KAAA,EAEA5D,KAAA6kB,WAAAhkB,IAAAimB,GACA3kB,EAAAtB,IAAA+C,GAKA,IAHA,IAGAtD,EAHAwlB,GAAAtV,IAAAuV,EAAAD,EAGAppB,EAAA,EAAsBA,EAAAsD,KAAAglB,UAAkBtoB,EACxC4D,EAAAN,KAAA8kB,WAAApoB,GAAAsD,KAAA8kB,WAAApoB,GAAAyF,OAAAf,IAAA0lB,GACA9mB,KAAA+kB,UAAAroB,GAAAsD,KAAA+kB,UAAAroB,GAAAyF,OAEA7B,EAAAvB,EAAA+mB,IACAA,EAAAxlB,EAAAvB,GAEAuB,EAAAP,EAAAgmB,IACAA,EAAAzlB,EAAAP,GAIAC,KAAAilB,eAAAlmB,EAAA+mB,EAAA,EACA9lB,KAAAilB,eAAAllB,EAAAgmB,EAAA,OAEA/lB,KAAAilB,eAAAlmB,EAAAiB,KAAAilB,eAAAllB,GAAA6mB,EAAAC,EAAAD,EAAAC,GAAA,GAIAtC,EAAAjmB,UAAA0P,UAAA,SAAA/I,EAAAzG,GAGA,IAFA,IAAAuoB,EAAApjB,EAAAiB,SAAAK,EAAAD,EAAAnF,EAAA8B,IAAAnD,EAAAyG,EAAAzG,IAEA9B,EAAA,EAAiBA,EAAAsD,KAAAglB,UAAkBtoB,EAAA,CAEnC,GADAmD,EAAA8C,IAAA3C,KAAA+kB,UAAAroB,GAAAmD,EAAA8B,IAAAolB,EAAA/mB,KAAA8kB,WAAApoB,KACA,EACA,SAIA,UAGA6nB,EAAAjmB,UAAA2P,QAAA,SAAAC,EAAAC,EAAAlJ,EAAAoJ,GACAqC,EAAA7P,IAAAsN,EAAAuC,IACAC,EAAA9P,IAAAsN,EAAAwC,IAGAD,IAAA/O,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GACA2L,IAAAhP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GAEAhI,IAAA6D,IAAA8P,GAAAhP,IAAA+O,GAEA,IAAAsW,EAAAnnB,EAAA8C,IAAA3F,MAAA2B,EAAAE,QACAmoB,IACAhqB,IAAA6D,IAAAb,KAAAilB,gBAAAtjB,IAAA+O,IASA,IANA,IAEAvN,EAAAD,EAFAgO,EAAA/C,EAAA+C,YACA+V,EAAA/V,EAEAkU,GAAA,EACAgB,EAAA,EAEApB,EAAAhlB,KAAAglB,QAAAtoB,EAAA,EAAyCA,EAAAsoB,IAAatoB,EAAA,CAKtD,IAAAwF,EAAAlC,KAAA+kB,UAAAroB,GACAwqB,EAAArnB,EAAA8C,IAAAT,EAAA1D,EAAAqC,IAAA2jB,EAAA3jB,IAAAb,KAAA8kB,WAAApoB,KAAAiF,IAAA+O,IACAyW,EAAAtnB,EAAA8C,IAAAT,EAAAlF,GAEA,MAAAmqB,EAAA,CAIA,IAAApmB,EAAAmmB,EAAAC,EACA3oB,EAAAqC,IAAA7D,GAAA4E,IAAAb,GAAAK,IAAAsP,GAEA+T,EAAA5jB,IAAAb,KAAA8kB,WAAApoB,EAAA,EAAAsD,KAAAglB,QAAAtoB,EAAA,MACA,IAAA0qB,EAAAvnB,EAAA8C,IAAA6hB,EAAA7iB,IAAAnD,GAAAimB,EAAA9iB,IAAAnD,IAAA,EACA4oB,IAKAlkB,EAAAgO,GAEAkW,GAHAjkB,EAAA,GAGApC,MAEAqlB,EAGAe,EAAA,GAAAC,EAGAjkB,EAAApC,EACOomB,EAAA,GAAApmB,EAAAmC,IAGPA,EAAAnC,GAKAoC,GAAAD,GAAAC,EAAA8jB,IACA7B,EAAA1oB,KAKA,SAAA0pB,GACAlY,EAAAiD,SAAA,EAEAjD,EAAAhM,OAAA8kB,EAAAnnB,EAAAM,KAAAnD,EAAA+F,MAAAb,SAAAC,IAAA8C,EAAAD,IACA,GACGogB,GAAA,IAAA4B,IACH9Y,EAAAiD,SAAA8V,EAEA/Y,EAAAhM,OAAAlF,EAAA6D,IAAAb,KAAA+kB,UAAAK,IAAAjjB,IAAA8C,EAAAD,IACA,IAMAuf,EAAAjmB,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,GAGA,IAFA,IAAAgZ,EAAA7W,IAAA8W,EAAA9W,IACAsV,GAAAtV,IAAAuV,GAAAvV,IACA9T,EAAA,EAAiBA,EAAAsD,KAAAglB,UAAkBtoB,EAAA,CACnC,IAAA4D,EAAAuE,EAAAL,QAAAS,EAAAjF,KAAA8kB,WAAApoB,IACA2qB,EAAA1oB,EAAAa,IAAA6nB,EAAA/mB,EAAAvB,GACA+mB,EAAAnnB,EAAAc,IAAAqmB,EAAAxlB,EAAAvB,GACAuoB,EAAA3oB,EAAAa,IAAA8nB,EAAAhnB,EAAAP,GACAgmB,EAAApnB,EAAAc,IAAAsmB,EAAAzlB,EAAAP,GAGAwO,EAAAO,WAAAjO,IAAAwmB,EAAAC,GACA/Y,EAAAQ,WAAAlO,IAAAilB,EAAAC,GACAxX,EAAAuB,OAAA9P,KAAA2N,WAGA4W,EAAAjmB,UAAAkQ,YAAA,SAAAC,EAAAC,GAyBA9O,GAAAE,EAAAb,OAAAe,KAAAglB,SAAA,GAWA,IATA,IAAA8B,EAAAjnB,EAAAI,OACAomB,EAAA,EACAkB,EAAA,EAIA9oB,EAAAoB,EAAAI,OAGAvD,EAAA,EAAiBA,EAAAsD,KAAAglB,UAAkBtoB,EACnC+B,EAAA2C,IAAApB,KAAA8kB,WAAApoB,IAEA+B,EAAAmD,IAAA,EAAA5B,KAAAglB,SAIA,IAAAtoB,EAAA,EAAiBA,EAAAsD,KAAAglB,UAAkBtoB,EAAA,CAEnC,IAAA8pB,EAAA3mB,EAAA8B,IAAA3B,KAAA8kB,WAAApoB,GAAA+B,GACAgoB,EAAA/pB,EAAA,EAAAsD,KAAAglB,QAAAnlB,EAAA8B,IAAA3B,KAAA8kB,WAAApoB,EAAA,GAAA+B,GAAAoB,EACA8B,IAAA3B,KAAA8kB,WAAA,GAAArmB,GAEA+oB,EAAA3nB,EAAA+C,MAAA4jB,EAAAC,GAEAC,EAAA,GAAAc,EACAnB,GAAAK,EAGAI,EAAAxlB,WAAAolB,GAdA,KAcAF,EAAAE,GAdA,KAcAD,GAEA,IAAAgB,EAAAjB,EAAAznB,EACA2oB,EAAAlB,EAAAzmB,EACA4nB,EAAAlB,EAAA1nB,EACA6oB,EAAAnB,EAAA1mB,EAKAwnB,GAxBA,IAwBA,IAAAC,GAHAC,IAAAE,EAAAF,EAAAE,KACAD,IAAAE,EAAAF,EAAAE,MAMAnZ,EAAAoZ,KAAAnZ,EAAA2X,EAGAzmB,GAAAE,EAAAb,OAAAonB,EAAA1nB,EAAAE,SACAioB,EAAAllB,IAAA,EAAAykB,GACA5X,EAAAqY,OAAA5lB,WAAA,EAAA4lB,EAAA,EAAAroB,GAGAgQ,EAAA8Y,EAAA7Y,EAAA6Y,EAGA9Y,EAAA8Y,GAAA9Y,EAAAoZ,MACAhoB,EAAA8C,IAAA8L,EAAAqY,OAAArY,EAAAqY,QAAAjnB,EAAA8C,IAAAmkB,OAKAvC,EAAAjmB,UAAAwpB,SAAA,WACA,QAAAprB,EAAA,EAAiBA,EAAAsD,KAAAglB,UAAkBtoB,EAMnC,IALA,IAAAspB,EAAAtpB,EACAupB,EAAAvpB,EAAAsD,KAAAglB,QAAA,EAAAgB,EAAA,IACAxnB,EAAAwB,KAAA8kB,WAAAkB,GACA+B,EAAAloB,EAAA8B,IAAA3B,KAAA8kB,WAAAmB,GAAAznB,GAEA+X,EAAA,EAAmBA,EAAAvW,KAAAglB,UAAkBzO,EACrC,GAAAA,GAAAyP,GAAAzP,GAAA0P,EAAA,CAIA,IAAA3lB,EAAAT,EAAA8B,IAAA3B,KAAA8kB,WAAAvO,GAAA/X,GAEA,GADAqB,EAAA+C,MAAAmlB,EAAAznB,GACA,EACA,SAKA,UAGAikB,EAAAjmB,UAAAqQ,qBAAA,SAAAC,GACAA,EAAAkW,WAAA9kB,KAAA8kB,WACAlW,EAAAoW,QAAAhlB,KAAAglB,QACApW,EAAAjB,SAAA3N,KAAA2N,2BC5hBAlR,EAAAD,QAAA6U,EAEA5U,EAAAD,QAAAwrB,MAAAC,EACAxrB,EAAAD,QAAA0rB,OAAAC,EACA1rB,EAAAD,QAAA4rB,MAAAC,EACA5rB,EAAAD,QAAA8rB,MAAAC,EAEA,IAAA5iB,EAAerJ,EAAQ,GAGvBskB,GAFatkB,EAAQ,GAETA,EAAQ,KAEpBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAElBuI,GADYvI,EAAQ,IACJA,EAAQ,IACTA,EAAQ,IACRA,EAAQ,IAcvB,SAAA2rB,IACAjoB,KAAAwoB,OAAA,IAAAH,EACAroB,KAAAyoB,OAAA,IAAAJ,EACAroB,KAAA0oB,WAAA,KACA1oB,KAAA2oB,WAAA,KACA3oB,KAAA4oB,UAAA,EAWA,SAAAT,IACAnoB,KAAA6a,OAAAhb,EAAAI,OACAD,KAAA8a,OAAAjb,EAAAI,OACAD,KAAAqC,SACArC,KAAA6oB,WAWA,SAAAN,IACAvoB,KAAA8oB,OAAA,EACA9oB,KAAA0R,OAAA,GACA1R,KAAA4R,OAAA,GACA5R,KAAAomB,MAAA,EAYA,SAAA/U,EAAAnD,EAAA6a,EAAA5a,KACAyS,EAAAoI,SAEA,IAAAR,EAAAra,EAAAqa,OACAC,EAAAta,EAAAsa,OACAtQ,EAAAhK,EAAAua,WACAtQ,EAAAjK,EAAAwa,WAGAM,EAAA,IAAAC,EACAD,EAAAE,UAAAJ,EAAAP,EAAArQ,EAAAsQ,EAAArQ,GAiBA,IAdA,IAAAsM,EAAAuE,EAAAG,IACAC,EAAA1jB,EAAAa,qBAIA8iB,EAAA,GACAC,EAAA,GACAC,EAAA,EAMAC,EAAA,EACAA,EAAAJ,GAAA,CAEAG,EAAAP,EAAAjE,QACA,QAAAtoB,EAAA,EAAmBA,EAAA8sB,IAAe9sB,EAClC4sB,EAAA5sB,GAAAgoB,EAAAhoB,GAAAgV,OACA6X,EAAA7sB,GAAAgoB,EAAAhoB,GAAAkV,OAMA,GAHAqX,EAAAxgB,QAGA,GAAAwgB,EAAAjE,QACA,OAIAxmB,EAAAyqB,EAAAS,mBACA3nB,gBASA,IAAA/E,EAAAisB,EAAAU,qBAGA,GAAA3sB,EAAA+E,gBAAApD,EAAAE,QAAAF,EAAAE,QAOA,MAIA,IAAA+qB,EAAAlF,EAAAuE,EAAAjE,SAEA4E,EAAAlY,OAAA8W,EAAAqB,WAAAlmB,EAAAiB,SAAAuT,EAAAnT,EAAAnF,EAAAkD,IAAA/F,KACA4sB,EAAA7N,GAAAlX,EAAAL,QAAA2T,EAAAqQ,EAAArD,UAAAyE,EAAAlY,SAEAkY,EAAAhY,OAAA6W,EAAAoB,WAAAlmB,EAAAiB,SAAAwT,EAAApT,EAAAhI,IACA4sB,EAAA3N,GAAApX,EAAAL,QAAA4T,EAAAqQ,EAAAtD,UAAAyE,EAAAhY,SAEAgY,EAAA3oB,EAAApB,EAAA8B,IAAAioB,EAAA3N,GAAA2N,EAAA7N,MAGA0N,IACA7I,EAAAkJ,SAIA,IAAAC,GAAA,EACA,IAAArtB,EAAA,EAAmBA,EAAA8sB,IAAe9sB,EAClC,GAAAktB,EAAAlY,QAAA4X,EAAA5sB,IAAAktB,EAAAhY,QAAA2X,EAAA7sB,GAAA,CACAqtB,GAAA,EACA,MAKA,GAAAA,EACA,QAIAd,EAAAjE,QAcA,GAXApE,EAAAoJ,YAAArrB,EAAAc,IAAAmhB,EAAAoJ,YAAAP,GAGAR,EAAAgB,iBAAA/b,EAAA2M,OAAA3M,EAAA4M,QACA5M,EAAA7L,SAAAxC,EAAAwC,SAAA6L,EAAA2M,OAAA3M,EAAA4M,QACA5M,EAAA2a,WAAAY,EAGAR,EAAAiB,WAAAnB,GAGA5a,EAAAya,SAAA,CACA,IAAAhU,EAAA4T,EAAA7a,SACAkH,EAAA4T,EAAA9a,SAEA,GAAAO,EAAA7L,SAAAuS,EAAAC,GAAA3G,EAAA7L,SAAA1D,EAAAE,QAAA,CAGAqP,EAAA7L,UAAAuS,EAAAC,EACA,IAAA3S,EAAArC,EAAA8B,IAAAuM,EAAA4M,OAAA5M,EAAA2M,QACA3Y,EAAAF,YACAkM,EAAA2M,OAAAtZ,OAAAqT,EAAA1S,GACAgM,EAAA4M,OAAApZ,OAAAmT,EAAA3S,OACK,CAGL,IAAA1D,EAAAqB,EAAAoD,IAAAiL,EAAA2M,OAAA3M,EAAA4M,QACA5M,EAAA2M,OAAAha,IAAArC,GACA0P,EAAA4M,OAAAja,IAAArC,GACA0P,EAAA7L,SAAA,IAQA,SAAAgmB,IACAroB,KAAAmqB,SAAA,GACAnqB,KAAA8kB,WAAA,GACA9kB,KAAAglB,QAAA,EACAhlB,KAAA2N,SAAA,EAmDA,SAAAyc,IACApqB,KAAA0R,OACA1R,KAAA4R,OACA5R,KAAA+b,GAAAlc,EAAAI,OACAD,KAAAic,GAAApc,EAAAI,OACAD,KAAAiB,EAAApB,EAAAI,OACAD,KAAAe,EAYA,SAAAmoB,IACAlpB,KAAAqqB,KAAA,IAAAD,EACApqB,KAAAsqB,KAAA,IAAAF,EACApqB,KAAAuqB,KAAA,IAAAH,EACApqB,KAAAopB,IAAA,CAAAppB,KAAAqqB,KAAArqB,KAAAsqB,KAAAtqB,KAAAuqB,MACAvqB,KAAAglB,QA9QApE,EAAAoI,SAAA,EACApI,EAAAkJ,SAAA,EACAlJ,EAAAoJ,YAAA,EAwMA3B,EAAA/pB,UAAAksB,eAAA,WACA,OAAAxqB,KAAAglB,SAMAqD,EAAA/pB,UAAA6mB,UAAA,SAAAC,GAEA,OAAAplB,KAAA8kB,WAAAM,IAMAiD,EAAA/pB,UAAAurB,WAAA,SAAA7sB,GAGA,IAFA,IAAAytB,EAAA,EACAC,EAAA7qB,EAAA8C,IAAA3C,KAAA8kB,WAAA,GAAA9nB,GACAN,EAAA,EAAiBA,EAAAsD,KAAAglB,UAAkBtoB,EAAA,CACnC,IAAAiB,EAAAkC,EAAA8C,IAAA3C,KAAA8kB,WAAApoB,GAAAM,GACAW,EAAA+sB,IACAD,EAAA/tB,EACAguB,EAAA/sB,GAGA,OAAA8sB,GAMApC,EAAA/pB,UAAAqsB,iBAAA,SAAA3tB,GACA,OAAAgD,KAAA8kB,WAAA9kB,KAAA6pB,WAAA7sB,KAOAqrB,EAAA/pB,UAAAuC,IAAA,SAAA+M,EAAAwX,GAGAxX,EAAAe,qBAAA3O,KAAAolB,IAYAgF,EAAA9rB,UAAAuC,IAAA,SAAAP,GACAN,KAAA0R,OAAApR,EAAAoR,OACA1R,KAAA4R,OAAAtR,EAAAsR,OACA5R,KAAA+b,GAAAlc,EAAAQ,MAAAC,EAAAyb,IACA/b,KAAAic,GAAApc,EAAAQ,MAAAC,EAAA2b,IACAjc,KAAAiB,EAAApB,EAAAQ,MAAAC,EAAAW,GACAjB,KAAAe,EAAAT,EAAAS,GAWAmoB,EAAA5qB,UAAAssB,MAAA,WACA,UAAA5qB,KAAAglB,QACA,KAAAhlB,KAAAglB,QACAhlB,KAAAqqB,KAAAtpB,EAAAf,KAAAqqB,KAAAtO,GAAAhd,EAAAiB,KAAAqqB,KAAAtO,GAAAhc,EAAAC,KAAAqqB,KAAApO,GAAAld,EAAAiB,KAAAqqB,KAAApO,GAAAlc,EACAC,KAAAsqB,KAAAvpB,EAAAf,KAAAsqB,KAAAvO,GAAAhd,EAAAiB,KAAAsqB,KAAAvO,GAAAhc,EAAAC,KAAAsqB,KAAArO,GAAAld,EAAAiB,KAAAsqB,KAAArO,GAAAlc,EACAC,KAAAuqB,KAAAxpB,EAAAf,KAAAuqB,KAAAxO,GAAAhd,EAAAiB,KAAAuqB,KAAAxO,GAAAhc,EAAAC,KAAAuqB,KAAAtO,GAAAld,EAAAiB,KAAAuqB,KAAAtO,GAAAlc,GACAQ,WAEG,GAAAP,KAAAglB,QACH,KAAAhlB,KAAAglB,QACAhlB,KAAAqqB,KAAAtpB,EAAAf,KAAAqqB,KAAAtO,GAAAhd,EAAAiB,KAAAqqB,KAAAtO,GAAAhc,EAAAC,KAAAqqB,KAAApO,GAAAld,EAAAiB,KAAAqqB,KAAApO,GAAAlc,EACAC,KAAAsqB,KAAAvpB,EAAAf,KAAAsqB,KAAAvO,GAAAhd,EAAAiB,KAAAsqB,KAAAvO,GAAAhc,EAAAC,KAAAsqB,KAAArO,GAAAld,EAAAiB,KAAAsqB,KAAArO,GAAAlc,GACAQ,WAEG,GAAAP,KAAAglB,QACH,KAAAhlB,KAAAglB,QACAhlB,KAAAqqB,KAAAtpB,EAAAf,KAAAqqB,KAAAtO,GAAAhd,EAAAiB,KAAAqqB,KAAAtO,GAAAhc,EAAAC,KAAAqqB,KAAApO,GAAAld,EAAAiB,KAAAqqB,KAAApO,GAAAlc,GACAQ,WAGA,IAAAP,KAAAglB,SAKAkE,EAAA5qB,UAAA6qB,UAAA,SAAAJ,EAAAP,EAAAE,EAAAD,EAAAE,GAIA3oB,KAAAglB,QAAA+D,EAAA3C,MACA,QAAA1pB,EAAA,EAAiBA,EAAAsD,KAAAglB,UAAkBtoB,EAAA,EACnC4D,EAAAN,KAAAopB,IAAA1sB,IACAgV,OAAAqX,EAAArX,OAAAhV,GACA4D,EAAAsR,OAAAmX,EAAAnX,OAAAlV,GACA,IAAAmuB,EAAArC,EAAArD,UAAA7kB,EAAAoR,QACAoZ,EAAArC,EAAAtD,UAAA7kB,EAAAsR,QACAtR,EAAAyb,GAAAlX,EAAAL,QAAAkkB,EAAAmC,GACAvqB,EAAA2b,GAAApX,EAAAL,QAAAmkB,EAAAmC,GACAxqB,EAAAW,EAAApB,EAAA8B,IAAArB,EAAA2b,GAAA3b,EAAAyb,IACAzb,EAAAS,EAAA,EAKA,GAAAf,KAAAglB,QAAA,GACA,IAAA+F,EAAAhC,EAAAD,OACAkC,EAAAhrB,KAAAirB,aACAD,EAAA,GAAAD,GAAA,EAAAA,EAAAC,GACAA,EAAArsB,EAAAE,WAEAmB,KAAAglB,QAAA,GAKA,MAAAhlB,KAAAglB,QAAA,CACA,IAAA1kB,KAAAN,KAAAopB,IAAA,IACA1X,OAAA,EACApR,EAAAsR,OAAA,EACAiZ,EAAArC,EAAArD,UAAA,GACA2F,EAAArC,EAAAtD,UAAA,GACA7kB,EAAAyb,GAAAlX,EAAAL,QAAAkkB,EAAAmC,GACAvqB,EAAA2b,GAAApX,EAAAL,QAAAmkB,EAAAmC,GACAxqB,EAAAW,EAAApB,EAAA8B,IAAArB,EAAA2b,GAAA3b,EAAAyb,IACAzb,EAAAS,EAAA,EACAf,KAAAglB,QAAA,IAKAkE,EAAA5qB,UAAA4rB,WAAA,SAAAnB,GACAA,EAAAD,OAAA9oB,KAAAirB,YACAlC,EAAA3C,MAAApmB,KAAAglB,QACA,QAAAtoB,EAAA,EAAiBA,EAAAsD,KAAAglB,UAAkBtoB,EACnCqsB,EAAArX,OAAAhV,GAAAsD,KAAAopB,IAAA1sB,GAAAgV,OACAqX,EAAAnX,OAAAlV,GAAAsD,KAAAopB,IAAA1sB,GAAAkV,QAIAsX,EAAA5qB,UAAAqrB,mBAAA,WACA,OAAA3pB,KAAAglB,SACA,OACA,OAAAnlB,EAAAkD,IAAA/C,KAAAqqB,KAAAppB,GAEA,OACA,IAAAiqB,EAAArrB,EAAA8B,IAAA3B,KAAAsqB,KAAArpB,EAAAjB,KAAAqqB,KAAAppB,GAEA,OADApB,EAAA+C,MAAAsoB,EAAArrB,EAAAkD,IAAA/C,KAAAqqB,KAAAppB,IACA,EAEApB,EAAA+C,MAAA,EAAAsoB,GAGArrB,EAAA+C,MAAAsoB,EAAA,GAIA,QAEA,OAAArrB,EAAAI,SAIAipB,EAAA5qB,UAAAorB,gBAAA,WACA,OAAA1pB,KAAAglB,SACA,OAEA,OAAAnlB,EAAAI,OAEA,OACA,OAAAJ,EAAAQ,MAAAL,KAAAqqB,KAAAppB,GAEA,OACA,OAAApB,EAAAiD,QAAA9C,KAAAqqB,KAAAtpB,EAAAf,KAAAqqB,KAAAppB,EAAAjB,KAAAsqB,KAAAvpB,EAAAf,KAAAsqB,KAAArpB,GAEA,OAGA,QAEA,OAAApB,EAAAI,SAIAipB,EAAA5qB,UAAA2rB,iBAAA,SAAAkB,EAAAC,GACA,OAAAprB,KAAAglB,SACA,OAEA,MAEA,OACAmG,EAAAtqB,IAAAb,KAAAqqB,KAAAtO,IACAqP,EAAAvqB,IAAAb,KAAAqqB,KAAApO,IACA,MAEA,OACAkP,EAAAjqB,WAAAlB,KAAAqqB,KAAAtpB,EAAAf,KAAAqqB,KAAAtO,GAAA/b,KAAAsqB,KAAAvpB,EAAAf,KAAAsqB,KAAAvO,IACAqP,EAAAlqB,WAAAlB,KAAAqqB,KAAAtpB,EAAAf,KAAAqqB,KAAApO,GAAAjc,KAAAsqB,KAAAvpB,EAAAf,KAAAsqB,KAAArO,IACA,MAEA,OACAkP,EAAAjqB,WAAAlB,KAAAqqB,KAAAtpB,EAAAf,KAAAqqB,KAAAtO,GAAA/b,KAAAsqB,KAAAvpB,EAAAf,KAAAsqB,KAAAvO,IACAoP,EAAA5pB,OAAAvB,KAAAuqB,KAAAxpB,EAAAf,KAAAuqB,KAAAxO,IACAqP,EAAAvqB,IAAAsqB,KASAjC,EAAA5qB,UAAA2sB,UAAA,WACA,OAAAjrB,KAAAglB,SACA,OAIA,OACA,SAEA,OACA,OAAAnlB,EAAAwC,SAAArC,KAAAqqB,KAAAppB,EAAAjB,KAAAsqB,KAAArpB,GAEA,OACA,OAAApB,EAAA+C,MAAA/C,EAAA8B,IAAA3B,KAAAsqB,KAAArpB,EAAAjB,KAAAqqB,KAAAppB,GAAApB,EAAA8B,IAAA3B,KAAAuqB,KAAAtpB,EACAjB,KAAAqqB,KAAAppB,IAEA,QAEA,WAIAioB,EAAA5qB,UAAAmK,MAAA,WACA,OAAAzI,KAAAglB,SACA,OACA,MAEA,OACAhlB,KAAAqrB,SACA,MAEA,OACArrB,KAAAsrB,WA+BApC,EAAA5qB,UAAA+sB,OAAA,WACA,IAAAE,EAAAvrB,KAAAqqB,KAAAppB,EACAuqB,EAAAxrB,KAAAsqB,KAAArpB,EACAiqB,EAAArrB,EAAA8B,IAAA6pB,EAAAD,GAGAE,GAAA5rB,EAAA8C,IAAA4oB,EAAAL,GACA,GAAAO,GAAA,EAIA,OAFAzrB,KAAAqqB,KAAAtpB,EAAA,OACAf,KAAAglB,QAAA,GAKA,IAAA0G,EAAA7rB,EAAA8C,IAAA6oB,EAAAN,GACA,GAAAQ,GAAA,EAKA,OAHA1rB,KAAAsqB,KAAAvpB,EAAA,EACAf,KAAAglB,QAAA,OACAhlB,KAAAqqB,KAAAxpB,IAAAb,KAAAsqB,MAKA,IAAAqB,EAAA,GAAAD,EAAAD,GACAzrB,KAAAqqB,KAAAtpB,EAAA2qB,EAAAC,EACA3rB,KAAAsqB,KAAAvpB,EAAA0qB,EAAAE,EACA3rB,KAAAglB,QAAA,GAQAkE,EAAA5qB,UAAAgtB,OAAA,WACA,IAAAC,EAAAvrB,KAAAqqB,KAAAppB,EACAuqB,EAAAxrB,KAAAsqB,KAAArpB,EACA2qB,EAAA5rB,KAAAuqB,KAAAtpB,EAMAiqB,EAAArrB,EAAA8B,IAAA6pB,EAAAD,GACAM,EAAAhsB,EAAA8C,IAAA4oB,EAAAL,GAEAQ,EADA7rB,EAAA8C,IAAA6oB,EAAAN,GAEAO,GAAAI,EAMAC,EAAAjsB,EAAA8B,IAAAiqB,EAAAL,GACAQ,EAAAlsB,EAAA8C,IAAA4oB,EAAAO,GAEAE,EADAnsB,EAAA8C,IAAAipB,EAAAE,GAEAG,GAAAF,EAMAG,EAAArsB,EAAA8B,IAAAiqB,EAAAJ,GACAW,EAAAtsB,EAAA8C,IAAA6oB,EAAAU,GAEAE,EADAvsB,EAAA8C,IAAAipB,EAAAM,GAEAG,GAAAF,EAGAG,EAAAzsB,EAAA+C,MAAAsoB,EAAAY,GAEAS,EAAAD,EAAAzsB,EAAA+C,MAAA4oB,EAAAI,GACAY,EAAAF,EAAAzsB,EAAA+C,MAAAgpB,EAAAL,GACAkB,EAAAH,EAAAzsB,EAAA+C,MAAA2oB,EAAAC,GAGA,GAAAC,GAAA,GAAAQ,GAAA,EAGA,OAFAjsB,KAAAqqB,KAAAtpB,EAAA,OACAf,KAAAglB,QAAA,GAKA,GAAA0G,EAAA,GAAAD,EAAA,GAAAgB,GAAA,GACA,IAAAd,EAAA,GAAAD,EAAAD,GAIA,OAHAzrB,KAAAqqB,KAAAtpB,EAAA2qB,EAAAC,EACA3rB,KAAAsqB,KAAAvpB,EAAA0qB,EAAAE,OACA3rB,KAAAglB,QAAA,GAKA,GAAAgH,EAAA,GAAAC,EAAA,GAAAO,GAAA,GACA,IAAAE,EAAA,GAAAV,EAAAC,GAKA,OAJAjsB,KAAAqqB,KAAAtpB,EAAAirB,EAAAU,EACA1sB,KAAAuqB,KAAAxpB,EAAAkrB,EAAAS,EACA1sB,KAAAglB,QAAA,OACAhlB,KAAAsqB,KAAAzpB,IAAAb,KAAAuqB,MAKA,GAAAmB,GAAA,GAAAW,GAAA,EAIA,OAHArsB,KAAAsqB,KAAAvpB,EAAA,EACAf,KAAAglB,QAAA,OACAhlB,KAAAqqB,KAAAxpB,IAAAb,KAAAsqB,MAKA,GAAA0B,GAAA,GAAAI,GAAA,EAIA,OAHApsB,KAAAuqB,KAAAxpB,EAAA,EACAf,KAAAglB,QAAA,OACAhlB,KAAAqqB,KAAAxpB,IAAAb,KAAAuqB,MAKA,GAAA6B,EAAA,GAAAC,EAAA,GAAAE,GAAA,GACA,IAAAI,EAAA,GAAAP,EAAAC,GAKA,OAJArsB,KAAAsqB,KAAAvpB,EAAAqrB,EAAAO,EACA3sB,KAAAuqB,KAAAxpB,EAAAsrB,EAAAM,EACA3sB,KAAAglB,QAAA,OACAhlB,KAAAqqB,KAAAxpB,IAAAb,KAAAuqB,MAKA,IAAAqC,EAAA,GAAAL,EAAAC,EAAAC,GACAzsB,KAAAqqB,KAAAtpB,EAAAwrB,EAAAK,EACA5sB,KAAAsqB,KAAAvpB,EAAAyrB,EAAAI,EACA5sB,KAAAuqB,KAAAxpB,EAAA0rB,EAAAG,EACA5sB,KAAAglB,QAAA,GAMA3T,EAAAtB,YAAA,SAAA2F,EAAAhE,EAAAkE,EAAAhE,EAAAuG,EAAAC,GACA,IAAAjK,EAAA,IAAA8Z,EACA9Z,EAAAqa,OAAA3nB,IAAA6U,EAAAhE,GACAvD,EAAAsa,OAAA5nB,IAAA+U,EAAAhE,GACAzD,EAAAua,WAAAvQ,EACAhK,EAAAwa,WAAAvQ,EACAjK,EAAAya,UAAA,EAEA,IAAAG,EAAA,IAAAR,EAEAra,EAAA,IAAAia,EAGA,OAFA9W,EAAAnD,EAAA6a,EAAA5a,GAEAD,EAAA7L,SAAA,GAAA1D,EAAAE,0BC5pBApC,EAAAD,QAAAqwB,EAEavwB,EAAQ,GAArB,IACA0B,EAAa1B,EAAQ,GAErBqC,GADcrC,EAAQ,GACXA,EAAQ,IAEnBqH,GADgBrH,EAAQ,GACdA,EAAQ,IAClBuD,EAAWvD,EAAQ,GAGnBoR,GAFWpR,EAAQ,IACJA,EAAQ,GACXA,EAAQ,KAOpB,SAAAuwB,EAAA9rB,EAAAC,GACA,KAAAhB,gBAAA6sB,GACA,WAAAA,EAAA9rB,EAAAC,GAGA6rB,EAAAlI,OAAA9nB,KAAAmD,MAEAA,KAAAqL,OAAAwhB,EAAAjI,KACA5kB,KAAA8sB,IAAAjtB,EAAAI,OACAD,KAAA2N,SAAA,EAEA,iBAAA5M,GAAAlB,EAAAa,QAAAK,IACAf,KAAA8sB,IAAAjsB,IAAAE,GAEA,iBAAAC,IACAhB,KAAA2N,SAAA3M,IAGG,iBAAAD,IACHf,KAAA2N,SAAA5M,GAxBA8rB,EAAAlI,OAAAjX,EACAmf,EAAAvuB,UAAAN,EAAA6uB,EAAAlI,OAAArmB,WAEAuuB,EAAAjI,KAAA,SAyBAiI,EAAAvuB,UAAAuP,UAAA,WACA,OAAA7N,KAAA2N,UAGAkf,EAAAvuB,UAAA0Q,UAAA,WACA,OAAAhP,KAAA8sB,KAGAD,EAAAvuB,UAAA6mB,UAAA,SAAAC,GAEA,OAAAplB,KAAA8sB,KAGAD,EAAAvuB,UAAAksB,eAAA,SAAApF,GACA,UAMAyH,EAAAvuB,UAAAwP,OAAA,WACA,IAAAzN,EAAA,IAAAwsB,EAIA,OAHAxsB,EAAAgL,OAAArL,KAAAqL,OACAhL,EAAAsN,SAAA3N,KAAA2N,SACAtN,EAAAysB,IAAA9sB,KAAA8sB,IAAAzsB,QACAA,GAGAwsB,EAAAvuB,UAAAyP,cAAA,WACA,UAGA8e,EAAAvuB,UAAA0P,UAAA,SAAA/I,EAAAzG,GACA,IAAAsoB,EAAAjnB,EAAAuB,IAAA6D,EAAAzG,EAAAmF,EAAAa,QAAAS,EAAAD,EAAAhF,KAAA8sB,MACA9vB,EAAA6C,EAAA8B,IAAAnD,EAAAsoB,GACA,OAAAjnB,EAAA8C,IAAA3F,MAAAgD,KAAA2N,SAAA3N,KAAA2N,UAOAkf,EAAAvuB,UAAA2P,QAAA,SAAAC,EAAAC,EAAAlJ,EAAAoJ,GAEA,IAAAvJ,EAAAjF,EAAAuB,IAAA6D,EAAAzG,EAAAmF,EAAAa,QAAAS,EAAAD,EAAAhF,KAAA8sB,MACAruB,EAAAoB,EAAA8B,IAAAwM,EAAAuC,GAAA5L,GACA9D,EAAAnB,EAAA8C,IAAAlE,KAAAuB,KAAA2N,SAAA3N,KAAA2N,SACAnQ,EAAAqC,EAAA8B,IAAAwM,EAAAwC,GAAAxC,EAAAuC,IAEA,GAAA1P,EAAA,EAGA,OAFAkN,EAAAiD,SAAA,EACAjD,EAAAhM,OAAA1E,EAAAuF,MAAAb,UACA,EAIA,IAAAnF,EAAA8C,EAAA8C,IAAAlE,EAAAjB,GACAuvB,EAAAltB,EAAA8C,IAAAnF,KACAwvB,EAAAjwB,IAAAgwB,EAAA/rB,EAGA,GAAAgsB,EAAA,GAAAD,EAAApuB,EAAAE,QACA,SAIA,IAAAkC,IAAAhE,EAAA4B,EAAAQ,KAAA6tB,IAGA,UAAAjsB,MAAAoN,EAAA+C,YAAA6b,IACAhsB,GAAAgsB,EACA7e,EAAAiD,SAAApQ,EACAmN,EAAAhM,OAAArC,EAAAuB,IAAA3C,EAAAoB,EAAA+B,IAAAb,EAAAvD,IAAA0E,UACA,IAMA2qB,EAAAvuB,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,GACA,IAAA7P,EAAAqB,EAAAuB,IAAA6D,EAAAzG,EAAAmF,EAAAa,QAAAS,EAAAD,EAAAhF,KAAA8sB,MACAve,EAAAO,WAAAjO,IAAArC,EAAAO,EAAAiB,KAAA2N,SAAAnP,EAAAuB,EAAAC,KAAA2N,UACAY,EAAAQ,WAAAlO,IAAArC,EAAAO,EAAAiB,KAAA2N,SAAAnP,EAAAuB,EAAAC,KAAA2N,WAGAkf,EAAAvuB,UAAAkQ,YAAA,SAAAC,EAAAC,GACAD,EAAAoZ,KAAAnZ,EAAA/P,EAAAwH,GAAAnG,KAAA2N,SAAA3N,KAAA2N,SACAc,EAAAqY,OAAA9mB,KAAA8sB,IAEAre,EAAA8Y,EAAA9Y,EAAAoZ,MACA,GAAA7nB,KAAA2N,SAAA3N,KAAA2N,SAAA9N,EAAA8C,IAAA3C,KAAA8sB,IAAA9sB,KAAA8sB,OAGAD,EAAAvuB,UAAAqQ,qBAAA,SAAAC,GACAA,EAAAkW,WAAAvD,KAAAvhB,KAAA8sB,KACAle,EAAAoW,QAAA,EACApW,EAAAjB,SAAA3N,KAAA2N,2BCzIAlR,EAAAD,QAAAywB,EAEA,IAAAjvB,EAAa1B,EAAQ,GAErBqJ,GADcrJ,EAAQ,GACPA,EAAQ,IACvBoR,EAAYpR,EAAQ,IACpBqC,EAAWrC,EAAQ,GACnBuI,EAAgBvI,EAAQ,GACxBqH,EAAUrH,EAAQ,GAClBuD,EAAWvD,EAAQ,GAGnBkC,GAFWlC,EAAQ,IAEnB,IAAAuD,GAAA6Q,EAAA,IAAA7Q,EAAA8Q,EAAA,IAAA9Q,EAAA2kB,EAAA,IAAA3kB,EAAA4kB,EAAA,IAAA5kB,EAAA7C,EAAA,IAAA6C,EAcA,SAAAotB,EAAAzI,EAAAC,EAAAyI,GACA,KAAAltB,gBAAAitB,GACA,WAAAA,EAAAzI,EAAAC,GAGAwI,EAAAtI,OAAA9nB,KAAAmD,MAEAA,KAAAqL,OAAA4hB,EAAArI,KACA5kB,KAAA2N,SAAAhI,EAAAS,cAGApG,KAAAmtB,UAAA3I,EAAA3kB,EAAAQ,MAAAmkB,GAAA3kB,EAAAI,OACAD,KAAAotB,UAAA3I,EAAA5kB,EAAAQ,MAAAokB,GAAA5kB,EAAAI,OAEAitB,EAAA,GACAltB,KAAAqtB,aAAAH,EACAltB,KAAA2N,UAAAuf,EACAltB,KAAAstB,cAAA,GAGAttB,KAAAqtB,aAAA,EAKArtB,KAAAutB,UAAA1tB,EAAAI,OACAD,KAAAwtB,UAAA3tB,EAAAI,OACAD,KAAAytB,cAAA,EACAztB,KAAA0tB,cAAA,EAxCAT,EAAAtI,OAAAjX,EACAuf,EAAA3uB,UAAAN,EAAAivB,EAAAtI,OAAArmB,WAEA2uB,EAAArI,KAAA,OAwCAqI,EAAA3uB,UAAAqvB,QAAA,SAAAC,GAQA,OAPAA,GACA5tB,KAAAwtB,UAAA3sB,IAAA+sB,GACA5tB,KAAA0tB,cAAA,IAEA1tB,KAAAwtB,UAAA5sB,UACAZ,KAAA0tB,cAAA,GAEA1tB,MAGAitB,EAAA3uB,UAAAuvB,QAAA,SAAAC,GAQA,OAPAA,GACA9tB,KAAAutB,UAAA1sB,IAAAitB,GACA9tB,KAAAytB,cAAA,IAEAztB,KAAAutB,UAAA3sB,UACAZ,KAAAytB,cAAA,GAEAztB,MAMAitB,EAAA3uB,UAAA4mB,KAAA,SAAAV,EAAAC,GAMA,OALAzkB,KAAAmtB,UAAAtsB,IAAA2jB,GACAxkB,KAAAotB,UAAAvsB,IAAA4jB,GACAzkB,KAAAytB,cAAA,EACAztB,KAAA0tB,cAAA,EACA1tB,KAAAstB,cAAA,EACAttB,MAMAitB,EAAA3uB,UAAAwP,OAAA,WACA,IAAAzN,EAAA,IAAA4sB,EAUA,OATA5sB,EAAAgL,OAAArL,KAAAqL,OACAhL,EAAAsN,SAAA3N,KAAA2N,SACAtN,EAAA8sB,UAAAtsB,IAAAb,KAAAmtB,WACA9sB,EAAA+sB,UAAAvsB,IAAAb,KAAAotB,WACA/sB,EAAAktB,UAAA1sB,IAAAb,KAAAutB,WACAltB,EAAAmtB,UAAA3sB,IAAAb,KAAAwtB,WACAntB,EAAAotB,aAAAztB,KAAAytB,aACAptB,EAAAqtB,aAAA1tB,KAAA0tB,aACArtB,EAAAgtB,aAAArtB,KAAAqtB,aACAhtB,GAGA4sB,EAAA3uB,UAAAyP,cAAA,WACA,UAUAkf,EAAA3uB,UAAA0P,UAAA,SAAA/I,EAAAzG,GACA,GAAAwB,KAAAqtB,cAAA,EACA,SAGA7uB,EAAAkS,EAAA7P,IAAArC,GAAAmD,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GAGAhF,KAAAstB,eACAttB,KAAA+tB,WAAA/tB,KAAAguB,eACAhuB,KAAAiuB,YAAAjuB,KAAAkuB,aAAAluB,KAAAiuB,aAAA,IAAApuB,GAAAgB,IAAAb,KAAAotB,aAEA5uB,EAAAwB,KAAAkuB,YAAA1vB,GACA,IAAAimB,EAAAzkB,KAAAiuB,YAEAf,EAAAltB,KAAAqtB,aACA,GAAA7uB,EAAAuB,EAAA0kB,EAAA1kB,EAAA,CACA,IAAAuC,EAAA9D,EAAAO,EAAA0lB,EAAA1lB,EAAAwD,EAAA/D,EAAAuB,EAAA0kB,EAAA1kB,EACA,OAAAuC,IAAAC,IAAA2qB,IAEA,OAAA1uB,EAAAuB,EAAA,EACAvB,EAAAO,EAAAP,EAAAO,EAAAP,EAAAuB,EAAAvB,EAAAuB,EAAAmtB,KAEAA,EAAA1uB,EAAAO,GAAAP,EAAAO,EAAAmuB,GAQAD,EAAA3uB,UAAA0vB,aAAA,WACA,IAAA7rB,EAAAnC,KAAA+tB,WAAA/tB,KAAA+tB,YAAA,IAAApqB,EACA3D,KAAAstB,cAAA,EAEA,IAAA9I,EAAAxkB,KAAAmtB,UAAA1I,EAAAzkB,KAAAotB,UACAvrB,EAAA7E,EAAA6D,IAAA4jB,GAAA9iB,IAAA6iB,GAAA3iB,SAEA,OAAAA,GAAAlD,EAAAE,QACAsD,GAQAA,EAAApF,EAAAC,EAAA+C,EAAA8B,EACAM,EAAA1D,EAAAzB,EAAA+B,EAAA8C,EAEAM,IASA8qB,EAAA3uB,UAAA4vB,YAAA,SAAA1vB,GACA,OAAAA,EAAAmD,IAAA3B,KAAAmtB,WAAAhrB,IAAAnC,KAAA+tB,aAOAd,EAAA3uB,UAAA2P,QAAA,SAAAC,EAAAC,EAAAlJ,EAAAoJ,GAGA,GAAArO,KAAAqtB,aAAA,EACA,OAAArtB,KAAAmuB,kBAAAjgB,EAAAC,EAAAlJ,GAGAuf,IAAA3jB,IAAAb,KAAAmtB,WAGA,IAAA3vB,EADAinB,GADAA,IAAA5jB,IAAAb,KAAAotB,YACAzrB,IAAA6iB,GAGAtiB,EADA1D,IAAAqC,IAAArD,EAAAuC,GAAAvC,EAAAuB,GAEA8C,EAAAK,EAAAF,YAEA,GAAAH,GAAAlD,EAAAE,QACA,SAIA6R,IAAA7P,IAAAsN,EAAAuC,IAAA/O,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GACA2L,IAAA9P,IAAAsN,EAAAwC,IAAAhP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,GACAhI,IAAA6D,IAAA8P,GAAAhP,IAAA+O,GAKA,IAAAyW,EAAAtnB,EAAA8C,IAAAT,EAAAlF,GAEA,GAAAmqB,GAAAxoB,EAAAE,QACA,SAGA8R,IAAA9P,IAAA2jB,GAAA7iB,IAAA+O,GACA,IAAAwW,EAAArnB,EAAA8C,IAAAT,EAAAyO,GAEA/S,EAAAspB,EAAAC,EACA,GAAAvpB,EAAA,GAAAuQ,EAAA+C,YAAAtT,EACA,SAKA,IAAAmvB,EAAAlrB,IAGA7E,IAAA4E,IAAAhE,GAEA,IAAAoH,EADA0L,IAAAtP,IAAApE,GAGAgI,IAAArD,IAAA6iB,GACA,IAAA/lB,EAAAoB,EAAA8C,IAAAqC,EAAAxH,GAAAuvB,EACA,QAAAtuB,EAAA,KAAAA,KAIAyP,EAAAiD,SAAAvT,EAEAsQ,EAAAhM,OADAglB,EAAA,EACAhlB,EAAAC,IAAA8C,EAAAD,GAAAjC,MAEAb,EAAAC,IAAA8C,EAAAD,IAEA,IAUAioB,EAAA3uB,UAAA6vB,kBAAA,SAAAjgB,EAAAC,EAAAlJ,GACAjF,KAAAstB,eACAttB,KAAA+tB,WAAA/tB,KAAAguB,eACAhuB,KAAAiuB,YAAAjuB,KAAAkuB,aAAAluB,KAAAiuB,aAAA,IAAApuB,GAAAgB,IAAAb,KAAAotB,aAGA,IAAAF,EAAAltB,KAAAqtB,aAGA3c,EAAA1Q,KAAAkuB,YAAAxd,EAAA7P,IAAAsN,EAAAuC,IAAA/O,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,IACA2L,EAAA3Q,KAAAkuB,YAAAvd,EAAA9P,IAAAsN,EAAAwC,IAAAhP,IAAAsD,EAAAzG,GAAA4D,KAAA6C,EAAAD,IAEA,IAAA1C,GADAtF,IAAA6D,IAAA8P,GAAAhP,IAAA+O,IACA3R,EAEA,IAAAJ,EAAAE,SAAAyD,MAAA3D,EAAAE,QAAA,CACA,IAAA2G,EAAAkL,EAAA3R,EACA,GAAAyG,IAAA0nB,MAAA1nB,EACA,SAEA,IAAA4oB,EAAApuB,KAAAiuB,YAAAluB,EACAsuB,EAAA1vB,EAAAQ,KAAA+tB,IAAA1nB,KACAC,EAAA2oB,EAAAC,EAEA,GAAA3d,EAAA3Q,GAAA0F,EAAA,CACA,GAAAkL,EAAA5Q,GAAA0F,EACA,SAEAyI,EAAAiD,UAAAT,EAAA3Q,EAAA0F,GAAAzI,EAAA6E,SACAqM,EAAAhM,OAAA1D,EAAAqC,IAAA2E,EAAA6oB,GACAngB,EAAAhM,OAAAN,IAAA,EAAAsrB,QACK,GAAAxc,EAAA3Q,IAAAsuB,EAAA,CACL,GAAA1d,EAAA5Q,IAAAsuB,EACA,SAEAngB,EAAAiD,WAAAT,EAAA3Q,EAAAsuB,GAAArxB,EAAA6E,SACAqM,EAAAhM,OAAA1D,EAAAqC,IAAA2E,GAAA6oB,GACAngB,EAAAhM,OAAAN,IAAA,EAAAsrB,QAEAhf,EAAAiD,SAAA,EACAjD,EAAAhM,OAAAlF,EAAA+F,MAAAb,aAEG,CACH,IAAAosB,EAAA5d,EAAA3R,EACAgS,IAAAmc,EAAAoB,GAAAhsB,EACA0O,GAAAkc,EAAAoB,GAAAhsB,EAEA,GAAAyO,GAAA,GAAAC,GAAA,GAAAD,GAAA,GAAAC,GAAA,EACA,SAGA,GAAAD,EAAAC,EAAA,CACA,IAAApT,EAAAmT,EACAA,EAAAC,EACAA,EAAApT,EAGA,IAAA2E,EAAAvF,EAAA+C,EACAwuB,EAAA7d,EAAA3Q,EACAyuB,EAAAD,EAAAxd,EAAAxO,EACA,GAAAisB,EAAAJ,EAAA,CAMA,IAFAK,GADAC,EAAAJ,EAAAhsB,EAAAC,GAAAgsB,EAAAH,IACAM,GAHA3tB,EAAAuB,IAAAC,MACAxF,EAAAuxB,KAAAC,EAAAH,IAAAG,EAAAH,GAAAlB,OAIAvuB,EAAAE,QACA,SAMA,IAFA8vB,IAAAD,GADAE,EAAAjwB,EAAAQ,KAAAsvB,KACA1tB,IAEA,GACA,KAAA4tB,EAAA,GAKA,SAJAzgB,EAAAiD,SAAAwd,EACAzgB,EAAAhM,OAAA1D,EAAAqC,IAAAytB,EAAAK,EAAArsB,EAAAisB,EAAAI,EAAApsB,EAAA6rB,GACAlgB,EAAAhM,OAAAN,IAAA,EAAAsrB,OAIO,CAIP,GAFAqB,GADAM,IAAAH,EAAAE,GAAA7tB,GACAwB,GAEA6rB,GACA,GAAAS,GAAA,EACA,cAKA,IADAC,EAAAP,EAAAvd,EAAAzO,GACA,GAMA,IAFAksB,GADAC,GAAAnsB,EAAA6rB,GACAM,EAAA3tB,GAFAhE,GAAAqxB,GAAA,EAAAG,EAAAH,MAIA,EACA,SAMA,IAFAS,IAAAH,GADAE,EAAAjwB,EAAAQ,KAAAsvB,KACA1tB,IAEA,EACA,SAKAmN,EAAAiD,SAAA,EACAjD,EAAAhM,OAAAlF,EAAA+F,MAAAb,eAEK,GAAAssB,EAAA,GACL,IAUAG,EALA,IAFAF,GADAC,EAAAJ,EAAAhsB,EAAAisB,EAAAhsB,GACAmsB,GAHA3tB,EAAAuB,IAAAC,MACAxF,EAAAuxB,IAAAC,IAAArB,OAIAvuB,EAAAE,QACA,SAMA,IAFA8vB,IAAAD,GADAE,EAAAjwB,EAAAQ,KAAAsvB,KACA1tB,IAEA,GACA,KAAA4tB,EAAA,GAKA,SAJAzgB,EAAAiD,SAAAwd,EACAzgB,EAAAhM,OAAA1D,EAAAqC,IAAAytB,EAAAK,EAAArsB,EAAAisB,EAAAI,EAAApsB,GACA2L,EAAAhM,OAAAN,IAAA,EAAAsrB,OAIO,CAIP,GAFAqB,GADAM,IAAAH,EAAAE,GAAA7tB,GACAwB,GAEA,GACA,GAAAssB,GAAA,EACA,cAKA,IADAC,EAAAP,EAAAvd,EAAAzO,GACA6rB,EAAA,CAMA,IAFAK,GADAC,GAAAnsB,EAAA6rB,GACAM,EAAA3tB,GAFAhE,GAAAqxB,GAAA,EAAAG,EAAAH,MAIA,EACA,YAMA,IAFAS,IAAAH,GADAE,EAAAjwB,EAAAQ,KAAAsvB,KACA1tB,IAEA,EACA,SAKAmN,EAAAiD,SAAA,EACAjD,EAAAhM,OAAAlF,EAAA+F,MAAAb,eAEK,GAAA6O,GAAA,EACL7C,EAAAiD,SAAAJ,EACA7C,EAAAhM,OAAA1D,EAAAqC,IAAAyB,EAAA,cACK,CACL,IAAAwsB,EAEA,IAFAA,EAAAP,EAAAvd,EAAAzO,GAEA6rB,EAAA,CAMA,IAFAK,GADAC,EAAAJ,EAAAhsB,EAAAC,GAAAgsB,EAAAH,IACAM,GAHA3tB,EAAAuB,IAAAC,MACAxF,EAAAuxB,KAAAC,EAAAH,IAAAG,EAAAH,GAAAlB,OAIA,EACA,SAMA,IAFA2B,IAAAH,GADAE,EAAAjwB,EAAAQ,KAAAsvB,KACA1tB,IAEA,EACA,cAEO,GAAA+tB,EAAA,GACP,IAAA/tB,EACAhE,EACA2xB,EACAD,EAMAG,EACAC,EALA,IAFAJ,GADAC,EAAAJ,EAAAhsB,EAAAisB,EAAAhsB,GACAmsB,GAHA3tB,EAAAuB,IAAAC,MACAxF,EAAAuxB,IAAAC,IAAArB,OAIA,EACA,SAMA,IAFA2B,IAAAH,GADAE,EAAAjwB,EAAAQ,KAAAsvB,KACA1tB,IAEA,EACA,SAIAmN,EAAAiD,SAAA,EACAjD,EAAAhM,OAAAlF,EAAA+F,MAAAb,UAKA,OADAgM,EAAAhM,OAAAE,KAAApC,KAAA+tB,YAAA5rB,IAAA8C,EAAAD,IACA,GAGAioB,EAAA3uB,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,GACA,IAAAmW,EAAA3f,EAAAL,QAAAS,EAAAjF,KAAAmtB,WACA1I,EAAA5f,EAAAL,QAAAS,EAAAjF,KAAAotB,WAEA7e,EAAAoB,cAAA6U,EAAAC,GACAlW,EAAAuB,OAAA9P,KAAA2N,WAGAsf,EAAA3uB,UAAAkQ,YAAA,SAAAC,EAAAC,GACAD,EAAAoZ,KAAA,EACApZ,EAAAqY,OAAA5lB,WAAA,GAAAlB,KAAAmtB,UAAA,GAAAntB,KAAAotB,WACA3e,EAAA8Y,EAAA,GAGA0F,EAAA3uB,UAAAqQ,qBAAA,SAAAC,GACAA,EAAAkW,WAAAvD,KAAAvhB,KAAAmtB,WACAve,EAAAkW,WAAAvD,KAAAvhB,KAAAotB,WACAxe,EAAAoW,QAAA,EACApW,EAAAjB,SAAA3N,KAAA2N,yBClgBA,sBAAAvQ,OAAAY,OACAvB,EAAAD,QAAA,SAAAgL,EAAAC,GACA,OAAArK,OAAAY,OAAAnB,KAAAO,OAAAoK,EAAAC,QAEC,CASD,SAAAC,KARAjL,EAAAD,QAAA,SAAAgL,EAAAC,GACA,GAAAA,EACA,MAAA9G,MAAA,qCACA,oBAAA6G,GAAA,OAAAA,EACA,MAAA7G,MAAA,sBAEA,OADA+G,EAAApJ,UAAAkJ,EACA,IAAAE,qBCXA,IAAAqZ,EAAYzkB,EAAQ,IACpByyB,EAAazyB,EAAQ,IAErB0yB,EAAA,EA8BA,SAAAC,EAAAC,GAEAlvB,KAAAmvB,OAAAD,EACAlvB,KAAAovB,QAAA,KAGApvB,KAAAqvB,gBAAA,IAAAN,EAGA/uB,KAAAsvB,gBAAA,IAAAP,EAEA/uB,KAAAuvB,QAvCAxO,EAAAO,MAAA,WACAthB,KAAAwvB,KAAA,IAAAP,EAAAjvB,QAGA+gB,EAAAziB,UAAAmxB,OAAA,SAAAC,GACA,WAAAA,EACA1vB,KAAAwvB,KAAAG,iBAEA3vB,KAAAwvB,KAAAI,kBAGA7O,EAAAziB,UAAAuxB,IAAA,SAAA9uB,EAAAC,GACA,uBAAAD,GACAf,KAAAwvB,KAAA3uB,IAAAE,GACAf,MAEG,iBAAAe,OACH,IAAAC,EACAhB,KAAAwvB,KAAAjyB,IAAAwD,IAEAf,KAAAwvB,KAAA3uB,IAAAE,EAAAC,GACAhB,WAEG,IAAAe,EACHf,KAAAwvB,UADG,GAmBHP,EAAA3wB,UAAAixB,MAAA,WAEAvvB,KAAA8vB,cAAA,EACA9vB,KAAA+vB,OAAA,EAEA/vB,KAAAgwB,OAAA,EACAhwB,KAAAiwB,QAAA,EAEAjwB,KAAAkwB,QAAA,EACAlwB,KAAAmwB,QAAA,EACAnwB,KAAAowB,OAAA,EACApwB,KAAAqwB,OAAA,EACArwB,KAAAswB,UAAA,EAGAtwB,KAAAuwB,UAAA,EACAvwB,KAAAwwB,QAAA,KACAxwB,KAAAywB,QAAA,KAGAzwB,KAAA0wB,UAAA,EACA1wB,KAAA2wB,SAAA,EACA3wB,KAAA4wB,SAAA,EAGA5wB,KAAA6wB,UAAA,EACA7wB,KAAA8wB,QAAA,EACA9wB,KAAA+wB,QAAA,EAGA/wB,KAAAgxB,SAAA,EACAhxB,KAAAixB,SAAA,EAEAjxB,KAAAkxB,MAAA,EACAlxB,KAAAmxB,MAAA,EACAnxB,KAAAoxB,UAAApxB,KAAAgwB,OACAhwB,KAAAqxB,WAAArxB,KAAAiwB,QAGAjwB,KAAAsxB,gBAAAtC,EACAhvB,KAAAuxB,gBAAAvC,EACAhvB,KAAAwxB,aAAAxC,GAGAC,EAAA3wB,UAAAmzB,QAAA,WAeA,OAdAzxB,KAAAovB,QAAApvB,KAAAmvB,OAAAC,SAAApvB,KAAAmvB,OAAAC,QAAAI,KAGAxvB,KAAA0wB,UAAA1wB,KAAA0xB,YAAA1xB,KAAAuxB,gBACAvxB,KAAA0xB,WAAA1xB,KAAAuxB,cACAvxB,KAAAsxB,gBAAAtC,GAGAhvB,KAAA6wB,UAAA7wB,KAAAovB,SACApvB,KAAA2xB,WAAA3xB,KAAAovB,QAAAmC,gBACAvxB,KAAA2xB,UAAA3xB,KAAAovB,QAAAmC,cACAvxB,KAAAsxB,gBAAAtC,GAGAhvB,MAGAivB,EAAA3wB,UAAAiC,SAAA,WACA,OAAAP,KAAAmvB,OAAA,MAAAnvB,KAAAovB,QAAApvB,KAAAovB,QAAAD,OAAA,WAKAF,EAAA3wB,UAAAsxB,eAAA,WACA5vB,KAAAyxB,UACA,IAAAG,EAAAjzB,KAAAc,IAAAO,KAAAuxB,cAAAvxB,KAAAsxB,cACAtxB,KAAAovB,QAAApvB,KAAAovB,QAAAoC,WAAA,GACA,GAAAxxB,KAAA6xB,SAAAD,EACA,OAAA5xB,KAAAsvB,gBAEAtvB,KAAA6xB,QAAAD,EAEA,IAAA5uB,EAAAhD,KAAAsvB,gBAOA,OANAtsB,EAAAusB,MAAAvvB,KAAA2vB,kBAEA3vB,KAAAovB,SAAApsB,EAAA8uB,OAAA9xB,KAAAovB,QAAAE,iBAEAtvB,KAAAwxB,aAAAxC,EAEAhsB,GAGAisB,EAAA3wB,UAAAqxB,eAAA,WACA3vB,KAAAyxB,UACA,IAAAG,EAAAjzB,KAAAc,IAAAO,KAAAuxB,cAAAvxB,KAAAsxB,cACAtxB,KAAAovB,QAAApvB,KAAAovB,QAAAmC,cAAA,GACA,GAAAvxB,KAAA+xB,SAAAH,EACA,OAAA5xB,KAAAqvB,gBAEArvB,KAAA+xB,QAAAH,EAEA,IAuBApzB,EAAAwG,EAvBAgtB,EAAAhyB,KAAAqvB,iBAEA2C,EAAAjuB,WACA/D,KAAAuwB,UACAyB,EAAAC,WAAAjyB,KAAAwwB,QAAAxwB,KAAAgwB,QAAAhwB,KAAAywB,QAAAzwB,KAAAiwB,SAEA+B,EAAAE,MAAAlyB,KAAAkwB,QAAAlwB,KAAAmwB,SACA6B,EAAAtvB,KAAA1C,KAAAowB,OAAApwB,KAAAqwB,QACA2B,EAAAG,OAAAnyB,KAAAswB,WACAtwB,KAAAuwB,UACAyB,EAAAC,UAAAjyB,KAAAwwB,QAAAxwB,KAAAgwB,OAAAhwB,KAAAywB,QAAAzwB,KAAAiwB,SAIAjwB,KAAAuwB,WAEAvwB,KAAAkxB,MAAA,EACAlxB,KAAAmxB,MAAA,EACAnxB,KAAAoxB,UAAApxB,KAAAgwB,OACAhwB,KAAAqxB,WAAArxB,KAAAiwB,UAKA+B,EAAAjxB,EAAA,GAAAixB,EAAAj1B,EAAA,GAAAi1B,EAAAjxB,EAAA,GAAAixB,EAAAj1B,EAAA,GACAyB,EAAA,EAAAwG,EAAAgtB,EAAAjxB,EAAAf,KAAAgwB,OAAAgC,EAAAj1B,EAAAiD,KAAAiwB,UAEAzxB,EAAAwzB,EAAAjxB,EAAAf,KAAAgwB,OAAAhrB,EAAAgtB,EAAAj1B,EAAAiD,KAAAiwB,SAEAzxB,EAAAwG,GACAhF,KAAAkxB,MAAAlsB,EACAhF,KAAAoxB,UAAA5yB,EAAAwG,IAEAhF,KAAAkxB,MAAA1yB,EACAwB,KAAAoxB,UAAApsB,EAAAxG,GAEAwzB,EAAAhxB,EAAA,GAAAgxB,EAAAh1B,EAAA,GAAAg1B,EAAAhxB,EAAA,GAAAgxB,EAAAh1B,EAAA,GACAwB,EAAA,EAAAwG,EAAAgtB,EAAAhxB,EAAAhB,KAAAgwB,OAAAgC,EAAAh1B,EAAAgD,KAAAiwB,UAEAzxB,EAAAwzB,EAAAhxB,EAAAhB,KAAAgwB,OAAAhrB,EAAAgtB,EAAAh1B,EAAAgD,KAAAiwB,SAEAzxB,EAAAwG,GACAhF,KAAAmxB,MAAAnsB,EACAhF,KAAAqxB,WAAA7yB,EAAAwG,IAEAhF,KAAAmxB,MAAA3yB,EACAwB,KAAAqxB,WAAArsB,EAAAxG,IAkBA,OAdAwB,KAAAoyB,GAAApyB,KAAAgxB,SACAhxB,KAAAqyB,GAAAryB,KAAAixB,SAEAjxB,KAAAoyB,IAAApyB,KAAAkxB,MAAAlxB,KAAA2wB,SAAA3wB,KAAAoxB,UACApxB,KAAAqyB,IAAAryB,KAAAmxB,MAAAnxB,KAAA4wB,SAAA5wB,KAAAqxB,WAEArxB,KAAA6wB,UAAA7wB,KAAAovB,UACApvB,KAAAovB,QAAAO,iBACA3vB,KAAAoyB,IAAApyB,KAAA8wB,QAAA9wB,KAAAovB,QAAAY,OACAhwB,KAAAqyB,IAAAryB,KAAA+wB,QAAA/wB,KAAAovB,QAAAa,SAGA+B,EAAAC,UAAAjyB,KAAAoyB,GAAApyB,KAAAqyB,IAEAryB,KAAAqvB,iBAGAJ,EAAA3wB,UAAAf,IAAA,SAAAU,GACA,sBAAAq0B,EAAAr0B,GACA,OAAAq0B,EAAAr0B,GAAA+B,OAKAivB,EAAA3wB,UAAAuC,IAAA,SAAAE,EAAAC,GACA,oBAAAD,EACA,mBAAAwxB,EAAAxxB,SAAA,IAAAC,GACAuxB,EAAAxxB,GAAAf,KAAAgB,QAEG,oBAAAD,EACH,IAAAC,KAAAD,EACA,mBAAAwxB,EAAAvxB,SAAA,IAAAD,EAAAC,IACAuxB,EAAAvxB,GAAAhB,KAAAe,EAAAC,GAAAD,GAQA,OAJAf,KAAAmvB,SACAnvB,KAAAmvB,OAAAqD,UAAAxD,EACAhvB,KAAAmvB,OAAAsD,SAEAzyB,MAGA,IAAAsyB,EAAA,CACA7oB,MAAA,SAAAomB,GACA,OAAAA,EAAAE,QAGA2C,aAAA,SAAA7C,GACA,OAAAA,EAAAC,eAGA6C,MAAA,SAAA9C,GACA,OAAAA,EAAAG,QAGA5B,OAAA,SAAAyB,GACA,OAAAA,EAAAI,SAGA2C,SAAA,SAAA/C,GACA,OAAAA,EAAAuB,WAGAyB,UAAA,SAAAhD,GACA,OAAAA,EAAAwB,YAMAyB,OAAA,SAAAjD,GACA,OAAAA,EAAAK,SAGA6C,OAAA,SAAAlD,GACA,OAAAA,EAAAM,SAMA6C,MAAA,SAAAnD,GACA,OAAAA,EAAAO,QAGA6C,MAAA,SAAApD,GACA,OAAAA,EAAAQ,QAGAtrB,SAAA,SAAA8qB,GACA,OAAAA,EAAAS,WAMA4C,OAAA,SAAArD,GACA,OAAAA,EAAAW,SAGA2C,OAAA,SAAAtD,GACA,OAAAA,EAAAY,SAMA2C,QAAA,SAAAvD,GACA,OAAAA,EAAAmB,UAGAqC,QAAA,SAAAxD,GACA,OAAAA,EAAAoB,UAMAqC,OAAA,SAAAzD,GACA,OAAAA,EAAAiB,SAGAyC,OAAA,SAAA1D,GACA,OAAAA,EAAAkB,SAMAyC,QAAA,SAAA3D,GACA,OAAAA,EAAAc,UAGA8C,QAAA,SAAA5D,GACA,OAAAA,EAAAe,WAIA2B,EAAA,CACA9oB,MAAA,SAAAomB,EAAAlyB,GACAkyB,EAAAE,OAAApyB,GAGA+0B,aAAA,SAAA7C,EAAAlyB,GACAkyB,EAAAC,cAAAnyB,GAGAg1B,MAAA,SAAA9C,EAAAlyB,GACAkyB,EAAA6D,QAAA/1B,EACAkyB,EAAAG,OAAAryB,EACAkyB,EAAA0B,gBAAAvC,GAGAZ,OAAA,SAAAyB,EAAAlyB,GACAkyB,EAAA8D,SAAAh2B,EACAkyB,EAAAI,QAAAtyB,EACAkyB,EAAA0B,gBAAAvC,GAGAkD,MAAA,SAAArC,EAAAlyB,GACAkyB,EAAAK,QAAAvyB,EACAkyB,EAAAM,QAAAxyB,EACAkyB,EAAA0B,gBAAAvC,GAGA8D,OAAA,SAAAjD,EAAAlyB,GACAkyB,EAAAK,QAAAvyB,EACAkyB,EAAA0B,gBAAAvC,GAGA+D,OAAA,SAAAlD,EAAAlyB,GACAkyB,EAAAM,QAAAxyB,EACAkyB,EAAA0B,gBAAAvC,GAGAtsB,KAAA,SAAAmtB,EAAAlyB,GACAkyB,EAAAO,OAAAzyB,EACAkyB,EAAAQ,OAAA1yB,EACAkyB,EAAA0B,gBAAAvC,GAGAgE,MAAA,SAAAnD,EAAAlyB,GACAkyB,EAAAO,OAAAzyB,EACAkyB,EAAA0B,gBAAAvC,GAGAiE,MAAA,SAAApD,EAAAlyB,GACAkyB,EAAAQ,OAAA1yB,EACAkyB,EAAA0B,gBAAAvC,GAGAjqB,SAAA,SAAA8qB,EAAAlyB,GACAkyB,EAAAS,UAAA3yB,EACAkyB,EAAA0B,gBAAAvC,GAGA4E,MAAA,SAAA/D,EAAAlyB,GACAkyB,EAAAW,QAAA7yB,EACAkyB,EAAAY,QAAA9yB,EACAkyB,EAAAU,UAAA,EACAV,EAAA0B,gBAAAvC,GAGAkE,OAAA,SAAArD,EAAAlyB,GACAkyB,EAAAW,QAAA7yB,EACAkyB,EAAAU,UAAA,EACAV,EAAA0B,gBAAAvC,GAGAmE,OAAA,SAAAtD,EAAAlyB,GACAkyB,EAAAY,QAAA9yB,EACAkyB,EAAAU,UAAA,EACAV,EAAA0B,gBAAAvC,GAGA3P,OAAA,SAAAwQ,EAAAlyB,GACAkyB,EAAAmB,SAAArzB,EACAkyB,EAAAoB,SAAAtzB,EACAkyB,EAAAyB,gBAAAtC,GAGAoE,QAAA,SAAAvD,EAAAlyB,GACAkyB,EAAAmB,SAAArzB,EACAkyB,EAAAyB,gBAAAtC,GAGAqE,QAAA,SAAAxD,EAAAlyB,GACAkyB,EAAAoB,SAAAtzB,EACAkyB,EAAAyB,gBAAAtC,GAGA6E,MAAA,SAAAhE,EAAAlyB,GACAqC,KAAAszB,OAAAzD,EAAAlyB,GACAqC,KAAAuzB,OAAA1D,EAAAlyB,IAGA21B,OAAA,SAAAzD,EAAAlyB,GACAkyB,EAAAiB,QAAAnzB,EACAkyB,EAAAgB,UAAA,EACAhB,EAAAyB,gBAAAtC,EAEAhvB,KAAAwzB,QAAA3D,EAAAlyB,IAGA41B,OAAA,SAAA1D,EAAAlyB,GACAkyB,EAAAkB,QAAApzB,EACAkyB,EAAAgB,UAAA,EACAhB,EAAAyB,gBAAAtC,EAEAhvB,KAAAyzB,QAAA5D,EAAAlyB,IAGAm2B,OAAA,SAAAjE,EAAAlyB,GACAqC,KAAAwzB,QAAA3D,EAAAlyB,GACAqC,KAAAyzB,QAAA5D,EAAAlyB,IAGA61B,QAAA,SAAA3D,EAAAlyB,GACAkyB,EAAAc,SAAAhzB,EACAkyB,EAAAa,UAAA,EACAb,EAAAyB,gBAAAtC,GAGAyE,QAAA,SAAA5D,EAAAlyB,GACAkyB,EAAAe,SAAAjzB,EACAkyB,EAAAa,UAAA,EACAb,EAAAyB,gBAAAtC,GAGA+E,WAAA,SAAAlE,EAAAlyB,EAAAq2B,GACAA,IACA,MAAAr2B,EACAA,EAAA,SACO,OAAAA,IACPA,EAAA,YAEAs2B,EAAApE,EAAAmE,EAAAE,YAAAF,EAAAG,aAAAx2B,KAIAu2B,YAAA,SAAArE,EAAAlyB,EAAAq2B,GACAA,KAAAD,YACAE,EAAApE,EAAAlyB,EAAA,OAIAw2B,aAAA,SAAAtE,EAAAlyB,EAAAq2B,GACAA,KAAAD,YACAE,EAAApE,EAAA,KAAAlyB,IAIAy2B,UAAA,SAAAvE,EAAAlyB,EAAAq2B,GACAA,GACAC,EAAApE,EAAAmE,EAAAK,WAAAL,EAAAM,YAAA32B,IAIA02B,WAAA,SAAAxE,EAAAlyB,EAAAq2B,GACAA,KAAAI,WACAH,EAAApE,EAAAlyB,EAAA,OAIA22B,YAAA,SAAAzE,EAAAlyB,EAAAq2B,GACAA,KAAAI,WACAH,EAAApE,EAAA,KAAAlyB,IAIA8xB,OAAA,SAAAI,EAAAlyB,GACAqC,KAAA8yB,OAAAjD,EAAAlyB,EAAAoD,GACAf,KAAAgzB,MAAAnD,EAAAlyB,EAAAZ,EAAAY,EAAAX,GACAgD,KAAAizB,MAAApD,EAAAlyB,EAAAqD,EAAArD,EAAAoD,GACAf,KAAA+yB,OAAAlD,EAAAlyB,EAAAX,GACAgD,KAAAozB,QAAAvD,EAAAlyB,EAAAoqB,GACA/nB,KAAAqzB,QAAAxD,EAAAlyB,EAAAkT,GACA7Q,KAAA+E,SAAA8qB,EAAA,KAIA,SAAAoE,EAAApE,EAAA8C,EAAAvE,EAAAvwB,GACA,IAAAoD,EAAA,iBAAA0xB,EACA4B,EAAA,iBAAAnG,EACAtxB,EAAA,iBAAAe,EACAgyB,EAAA0B,gBAAAvC,EACA/tB,IACA4uB,EAAAK,QAAAyC,EAAA9C,EAAA6D,QACA7D,EAAAG,OAAAH,EAAA6D,SAEAa,IACA1E,EAAAM,QAAA/B,EAAAyB,EAAA8D,SACA9D,EAAAI,QAAAJ,EAAA8D,UAEA1yB,GAAAszB,GAAAz3B,IACA,OAAAe,GAAA,YAAAA,EACAgyB,EAAAK,QAAAL,EAAAM,QAAAxxB,KAAAc,IAAAowB,EAAAK,QAAAL,EAAAM,SACK,MAAAtyB,GAAA,UAAAA,IACLgyB,EAAAK,QAAAL,EAAAM,QAAAxxB,KAAAa,IAAAqwB,EAAAK,QAAAL,EAAAM,UAEA,YAAAtyB,GAAA,UAAAA,IACAgyB,EAAAG,OAAA2C,EAAA9C,EAAAK,QACAL,EAAAI,QAAA7B,EAAAyB,EAAAM,UAKApP,EAAAziB,UAAA21B,QAAA,SAAAlzB,EAAAC,EAAAjE,GAIA,MAHA,iBAAAgE,IACAhE,EAAAiE,IAAAD,EAAAhB,EAAAgB,IAAAhC,GACAk1B,EAAAj0B,KAAAwvB,KAAAzuB,EAAAC,EAAAjE,GACAiD,MAIAivB,EAAAuF,eAAA,SAAAzT,GACAA,EAAAziB,UAAAm2B,KAAA,SAAAxzB,EAAAszB,GAGA,OAFAv0B,KAAA6vB,IAAA,QAAA5uB,GACAjB,KAAA6vB,IAAA,SAAA0E,GACAv0B,MAGA+gB,EAAAziB,UAAAq0B,MAAA,SAAA1xB,GACA,gBAAAA,EACAjB,KAAA6vB,IAAA,UAEA7vB,KAAA6vB,IAAA,QAAA5uB,GACAjB,OAGA+gB,EAAAziB,UAAA8vB,OAAA,SAAAmG,GACA,gBAAAA,EACAv0B,KAAA6vB,IAAA,WAEA7vB,KAAA6vB,IAAA,SAAA0E,GACAv0B,OAGA+gB,EAAAziB,UAAA+gB,OAAA,SAAAte,EAAAC,GAKA,MAJA,iBAAAD,IACAC,EAAAD,EAAAhB,EAAAgB,IAAAhC,GACAiB,KAAA6vB,IAAA,UAAA9uB,GACAf,KAAA6vB,IAAA,UAAA7uB,GACAhB,MAGA+gB,EAAAziB,UAAA6zB,OAAA,SAAApxB,GAEA,OADAf,KAAA6vB,IAAA,WAAA9uB,GACAf,MAGA+gB,EAAAziB,UAAAoE,KAAA,SAAA3B,EAAAC,GAOA,MANA,iBAAAD,GACAC,EAAAD,EAAAhB,EAAAgB,IAAAhC,QACA,IAAAiC,IACAA,EAAAD,GACAf,KAAA6vB,IAAA,QAAA9uB,GACAf,KAAA6vB,IAAA,QAAA7uB,GACAhB,MAGA+gB,EAAAziB,UAAA4zB,MAAA,SAAAnxB,EAAAC,GAOA,MANA,iBAAAD,GACAC,EAAAD,EAAAhB,EAAAgB,IAAAhC,QACA,IAAAiC,IACAA,EAAAD,GACAf,KAAA6vB,IAAA,SAAA9uB,GACAf,KAAA6vB,IAAA,SAAA7uB,GACAhB,MAGA+gB,EAAAziB,UAAAmL,MAAA,SAAA1I,EAAA2zB,GAKA,OAJA10B,KAAA6vB,IAAA,QAAA9uB,QACA,IAAA2zB,GACA10B,KAAA6vB,IAAA,eAAA6E,GAEA10B,OAIAivB,EAAAuF,eAAAzT,GAEAtkB,EAAAD,QAAAyyB,mBCrlBA,IACArvB,GAAsD,EAEtDnD,EAAAD,QAAAm4B,EAEA,IAAA70B,EAAaxD,EAAQ,GACrBs4B,EAAct4B,EAAQ,GAEtBuD,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAClBqC,EAAWrC,EAAQ,GACnByM,EAAYzM,EAAQ,IACpBuI,EAAgBvI,EAAQ,GACxBu4B,EAAev4B,EAAQ,IACvBqO,EAAerO,EAAQ,IAEvBw4B,EAAcx4B,EAAQ,IAItBy4B,GAHYz4B,EAAQ,IACRA,EAAQ,IAEpBq4B,EAAAK,OAAA,UACAC,EAAAN,EAAAO,UAAA,YACAC,EAAAR,EAAAS,QAAA,UAwCAC,EAAA,CACAjf,KAAA2e,EACAjwB,SAAAjF,EAAAI,OACA2D,MAAA,EAEA0xB,eAAAz1B,EAAAI,OACAs1B,gBAAA,EAEAC,cAAA,EACAC,eAAA,EAEAC,eAAA,EACAC,QAAA,EACAC,aAAA,EAEAC,YAAA,EACAC,OAAA,EACA7pB,QAAA,EAEAE,SAAA,MAUA,SAAAwoB,EAAAoB,EAAA7qB,GAEAA,EAAA0pB,EAAA1pB,EAAAmqB,GAEAz1B,GAAAE,EAAAb,OAAAY,EAAAa,QAAAwK,EAAApG,WACAlF,GAAAE,EAAAb,OAAAY,EAAAa,QAAAwK,EAAAoqB,iBACA11B,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAtH,QACAhE,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAqqB,kBACA31B,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAuqB,iBAAAvqB,EAAAuqB,gBAAA,GACA71B,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAsqB,gBAAAtqB,EAAAsqB,eAAA,GAEAx1B,KAAAg2B,QAAAD,EAEA/1B,KAAAi2B,YAAA/qB,EAAA4qB,MACA91B,KAAAk2B,gBAAAhrB,EAAA2qB,WACA71B,KAAAm2B,aAAAjrB,EAAAyqB,OACA31B,KAAAo2B,oBAAAlrB,EAAAwqB,cACA11B,KAAAgM,aAAAd,EAAAe,OAEAjM,KAAA+L,cAAA,EACA/L,KAAAwS,WAAA,EAEAxS,KAAAkM,WAAAhB,EAAAiB,SACAnM,KAAAqL,OAAAH,EAAAkL,KAEApW,KAAAqL,QAAA8pB,GACAn1B,KAAAq2B,OAAA,EACAr2B,KAAAiW,UAAA,IAEAjW,KAAAq2B,OAAA,EACAr2B,KAAAiW,UAAA,GAIAjW,KAAAs2B,IAAA,EACAt2B,KAAAkW,OAAA,EAGAlW,KAAAu2B,KAAA1xB,EAAAd,WACA/D,KAAAu2B,KAAA/3B,EAAAqB,EAAAQ,MAAA6K,EAAApG,UACA9E,KAAAu2B,KAAAvxB,EAAAnB,SAAAqH,EAAAtH,OAGA5D,KAAAmW,QAAA,IAAApN,EACA/I,KAAAmW,QAAA/M,aAAApJ,KAAAu2B,MAGAv2B,KAAA4Z,WAAA,IAAAib,EACA70B,KAAA6Z,WAAA,IAAAlP,EAEA3K,KAAAw2B,QAAA32B,EAAAI,OACAD,KAAAy2B,SAAA,EAEAz2B,KAAA02B,iBAAA72B,EAAAQ,MAAA6K,EAAAoqB,gBACAt1B,KAAA22B,kBAAAzrB,EAAAqqB,gBAEAv1B,KAAA42B,gBAAA1rB,EAAAsqB,cACAx1B,KAAA62B,iBAAA3rB,EAAAuqB,eACAz1B,KAAA82B,eAAA5rB,EAAA0qB,aAEA51B,KAAA+2B,YAAA,EAEA/2B,KAAAg3B,YAAA,KACAh3B,KAAAye,cAAA,KACAze,KAAAi3B,cAAA,KAEAj3B,KAAA2L,OAAA,KACA3L,KAAA4L,OAAA,KAEA5L,KAAAk3B,aAAA,EA8cA,SAAAC,IACAn3B,KAAA6nB,KAAA,EACA7nB,KAAA8mB,OAAAjnB,EAAAI,OACAD,KAAAunB,EAAA,EA9cAoN,EAAAr2B,UAAA84B,cAAA,WACA,SAAAp3B,KAAAg2B,UAAAh2B,KAAAg2B,QAAAqB,aAGA1C,EAAAr2B,UAAAg5B,SAAA,WACA,OAAAt3B,KAAAg2B,SAGArB,EAAAr2B,UAAAoO,QAAA,WACA,OAAA1M,KAAA4L,QAGA+oB,EAAAr2B,UAAAsO,YAAA,SAAAC,GACA7M,KAAAkM,WAAAW,GAGA8nB,EAAAr2B,UAAAqO,YAAA,WACA,OAAA3M,KAAAkM,YAGAyoB,EAAAr2B,UAAAi5B,eAAA,WACA,OAAAv3B,KAAAi3B,eAGAtC,EAAAr2B,UAAAk5B,aAAA,WACA,OAAAx3B,KAAAg3B,aAOArC,EAAAr2B,UAAAm5B,eAAA,WACA,OAAAz3B,KAAAye,eAGAkW,EAAAr2B,UAAAo5B,SAAA,WACA,OAAA13B,KAAAqL,QAAA0pB,GAGAJ,EAAAr2B,UAAAq5B,UAAA,WACA,OAAA33B,KAAAqL,QAAA8pB,GAGAR,EAAAr2B,UAAAs5B,YAAA,WACA,OAAA53B,KAAAqL,QAAA4pB,GAMAN,EAAAr2B,UAAAu5B,UAAA,WAEA,OADA73B,KAAA83B,QAAA/C,GACA/0B,MAGA20B,EAAAr2B,UAAAy5B,WAAA,WAEA,OADA/3B,KAAA83B,QAAA3C,GACAn1B,MAGA20B,EAAAr2B,UAAA05B,aAAA,WAEA,OADAh4B,KAAA83B,QAAA7C,GACAj1B,MAMA20B,EAAAr2B,UAAAiO,QAAA,WACA,OAAAvM,KAAAqL,QAOAspB,EAAAr2B,UAAAw5B,QAAA,SAAA1hB,GAIA,GAHAxW,GAAAE,EAAAb,OAAAmX,IAAA2e,GAAA3e,IAAA6e,GAAA7e,IAAA+e,GACAv1B,GAAAE,EAAAb,OAAA,GAAAe,KAAAo3B,iBAEA,GAAAp3B,KAAAo3B,iBAIAp3B,KAAAqL,QAAA+K,EAAA,CAIApW,KAAAqL,OAAA+K,EAEApW,KAAAi4B,gBAEAj4B,KAAAqL,QAAA0pB,IACA/0B,KAAA02B,iBAAA91B,UACAZ,KAAA22B,kBAAA,EACA32B,KAAAmW,QAAAzM,UACA1J,KAAAk4B,uBAGAl4B,KAAAiZ,UAAA,GAEAjZ,KAAAw2B,QAAA51B,UACAZ,KAAAy2B,SAAA,EAIA,IADA,IAAA0B,EAAAn4B,KAAAye,cACA0Z,GAAA,CACA,IAAAC,EAAAD,EACAA,IAAAltB,KACAjL,KAAAg2B,QAAAqC,eAAAD,EAAA7mB,SAEAvR,KAAAye,cAAA,KAIA,IADA,IAAA6Z,EAAAt4B,KAAAg2B,QAAAuC,aACA1nB,EAAA7Q,KAAAi3B,cAAkCpmB,EAAGA,IAAAjF,OAErC,IADA,IAAA4sB,EAAA3nB,EAAA4nB,aACA/7B,EAAA,EAAmBA,EAAA87B,IAAgB97B,EACnC47B,EAAAI,WAAA7nB,EAAA8nB,UAAAj8B,GAAAk8B,WAKAjE,EAAAr2B,UAAAu6B,SAAA,WACA,OAAA74B,KAAAm2B,cAMAxB,EAAAr2B,UAAAw6B,UAAA,SAAAxsB,GACAtM,KAAAm2B,eAAA7pB,GAGAqoB,EAAAr2B,UAAAy6B,kBAAA,WACA,OAAA/4B,KAAAk2B,iBAGAvB,EAAAr2B,UAAA06B,mBAAA,SAAA1sB,GACAtM,KAAAk2B,kBAAA5pB,EACA,GAAAtM,KAAAk2B,iBACAl2B,KAAAiZ,UAAA,IAIA0b,EAAAr2B,UAAA26B,QAAA,WACA,OAAAj5B,KAAAi2B,aAQAtB,EAAAr2B,UAAA2a,SAAA,SAAA3M,GACAA,EACA,GAAAtM,KAAAi2B,cACAj2B,KAAAi2B,aAAA,EACAj2B,KAAA+2B,YAAA,IAGA/2B,KAAAi2B,aAAA,EACAj2B,KAAA+2B,YAAA,EACA/2B,KAAA02B,iBAAA91B,UACAZ,KAAA22B,kBAAA,EACA32B,KAAAw2B,QAAA51B,UACAZ,KAAAy2B,SAAA,IAIA9B,EAAAr2B,UAAA8N,SAAA,WACA,OAAApM,KAAAgM,cAgBA2oB,EAAAr2B,UAAA+N,UAAA,SAAAC,GAGA,GAFA1M,GAAAE,EAAAb,OAAA,GAAAe,KAAAo3B,iBAEA9qB,GAAAtM,KAAAgM,aAMA,GAFAhM,KAAAgM,eAAAM,EAEAtM,KAAAgM,aAGA,IADA,IAAAssB,EAAAt4B,KAAAg2B,QAAAuC,aACA1nB,EAAA7Q,KAAAi3B,cAAoCpmB,EAAGA,IAAAjF,OACvCiF,EAAAqoB,cAAAZ,EAAAt4B,KAAAu2B,UAIG,CAGH,IADA+B,EAAAt4B,KAAAg2B,QAAAuC,aACA1nB,EAAA7Q,KAAAi3B,cAAoCpmB,EAAGA,IAAAjF,OACvCiF,EAAAsoB,eAAAb,GAKA,IADA,IAAAH,EAAAn4B,KAAAye,cACA0Z,GAAA,CACA,IAAAC,EAAAD,EACAA,IAAAltB,KACAjL,KAAAg2B,QAAAqC,eAAAD,EAAA7mB,SAEAvR,KAAAye,cAAA,OAIAkW,EAAAr2B,UAAA86B,gBAAA,WACA,OAAAp5B,KAAAo2B,qBAMAzB,EAAAr2B,UAAA+6B,iBAAA,SAAA/sB,GACAtM,KAAAo2B,qBAAA9pB,IAIAtM,KAAAo2B,sBAAA9pB,EAEAtM,KAAA22B,kBAAA,EAEA32B,KAAAi4B,kBAMAtD,EAAAr2B,UAAAgL,aAAA,WACA,OAAAtJ,KAAAu2B,MAWA5B,EAAAr2B,UAAA8K,aAAA,SAAAtE,EAAAlB,GAEA,GADAhE,GAAAE,EAAAb,OAAA,GAAAe,KAAAo3B,iBACA,GAAAp3B,KAAAo3B,gBAAA,CAIAp3B,KAAAu2B,KAAA11B,IAAAiE,EAAAlB,GACA5D,KAAAmW,QAAA/M,aAAApJ,KAAAu2B,MAGA,IADA,IAAA+B,EAAAt4B,KAAAg2B,QAAAuC,aACA1nB,EAAA7Q,KAAAi3B,cAAkCpmB,EAAGA,IAAAjF,OACrCiF,EAAAyoB,YAAAhB,EAAAt4B,KAAAu2B,KAAAv2B,KAAAu2B,QAIA5B,EAAAr2B,UAAAi7B,qBAAA,WACAv5B,KAAAmW,QAAA7M,aAAAtJ,KAAAu2B,KAAA,IAMA5B,EAAAr2B,UAAA45B,oBAAA,WACA,IAAAjzB,EAAAJ,EAAAd,WAEA/D,KAAAmW,QAAA7M,aAAArE,EAAA,GAGA,IADA,IAAAqzB,EAAAt4B,KAAAg2B,QAAAuC,aACA1nB,EAAA7Q,KAAAi3B,cAAkCpmB,EAAGA,IAAAjF,OACrCiF,EAAAyoB,YAAAhB,EAAArzB,EAAAjF,KAAAu2B,OAOA5B,EAAAr2B,UAAAkL,QAAA,SAAAC,GAEAzJ,KAAAmW,QAAA3M,QAAAC,GACAzJ,KAAAmW,QAAApZ,EAAA8D,IAAAb,KAAAmW,QAAAjN,IACAlJ,KAAAmW,QAAApV,EAAAf,KAAAmW,QAAAhN,GACAnJ,KAAAmW,QAAA7M,aAAAtJ,KAAAu2B,KAAA,IAMA5B,EAAAr2B,UAAAk7B,YAAA,WACA,OAAAx5B,KAAAu2B,KAAA/3B,GAGAm2B,EAAAr2B,UAAAm7B,YAAA,SAAAj7B,GACAwB,KAAAoJ,aAAA5K,EAAAwB,KAAAmW,QAAApV,IAMA4zB,EAAAr2B,UAAA4F,SAAA,WACA,OAAAlE,KAAAmW,QAAApV,GAGA4zB,EAAAr2B,UAAAuF,SAAA,SAAAD,GACA5D,KAAAoJ,aAAApJ,KAAAu2B,KAAA/3B,EAAAoF,IAMA+wB,EAAAr2B,UAAAo7B,eAAA,WACA,OAAA15B,KAAAmW,QAAApZ,GAMA43B,EAAAr2B,UAAAq7B,eAAA,WACA,OAAA35B,KAAAmW,QAAAnN,aAQA2rB,EAAAr2B,UAAAs7B,kBAAA,WACA,OAAA55B,KAAA02B,kBAQA/B,EAAAr2B,UAAAu7B,gCAAA,SAAAC,GACA,IAAA9wB,EAAAnJ,EAAA8B,IAAAm4B,EAAA95B,KAAAmW,QAAApZ,GACA,OAAA8C,EAAAuB,IAAApB,KAAA02B,iBAAA72B,EAAA+C,MAAA5C,KAAA22B,kBACA3tB,KAQA2rB,EAAAr2B,UAAAy7B,gCAAA,SAAAzjB,GACA,OAAAtW,KAAA65B,gCAAA75B,KAAAg6B,cAAA1jB,KAQAqe,EAAAr2B,UAAA27B,kBAAA,SAAA35B,GACAN,KAAAqL,QAAA0pB,IAGAl1B,EAAA8C,IAAArC,KAAA,GACAN,KAAAiZ,UAAA,GAEAjZ,KAAA02B,iBAAA71B,IAAAP,KAQAq0B,EAAAr2B,UAAA47B,mBAAA,WACA,OAAAl6B,KAAA22B,mBAQAhC,EAAAr2B,UAAA67B,mBAAA,SAAAl5B,GACAjB,KAAAqL,QAAA0pB,IAGA9zB,IAAA,GACAjB,KAAAiZ,UAAA,GAEAjZ,KAAA22B,kBAAA11B,IAGA0zB,EAAAr2B,UAAA87B,iBAAA,WACA,OAAAp6B,KAAA42B,iBAGAjC,EAAAr2B,UAAA+7B,iBAAA,SAAA7E,GACAx1B,KAAA42B,gBAAApB,GAGAb,EAAAr2B,UAAAg8B,kBAAA,WACA,OAAAt6B,KAAA62B,kBAGAlC,EAAAr2B,UAAAi8B,kBAAA,SAAA9E,GACAz1B,KAAA62B,iBAAApB,GAGAd,EAAAr2B,UAAAk8B,gBAAA,WACA,OAAAx6B,KAAA82B,gBAMAnC,EAAAr2B,UAAAm8B,gBAAA,SAAAvI,GACAlyB,KAAA82B,eAAA5E,GAQAyC,EAAAr2B,UAAAo8B,QAAA,WACA,OAAA16B,KAAAq2B,QAQA1B,EAAAr2B,UAAAq8B,WAAA,WACA,OAAA36B,KAAAs2B,IAAAt2B,KAAAq2B,OACAx2B,EAAA8C,IAAA3C,KAAAmW,QAAAnN,YAAAhJ,KAAAmW,QAAAnN,cAoBA2rB,EAAAr2B,UAAAs8B,YAAA,SAAA/tB,GACAA,EAAAgb,KAAA7nB,KAAAq2B,OACAxpB,EAAA0a,EAAAvnB,KAAA26B,aACA9tB,EAAAia,OAAAjmB,IAAAb,KAAAmW,QAAAnN,cAQA2rB,EAAAr2B,UAAA25B,cAAA,WASA,GAPAj4B,KAAAq2B,OAAA,EACAr2B,KAAAiW,UAAA,EACAjW,KAAAs2B,IAAA,EACAt2B,KAAAkW,OAAA,EACAlW,KAAAmW,QAAAnN,YAAApI,UAGAZ,KAAA03B,YAAA13B,KAAA43B,cAIA,OAHA53B,KAAAmW,QAAAjN,GAAArI,IAAAb,KAAAu2B,KAAA/3B,GACAwB,KAAAmW,QAAApZ,EAAA8D,IAAAb,KAAAu2B,KAAA/3B,QACAwB,KAAAmW,QAAAhN,GAAAnJ,KAAAmW,QAAApV,GAIAnB,GAAAE,EAAAb,OAAAe,KAAA23B,aAIA,IADA,IAAA3uB,EAAAnJ,EAAAI,OACA4Q,EAAA7Q,KAAAi3B,cAAkCpmB,EAAGA,IAAAjF,OACrC,MAAAiF,EAAAgqB,UAAA,CAIA,IAAApsB,EAAA,IAAA0oB,EACAtmB,EAAA+pB,YAAAnsB,GACAzO,KAAAq2B,QAAA5nB,EAAAoZ,KACA7e,EAAAzH,OAAAkN,EAAAoZ,KAAApZ,EAAAqY,QACA9mB,KAAAs2B,KAAA7nB,EAAA8Y,EAIAvnB,KAAAq2B,OAAA,GACAr2B,KAAAiW,UAAA,EAAAjW,KAAAq2B,OACArtB,EAAApH,IAAA5B,KAAAiW,aAIAjW,KAAAq2B,OAAA,EACAr2B,KAAAiW,UAAA,GAGAjW,KAAAs2B,IAAA,MAAAt2B,KAAAo2B,qBAEAp2B,KAAAs2B,KAAAt2B,KAAAq2B,OAAAx2B,EAAA8C,IAAAqG,KACApJ,GAAAE,EAAAb,OAAAe,KAAAs2B,IAAA,GACAt2B,KAAAkW,OAAA,EAAAlW,KAAAs2B,MAGAt2B,KAAAs2B,IAAA,EACAt2B,KAAAkW,OAAA,GAIA,IAAA4kB,EAAAj7B,EAAAQ,MAAAL,KAAAmW,QAAApZ,GACAiD,KAAAmW,QAAA9M,eAAAL,EAAAhJ,KAAAu2B,MAGAv2B,KAAA02B,iBAAAt1B,IAAAvB,EAAA+C,MAAA5C,KAAA22B,kBAAA92B,EAAA8B,IACA3B,KAAAmW,QAAApZ,EAAA+9B,MAWAnG,EAAAr2B,UAAAy8B,YAAA,SAAAtsB,GAEA,GADA7O,GAAAE,EAAAb,OAAA,GAAAe,KAAAo3B,iBACA,GAAAp3B,KAAAo3B,iBAIAp3B,KAAAqL,QAAA8pB,EAAA,CAIAn1B,KAAAiW,UAAA,EACAjW,KAAAs2B,IAAA,EACAt2B,KAAAkW,OAAA,EAEAlW,KAAAq2B,OAAA5nB,EAAAoZ,KACA7nB,KAAAq2B,QAAA,IACAr2B,KAAAq2B,OAAA,GAGAr2B,KAAAiW,UAAA,EAAAjW,KAAAq2B,OAEA5nB,EAAA8Y,EAAA,MAAAvnB,KAAAo2B,sBACAp2B,KAAAs2B,IAAA7nB,EAAA8Y,EAAAvnB,KAAAq2B,OACAx2B,EAAA8C,IAAA8L,EAAAqY,OAAArY,EAAAqY,QACAlnB,GAAAE,EAAAb,OAAAe,KAAAs2B,IAAA,GACAt2B,KAAAkW,OAAA,EAAAlW,KAAAs2B,KAIA,IAAAwE,EAAAj7B,EAAAQ,MAAAL,KAAAmW,QAAApZ,GACAiD,KAAAmW,QAAA9M,eAAAoF,EAAAqY,OAAA9mB,KAAAu2B,MAGAv2B,KAAA02B,iBAAAt1B,IAAAvB,EAAA+C,MAAA5C,KAAA22B,kBAAA92B,EAAA8B,IACA3B,KAAAmW,QAAApZ,EAAA+9B,OAYAnG,EAAAr2B,UAAA08B,WAAA,SAAAC,EAAAvgB,EAAAwgB,GACAl7B,KAAAqL,QAAA8pB,IAGA+F,GAAA,GAAAl7B,KAAAi2B,aACAj2B,KAAAiZ,UAAA,GAGAjZ,KAAAi2B,cACAj2B,KAAAw2B,QAAAp1B,IAAA65B,GACAj7B,KAAAy2B,UAAA52B,EAAA+C,MAAA/C,EAAA8B,IAAA+Y,EAAA1a,KAAAmW,QAAApZ,GAAAk+B,MAUAtG,EAAAr2B,UAAA68B,mBAAA,SAAAF,EAAAC,GACAl7B,KAAAqL,QAAA8pB,IAGA+F,GAAA,GAAAl7B,KAAAi2B,aACAj2B,KAAAiZ,UAAA,GAGAjZ,KAAAi2B,aACAj2B,KAAAw2B,QAAAp1B,IAAA65B,KAWAtG,EAAAr2B,UAAA88B,YAAA,SAAAC,EAAAH,GACAl7B,KAAAqL,QAAA8pB,IAGA+F,GAAA,GAAAl7B,KAAAi2B,aACAj2B,KAAAiZ,UAAA,GAGAjZ,KAAAi2B,cACAj2B,KAAAy2B,UAAA4E,KAaA1G,EAAAr2B,UAAAg9B,mBAAA,SAAA/f,EAAAb,EAAAwgB,GACAl7B,KAAAqL,QAAA8pB,IAGA+F,GAAA,GAAAl7B,KAAAi2B,aACAj2B,KAAAiZ,UAAA,GAIAjZ,KAAAi2B,cACAj2B,KAAA02B,iBAAAn1B,OAAAvB,KAAAiW,UAAAsF,GACAvb,KAAA22B,mBAAA32B,KAAAkW,OAAArW,EAAA+C,MAAA/C,EAAA8B,IAAA+Y,EAAA1a,KAAAmW,QAAApZ,GAAAwe,MAWAoZ,EAAAr2B,UAAAi9B,2BAAA,SAAAhgB,EAAA2f,GACAl7B,KAAAqL,QAAA8pB,IAGA+F,GAAA,GAAAl7B,KAAAi2B,aACAj2B,KAAAiZ,UAAA,GAIAjZ,KAAAi2B,aACAj2B,KAAA02B,iBAAAn1B,OAAAvB,KAAAiW,UAAAsF,KAUAoZ,EAAAr2B,UAAAk9B,oBAAA,SAAAjgB,EAAA2f,GACAl7B,KAAAqL,QAAA8pB,IAIA+F,GAAA,GAAAl7B,KAAAi2B,aACAj2B,KAAAiZ,UAAA,GAGAjZ,KAAAi2B,cACAj2B,KAAA22B,mBAAA32B,KAAAkW,OAAAqF,KAQAoZ,EAAAr2B,UAAAm9B,cAAA,SAAA9xB,GAEA,GAAA3J,KAAAqL,QAAA8pB,GAAAxrB,EAAA0B,QAAA8pB,EACA,SAGA,QAAAuG,EAAA17B,KAAAg3B,YAAiC0E,EAAIA,IAAAzwB,KACrC,GAAAywB,EAAA5wB,OAAAnB,GACA,GAAA+xB,EAAA3wB,MAAAU,mBACA,SAIA,UAgBAkpB,EAAAr2B,UAAAq9B,cAAA,SAAA/tB,EAAAguB,GAGA,GAFAh8B,GAAAE,EAAAb,OAAA,GAAAe,KAAAo3B,iBAEA,GAAAp3B,KAAAo3B,gBACA,YAGA,IAAAyE,EAAA,IAAA/G,EAAA90B,KAAA4N,EAAAguB,GAEA,GAAA57B,KAAAgM,cAAA6vB,EAAAzvB,WAAA,CACA,IAAAksB,EAAAt4B,KAAAg2B,QAAAuC,aACAsD,EAAA3C,cAAAZ,EAAAt4B,KAAAu2B,MAeA,OAZAsF,EAAAjwB,OAAA5L,KAAAi3B,cACAj3B,KAAAi3B,cAAA4E,EAGAA,EAAAhB,UAAA,GACA76B,KAAAi4B,gBAKAj4B,KAAAg2B,QAAA8F,aAAAD,EAAAzvB,WAEAyvB,GAcAlH,EAAAr2B,UAAAy9B,eAAA,SAAAF,GAGA,GAFAj8B,GAAAE,EAAAb,OAAA,GAAAe,KAAAo3B,iBAEA,GAAAp3B,KAAAo3B,gBAAA,CAIAx3B,GAAAE,EAAAb,OAAA48B,EAAAxe,QAAArd,MAGA,IAAAg8B,GAAA,EACA,GAAAh8B,KAAAi3B,gBAAA4E,EACA77B,KAAAi3B,cAAA4E,EAAAjwB,OACAowB,GAAA,OAIA,IADA,IAAAC,EAAAj8B,KAAAi3B,cACA,MAAAgF,GAAA,CACA,GAAAA,EAAArwB,SAAAiwB,EAAA,CACAI,EAAArwB,OAAAiwB,EAAAjwB,OACAowB,GAAA,EACA,MAEAC,IAAArwB,OAKAhM,GAAAE,EAAAb,OAAA+8B,GAIA,IADA,IAAA9V,EAAAlmB,KAAAye,cACAyH,GAAA,CACA,IAAAnpB,EAAAmpB,EAAA3U,QACA2U,IAAAjb,KAEA,IAAAuK,EAAAzY,EAAAma,cACAzB,EAAA1Y,EAAAoa,cAEA0kB,GAAArmB,GAAAqmB,GAAApmB,GAGAzV,KAAAg2B,QAAAqC,eAAAt7B,GAIA,GAAAiD,KAAAgM,aAAA,CACA,IAAAssB,EAAAt4B,KAAAg2B,QAAAuC,aACAsD,EAAA1C,eAAAb,GAGAuD,EAAAxe,OAAA,KACAwe,EAAAjwB,OAAA,KAEA5L,KAAAg2B,QAAAkG,QAAA,iBAAAL,GAGA77B,KAAAi4B,kBAMAtD,EAAAr2B,UAAA07B,cAAA,SAAA1jB,GACA,OAAAzR,EAAAL,QAAAxE,KAAAu2B,KAAAjgB,IAMAqe,EAAAr2B,UAAA69B,eAAA,SAAAC,GACA,OAAAz4B,EAAAa,QAAAxE,KAAAu2B,KAAAvxB,EAAAo3B,IAMAzH,EAAAr2B,UAAA+9B,cAAA,SAAAvC,GACA,OAAAj1B,EAAAD,SAAA5E,KAAAu2B,KAAAuD,IAOAnF,EAAAr2B,UAAAg+B,eAAA,SAAAC,GACA,OAAA54B,EAAAiB,SAAA5E,KAAAu2B,KAAAvxB,EAAAu3B,qBC5hCA//B,EAAA+D,SAAA,SAAAi8B,GACAA,EAAA,iBAAAA,IAAA,KACA,IAAA7a,EAAA,GACA,QAAA1kB,KAAA+C,KACA,mBAAAA,KAAA/C,IAAA,iBAAA+C,KAAA/C,KACA0kB,GAAA1kB,EAAA,KAAA+C,KAAA/C,GAAAu/B,GAGA,OAAA7a,oBCWAllB,EAAAD,QAAAigC,EAEangC,EAAQ,GAArB,IACA0B,EAAa1B,EAAQ,GAGrBuI,GAFcvI,EAAQ,GACXA,EAAQ,GACHA,EAAQ,IAExBuD,GADUvD,EAAQ,GACPA,EAAQ,IAEnBqJ,GADWrJ,EAAQ,IACJA,EAAQ,IACvBoR,EAAYpR,EAAQ,IACpB2wB,EAAgB3wB,EAAQ,IAiBxB,SAAAmgC,EAAA/X,EAAAgY,EAAAxP,GACA,KAAAltB,gBAAAy8B,GACA,WAAAA,EAAA/X,EAAAgY,GAGAD,EAAA9X,OAAA9nB,KAAAmD,MAEAA,KAAAqL,OAAAoxB,EAAA7X,KACA5kB,KAAA2N,SAAAhI,EAAAS,cACApG,KAAA8kB,WAAA,GACA9kB,KAAAglB,QAAA,EACAhlB,KAAA28B,aAAA,KACA38B,KAAA48B,aAAA,KACA58B,KAAA68B,iBAAA,EACA78B,KAAA88B,iBAAA,EACA5P,EAAA,GACAltB,KAAAqtB,aAAAH,EACAltB,KAAA2N,UAAAuf,GAEAltB,KAAAqtB,aAAA,EAGA3I,KAAA7iB,SACA66B,EACA18B,KAAA+8B,YAAArY,GAEA1kB,KAAAg9B,aAAAtY,IAzCA+X,EAAA9X,OAAAjX,EACA+uB,EAAAn+B,UAAAN,EAAAy+B,EAAA9X,OAAArmB,WAEAm+B,EAAA7X,KAAA,QAsDA6X,EAAAn+B,UAAAy+B,YAAA,SAAArY,GAUA1kB,KAAA8kB,WAAAjjB,OAAA,EACA7B,KAAAglB,QAAAN,EAAA7iB,OAAA,EACA,QAAAnF,EAAA,EAAiBA,EAAAgoB,EAAA7iB,SAAqBnF,EACtCsD,KAAA8kB,WAAApoB,GAAAgoB,EAAAhoB,GAAA2D,QAQA,OANAL,KAAA8kB,WAAAJ,EAAA7iB,QAAA6iB,EAAA,GAAArkB,QAEAL,KAAA28B,aAAA38B,KAAA8kB,WAAA9kB,KAAAglB,QAAA,GACAhlB,KAAA48B,aAAA58B,KAAA8kB,WAAA,GACA9kB,KAAA68B,iBAAA,EACA78B,KAAA88B,iBAAA,EACA98B,MASAy8B,EAAAn+B,UAAA0+B,aAAA,SAAAtY,GAUA1kB,KAAAglB,QAAAhlB,KAAA8kB,WAAAjjB,OAAA6iB,EAAA7iB,OACA,QAAAnF,EAAA,EAAiBA,EAAAgoB,EAAA7iB,SAAqBnF,EACtCsD,KAAA8kB,WAAApoB,GAAAgoB,EAAAhoB,GAAA2D,QAOA,OAJAL,KAAA68B,iBAAA,EACA78B,KAAA88B,iBAAA,EACA98B,KAAA28B,aAAA,KACA38B,KAAA48B,aAAA,KACA58B,MAOAy8B,EAAAn+B,UAAA2+B,eAAA,SAAAC,GACAl9B,KAAA28B,aAAAO,EACAl9B,KAAA68B,iBAAA,GAOAJ,EAAAn+B,UAAA6+B,eAAA,SAAAC,GACAp9B,KAAA48B,aAAAQ,EACAp9B,KAAA88B,iBAAA,GAMAL,EAAAn+B,UAAAwP,OAAA,WACA,IAAAzN,EAAA,IAAAo8B,EAQA,OAPAp8B,EAAAg9B,YAAAr9B,KAAA8kB,YACAzkB,EAAAgL,OAAArL,KAAAqL,OACAhL,EAAAsN,SAAA3N,KAAA2N,SACAtN,EAAAs8B,aAAA38B,KAAA28B,aACAt8B,EAAAu8B,aAAA58B,KAAA48B,aACAv8B,EAAAw8B,gBAAA78B,KAAA68B,gBACAx8B,EAAAy8B,gBAAA98B,KAAA88B,gBACAz8B,GAGAo8B,EAAAn+B,UAAAyP,cAAA,WAEA,OAAA/N,KAAAglB,QAAA,EAAAhlB,KAAAglB,QAAA,KAIAyX,EAAAn+B,UAAAg/B,aAAA,SAAApX,EAAA7X,GAEA6X,EAAA7a,OAAA4hB,EAAArI,KACAsB,EAAAvY,SAAA3N,KAAA2N,SACAuY,EAAAmH,aAAArtB,KAAAqtB,aAEAnH,EAAAiH,UAAAntB,KAAA8kB,WAAAzW,GACA6X,EAAAkH,UAAAptB,KAAA8kB,WAAAzW,EAAA,GAEAA,EAAA,GACA6X,EAAAqH,UAAAvtB,KAAA8kB,WAAAzW,EAAA,GACA6X,EAAAuH,cAAA,IAEAvH,EAAAqH,UAAAvtB,KAAA28B,aACAzW,EAAAuH,aAAAztB,KAAA68B,iBAGAxuB,EAAArO,KAAAglB,QAAA,GACAkB,EAAAsH,UAAAxtB,KAAA8kB,WAAAzW,EAAA,GACA6X,EAAAwH,cAAA,IAEAxH,EAAAsH,UAAAxtB,KAAA48B,aACA1W,EAAAwH,aAAA1tB,KAAA88B,kBAIAL,EAAAn+B,UAAA6mB,UAAA,SAAAC,GAEA,OAAAA,EAAAplB,KAAAglB,QACAhlB,KAAA8kB,WAAAM,GAEAplB,KAAA8kB,WAAA,IAWA2X,EAAAn+B,UAAA0P,UAAA,SAAA/I,EAAAzG,GACA,GAAAwB,KAAAqtB,cAAA,GAAArtB,KAAAglB,QAAA,EACA,SAEA,IAAAN,EAAA1kB,KAAA8kB,WACAyY,EAAA,IAAAtQ,EAAAvI,EAAA,GAAAA,EAAA,GAAA1kB,KAAAqtB,cACA,GAAAkQ,EAAAvvB,UAAA/I,EAAAzG,GACA,SAEA,QAAA4nB,EAAApmB,KAAAglB,QAAAtoB,EAAA,EAAuCA,EAAA0pB,IAAW1pB,EAElD,GADA6gC,EAAArY,KAAAR,EAAAhoB,EAAA,GAAAgoB,EAAAhoB,IACA6gC,EAAAvvB,UAAA/I,EAAAzG,GACA,SAGA,UAGAi+B,EAAAn+B,UAAA2P,QAAA,SAAAC,EAAAC,EAAAlJ,EAAAoJ,GAIA,OADA,IAAA4e,EAAAjtB,KAAAmlB,UAAA9W,GAAArO,KAAAmlB,UAAA9W,EAAA,GAAArO,KAAAqtB,cACApf,QAAAC,EAAAC,EAAAlJ,EAAA,IAGAw3B,EAAAn+B,UAAAgQ,YAAA,SAAAC,EAAAtJ,EAAAoJ,GAGA,IAAAmW,EAAA3f,EAAAL,QAAAS,EAAAjF,KAAAmlB,UAAA9W,IACAoW,EAAA5f,EAAAL,QAAAS,EAAAjF,KAAAmlB,UAAA9W,EAAA,IAEAE,EAAAoB,cAAA6U,EAAAC,GACAlW,EAAAuB,OAAA9P,KAAA2N,WAMA8uB,EAAAn+B,UAAAkQ,YAAA,SAAAC,EAAAC,GACAD,EAAAoZ,KAAA,EACApZ,EAAAqY,OAAAjnB,EAAAO,MACAqO,EAAA8Y,EAAA,GAGAkV,EAAAn+B,UAAAqQ,qBAAA,SAAAC,EAAAP,GAEAO,EAAAub,SAAA,GAAAnqB,KAAAmlB,UAAA9W,GACAO,EAAAub,SAAA,GAAAnqB,KAAAmlB,UAAA9W,EAAA,GACAO,EAAAkW,WAAAlW,EAAAub,SACAvb,EAAAoW,QAAA,EACApW,EAAAjB,SAAA3N,KAAA2N,2BCpRA,IAAAoT,EAAYzkB,EAAQ,IACpBA,EAAQ,IACR,IAAAskB,EAAYtkB,EAAQ,IAEpBykB,EAAAziB,UAAAk/B,UAAA,KACAzc,EAAAziB,UAAAyxB,OAAA,EAEAhP,EAAAziB,UAAAm/B,OAAA,SAAAC,GACA,GAAA19B,KAAA29B,SAAA,CAGA/c,EAAAqb,OAEA,IAAAn/B,EAAAkD,KAAAyvB,SACAiO,EAAAt0B,aAAAtM,EAAAiE,EAAAjE,EAAAkE,EAAAlE,EAAAC,EAAAD,EAAAE,EAAAF,EAAAirB,EAAAjrB,EAAA+T,GAGA7Q,KAAA+vB,OAAA/vB,KAAAwvB,KAAAO,QAAA/vB,KAAAovB,QAAApvB,KAAAovB,QAAAW,OAAA,GACA,IAAAtmB,EAAAzJ,KAAAwvB,KAAAM,cAAA9vB,KAAA+vB,OAMA,GAJA2N,EAAAE,aAAAn0B,IACAi0B,EAAAE,YAAAn0B,GAGA,OAAAzJ,KAAAw9B,UACA,QAAA9gC,EAAA,EAAAyB,EAAA6B,KAAAw9B,UAAA37B,OAA8CnF,EAAAyB,EAAOzB,IACrDsD,KAAAw9B,UAAA9gC,GAAAmhC,KAAAH,GAIAA,EAAAE,aAAA59B,KAAA+vB,SACA2N,EAAAE,YAAA59B,KAAA+vB,QAIA,IADA,IAAA+N,EAAA7yB,EAAAjL,KAAA+9B,OACAD,EAAA7yB,GACAA,EAAA6yB,EAAAE,MACAF,EAAAL,OAAAC,KAIA3c,EAAAziB,UAAA2/B,YAAA,KACAld,EAAAziB,UAAA4/B,WAAA,KACAnd,EAAAziB,UAAA6/B,WAAA3tB,IAEAuQ,EAAAziB,UAAA8/B,MAAA,SAAAC,EAAApb,EAAAqb,GACA,GAAAt+B,KAAA29B,SAAA,CAIAU,EAAAr+B,KAAAm+B,aACAE,EAAAr+B,KAAAm+B,YAGA,IAAAI,GAAA,EAEA,UAAAv+B,KAAAi+B,YACA,QAAAvhC,EAAA,EAAmBA,EAAAsD,KAAAi+B,YAAAp8B,OAA6BnF,IAAA,CAChDkkB,EAAA4d,OAEAD,GAAA,IADAv+B,KAAAi+B,YAAAvhC,GACAG,KAAAmD,KAAAq+B,EAAApb,EAAAqb,IAAAC,EAKA,IADA,IAAAT,EAAA7yB,EAAAjL,KAAA+9B,OACAD,EAAA7yB,GACAA,EAAA6yB,EAAAE,MACAF,EAAAW,MAAA,WACAF,GAAA,IAAAT,EAAAM,MAAAC,EAAApb,EAAAqb,IAAAC,GAIA,UAAAv+B,KAAAk+B,WACA,IAAAxhC,EAAA,EAAmBA,EAAAsD,KAAAk+B,WAAAr8B,OAA4BnF,IAAA,CAC/CkkB,EAAA4d,OAEAD,GAAA,IADAv+B,KAAAk+B,WAAAxhC,GACAG,KAAAmD,KAAAq+B,EAAApb,EAAAqb,IAAAC,EAIA,OAAAA,IAGAxd,EAAAziB,UAAAkgC,KAAA,SAAAE,EAAAC,GACA,mBAAAD,IAGAC,GACA,OAAA3+B,KAAAi+B,cACAj+B,KAAAi+B,YAAA,IAEAj+B,KAAAi+B,YAAA1c,KAAAmd,KAEA,OAAA1+B,KAAAk+B,aACAl+B,KAAAk+B,WAAA,IAEAl+B,KAAAk+B,WAAA3c,KAAAmd,IAEA1+B,KAAAy+B,MAAA,eAAAz+B,KAAAk+B,YAAAl+B,KAAAk+B,WAAAr8B,OAAA,GACA,OAAA7B,KAAAi+B,aAAAj+B,KAAAi+B,YAAAp8B,OAAA,KAGAkf,EAAAziB,UAAAsgC,OAAA,SAAAF,GAIA,IAAAhiC,EAHA,mBAAAgiC,IAIA,OAAA1+B,KAAAi+B,cAAAvhC,EAAAsD,KAAAi+B,YAAAY,QAAAH,KAAA,GACA1+B,KAAAi+B,YAAAa,OAAApiC,EAAA,GAEA,OAAAsD,KAAAk+B,aAAAxhC,EAAAsD,KAAAk+B,WAAAW,QAAAH,KAAA,GACA1+B,KAAAk+B,WAAAY,OAAApiC,EAAA,KAIAqkB,EAAAziB,UAAAygC,QAAA,SAAA9d,EAAA+d,GACAh/B,KAAAi/B,WAAAhe,EAAA+d,IAGAje,EAAAziB,UAAA2gC,WAAA,SAAAhe,EAAA+d,GACA,SAAAE,EAAAthC,GACA,MAAAohC,GAAAphC,GAAA,GAIA,SAHAoC,KAAA4+B,OAAAM,GACAje,EAAApkB,KAAAmD,MAMA,OADAA,KAAAw+B,KAAAU,GACAA,GAGAne,EAAAziB,UAAA6gC,aAAA,SAAAD,GACAl/B,KAAA4+B,OAAAM,qBC/GAziC,EAAAD,QAAAs4B,EAEax4B,EAAQ,GAArB,IACAs4B,EAAct4B,EAAQ,GAGtBuD,GADWvD,EAAQ,GACRA,EAAQ,IAEnBuS,EAAWvS,EAAQ,IAsBnB8iC,EAAA,CACAjzB,SAAA,KACAqL,SAAA,GACAI,YAAA,EACAlJ,QAAA,EACAgK,UAAA,EACAzM,QAAA,EAEAozB,iBAAA,EACAC,mBAAA,EACAC,eAAA,OAMA,SAAAC,EAAA3D,EAAAxtB,GACArO,KAAAuO,KAAA,IAAAM,EACA7O,KAAA67B,UACA77B,KAAAqO,aACArO,KAAA44B,QAYA,SAAA9D,EAAA5R,EAAAtV,EAAA1C,GA+BA,GA9BA0C,SACA1C,EAAA0C,EACAA,WAEG,iBAAA1C,IACHA,EAAA,CAAWwD,QAAAxD,IAGXA,EAAA0pB,EAAA1pB,EAAAk0B,GAEAp/B,KAAAqd,OAAA6F,EAEAljB,KAAAyS,WAAAvH,EAAAsM,SACAxX,KAAA2S,cAAAzH,EAAA0M,YACA5X,KAAA66B,UAAA3vB,EAAAwD,QACA1O,KAAAy/B,WAAAv0B,EAAAwN,SACA1Y,KAAAgM,aAAAd,EAAAe,OAEAjM,KAAA0/B,mBAAAx0B,EAAAm0B,iBACAr/B,KAAA2/B,qBAAAz0B,EAAAo0B,mBACAt/B,KAAA4/B,iBAAA10B,EAAAq0B,eAGAv/B,KAAA6/B,QAAAjyB,EAEA5N,KAAA4L,OAAA,KAEA5L,KAAA24B,UAAA,GACA34B,KAAAy4B,aAAA,EAEAz4B,KAAAgM,aAEA,IADA,IAAA8zB,EAAA9/B,KAAAy4B,aAAAz4B,KAAA6/B,QAAA9xB,gBACArR,EAAA,EAAmBA,EAAAojC,IAAgBpjC,EACnCsD,KAAA24B,UAAAj8B,GAAA,IAAA8iC,EAAAx/B,KAAAtD,GAIAsD,KAAAkM,WAAAhB,EAAAiB,SAOA2oB,EAAAx2B,UAAAiO,QAAA,WACA,OAAAvM,KAAA6/B,QAAAtzB,WAQAuoB,EAAAx2B,UAAAqX,SAAA,WACA,OAAA3V,KAAA6/B,SAMA/K,EAAAx2B,UAAAoa,SAAA,WACA,OAAA1Y,KAAAy/B,YAMA3K,EAAAx2B,UAAAyhC,UAAA,SAAAnnB,GACAA,GAAA5Y,KAAAy/B,aACAz/B,KAAAqd,OAAApE,UAAA,GACAjZ,KAAAy/B,WAAA7mB,IAeAkc,EAAAx2B,UAAAqO,YAAA,WACA,OAAA3M,KAAAkM,YAMA4oB,EAAAx2B,UAAAsO,YAAA,SAAAC,GACA7M,KAAAkM,WAAAW,GAOAioB,EAAAx2B,UAAAuX,QAAA,WACA,OAAA7V,KAAAqd,QAMAyX,EAAAx2B,UAAAoO,QAAA,WACA,OAAA1M,KAAA4L,QAMAkpB,EAAAx2B,UAAA0hC,WAAA,WACA,OAAAhgC,KAAA66B,WAOA/F,EAAAx2B,UAAA2hC,WAAA,SAAAvxB,GAEA1O,KAAA66B,UAAAnsB,GAMAomB,EAAAx2B,UAAAmZ,YAAA,WACA,OAAAzX,KAAAyS,YAOAqiB,EAAAx2B,UAAAiZ,YAAA,SAAAC,GACAxX,KAAAyS,WAAA+E,GAMAsd,EAAAx2B,UAAAuZ,eAAA,WACA,OAAA7X,KAAA2S,eAOAmiB,EAAAx2B,UAAAqZ,eAAA,SAAAC,GACA5X,KAAA2S,cAAAiF,GAMAkd,EAAAx2B,UAAA0P,UAAA,SAAAxP,GACA,OAAAwB,KAAA6/B,QAAA7xB,UAAAhO,KAAAqd,OAAA/T,eAAA9K,IAMAs2B,EAAAx2B,UAAA2P,QAAA,SAAAC,EAAAC,EAAAE,GACA,OAAArO,KAAA6/B,QAAA5xB,QAAAC,EAAAC,EAAAnO,KAAAqd,OAAA/T,eAAA+E,IAQAymB,EAAAx2B,UAAAs8B,YAAA,SAAAnsB,GACAzO,KAAA6/B,QAAArxB,YAAAC,EAAAzO,KAAA66B,YAOA/F,EAAAx2B,UAAA4hC,QAAA,SAAA7xB,GAEA,OAAArO,KAAA24B,UAAAtqB,GAAAE,MAMAumB,EAAAx2B,UAAA46B,cAAA,SAAAZ,EAAArzB,GACA,GAAAjF,KAAAgM,aAAA,CAIAssB,KAAAt4B,KAAAqd,OAAAia,WAAAiB,aACAtzB,KAAAjF,KAAAqd,OAAA/T,eAEAtJ,KAAAy4B,aAAAz4B,KAAA6/B,QAAA9xB,gBAEA,QAAArR,EAAAsD,KAAA24B,UAAA92B,OAAA,EAAyCnF,GAAAsD,KAAAy4B,eAAwB/7B,EAAA,CACjE,IAAAkS,EAAA5O,KAAA24B,UAAAj8B,GACA47B,EAAA6H,aAAAvxB,EAAAgqB,SACAhqB,EAAAgqB,QAAA,KAGA54B,KAAA24B,UAAA92B,OAAA7B,KAAAy4B,aAGA,IAAA/7B,EAAA,EAAiBA,EAAAsD,KAAAy4B,eAAuB/7B,EAAA,CACxCkS,EAAA5O,KAAA24B,UAAAj8B,GAAAsD,KAAA24B,UAAAj8B,IAAA,IAAA8iC,EAAAx/B,KAAAtD,GACAsD,KAAA6/B,QAAAvxB,YAAAM,EAAAL,KAAAtJ,EAAAvI,GACAkS,EAAAgqB,QAAAN,EAAA8H,YAAAxxB,EAAAL,KAAAK,MAIAkmB,EAAAx2B,UAAA66B,eAAA,SAAAb,GAEA,QAAA57B,EAAA,EAAiBA,EAAAsD,KAAAy4B,eAAuB/7B,EAAA,CACxC,IAAAkS,EAAA5O,KAAA24B,UAAAj8B,GACA47B,EAAA6H,aAAAvxB,EAAAgqB,SACAhqB,EAAAgqB,QAAA,KAGA54B,KAAAy4B,aAAA,GAOA3D,EAAAx2B,UAAAg7B,YAAA,SAAAhB,EAAA+H,EAAAC,GACA,GAAAtgC,KAAAgM,aAIA,QAAAtP,EAAA,EAAiBA,EAAAsD,KAAAy4B,eAAuB/7B,EAAA,CACxC,IAAAkS,EAAA5O,KAAA24B,UAAAj8B,GAGA6jC,EAAA,IAAA1xB,EACA2xB,EAAA,IAAA3xB,EACA7O,KAAA6/B,QAAAvxB,YAAAiyB,EAAAF,EAAAzxB,EAAAP,YACArO,KAAA6/B,QAAAvxB,YAAAkyB,EAAAF,EAAA1xB,EAAAP,YAEAO,EAAAL,KAAAzL,QAAAy9B,EAAAC,GAEA,IAAAC,EAAA5gC,EAAA8B,IAAA2+B,EAAA9hC,EAAA6hC,EAAA7hC,GAEA85B,EAAAoI,UAAA9xB,EAAAgqB,QAAAhqB,EAAAL,KAAAkyB,KASA3L,EAAAx2B,UAAAqiC,cAAA,SAAAC,GACA5gC,KAAA0/B,mBAAAkB,EAAAC,WACA7gC,KAAA2/B,qBAAAiB,EAAAE,aACA9gC,KAAA4/B,iBAAAgB,EAAAG,SACA/gC,KAAAghC,YAGAlM,EAAAx2B,UAAA2iC,oBAAA,WACA,OAAAjhC,KAAA0/B,oBAGA5K,EAAAx2B,UAAA4iC,sBAAA,WACA,OAAAlhC,KAAA2/B,sBAGA7K,EAAAx2B,UAAA6iC,kBAAA,WACA,OAAAnhC,KAAA4/B,kBAOA9K,EAAAx2B,UAAA0iC,SAAA,WACA,SAAAhhC,KAAAqd,QAAArd,KAAAgM,aAAA,CAMA,IADA,IAAAka,EAAAlmB,KAAAqd,OAAAoa,iBACAvR,GAAA,CACA,IAAA3U,EAAA2U,EAAA3U,QACAiE,EAAAjE,EAAA2F,cACAzB,EAAAlE,EAAA4F,cACA3B,GAAAxV,MAAAyV,GAAAzV,MACAuR,EAAA+F,mBAGA4O,IAAAjb,KAGA,IAAA8qB,EAAA/1B,KAAAqd,OAAAia,WAEA,SAAAvB,EAMA,IADA,IAAAuC,EAAAvC,EAAAwC,aACA77B,EAAA,EAAiBA,EAAAsD,KAAAy4B,eAAuB/7B,EACxC47B,EAAAI,WAAA14B,KAAA24B,UAAAj8B,GAAAk8B,WAiBA9D,EAAAx2B,UAAAm9B,cAAA,SAAA9xB,GAEA,OAAAA,EAAA+1B,oBAAA1/B,KAAA0/B,oBAAA,GAAA/1B,EAAA+1B,mBACA/1B,EAAA+1B,mBAAA,EAGA,IAAA/1B,EAAAi2B,iBAAA5/B,KAAA2/B,uBACA,IAAAh2B,EAAAg2B,qBAAA3/B,KAAA4/B,mBASA9K,EAAAx2B,UAAA8N,SAAA,WACA,OAAApM,KAAAgM,cAQA8oB,EAAAx2B,UAAA+N,UAAA,SAAAC,GACA,GAAAA,GAAAtM,KAAAgM,aAAA,CAIAhM,KAAAgM,eAAAM,EACA,IAAA4W,EAAAljB,KAAAqd,OAEArd,KAAAgM,aACAhM,KAAAk5B,cAAAhW,EAAAoU,WAAAiB,aAAArV,EAAA5Z,gBAEAtJ,KAAAm5B,eAAAjW,EAAAoU,WAAAiB,iCC1aA97B,EAAAD,QAAA4kC,EAEA,IAAAxM,EAAct4B,EAAQ,GAEtBuD,GADavD,EAAQ,GACVA,EAAQ,IACnB+kC,EAAiB/kC,EAAQ,IACzBglC,EAAahlC,EAAQ,IACrBq4B,EAAWr4B,EAAQ,IACnBkV,EAAclV,EAAQ,IActBilC,EAAA,CACAC,QAAA3hC,EAAAI,OACA41B,YAAA,EACAlf,cAAA,EACA8qB,mBAAA,EACAC,aAAA,EACAllB,YAAA,EACAmlB,mBAAA,EACAC,mBAAA,GAMA,SAAAR,EAAAl2B,GACA,KAAAlL,gBAAAohC,GACA,WAAAA,EAAAl2B,GAGAA,GAAArL,EAAAa,QAAAwK,KACAA,EAAA,CAAWs2B,QAAAt2B,IAGXA,EAAA0pB,EAAA1pB,EAAAq2B,GAEAvhC,KAAA6hC,SAAA,IAAAP,EAAAthC,MAEAA,KAAAu4B,aAAA,IAAA8I,EAEArhC,KAAAye,cAAA,KACAze,KAAA8hC,eAAA,EAEA9hC,KAAA+hC,WAAA,KACA/hC,KAAAgiC,YAAA,EAEAhiC,KAAAg3B,YAAA,KACAh3B,KAAAiiC,aAAA,EAEAjiC,KAAAkiC,gBAAA,EAEAliC,KAAAmiC,aAAAj3B,EAAA2qB,WACA71B,KAAAoiC,UAAAviC,EAAAQ,MAAA6K,EAAAs2B,SAEAxhC,KAAAqiC,eAAA,EACAriC,KAAA87B,cAAA,EACA97B,KAAAsiC,UAAA,EAGAtiC,KAAAuiC,eAAAr3B,EAAAyL,aACA3W,KAAAwiC,oBAAAt3B,EAAAu2B,kBACAzhC,KAAAyiC,cAAAv3B,EAAAw2B,YAEA1hC,KAAA0iC,aAAAx3B,EAAAsR,WACAxc,KAAA2iC,qBAAAz3B,EAAAy2B,mBACA3hC,KAAA4iC,qBAAA13B,EAAA02B,mBAEA5hC,KAAA6iC,IAAA,EAEA7iC,KAAA8iC,YAAA,EAGA9iC,KAAA+iC,QAAA/iC,KAAAgjC,cAAA9kC,KAAA8B,MASAohC,EAAA9iC,UAAA2kC,YAAA,WACA,OAAAjjC,KAAA+hC,YASAX,EAAA9iC,UAAAk5B,aAAA,WACA,OAAAx3B,KAAAg3B,aAYAoK,EAAA9iC,UAAAm5B,eAAA,WACA,OAAAz3B,KAAAye,eAGA2iB,EAAA9iC,UAAA4kC,aAAA,WACA,OAAAljC,KAAAgiC,aAGAZ,EAAA9iC,UAAA6kC,cAAA,WACA,OAAAnjC,KAAAiiC,cAMAb,EAAA9iC,UAAA8kC,gBAAA,WACA,OAAApjC,KAAA8hC,gBAMAV,EAAA9iC,UAAA+kC,WAAA,SAAA7B,GACAxhC,KAAAoiC,UAAAZ,GAMAJ,EAAA9iC,UAAAglC,WAAA,WACA,OAAAtjC,KAAAoiC,WAMAhB,EAAA9iC,UAAA+4B,SAAA,WACA,OAAAr3B,KAAAsiC,UAMAlB,EAAA9iC,UAAAilC,iBAAA,SAAAj3B,GACA,GAAAA,GAAAtM,KAAAmiC,eAIAniC,KAAAmiC,aAAA71B,EACA,GAAAtM,KAAAmiC,cACA,QAAAnhC,EAAAhB,KAAA+hC,WAAiC/gC,EAAGA,IAAA4K,OACpC5K,EAAAiY,UAAA,IAKAmoB,EAAA9iC,UAAAklC,iBAAA,WACA,OAAAxjC,KAAAmiC,cAMAf,EAAA9iC,UAAAmlC,gBAAA,SAAAn3B,GACAtM,KAAAuiC,eAAAj2B,GAGA80B,EAAA9iC,UAAAolC,gBAAA,WACA,OAAA1jC,KAAAuiC,gBAMAnB,EAAA9iC,UAAAqlC,qBAAA,SAAAr3B,GACAtM,KAAAwiC,oBAAAl2B,GAGA80B,EAAA9iC,UAAAslC,qBAAA,WACA,OAAA5jC,KAAAwiC,qBAMApB,EAAA9iC,UAAAulC,eAAA,SAAAv3B,GACAtM,KAAAyiC,cAAAn2B,GAGA80B,EAAA9iC,UAAAwlC,eAAA,WACA,OAAA9jC,KAAAyiC,eAMArB,EAAA9iC,UAAAylC,mBAAA,SAAAz3B,GACAtM,KAAAqiC,cAAA/1B,GAMA80B,EAAA9iC,UAAA0lC,mBAAA,WACA,OAAAhkC,KAAAqiC,eAcAjB,EAAA9iC,UAAA2lC,YAAA,WACA,QAAA/gB,EAAAljB,KAAA+hC,WAAkC7e,EAAMA,IAAAxW,UACxCwW,EAAAsT,QAAA51B,UACAsiB,EAAAuT,SAAA,GAmBA2K,EAAA9iC,UAAA4lC,UAAA,SAAA31B,EAAA41B,GAEA,IAAA7L,EAAAt4B,KAAAu4B,aACAv4B,KAAAu4B,aAAA6L,MAAA71B,EAAA,SAAAqqB,GACA,IAAAhqB,EAAA0pB,EAAA3rB,YAAAisB,GACA,OAAAuL,EAAAv1B,EAAAitB,YAkCAuF,EAAA9iC,UAAA2P,QAAA,SAAAo2B,EAAAC,EAAAC,GACAnD,EAAAoD,uBAAAD,EACAvkC,KAAAu4B,aAAAtqB,QAAA,KAAAjO,KAAAykC,iBAAAJ,EAAAC,EAAA,GACAlD,EAAAoD,4BAAAE,GAOAtD,EAAA9iC,UAAAmmC,iBAAA,SAAAt2B,EAAAyqB,EAAAhqB,GACA,IAAAitB,EAAAjtB,EAAAitB,QACAzW,EAAAxW,EAAAP,WACAH,EAAA,GAEA,GADA2tB,EAAA5tB,QAAAC,EAAAC,EAAAiX,GACA,CACA,IAAAjU,EAAAjD,EAAAiD,SACAuJ,EAAAvM,EAAAuC,GAAA9O,IAAA,EAAAuP,GAAA/P,IAAA+M,EAAAwC,GAAA/O,IAAAuP,IACA,OAAAiwB,EAAAoD,uBAAA3I,EAAAnhB,EAAAxM,EAAAhM,OAAAiP,GAEA,OAAAhD,EAAA+C,aAMAkwB,EAAA9iC,UAAAqmC,cAAA,WACA,OAAA3kC,KAAAu4B,aAAAoM,iBAMAvD,EAAA9iC,UAAAsmC,cAAA,WACA,OAAA5kC,KAAAu4B,aAAAqM,iBAQAxD,EAAA9iC,UAAAumC,eAAA,WACA,OAAA7kC,KAAAu4B,aAAAsM,kBASAzD,EAAA9iC,UAAAwmC,eAAA,WACA,OAAA9kC,KAAAu4B,aAAAuM,kBASA1D,EAAA9iC,UAAA8O,YAAA,SAAAC,GAEA,IAAArN,KAAAsiC,SAAA,CAIA,QAAAthC,EAAAhB,KAAA+hC,WAA+B/gC,EAAGA,IAAA4K,OAClC5K,EAAAu1B,KAAA/3B,EAAAmD,IAAA0L,GACArM,EAAAmV,QAAAjN,GAAAvH,IAAA0L,GACArM,EAAAmV,QAAApZ,EAAA4E,IAAA0L,GAGA,QAAAkJ,EAAAvW,KAAAg3B,YAAgCzgB,EAAGA,IAAA3K,OACnC2K,EAAAnJ,YAAAC,GAGArN,KAAAu4B,aAAAnrB,YAAAC,KAYA+zB,EAAA9iC,UAAAymC,WAAA,SAAA75B,EAAAtH,GAEA,GAAA5D,KAAAq3B,WACA,YAGAnsB,GAAArL,EAAAa,QAAAwK,KACAA,EAAA,CACApG,SAAAoG,EACAtH,UAIA,IAAAsf,EAAA,IAAAyR,EAAA30B,KAAAkL,GAWA,OARAgY,EAAAvX,OAAA,KACAuX,EAAAtX,OAAA5L,KAAA+hC,WACA/hC,KAAA+hC,aACA/hC,KAAA+hC,WAAAp2B,OAAAuX,GAEAljB,KAAA+hC,WAAA7e,IACAljB,KAAAgiC,YAEA9e,GAGAke,EAAA9iC,UAAA0mC,kBAAA,SAAA95B,EAAAtH,GAOA,OANAsH,EAEGrL,EAAAa,QAAAwK,KACHA,EAAA,CAAWpG,SAAAoG,EAAAtH,UAFXsH,EAAA,GAIAA,EAAAkL,KAAA,UACApW,KAAA+kC,WAAA75B,IAGAk2B,EAAA9iC,UAAA2mC,oBAAA,SAAA/5B,EAAAtH,GAOA,OANAsH,EAEGrL,EAAAa,QAAAwK,KACHA,EAAA,CAAWpG,SAAAoG,EAAAtH,UAFXsH,EAAA,GAIAA,EAAAkL,KAAA,YACApW,KAAA+kC,WAAA75B,IAaAk2B,EAAA9iC,UAAA4mC,YAAA,SAAAlkC,GAGA,IAAAhB,KAAAq3B,WAAA,CAIA,GAAAr2B,EAAAk2B,YACA,SAKA,IADA,IAAAiO,EAAAnkC,EAAAg2B,YACAmO,GAAA,CACA,IAAAC,EAAAD,EACAA,IAAAl6B,KAEAjL,KAAAk8B,QAAA,eAAAkJ,EAAAr6B,OACA/K,KAAAqlC,aAAAD,EAAAr6B,OAEA/J,EAAAg2B,YAAAmO,EAEAnkC,EAAAg2B,YAAA,KAIA,IADA,IAAAmB,EAAAn3B,EAAAyd,cACA0Z,GAAA,CACA,IAAAC,EAAAD,EACAA,IAAAltB,KAEAjL,KAAAq4B,eAAAD,EAAA7mB,SAEAvQ,EAAAyd,cAAA0Z,EAEAn3B,EAAAyd,cAAA,KAIA,IADA,IAAA5N,EAAA7P,EAAAi2B,cACApmB,GAAA,CACA,IAAAy0B,EAAAz0B,EACAA,IAAAjF,OAEA5L,KAAAk8B,QAAA,iBAAAoJ,GACAA,EAAAnM,eAAAn5B,KAAAu4B,cAEAv3B,EAAAi2B,cAAApmB,EAuBA,OArBA7P,EAAAi2B,cAAA,KAGAj2B,EAAA2K,SACA3K,EAAA2K,OAAAC,OAAA5K,EAAA4K,QAGA5K,EAAA4K,SACA5K,EAAA4K,OAAAD,OAAA3K,EAAA2K,QAGA3K,GAAAhB,KAAA+hC,aACA/hC,KAAA+hC,WAAA/gC,EAAA4K,QAGA5K,EAAAk2B,aAAA,IAEAl3B,KAAAgiC,YAEAhiC,KAAAk8B,QAAA,cAAAl7B,IAEA,IAaAogC,EAAA9iC,UAAAinC,YAAA,SAAAx6B,GAIA,GAAA/K,KAAAq3B,WACA,YA8BA,GA1BAtsB,EAAAY,OAAA,KACAZ,EAAAa,OAAA5L,KAAAg3B,YACAh3B,KAAAg3B,cACAh3B,KAAAg3B,YAAArrB,OAAAZ,GAEA/K,KAAAg3B,YAAAjsB,IACA/K,KAAAiiC,aAGAl3B,EAAAc,QAAAd,QACAA,EAAAc,QAAAf,MAAAC,EAAAQ,QACAR,EAAAc,QAAAb,KAAA,KACAD,EAAAc,QAAAZ,KAAAF,EAAAO,QAAA0rB,YACAjsB,EAAAO,QAAA0rB,cACAjsB,EAAAO,QAAA0rB,YAAAhsB,KAAAD,EAAAc,SACAd,EAAAO,QAAA0rB,YAAAjsB,EAAAc,QAEAd,EAAAe,QAAAf,QACAA,EAAAe,QAAAhB,MAAAC,EAAAO,QACAP,EAAAe,QAAAd,KAAA,KACAD,EAAAe,QAAAb,KAAAF,EAAAQ,QAAAyrB,YACAjsB,EAAAQ,QAAAyrB,cACAjsB,EAAAQ,QAAAyrB,YAAAhsB,KAAAD,EAAAe,SACAf,EAAAQ,QAAAyrB,YAAAjsB,EAAAe,QAGA,GAAAf,EAAAU,mBACA,QAAAya,EAAAnb,EAAAQ,QAAAksB,iBAAmDvR,EAAMA,IAAAjb,KACzDib,EAAApb,OAAAC,EAAAO,SAGA4a,EAAA3U,QAAA+F,mBAOA,OAAAvM,GASAq2B,EAAA9iC,UAAA+mC,aAAA,SAAAt6B,GAEA,IAAA/K,KAAAq3B,WAAA,CAKAtsB,EAAAY,SACAZ,EAAAY,OAAAC,OAAAb,EAAAa,QAGAb,EAAAa,SACAb,EAAAa,OAAAD,OAAAZ,EAAAY,QAGAZ,GAAA/K,KAAAg3B,cACAh3B,KAAAg3B,YAAAjsB,EAAAa,QAIA,IAAAT,EAAAJ,EAAAO,QACAF,EAAAL,EAAAQ,QA0CA,GAvCAJ,EAAA8N,UAAA,GACA7N,EAAA6N,UAAA,GAGAlO,EAAAc,QAAAb,OACAD,EAAAc,QAAAb,KAAAC,KAAAF,EAAAc,QAAAZ,MAGAF,EAAAc,QAAAZ,OACAF,EAAAc,QAAAZ,KAAAD,KAAAD,EAAAc,QAAAb,MAGAD,EAAAc,SAAAV,EAAA6rB,cACA7rB,EAAA6rB,YAAAjsB,EAAAc,QAAAZ,MAGAF,EAAAc,QAAAb,KAAA,KACAD,EAAAc,QAAAZ,KAAA,KAGAF,EAAAe,QAAAd,OACAD,EAAAe,QAAAd,KAAAC,KAAAF,EAAAe,QAAAb,MAGAF,EAAAe,QAAAb,OACAF,EAAAe,QAAAb,KAAAD,KAAAD,EAAAe,QAAAd,MAGAD,EAAAe,SAAAV,EAAA4rB,cACA5rB,EAAA4rB,YAAAjsB,EAAAe,QAAAb,MAGAF,EAAAe,QAAAd,KAAA,KACAD,EAAAe,QAAAb,KAAA,OAGAjL,KAAAiiC,aAGA,GAAAl3B,EAAAU,mBAEA,IADA,IAAAya,EAAA9a,EAAAqsB,iBACAvR,GACAA,EAAApb,OAAAK,GAGA+a,EAAA3U,QAAA+F,mBAGA4O,IAAAjb,KAIAjL,KAAAk8B,QAAA,eAAAnxB,KAGA,IAAAy6B,EAAA,IAAAlE,EAAAmE,SAYArE,EAAA9iC,UAAAiP,KAAA,SAAAm4B,EAAA/D,EAAAC,GA+BA,IA7BA,EAAAD,SAEAA,EAAA,GAGAA,KAAA3hC,KAAA2iC,qBACAf,KAAA5hC,KAAA4iC,qBAGA5iC,KAAA8iC,cAGA9iC,KAAA87B,eACA97B,KAAA2lC,kBACA3lC,KAAA87B,cAAA,GAGA97B,KAAAsiC,UAAA,EAEAkD,EAAAjW,MAAAmW,GACAF,EAAA7D,qBACA6D,EAAA5D,qBACA4D,EAAA7uB,aAAA3W,KAAAuiC,eACAiD,EAAAhpB,WAAAxc,KAAA0iC,aAGA1iC,KAAA4lC,iBAGA5lC,KAAAkiC,gBAAAwD,EAAA,GACA1lC,KAAA6hC,SAAAgE,WAAAL,GAGA,QAAAxkC,EAAAhB,KAAA+hC,WAAiC/gC,EAAGA,IAAA0L,UAEpC,GAAA1L,EAAA+K,eAIA/K,EAAA02B,YAKA12B,EAAAk3B,uBAGAl4B,KAAA2lC,kBAIA3lC,KAAAwiC,qBAAAkD,EAAA,GACA1lC,KAAA6hC,SAAAiE,cAAAN,GAGAxlC,KAAAqiC,eACAriC,KAAAikC,cAGAjkC,KAAAsiC,UAAA,GAMAlB,EAAA9iC,UAAAqnC,gBAAA,WACA3lC,KAAAu4B,aAAAwN,YAAA/lC,KAAA+iC,UASA3B,EAAA9iC,UAAA0kC,cAAA,SAAAxa,EAAAC,GACA,IAAAjT,EAAAgT,EAAAqT,QACApmB,EAAAgT,EAAAoT,QAEAnqB,EAAA8W,EAAAna,WACAuD,EAAA6W,EAAApa,WAEAlD,EAAAqK,EAAAK,UACAzK,EAAAqK,EAAAI,UAGA,GAAA1K,GAAAC,EAAA,CAQA,IADA,IAAA8a,EAAA9a,EAAAqsB,iBACAvR,GAAA,CACA,GAAAA,EAAApb,OAAAK,EAAA,CACA,IAAAsG,EAAAyU,EAAA3U,QAAA2F,cACAvF,EAAAuU,EAAA3U,QAAA4F,cACA+C,EAAAgM,EAAA3U,QAAA6F,iBACAgD,EAAA8L,EAAA3U,QAAA8F,iBAEA,GAAA5F,GAAA+D,GAAA7D,GAAA8D,GAAAyE,GAAAxI,GAAA0I,GAAAxI,EAEA,OAGA,GAAAH,GAAAgE,GAAA9D,GAAA6D,GAAA0E,GAAAtI,GAAAwI,GAAA1I,EAEA,OAIAwU,IAAAjb,KAGA,MAAAG,EAAAqwB,cAAAtwB,IAGA,GAAAsK,EAAAgmB,cAAAjmB,GAAA,CAKA,IAAAjE,EAAAC,EAAAxT,OAAAwX,EAAA9D,EAAA+D,EAAA7D,GACA,MAAAL,IAKAA,EAAA5F,OAAA,KACA,MAAA3L,KAAAye,gBACAlN,EAAA3F,OAAA5L,KAAAye,cACAze,KAAAye,cAAA9S,OAAA4F,GAEAvR,KAAAye,cAAAlN,IAEAvR,KAAA8hC,mBAMAV,EAAA9iC,UAAAsnC,eAAA,WAGA,IADA,IAAA7oC,EAAAipC,EAAAhmC,KAAAye,cACA1hB,EAAAipC,GAAA,CACAA,EAAAjpC,EAAA2P,UACA,IAAA8I,EAAAzY,EAAAma,cACA,GAAA1B,EAAApJ,WAAA,CAIA,IAAAqJ,EAAA1Y,EAAAoa,cACA,GAAA1B,EAAArJ,WAAA,CAIA,IAAAjB,EAAAqK,EAAAK,UACA,GAAA1K,EAAAiB,WAAA,CAIA,IAAAhB,EAAAqK,EAAAI,UACA,GAAAzK,EAAAgB,WAAA,CAIA,IAAAsF,EAAA3U,EAAAqa,iBACAxF,EAAA7U,EAAAsa,iBAGA,GAAAta,EAAAiW,aAAA,CACA,MAAA5H,EAAAqwB,cAAAtwB,GAAA,CACAnL,KAAAq4B,eAAAt7B,GACA,SAGA,MAAA0Y,EAAAgmB,cAAAjmB,GAAA,CACAxV,KAAAq4B,eAAAt7B,GACA,SAIAA,EAAAiW,cAAA,EAGA,IAAAizB,EAAA96B,EAAA8tB,YAAA9tB,EAAAusB,WACAwO,EAAA96B,EAAA6tB,YAAA7tB,EAAAssB,WAGA,MAAAuO,GAAA,GAAAC,EAAA,CAIA,IAAAC,EAAA3wB,EAAAmjB,UAAAjnB,GAAAknB,QACAwN,EAAA3wB,EAAAkjB,UAAA/mB,GAAAgnB,QAIA,GAHA54B,KAAAu4B,aAAAxoB,YAAAo2B,EAAAC,GASArpC,EAAAsb,OAAArY,MALAA,KAAAq4B,eAAAt7B,SApCAiD,KAAAq4B,eAAAt7B,QALAiD,KAAAq4B,eAAAt7B,QALAiD,KAAAq4B,eAAAt7B,QALAiD,KAAAq4B,eAAAt7B,KA+DAqkC,EAAA9iC,UAAA+5B,eAAA,SAAA9mB,GACAC,EAAAkN,QAAAnN,EAAAvR,MAGAuR,EAAA5F,SACA4F,EAAA5F,OAAAC,OAAA2F,EAAA3F,QAEA2F,EAAA3F,SACA2F,EAAA3F,OAAAD,OAAA4F,EAAA5F,QAEA4F,GAAAvR,KAAAye,gBACAze,KAAAye,cAAAlN,EAAA3F,UAGA5L,KAAA8hC,gBAGAV,EAAA9iC,UAAA+nC,WAAA,KAQAjF,EAAA9iC,UAAAgoC,GAAA,SAAArpC,EAAAqb,GACA,uBAAArb,GAAA,mBAAAqb,EACAtY,MAEAA,KAAAqmC,aACArmC,KAAAqmC,WAAA,IAEArmC,KAAAqmC,WAAAppC,KACA+C,KAAAqmC,WAAAppC,GAAA,IAEA+C,KAAAqmC,WAAAppC,GAAAskB,KAAAjJ,GACAtY,OASAohC,EAAA9iC,UAAAioC,IAAA,SAAAtpC,EAAAqb,GACA,oBAAArb,GAAA,mBAAAqb,EACA,OAAAtY,KAEA,IAAAwmC,EAAAxmC,KAAAqmC,YAAArmC,KAAAqmC,WAAAppC,GACA,IAAAupC,MAAA3kC,OACA,OAAA7B,KAEA,IAAAolB,EAAAohB,EAAA3H,QAAAvmB,GAIA,OAHA8M,GAAA,GACAohB,EAAA1H,OAAA1Z,EAAA,GAEAplB,MAGAohC,EAAA9iC,UAAA49B,QAAA,SAAAj/B,EAAAwpC,EAAAC,EAAAC,GACA,IAAAH,EAAAxmC,KAAAqmC,YAAArmC,KAAAqmC,WAAAppC,GACA,IAAAupC,MAAA3kC,OACA,SAEA,QAAAlF,EAAA,EAAiBA,EAAA6pC,EAAA3kC,OAAsBlF,IACvC6pC,EAAA7pC,GAAAE,KAAAmD,KAAAymC,EAAAC,EAAAC,GAEA,OAAAH,EAAA3kC,QAoBAu/B,EAAA9iC,UAAA4a,aAAA,SAAA3H,GACAvR,KAAAk8B,QAAA,gBAAA3qB,IAuBA6vB,EAAA9iC,UAAA6a,WAAA,SAAA5H,GACAvR,KAAAk8B,QAAA,cAAA3qB,IAwBA6vB,EAAA9iC,UAAA8a,SAAA,SAAA7H,EAAAsH,GACA7Y,KAAAk8B,QAAA,YAAA3qB,EAAAsH,IAuBAuoB,EAAA9iC,UAAAsoC,UAAA,SAAAr1B,EAAAgK,GACAvb,KAAAk8B,QAAA,aAAA3qB,EAAAgK,qBCxhCA,IAGA5V,EAAerJ,EAAQ,GAEvBuqC,GADavqC,EAAQ,GACVA,EAAQ,KACnBuD,EAAWvD,EAAQ,GACnBqC,EAAWrC,EAAQ,GACnBuS,EAAWvS,EAAQ,IAUnB,SAAAwqC,EAAA9tB,GACAhZ,KAAAgZ,KACAhZ,KAAAuO,KAAA,IAAAM,EACA7O,KAAAmM,SAAA,KACAnM,KAAA+mC,OAAA,KACA/mC,KAAAgnC,OAAA,KACAhnC,KAAAinC,OAAA,KACAjnC,KAAAouB,QAAA,EAEApuB,KAAAO,SAAA,WACA,OAAAP,KAAAgZ,GAAA,KAAAhZ,KAAAmM,UAkBA,SAAA+6B,IACAlnC,KAAAmnC,OAAA,KACAnnC,KAAAonC,QAAA,GACApnC,KAAAqnC,cAAA,EAEArnC,KAAAsnC,OAAA,IAAAT,EAAA,CACA7oC,OAAA,WACA,WAAA8oC,KA3CArqC,EAAAD,QAAA0qC,EAsBAJ,EAAAxoC,UAAAipC,OAAA,WACA,aAAAvnC,KAAAgnC,QA8BAE,EAAA5oC,UAAAqO,YAAA,SAAAqM,GACA,IAAAijB,EAAAj8B,KAAAonC,QAAApuB,GAEA,OAAAijB,EAAA9vB,UAQA+6B,EAAA5oC,UAAAkpC,WAAA,SAAAxuB,GACA,IAAAijB,EAAAj8B,KAAAonC,QAAApuB,GAEA,OAAAijB,EAAA1tB,MAGA24B,EAAA5oC,UAAAmpC,aAAA,WACA,IAAAxL,EAAAj8B,KAAAsnC,OAAAI,WAQA,OAPAzL,EAAAjjB,KAAAhZ,KAAAqnC,cACApL,EAAA9vB,SAAA,KACA8vB,EAAA8K,OAAA,KACA9K,EAAA+K,OAAA,KACA/K,EAAAgL,OAAA,KACAhL,EAAA7N,QAAA,EACApuB,KAAAonC,QAAAnL,EAAAjjB,IAAAijB,EACAA,GAGAiL,EAAA5oC,UAAAqpC,SAAA,SAAA1L,GACAj8B,KAAAsnC,OAAAM,QAAA3L,GACAA,EAAA7N,QAAA,SACApuB,KAAAonC,QAAAnL,EAAAjjB,KASAkuB,EAAA5oC,UAAA8hC,YAAA,SAAA7xB,EAAApC,GAGA,IAAA8vB,EAAAj8B,KAAAynC,eAYA,OAVAxL,EAAA1tB,KAAA1N,IAAA0N,GAGAM,EAAAiB,OAAAmsB,EAAA1tB,KAAA5I,EAAAG,eAEAm2B,EAAA9vB,WACA8vB,EAAA7N,OAAA,EAEApuB,KAAA6nC,WAAA5L,GAEAA,EAAAjjB,IAMAkuB,EAAA5oC,UAAA6hC,aAAA,SAAAnnB,GACA,IAAAijB,EAAAj8B,KAAAonC,QAAApuB,GAKAhZ,KAAA8nC,WAAA7L,GACAj8B,KAAA2nC,SAAA1L,IAcAiL,EAAA5oC,UAAAoiC,UAAA,SAAA1nB,EAAAzK,EAAAvR,GAIA,IAAAi/B,EAAAj8B,KAAAonC,QAAApuB,GAKA,OAAAijB,EAAA1tB,KAAAqB,SAAArB,KAIAvO,KAAA8nC,WAAA7L,GAEAA,EAAA1tB,KAAA1N,IAAA0N,GAGAA,EAAA0tB,EAAA1tB,KACAM,EAAAiB,OAAAvB,EAAA5I,EAAAG,eAKA9I,EAAA+B,EAAA,EACAwP,EAAAO,WAAA/P,GAAA/B,EAAA+B,EAAA4G,EAAAI,eAEAwI,EAAAQ,WAAAhQ,GAAA/B,EAAA+B,EAAA4G,EAAAI,eAGA/I,EAAA+C,EAAA,EACAwO,EAAAO,WAAA/O,GAAA/C,EAAA+C,EAAA4F,EAAAI,eAEAwI,EAAAQ,WAAAhP,GAAA/C,EAAA+C,EAAA4F,EAAAI,eAGA/F,KAAA6nC,WAAA5L,IAEA,IAGAiL,EAAA5oC,UAAAupC,WAAA,SAAAE,GAGA,SAAA/nC,KAAAmnC,OAGA,OAFAnnC,KAAAmnC,OAAAY,OACA/nC,KAAAmnC,OAAAJ,OAAA,MAOA,IAFA,IAAAiB,EAAAD,EAAAx5B,KACA6W,EAAAplB,KAAAmnC,OACA,GAAA/hB,EAAAmiB,UAAA,CACA,IAAAP,EAAA5hB,EAAA4hB,OACAC,EAAA7hB,EAAA6hB,OAEA5gB,EAAAjB,EAAA7W,KAAAW,eAEA+4B,EAAA,IAAAp5B,EACAo5B,EAAAnlC,QAAAsiB,EAAA7W,KAAAy5B,GACA,IASAE,EAcAC,EAvBAC,EAAAH,EAAA/4B,eAGAm5B,EAAA,EAAAD,EAGAE,EAAA,GAAAF,EAAA/hB,GAIA,GAAA2gB,EAAAO,SAAA,EACAh5B,EAAA,IAAAM,GACA/L,QAAAklC,EAAAhB,EAAAz4B,MACA25B,EAAA35B,EAAAW,eAAAo5B,MACK,EACL/5B,EAAA,IAAAM,GACA/L,QAAAklC,EAAAhB,EAAAz4B,MACA,IAAAg6B,EAAAvB,EAAAz4B,KAAAW,eAEAg5B,EADA35B,EAAAW,eACAq5B,EAAAD,EAKA,GAAArB,EAAAM,SAAA,EACAh5B,EAAA,IAAAM,GACA/L,QAAAklC,EAAAf,EAAA14B,MACA45B,EAAA55B,EAAAW,eAAAo5B,MACK,CACL,IAAA/5B,KAAA,IAAAM,GACA/L,QAAAklC,EAAAf,EAAA14B,MACAg6B,EAAAtB,EAAA14B,KAAAW,eAEAi5B,EADA55B,EAAAW,eACAq5B,EAAAD,EAIA,GAAAD,EAAAH,GAAAG,EAAAF,EACA,MAKA/iB,EADA8iB,EAAAC,EACAnB,EAEAC,EAIA,IAAAuB,EAAApjB,EAGAqjB,EAAAD,EAAAzB,OACA2B,EAAA1oC,KAAAynC,eA6BA,IA5BAiB,EAAA3B,OAAA0B,EACAC,EAAAv8B,SAAA,KACAu8B,EAAAn6B,KAAAzL,QAAAklC,EAAAQ,EAAAj6B,MACAm6B,EAAAta,OAAAoa,EAAApa,OAAA,EAEA,MAAAqa,GAEAA,EAAAzB,QAAAwB,EACAC,EAAAzB,OAAA0B,EAEAD,EAAAxB,OAAAyB,EAGAA,EAAA1B,OAAAwB,EACAE,EAAAzB,OAAAc,EACAS,EAAAzB,OAAA2B,EACAX,EAAAhB,OAAA2B,IAGAA,EAAA1B,OAAAwB,EACAE,EAAAzB,OAAAc,EACAS,EAAAzB,OAAA2B,EACAX,EAAAhB,OAAA2B,EACA1oC,KAAAmnC,OAAAuB,GAIAtjB,EAAA2iB,EAAAhB,OACA,MAAA3hB,GAAA,CAGA4hB,GAFA5hB,EAAAplB,KAAA2oC,QAAAvjB,IAEA4hB,OACAC,EAAA7hB,EAAA6hB,OAKA7hB,EAAAgJ,OAAA,EAAAzvB,EAAAc,IAAAunC,EAAA5Y,OAAA6Y,EAAA7Y,QACAhJ,EAAA7W,KAAAzL,QAAAkkC,EAAAz4B,KAAA04B,EAAA14B,MAEA6W,IAAA2hB,SAMAG,EAAA5oC,UAAAwpC,WAAA,SAAAC,GACA,GAAAA,GAAA/nC,KAAAmnC,OAAA,CAKA,IAEAqB,EAFAzB,EAAAgB,EAAAhB,OACA6B,EAAA7B,SAQA,GALAyB,EADAzB,EAAAC,QAAAe,EACAhB,EAAAE,OAEAF,EAAAC,OAGA,MAAA4B,EAAA,CAEAA,EAAA5B,QAAAD,EACA6B,EAAA5B,OAAAwB,EAEAI,EAAA3B,OAAAuB,EAEAA,EAAAzB,OAAA6B,EACA5oC,KAAA2nC,SAAAZ,GAIA,IADA,IAAA3hB,EAAAwjB,EACA,MAAAxjB,GAAA,CAGA,IAAA4hB,GAFA5hB,EAAAplB,KAAA2oC,QAAAvjB,IAEA4hB,OACAC,EAAA7hB,EAAA6hB,OAEA7hB,EAAA7W,KAAAzL,QAAAkkC,EAAAz4B,KAAA04B,EAAA14B,MACA6W,EAAAgJ,OAAA,EAAAzvB,EAAAc,IAAAunC,EAAA5Y,OAAA6Y,EAAA7Y,QAEAhJ,IAAA2hB,aAGA/mC,KAAAmnC,OAAAqB,EACAA,EAAAzB,OAAA,KACA/mC,KAAA2nC,SAAAZ,QAvCA/mC,KAAAmnC,OAAA,MAiDAD,EAAA5oC,UAAAqqC,QAAA,SAAAzuB,GAGA,IAAA2uB,EAAA3uB,EACA,GAAA2uB,EAAAtB,UAAAsB,EAAAza,OAAA,EACA,OAAAlU,EAGA,IAAA4uB,EAAAD,EAAA7B,OACA7rB,EAAA0tB,EAAA5B,OAEA0B,EAAAxtB,EAAAiT,OAAA0a,EAAA1a,OAGA,GAAAua,EAAA,GACA,IAAAI,EAAA5tB,EAAA6rB,OACAgC,EAAA7tB,EAAA8rB,OAuCA,OApCA9rB,EAAA6rB,OAAA6B,EACA1tB,EAAA4rB,OAAA8B,EAAA9B,OACA8B,EAAA9B,OAAA5rB,EAGA,MAAAA,EAAA4rB,OACA5rB,EAAA4rB,OAAAC,QAAA9sB,EACAiB,EAAA4rB,OAAAC,OAAA7rB,EAEAA,EAAA4rB,OAAAE,OAAA9rB,EAGAnb,KAAAmnC,OAAAhsB,EAIA4tB,EAAA3a,OAAA4a,EAAA5a,QACAjT,EAAA8rB,OAAA8B,EACAF,EAAA5B,OAAA+B,EACAA,EAAAjC,OAAA8B,EACAA,EAAAt6B,KAAAzL,QAAAgmC,EAAAv6B,KAAAy6B,EAAAz6B,MACA4M,EAAA5M,KAAAzL,QAAA+lC,EAAAt6B,KAAAw6B,EAAAx6B,MAEAs6B,EAAAza,OAAA,EAAAzvB,EAAAc,IAAAqpC,EAAA1a,OAAA4a,EAAA5a,QACAjT,EAAAiT,OAAA,EAAAzvB,EAAAc,IAAAopC,EAAAza,OAAA2a,EAAA3a,UAEAjT,EAAA8rB,OAAA+B,EACAH,EAAA5B,OAAA8B,EACAA,EAAAhC,OAAA8B,EACAA,EAAAt6B,KAAAzL,QAAAgmC,EAAAv6B,KAAAw6B,EAAAx6B,MACA4M,EAAA5M,KAAAzL,QAAA+lC,EAAAt6B,KAAAy6B,EAAAz6B,MAEAs6B,EAAAza,OAAA,EAAAzvB,EAAAc,IAAAqpC,EAAA1a,OAAA2a,EAAA3a,QACAjT,EAAAiT,OAAA,EAAAzvB,EAAAc,IAAAopC,EAAAza,OAAA4a,EAAA5a,SAGAjT,EAIA,GAAAwtB,GAAA,GACA,IAAAnhB,EAAAshB,EAAA9B,OACAiC,EAAAH,EAAA7B,OAuCA,OApCA6B,EAAA9B,OAAA6B,EACAC,EAAA/B,OAAA8B,EAAA9B,OACA8B,EAAA9B,OAAA+B,EAGA,MAAAA,EAAA/B,OACA+B,EAAA/B,OAAAC,QAAA6B,EACAC,EAAA/B,OAAAC,OAAA8B,EAEAA,EAAA/B,OAAAE,OAAA6B,EAGA9oC,KAAAmnC,OAAA2B,EAIAthB,EAAA4G,OAAA6a,EAAA7a,QACA0a,EAAA7B,OAAAzf,EACAqhB,EAAA7B,OAAAiC,EACAA,EAAAlC,OAAA8B,EACAA,EAAAt6B,KAAAzL,QAAAqY,EAAA5M,KAAA06B,EAAA16B,MACAu6B,EAAAv6B,KAAAzL,QAAA+lC,EAAAt6B,KAAAiZ,EAAAjZ,MAEAs6B,EAAAza,OAAA,EAAAzvB,EAAAc,IAAA0b,EAAAiT,OAAA6a,EAAA7a,QACA0a,EAAA1a,OAAA,EAAAzvB,EAAAc,IAAAopC,EAAAza,OAAA5G,EAAA4G,UAEA0a,EAAA7B,OAAAgC,EACAJ,EAAA7B,OAAAxf,EACAA,EAAAuf,OAAA8B,EACAA,EAAAt6B,KAAAzL,QAAAqY,EAAA5M,KAAAiZ,EAAAjZ,MACAu6B,EAAAv6B,KAAAzL,QAAA+lC,EAAAt6B,KAAA06B,EAAA16B,MAEAs6B,EAAAza,OAAA,EAAAzvB,EAAAc,IAAA0b,EAAAiT,OAAA5G,EAAA4G,QACA0a,EAAA1a,OAAA,EAAAzvB,EAAAc,IAAAopC,EAAAza,OAAA6a,EAAA7a,SAGA0a,EAGA,OAAAD,GAOA3B,EAAA5oC,UAAA4qC,UAAA,WACA,aAAAlpC,KAAAmnC,OACA,EAGAnnC,KAAAmnC,OAAA/Y,QAMA8Y,EAAA5oC,UAAA6qC,aAAA,WACA,SAAAnpC,KAAAmnC,OACA,SAQA,IALA,IAIAlL,EAHAmN,EADAppC,KAAAmnC,OACA54B,KAAAW,eAEAm6B,EAAA,EACAC,EAAAC,EAAA7B,WAAA8B,WACAvN,EAAAqN,EAAAr+B,QACAgxB,EAAA7N,OAAA,IAKAib,GAAApN,EAAA1tB,KAAAW,gBAKA,OAFAq6B,EAAA3B,QAAA0B,GAEAD,EAAAD,GAMAlC,EAAA5oC,UAAAmrC,cAAA,SAAAzwB,GACA,IAAAijB,EASA,IAPAA,OADA,IAAAjjB,EACAhZ,KAAAonC,QAAApuB,GAEAhZ,KAAAmnC,QAKAI,SACA,SAGA,IAAAmC,EAAAC,cAAA1N,EAAA+K,QACA4C,EAAAD,cAAA1N,EAAAgL,QACA,SAAAtoC,EAAAc,IAAAiqC,EAAAE,IAGA1C,EAAA5oC,UAAAurC,kBAAA,SAAA5N,GACA,SAAAA,EAAA,CAIAj8B,KAAAmnC,OAIA,IAAAH,EAAA/K,EAAA+K,OACAC,EAAAhL,EAAAgL,OAEAhL,EAAAsL,WAaAvnC,KAAA6pC,kBAAA7C,GACAhnC,KAAA6pC,kBAAA5C,MAGAC,EAAA5oC,UAAAwrC,gBAAA,SAAA7N,GACA,SAAAA,EAAA,CAIA,IAAA+K,EAAA/K,EAAA+K,OACAC,EAAAhL,EAAAgL,OAEA,IAAAhL,EAAAsL,SAAA,CAUA,IAAAmC,EAAA1pC,KAAAonC,QAAAJ,GAAA5Y,OACAwb,EAAA5pC,KAAAonC,QAAAH,GAAA7Y,OAIA7f,GAHA5P,EAAAc,IAAAiqC,EAAAE,GAGA,IAAA/6B,GACAN,EAAAzL,QAAAkkC,EAAAz4B,KAAA04B,EAAA14B,MAIAvO,KAAA8pC,gBAAA9C,GACAhnC,KAAA8pC,gBAAA7C,MAIAC,EAAA5oC,UAAAwpB,SAAA,WACAiiB,kBAAA/pC,KAAAmnC,QACA6C,gBAAAhqC,KAAAmnC,SASAD,EAAA5oC,UAAA2rC,cAAA,WAGA,IAFA,IACAhO,EADAiO,EAAA,EACAZ,EAAAC,EAAA7B,WAAA8B,WACAvN,EAAAqN,EAAAr+B,QACA,KAAAgxB,EAAA7N,QAAA,IAMA,IAAAua,EAAAhqC,EAAAqE,IAAAi5B,EAAAgL,OAAA7Y,OAAA6N,EAAA+K,OAAA5Y,QACA8b,EAAAvrC,EAAAc,IAAAyqC,EAAAvB,GAIA,OAFAY,EAAA3B,QAAA0B,GAEAY,GAMAhD,EAAA5oC,UAAA6rC,gBAAA,WAMA,IALA,IAIAlO,EAJAmO,EAAA,GACAhkB,EAAA,EAGAkjB,EAAAC,EAAA7B,WAAA8B,WACAvN,EAAAqN,EAAAr+B,QACAgxB,EAAA7N,OAAA,IAKA6N,EAAAsL,UACAtL,EAAA8K,OAAA,KACAqD,EAAAhkB,GAAA6V,IACA7V,GAEApmB,KAAA2nC,SAAA1L,IAKA,IAFAsN,EAAA3B,QAAA0B,GAEAljB,EAAA,IAGA,IAFA,IAAAikB,EAAA75B,IACA85B,GAAA,EAAAC,GAAA,EACA7tC,EAAA,EAAmBA,EAAA0pB,IAAW1pB,EAE9B,IADA,IAAA8tC,EAAAJ,EAAA1tC,GAAA6R,KACAgI,EAAA7Z,EAAA,EAAyB6Z,EAAA6P,IAAW7P,EAAA,CACpC,IAAAk0B,EAAAL,EAAA7zB,GAAAhI,KACAvN,EAAA,IAAA6N,EACA7N,EAAA8B,QAAA0nC,EAAAC,GACA,IAAApC,EAAArnC,EAAAkO,eACAm5B,EAAAgC,IACAC,EAAA5tC,EACA6tC,EAAAh0B,EACA8zB,EAAAhC,GAKA,IAAArB,EAAAoD,EAAAE,GACArD,EAAAmD,EAAAG,GAEAxD,EAAA/mC,KAAAynC,eACAV,EAAAC,SACAD,EAAAE,SACAF,EAAA3Y,OAAA,EAAAzvB,EAAAc,IAAAunC,EAAA5Y,OAAA6Y,EAAA7Y,QACA2Y,EAAAx4B,KAAAzL,QAAAkkC,EAAAz4B,KAAA04B,EAAA14B,MACAw4B,SAAA,KAEAC,EAAAD,SACAE,EAAAF,SAEAqD,EAAAG,GAAAH,EAAAhkB,EAAA,GACAgkB,EAAAE,GAAAvD,IACA3gB,EAGApmB,KAAAmnC,OAAAiD,EAAA,GAEApqC,KAAA8nB,YASAof,EAAA5oC,UAAA8O,YAAA,SAAAC,GAGA,IADA,IAAA4uB,EAAAqN,EAAAC,EAAA7B,WAAA8B,WACAvN,EAAAqN,EAAAr+B,QAAA,CACA,IAAAsD,EAAA0tB,EAAA1tB,KACAA,EAAAO,WAAA/P,GAAAsO,EAAAtO,EACAwP,EAAAO,WAAA/O,GAAAsN,EAAAtN,EACAwO,EAAAQ,WAAAhQ,GAAAsO,EAAAtO,EACAwP,EAAAQ,WAAAhP,GAAAsN,EAAAtN,EAEAwpC,EAAA3B,QAAA0B,IAeApC,EAAA5oC,UAAA8lC,MAAA,SAAA71B,EAAA41B,GAEA,IAAArgB,EAAA4mB,EAAAhD,WAGA,IADA5jB,EAAAvC,KAAAvhB,KAAAmnC,QACArjB,EAAAjiB,OAAA,IACA,IAAAo6B,EAAAnY,EAAA6mB,MACA,SAAA1O,EAIA,GAAAptB,EAAAkB,YAAAksB,EAAA1tB,QACA,GAAA0tB,EAAAsL,UAEA,MADApD,EAAAlI,EAAAjjB,IAEA,YAGA8K,EAAAvC,KAAA0a,EAAA+K,QACAljB,EAAAvC,KAAA0a,EAAAgL,QAKAyD,EAAA9C,QAAA9jB,IAkBAojB,EAAA5oC,UAAA2P,QAAA,SAAAE,EAAAy8B,EAAAl6B,EAAAC,EAAAO,GAEAR,KAAAvC,EAAAuC,GACAC,KAAAxC,EAAAwC,GACA,IAAAnT,EAAAqC,EAAA8B,IAAAgP,EAAAD,GAEAlT,EAAAwE,YAGA,IAAA1B,EAAAT,EAAA+C,MAAA,EAAApF,GACAqtC,EAAAhrC,EAAAmD,IAAA1C,GAKA4Q,KAAA,EAAAA,EAAA/C,EAAA+C,YAGA,IAAA45B,EAAA,IAAAj8B,EACAjR,EAAAiC,EAAAiD,QAAA,EAAAoO,EAAAR,EAAAQ,EAAAP,GACAm6B,EAAAn7B,cAAAe,EAAA9S,GAEA,IAAAkmB,EAAA4mB,EAAAhD,WACAqD,EAAAC,EAAAtD,WAGA,IADA5jB,EAAAvC,KAAAvhB,KAAAmnC,QACArjB,EAAAjiB,OAAA,IACA,IAAAo6B,EAAAnY,EAAA6mB,MACA,SAAA1O,GAIA,GAAAptB,EAAAkB,YAAAksB,EAAA1tB,KAAAu8B,GAAA,CAMA,IAAA/tC,EAAAk/B,EAAA1tB,KAAAS,YACAulB,EAAA0H,EAAA1tB,KAAAU,aAGA,KAFAtQ,EAAAqE,IAAAnD,EAAA8C,IAAArC,EAAAT,EAAA8B,IAAA+O,EAAA3T,KACA8C,EAAA8C,IAAAkoC,EAAAtW,GACA,GAIA,GAAA0H,EAAAsL,SAAA,CACAwD,EAAAr6B,GAAA7Q,EAAAQ,MAAAqQ,GACAq6B,EAAAp6B,GAAA9Q,EAAAQ,MAAAsQ,GACAo6B,EAAA75B,cAEA,IAAAvT,EAAAitC,EAAAG,EAAA9O,EAAAjjB,GAAAijB,EAAA9vB,UAEA,MAAAxO,EAEA,OAGAA,EAAA,IAEAuT,EAAAvT,EACAC,EAAAiC,EAAAiD,QAAA,EAAAoO,EAAAR,EAAAQ,EAAAP,GACAm6B,EAAAn7B,cAAAe,EAAA9S,SAGAkmB,EAAAvC,KAAA0a,EAAA+K,QACAljB,EAAAvC,KAAA0a,EAAAgL,SAIAyD,EAAA9C,QAAA9jB,GACAknB,EAAApD,QAAAmD,IAGA,IAAAC,EAAA,IAAAnE,EAAA,CACA7oC,OAAA,WACA,UAEA4pC,QAAA,SAAA9jB,OAIA4mB,EAAA,IAAA7D,EAAA,CACA7oC,OAAA,WACA,UAEA4pC,QAAA,SAAA9jB,GACAA,EAAAjiB,OAAA,KAIA0nC,EAAA,IAAA1C,EAAA,CACA7oC,OAAA,WACA,WAAAitC,GAEArD,QAAA,SAAAsD,GACAA,EAAAC,WAIA,SAAAF,IACA,IAAAG,EAAA,GACAC,EAAA,GACA,OACA7B,SAAA,SAAA8B,GAKA,OAJAF,EAAAvpC,OAAA,EACAupC,EAAA7pB,KAAA+pB,GACAD,EAAAxpC,OAAA,EACAwpC,EAAA9pB,KAAA,GACAvhB,MAEAiL,KAAA,WACA,KAAAmgC,EAAAvpC,OAAA,IACA,IAAAnF,EAAA0uC,EAAAvpC,OAAA,EACAo6B,EAAAmP,EAAA1uC,GACA,OAAA2uC,EAAA3uC,GAEA,OADA2uC,EAAA3uC,GAAA,EACAu/B,EAEA,OAAAoP,EAAA3uC,KACA2uC,EAAA3uC,GAAA,EACAu/B,EAAA+K,QAGA,OAFAoE,EAAA7pB,KAAA0a,EAAA+K,QACAqE,EAAA9pB,KAAA,GACA0a,EAAA+K,OAGA,OAAAqE,EAAA3uC,KACA2uC,EAAA3uC,GAAA,EACAu/B,EAAAgL,QAGA,OAFAmE,EAAA7pB,KAAA0a,EAAAgL,QACAoE,EAAA9pB,KAAA,GACA0a,EAAAgL,OAGAmE,EAAAT,MACAU,EAAAV,QAGAQ,MAAA,WACAC,EAAAvpC,OAAA,sBC/3BA,IACAjC,GAAsD,EAEtDnD,EAAAD,QAmFA,SAAA0R,EAAAC,GACA,IAAA+wB,EAAAqM,EAAAtoB,QAEArC,EAAA4qB,SAEAt9B,EAAAu9B,MAAAC,EAAAC,UACAz9B,EAAAtQ,EAAAuQ,EAAAy9B,KAEA,IAAApjB,EAAAra,EAAAqa,OACAC,EAAAta,EAAAsa,OAEAojB,EAAA19B,EAAA09B,OACAC,EAAA39B,EAAA29B,OAIAD,EAAA7pC,YACA8pC,EAAA9pC,YAEA,IAAA4pC,EAAAz9B,EAAAy9B,KAEAG,EAAAvjB,EAAA7a,SAAA8a,EAAA9a,SACAq+B,EAAArtC,EAAAc,IAAAkG,EAAAK,WAAA+lC,EAAA,EAAApmC,EAAAK,YACAimC,EAAA,IAAAtmC,EAAAK,WACApG,GAAAE,EAAAb,OAAA+sC,EAAAC,GAEA,IAAAl7B,EAAA,EACAm7B,EAAAvmC,EAAAY,iBACAkjB,EAAA,EAGAV,EAAA,IAAAR,EAEA4jB,EAAA,IAAAlkB,EAOA,IANAkkB,EAAA3jB,OAAAra,EAAAqa,OACA2jB,EAAA1jB,OAAAta,EAAAsa,OACA0jB,EAAAvjB,UAAA,IAIS,CACT,IAAAzQ,EAAAtT,EAAAd,WACAqU,EAAAvT,EAAAd,WACA8nC,EAAAviC,aAAA6O,EAAApH,GACA+6B,EAAAxiC,aAAA8O,EAAArH,GAIAo7B,EAAAzjB,WAAAvQ,EACAg0B,EAAAxjB,WAAAvQ,EACA,IAAAg0B,EAAA,IAAAjkB,EAIA,GAHA9W,EAAA+6B,EAAArjB,EAAAojB,GAGAC,EAAA/pC,UAAA,GAEA6L,EAAAu9B,MAAAC,EAAAW,aACAn+B,EAAAtQ,EAAA,EACA,MAGA,GAAAwuC,EAAA/pC,SAAA2pC,EAAAC,EAAA,CAEA/9B,EAAAu9B,MAAAC,EAAAY,WACAp+B,EAAAtQ,EAAAmT,EACA,MAIA,IAAAw7B,EAAA,IAAAC,EACAD,EAAAE,WAAA1jB,EAAAP,EAAAqjB,EAAApjB,EAAAqjB,EAAA/6B,GA0BA,IAHA,IAAA27B,GAAA,EACA17B,EAAA46B,EACAe,EAAA,IACW,CAEX,IAAAC,EAAAL,EAAAM,kBAAA77B,GACAu7B,EAAA76B,OACA66B,EAAA36B,OAGA,GAAAg7B,EAAAZ,EAAAC,EAAA,CAEA/9B,EAAAu9B,MAAAC,EAAAoB,YACA5+B,EAAAtQ,EAAAguC,EACAc,GAAA,EACA,MAIA,GAAAE,EAAAZ,EAAAC,EAAA,CAEAl7B,EAAAC,EACA,MAIA,IAAA+7B,EAAAR,EAAAr0B,SAAAnH,GACAw7B,EAAA76B,OACA66B,EAAA36B,OAIA,GAAAm7B,EAAAf,EAAAC,EAAA,CACA/9B,EAAAu9B,MAAAC,EAAAsB,SACA9+B,EAAAtQ,EAAAmT,EACA27B,GAAA,EACA,MAIA,GAAAK,GAAAf,EAAAC,EAAA,CAEA/9B,EAAAu9B,MAAAC,EAAAY,WACAp+B,EAAAtQ,EAAAmT,EACA27B,GAAA,EACA,MAMA,IAFA,IAAAO,EAAA,EACAC,EAAAn8B,EAAAo8B,EAAAn8B,IACa,CAEb,IAAApT,EAGAA,EAFA,EAAAqvC,EAEAC,GAAAlB,EAAAe,IAAAI,EAAAD,IAAAN,EAAAG,GAGA,IAAAG,EAAAC,KAGAF,IACArsB,EAAAwsB,aAEA,IAAA3uC,EAAA8tC,EAAAr0B,SAAAta,GACA2uC,EAAA76B,OACA66B,EAAA36B,OAEA,GAAAjT,EAAAqE,IAAAvE,EAAAutC,GAAAC,EAAA,CAEAj7B,EAAApT,EACA,MAYA,GARAa,EAAAutC,GACAkB,EAAAtvC,EACAmvC,EAAAtuC,IAEA0uC,EAAAvvC,EACAgvC,EAAAnuC,GAGA,IAAAwuC,EACA,MAQA,GAJArsB,EAAAysB,gBAAA1uC,EAAAc,IAAAmhB,EAAAysB,gBAAAJ,KAEAN,GAEAhnC,EAAAE,mBACA,MAOA,KAHA4jB,IACA7I,EAAA0sB,SAEAZ,EACA,MAGA,GAAAjjB,GAAAyiB,EAAA,CAEAh+B,EAAAu9B,MAAAC,EAAAsB,SACA9+B,EAAAtQ,EAAAmT,EACA,OAIA6P,EAAA2sB,YAAA5uC,EAAAc,IAAAmhB,EAAA2sB,YAAA9jB,GAEA,IAAAuV,EAAAuM,EAAAn7B,KAAA8uB,GACAte,EAAA4sB,WAAA7uC,EAAAc,IAAAmhB,EAAA4sB,WAAAxO,GACApe,EAAA6sB,SAAAzO,GApSAviC,EAAAD,QAAAwrB,MAoCA,WACAhoB,KAAAwoB,OAAA,IAAAH,EACAroB,KAAAyoB,OAAA,IAAAJ,EACAroB,KAAA6rC,OAAA,IAAA9iC,EACA/I,KAAA8rC,OAAA,IAAA/iC,EACA/I,KAAA4rC,MAxCAnvC,EAAAD,QAAA0rB,OAAAwjB,EAEA,IAAA/lC,EAAerJ,EAAQ,GAEvBwD,EAAaxD,EAAQ,GACrBivC,EAAYjvC,EAAQ,IAEpBskB,EAAYtkB,EAAQ,IAEpBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAClByM,EAAYzM,EAAQ,IACpBuI,EAAgBvI,EAAQ,GAIxB+U,GAHe/U,EAAQ,IACRA,EAAQ,IAERA,EAAQ,KACvB2rB,EAAA5W,EAAA2W,MACAG,EAAA9W,EAAA6W,OACAG,EAAAhX,EAAA+W,MACAG,EAAAlX,EAAAiX,MAgCA,SAAAojB,IACA1rC,KAAAyrC,MACAzrC,KAAApC,EAdA8tC,EAAAC,UAAA,EACAD,EAAAsB,SAAA,EACAtB,EAAAW,aAAA,EACAX,EAAAY,WAAA,EACAZ,EAAAoB,YAAA,EAaAlsB,EAAA6sB,QAAA,EACA7sB,EAAA4sB,WAAA,EACA5sB,EAAA4qB,SAAA,EACA5qB,EAAA0sB,SAAA,EACA1sB,EAAA2sB,YAAA,EACA3sB,EAAAwsB,aAAA,EACAxsB,EAAAysB,gBAAA,EAwOA,SAAAb,IACAxsC,KAAA0tC,SAAA,IAAArlB,EACAroB,KAAA2tC,SAAA,IAAAtlB,EACAroB,KAAA4tC,SACA5tC,KAAA6tC,SACA7tC,KAAAqL,OACArL,KAAA8tC,aAAAjuC,EAAAI,OACAD,KAAA+tC,OAAAluC,EAAAI,OAaAusC,EAAAluC,UAAAmuC,WAAA,SAAA1jB,EAAAP,EAAAqjB,EAAApjB,EAAAqjB,EAAA/6B,GACA/Q,KAAA0tC,SAAAllB,EACAxoB,KAAA2tC,SAAAllB,EACA,IAAArC,EAAA2C,EAAA3C,MACAxmB,GAAAE,EAAAb,OAAA,EAAAmnB,KAAA,GAEApmB,KAAA4tC,SAAA/B,EACA7rC,KAAA6tC,SAAA/B,EAEA,IAAA3zB,EAAAtT,EAAAd,WACAqU,EAAAvT,EAAAd,WAIA,GAHA/D,KAAA4tC,SAAAtkC,aAAA6O,EAAApH,GACA/Q,KAAA6tC,SAAAvkC,aAAA8O,EAAArH,GAEA,GAAAqV,EAAA,CACApmB,KAAAqL,OAvCA,EAwCA,IAAA2iC,EAAAhuC,KAAA0tC,SAAAvoB,UAAA4D,EAAArX,OAAA,IACAu8B,EAAAjuC,KAAA2tC,SAAAxoB,UAAA4D,EAAAnX,OAAA,IACAiJ,EAAAhW,EAAAL,QAAA2T,EAAA61B,GACAlzB,EAAAjW,EAAAL,QAAA4T,EAAA61B,GAGA,OAFAjuC,KAAA+tC,OAAA7sC,WAAA,EAAA4Z,GAAA,EAAAD,GACApc,EAAAuB,KAAA+tC,OAAA/rC,YAGG,GAAA+mB,EAAArX,OAAA,IAAAqX,EAAArX,OAAA,IAEH1R,KAAAqL,OAhDA,EAiDA,IAAA6iC,EAAAzlB,EAAAtD,UAAA4D,EAAAnX,OAAA,IACAu8B,EAAA1lB,EAAAtD,UAAA4D,EAAAnX,OAAA,IAEA5R,KAAA+tC,OAAAluC,EAAA+C,MAAA/C,EAAA8B,IAAAwsC,EAAAD,GAAA,GACAluC,KAAA+tC,OAAA/rC,YACA,IAAAE,EAAAyB,EAAAa,QAAA4T,EAAApT,EAAAhF,KAAA+tC,QAEA/tC,KAAA8tC,aAAAjuC,EAAAoD,IAAAirC,EAAAC,GACArzB,EAAAjW,EAAAL,QAAA4T,EAAApY,KAAA8tC,cAEAE,EAAAxlB,EAAArD,UAAA4D,EAAArX,OAAA,IACAmJ,EAAAhW,EAAAL,QAAA2T,EAAA61B,GAOA,OALAvvC,EAAAoB,EAAA8C,IAAAkY,EAAA3Y,GAAArC,EAAA8C,IAAAmY,EAAA5Y,IACA,IACAlC,KAAA+tC,OAAAluC,EAAAkD,IAAA/C,KAAA+tC,QACAtvC,MAEAA,EAIAuB,KAAAqL,OAxEA,EAyEA,IAAA+iC,EAAApuC,KAAA0tC,SAAAvoB,UAAA4D,EAAArX,OAAA,IACA28B,EAAAruC,KAAA0tC,SAAAvoB,UAAA4D,EAAArX,OAAA,IAEA1R,KAAA+tC,OAAAluC,EAAA+C,MAAA/C,EAAA8B,IAAA0sC,EAAAD,GAAA,GACApuC,KAAA+tC,OAAA/rC,YACAE,EAAAyB,EAAAa,QAAA2T,EAAAnT,EAAAhF,KAAA+tC,QAEA/tC,KAAA8tC,aAAAjuC,EAAAoD,IAAAmrC,EAAAC,GACA,IAKA5vC,EALAoc,EAAAhW,EAAAL,QAAA2T,EAAAnY,KAAA8tC,cAEAG,EAAAjuC,KAAA2tC,SAAAxoB,UAAA4D,EAAAnX,OAAA,IACAkJ,EAAAjW,EAAAL,QAAA4T,EAAA61B,GAOA,OALAxvC,EAAAoB,EAAA8C,IAAAmY,EAAA5Y,GAAArC,EAAA8C,IAAAkY,EAAA3Y,IACA,IACAlC,KAAA+tC,OAAAluC,EAAAkD,IAAA/C,KAAA+tC,QACAtvC,MAEAA,GAIA+tC,EAAAluC,UAAAgwC,QAAA,SAAAC,EAAA3wC,GAEA,IAAAua,EAAAtT,EAAAd,WACAqU,EAAAvT,EAAAd,WAIA,OAHA/D,KAAA4tC,SAAAtkC,aAAA6O,EAAAva,GACAoC,KAAA6tC,SAAAvkC,aAAA8O,EAAAxa,GAEAoC,KAAAqL,QACA,KAxGA,EAyGA,GAAAkjC,EAAA,CACA,IAAAC,EAAA7qC,EAAAiB,SAAAuT,EAAAnT,EAAAhF,KAAA+tC,QACAU,EAAA9qC,EAAAiB,SAAAwT,EAAApT,EAAAnF,EAAAkD,IAAA/C,KAAA+tC,SAEA/tC,KAAA0R,OAAA1R,KAAA0tC,SAAA7jB,WAAA2kB,GACAxuC,KAAA4R,OAAA5R,KAAA2tC,SAAA9jB,WAAA4kB,GAGA,IAAAT,EAAAhuC,KAAA0tC,SAAAvoB,UAAAnlB,KAAA0R,QACAu8B,EAAAjuC,KAAA2tC,SAAAxoB,UAAAnlB,KAAA4R,QAEAiJ,EAAAhW,EAAAL,QAAA2T,EAAA61B,GACAlzB,EAAAjW,EAAAL,QAAA4T,EAAA61B,GAGA,OADApuC,EAAA8C,IAAAmY,EAAA9a,KAAA+tC,QAAAluC,EAAA8C,IAAAkY,EAAA7a,KAAA+tC,QAIA,KA1HA,EA2HA,IAAA7rC,EAAAyB,EAAAa,QAAA2T,EAAAnT,EAAAhF,KAAA+tC,QACAlzB,EAAAhW,EAAAL,QAAA2T,EAAAnY,KAAA8tC,cAEA,GAAAS,EAAA,CACAE,EAAA9qC,EAAAiB,SAAAwT,EAAApT,EAAAnF,EAAAkD,IAAAb,IAEAlC,KAAA0R,QAAA,EACA1R,KAAA4R,OAAA5R,KAAA2tC,SAAA9jB,WAAA4kB,GAGAR,EAAAjuC,KAAA2tC,SAAAxoB,UAAAnlB,KAAA4R,QACAkJ,EAAAjW,EAAAL,QAAA4T,EAAA61B,GAGA,OADApuC,EAAA8C,IAAAmY,EAAA5Y,GAAArC,EAAA8C,IAAAkY,EAAA3Y,GAIA,KA3IA,EA4IAA,EAAAyB,EAAAa,QAAA4T,EAAApT,EAAAhF,KAAA+tC,QACAjzB,EAAAjW,EAAAL,QAAA4T,EAAApY,KAAA8tC,cAEA,GAAAS,EAAA,CACAC,EAAA7qC,EAAAiB,SAAAuT,EAAAnT,EAAAnF,EAAAkD,IAAAb,IAEAlC,KAAA4R,QAAA,EACA5R,KAAA0R,OAAA1R,KAAA0tC,SAAA7jB,WAAA2kB,GAGAR,EAAAhuC,KAAA0tC,SAAAvoB,UAAAnlB,KAAA0R,QACAmJ,EAAAhW,EAAAL,QAAA2T,EAAA61B,GAGA,OADAnuC,EAAA8C,IAAAkY,EAAA3Y,GAAArC,EAAA8C,IAAAmY,EAAA5Y,GAIA,QAMA,OALAtC,GAAAE,EAAAb,QAAA,GACAsvC,IACAvuC,KAAA0R,QAAA,EACA1R,KAAA4R,QAAA,GAEA,IAIA46B,EAAAluC,UAAAuuC,kBAAA,SAAAjvC,GACA,OAAAoC,KAAAsuC,SAAA,EAAA1wC,IAGA4uC,EAAAluC,UAAA4Z,SAAA,SAAAta,GACA,OAAAoC,KAAAsuC,SAAA,EAAA1wC,qBCvdAnB,EAAAD,QAAAkyC,EAEapyC,EAAQ,GAArB,IACAs4B,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnB2L,EAAW3L,EAAQ,GACnB6L,EAAY7L,EAAQ,GACpBsN,EAAYtN,EAAQ,IACpBqH,EAAUrH,EAAQ,GAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBqyC,EAAA,EAKAD,EAAA9pB,KAAA,iBAEA8pB,EAAA/pB,OAAA/Z,EACA8jC,EAAApwC,UAAAN,EAAA0wC,EAAA/pB,OAAArmB,WA+BA,IAAAswC,EAAA,CACAC,WAAA,EACAC,WAAA,EACAC,eAAA,EACAC,WAAA,EACAC,aAAA,EACAC,aAAA,EACAjjC,QAAA,GAeA,SAAAyiC,EAAAxjC,EAAAC,EAAAC,EAAA+jC,GACA,KAAAnvC,gBAAA0uC,GACA,WAAAA,EAAAxjC,EAAAC,EAAAC,EAAA+jC,GAGAjkC,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAqjC,EAAA9pB,KAEA5kB,KAAAovC,eAAAD,EAAAhkC,EAAAkxB,cAAA8S,GAAAjkC,EAAAmkC,cAAAxvC,EAAAI,OACAD,KAAAsvC,eAAAH,EAAA/jC,EAAAixB,cAAA8S,GAAAjkC,EAAAqkC,cAAA1vC,EAAAI,OACAD,KAAAwvC,iBAAA7wC,EAAAG,SAAAoM,EAAAukC,gBAAAvkC,EAAAukC,eAAArkC,EAAAlH,WAAAiH,EAAAjH,WAEAlE,KAAA0vC,UAAAznC,IACAjI,KAAA2vC,eAAA,EAEA3vC,KAAA4vC,aAAA1kC,EAAA2jC,WACA7uC,KAAA6vC,aAAA3kC,EAAA4jC,WACA9uC,KAAA8vC,iBAAA5kC,EAAA6jC,eACA/uC,KAAA+vC,aAAA7kC,EAAA8jC,WACAhvC,KAAAgwC,cAAA9kC,EAAA+jC,YACAjvC,KAAAiwC,cAAA/kC,EAAAgkC,YAGAlvC,KAAAkwC,KACAlwC,KAAAmwC,KACAnwC,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QAEAzwC,KAAAq2B,OAAA,IAAAzsB,EAEA5J,KAAA0wC,YACA1wC,KAAA2wC,aAAAhC,EAmBAD,EAAApwC,UAAAsyC,gBAAA,WACA,OAAA5wC,KAAAovC,gBAMAV,EAAApwC,UAAAuyC,gBAAA,WACA,OAAA7wC,KAAAsvC,gBAMAZ,EAAApwC,UAAAwyC,kBAAA,WACA,OAAA9wC,KAAAwvC,kBAMAd,EAAApwC,UAAAyyC,cAAA,WACA,IAAAC,EAAAhxC,KAAAsL,QAEA,OADAtL,KAAAuL,QACA4K,QAAApV,EAAAiwC,EAAA76B,QAAApV,EAAAf,KAAAwvC,kBAMAd,EAAApwC,UAAA2yC,cAAA,WACA,IAAAD,EAAAhxC,KAAAsL,QAEA,OADAtL,KAAAuL,QACAorB,kBAAAqa,EAAAra,mBAMA+X,EAAApwC,UAAA4yC,eAAA,WACA,OAAAlxC,KAAAiwC,eAMAvB,EAAApwC,UAAA4wC,YAAA,SAAA5iC,GACAtM,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAiwC,cAAA3jC,GAMAoiC,EAAApwC,UAAA6yC,eAAA,SAAAjkC,GACA,OAAAA,EAAAlN,KAAA2vC,gBAMAjB,EAAApwC,UAAA8yC,cAAA,SAAAp5B,GACAhY,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAA+vC,aAAA/3B,GAMA02B,EAAApwC,UAAA+yC,cAAA,WACA,OAAArxC,KAAA+vC,cAMArB,EAAApwC,UAAAgzC,kBAAA,SAAAjW,GACAr7B,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAA8vC,iBAAAzU,GAMAqT,EAAApwC,UAAAizC,eAAA,WACA,OAAAvxC,KAAAgwC,eAMAtB,EAAApwC,UAAA2wC,YAAA,SAAA3iC,GACAA,GAAAtM,KAAAgwC,gBACAhwC,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAgwC,cAAA1jC,EACAtM,KAAA0vC,UAAAxnC,EAAA,IAOAwmC,EAAApwC,UAAAkzC,cAAA,WACA,OAAAxxC,KAAA4vC,cAMAlB,EAAApwC,UAAAmzC,cAAA,WACA,OAAAzxC,KAAA6vC,cAMAnB,EAAApwC,UAAAozC,UAAA,SAAAvuC,EAAAD,GAGAC,GAAAnD,KAAA4vC,cAAA1sC,GAAAlD,KAAA6vC,eACA7vC,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAA0vC,UAAAxnC,EAAA,EACAlI,KAAA4vC,aAAAzsC,EACAnD,KAAA6vC,aAAA3sC,IAIAwrC,EAAApwC,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGAV,EAAApwC,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAMAZ,EAAApwC,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAAO,IAAAJ,KAAA0vC,UAAA3wC,EAAAiB,KAAA0vC,UAAA3vC,GAAA6B,IAAAsL,IAOAwhC,EAAApwC,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAA0vC,UAAAxnC,GAGAwmC,EAAApwC,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAAoE,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAuZ,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEAxa,KAAAkwC,KAAAvsC,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACApwC,KAAAmwC,KAAAxsC,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBAWA,IAAAp2B,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAEA/a,EAAAxb,EAAAE,IAAA,EAwBA,GAtBApa,KAAAq2B,OAAAjuB,GAAArJ,EAAAkb,EAAAE,EAAAna,KAAAkwC,KAAAnwC,EAAAC,KAAAkwC,KAAAnwC,EAAAma,EAAAla,KAAAmwC,KAAApwC,EACAC,KAAAmwC,KAAApwC,EAAAqa,EACApa,KAAAq2B,OAAAhuB,GAAAtJ,GAAAiB,KAAAkwC,KAAAnwC,EAAAC,KAAAkwC,KAAAnxC,EAAAmb,EAAAla,KAAAmwC,KAAApwC,EACAC,KAAAmwC,KAAApxC,EAAAqb,EACApa,KAAAq2B,OAAAxsB,GAAA9K,GAAAiB,KAAAkwC,KAAAnwC,EAAAma,EAAAla,KAAAmwC,KAAApwC,EAAAqa,EACApa,KAAAq2B,OAAAjuB,GAAArI,EAAAC,KAAAq2B,OAAAhuB,GAAAtJ,EACAiB,KAAAq2B,OAAAhuB,GAAAtI,EAAAka,EAAAE,EAAAna,KAAAkwC,KAAAnxC,EAAAiB,KAAAkwC,KAAAnxC,EAAAmb,EAAAla,KAAAmwC,KAAApxC,EACAiB,KAAAmwC,KAAApxC,EAAAqb,EACApa,KAAAq2B,OAAAxsB,GAAA9J,EAAAC,KAAAkwC,KAAAnxC,EAAAmb,EAAAla,KAAAmwC,KAAApxC,EAAAqb,EACApa,KAAAq2B,OAAAjuB,GAAAF,EAAAlI,KAAAq2B,OAAAxsB,GAAA9K,EACAiB,KAAAq2B,OAAAhuB,GAAAH,EAAAlI,KAAAq2B,OAAAxsB,GAAA9J,EACAC,KAAAq2B,OAAAxsB,GAAA3B,EAAAgS,EAAAE,EAEApa,KAAA0wC,YAAAx2B,EAAAE,EACApa,KAAA0wC,YAAA,IACA1wC,KAAA0wC,YAAA,EAAA1wC,KAAA0wC,cAGA,GAAA1wC,KAAAiwC,eAAAva,KACA11B,KAAA2vC,eAAA,GAGA3vC,KAAAgwC,eAAA,GAAAta,EAAA,CACA,IAAAmc,EAAAr3B,EAAAF,EAAAta,KAAAwvC,iBAEA7wC,EAAAqE,IAAAhD,KAAA6vC,aAAA7vC,KAAA4vC,cAAA,EAAAjqC,EAAAO,YACAlG,KAAA2wC,aA/UA,EAiVKkB,GAAA7xC,KAAA4vC,cAnVL,GAoVA5vC,KAAA2wC,eACA3wC,KAAA0vC,UAAAxnC,EAAA,GAEAlI,KAAA2wC,aAvVA,GAyVKkB,GAAA7xC,KAAA6vC,cAxVL,GAyVA7vC,KAAA2wC,eACA3wC,KAAA0vC,UAAAxnC,EAAA,GAEAlI,KAAA2wC,aA5VA,IA+VA3wC,KAAA2wC,aAAAhC,EACA3uC,KAAA0vC,UAAAxnC,EAAA,QAIAlI,KAAA2wC,aAAAhC,EAGA,GAAAphC,EAAAoJ,aAAA,CAEA3W,KAAA0vC,UAAA9tC,IAAA2L,EAAAqJ,SACA5W,KAAA2vC,gBAAApiC,EAAAqJ,QAEA,IAAA4E,EAAA3b,EAAAO,IAAAJ,KAAA0vC,UAAA3wC,EAAAiB,KAAA0vC,UAAA3vC,GAEA+b,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,GAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAAAxb,KAAA2vC,eAAA3vC,KAAA0vC,UAAAxnC,GAEA8T,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,GAAAxb,KAAA2vC,eAAA3vC,KAAA0vC,UAAAxnC,QAGAlI,KAAA0vC,UAAA9uC,UACAZ,KAAA2vC,eAAA,EAGA3vC,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAyyB,EAAApwC,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEAgZ,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAEA/a,EAAAxb,EAAAE,IAAA,EAGA,GAAApa,KAAAiwC,eA5YA,GA4YAjwC,KAAA2wC,cACA,GAAAjb,EAAA,CACA,IAAAoc,EAAA71B,EAAAF,EAAA/b,KAAA+vC,aACAx0B,GAAAvb,KAAA0wC,YAAAoB,EACAC,EAAA/xC,KAAA2vC,eACAqC,EAAAzkC,EAAA0kC,GAAAjyC,KAAA8vC,iBACA9vC,KAAA2vC,eAAAhxC,EAAAe,MAAAM,KAAA2vC,eAAAp0B,GACAy2B,KAGAj2B,GAAA7B,GAFAqB,EAAAvb,KAAA2vC,eAAAoC,GAGA91B,GAAA7B,EAAAmB,EAIA,GAAAvb,KAAAgwC,eAAAhwC,KAAA2wC,cAAAhC,GACA,GAAAjZ,EAAA,CACA,IAAAwc,EAAAryC,EAAAI,OACAiyC,EAAA5wC,WAAA,EAAA0a,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,OACA+B,EAAAzwC,WAAA,EAAAqa,EAAA,EAAAjc,EAAA+C,MAAAmZ,EAAA/b,KAAAkwC,OACA,IAAAiC,EAAAl2B,EAAAF,EACA+1B,EAAA7pC,EAAAiqC,EAAAnzC,EAAAmzC,EAAAnyC,EAAAoyC,GAEA52B,EAAAtT,EAAAlF,IAAA/C,KAAAq2B,OAAAvsB,QAAAgoC,IAEA,GAraA,GAqaA9xC,KAAA2wC,aACA3wC,KAAA0vC,UAAAtuC,IAAAma,QAEK,GA1aL,GA0aKvb,KAAA2wC,aAAA,CAGL,GAFA3wC,KAAA0vC,UAAAxnC,EAAAqT,EAAArT,EAEA,GACA,IAAAkqC,EAAAvyC,EAAAiD,SAAA,EAAAovC,EAAAlyC,KAAA0vC,UAAAxnC,EAAArI,EAAAO,IAAAJ,KAAAq2B,OAAAxsB,GAAA9K,EAAAiB,KAAAq2B,OAAAxsB,GAAA9J,IACAsyC,EAAAryC,KAAAq2B,OAAAtsB,QAAAqoC,GACA72B,EAAAxc,EAAAszC,EAAAtzC,EACAwc,EAAAxb,EAAAsyC,EAAAtyC,EACAwb,EAAArT,GAAAlI,KAAA0vC,UAAAxnC,EACAlI,KAAA0vC,UAAA3wC,GAAAszC,EAAAtzC,EACAiB,KAAA0vC,UAAA3vC,GAAAsyC,EAAAtyC,EACAC,KAAA0vC,UAAAxnC,EAAA,OAGAlI,KAAA0vC,UAAAtuC,IAAAma,QAGK,GA1bL,GA0bKvb,KAAA2wC,aAAA,CAGL,GAFA3wC,KAAA0vC,UAAAxnC,EAAAqT,EAAArT,EAEA,GACAkqC,EAAAvyC,EAAAiD,SAAA,EAAAovC,EAAAlyC,KAAA0vC,UAAAxnC,EAAArI,EAAAO,IAAAJ,KAAAq2B,OAAAxsB,GAAA9K,EAAAiB,KAAAq2B,OAAAxsB,GAAA9J,IACAsyC,EAAAryC,KAAAq2B,OAAAtsB,QAAAqoC,GACA72B,EAAAxc,EAAAszC,EAAAtzC,EACAwc,EAAAxb,EAAAsyC,EAAAtyC,EACAwb,EAAArT,GAAAlI,KAAA0vC,UAAAxnC,EACAlI,KAAA0vC,UAAA3wC,GAAAszC,EAAAtzC,EACAiB,KAAA0vC,UAAA3vC,GAAAsyC,EAAAtyC,EACAC,KAAA0vC,UAAAxnC,EAAA,OAGAlI,KAAA0vC,UAAAtuC,IAAAma,GAIA,IAAAC,EAAA3b,EAAAO,IAAAmb,EAAAxc,EAAAwc,EAAAxb,GAEA+b,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,GAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAAAD,EAAArT,GAEA8T,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,GAAAD,EAAArT,OAEG,EAEH4pC,EAAAjyC,EAAAI,QACAqB,WAAA,EAAA0a,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,OACA2B,EAAArwC,WAAA,EAAAqa,EAAA,EAAAjc,EAAA+C,MAAAmZ,EAAA/b,KAAAkwC,OACA30B,EAAAvb,KAAAq2B,OAAAtsB,QAAAlK,EAAAkD,IAAA+uC,IAEA9xC,KAAA0vC,UAAA3wC,GAAAwc,EAAAxc,EACAiB,KAAA0vC,UAAA3vC,GAAAwb,EAAAxb,EAEA+b,EAAApa,OAAAuY,EAAAsB,GACAQ,GAAA7B,EAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA30B,GAEAS,EAAAza,OAAA4Y,EAAAoB,GACAU,GAAA7B,EAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA50B,GAGAvb,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAyyB,EAAApwC,UAAAmP,yBAAA,SAAAF,GACA,IASA+kC,EATAj4B,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACAwZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EAEA4wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEA+3B,EAAA,EAGA7c,EAAA11B,KAAAwwC,QAAAxwC,KAAAywC,SAAA,EAGA,GAAAzwC,KAAAgwC,eAAAhwC,KAAA2wC,cAAAhC,GACA,GAAAjZ,EAAA,CACA,IAAA9xB,EAAA4W,EAAAF,EAAAta,KAAAwvC,iBACAgD,EAAA,EAEA,GA9fA,GA8fAxyC,KAAA2wC,aAAA,CAEA,IAAAx1B,EAAAxc,EAAAe,MAAAkE,EAAA5D,KAAA4vC,cACAjqC,EAAAgB,qBAAAhB,EAAAgB,sBACA6rC,GAAAxyC,KAAA0wC,YAAAv1B,EACAo3B,EAAA5zC,EAAAqE,IAAAmY,QAEK,GAvgBL,GAugBKnb,KAAA2wC,aAAA,CAEL4B,IADAp3B,EAAAvX,EAAA5D,KAAA4vC,cAIAz0B,EAAAxc,EAAAe,MAAAyb,EAAAxV,EAAAO,aAAAP,EAAAgB,qBACA,GACA6rC,GAAAxyC,KAAA0wC,YAAAv1B,OAEK,GA/gBL,GA+gBKnb,KAAA2wC,aAAA,CAEL4B,EADAp3B,EAAAvX,EAAA5D,KAAA6vC,aAIA10B,EAAAxc,EAAAe,MAAAyb,EAAAxV,EAAAO,YAAA,EACAP,EAAAgB,sBACA6rC,GAAAxyC,KAAA0wC,YAAAv1B,EAGAb,GAAAta,KAAAwwC,QAAAgC,EACAh4B,GAAAxa,KAAAywC,QAAA+B,EAKAb,EAAA9wC,IAAAyZ,GACAs3B,EAAA/wC,IAAA2Z,GACA,IAAA5F,EAAAjR,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACAv7B,EAAAlR,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,kBAEAl1B,EAAAtb,EAAAI,QACAqB,WAAA,EAAAiZ,EAAA,EAAA1F,GACAsG,EAAA1Z,WAAA,EAAA4Y,EAAA,EAAAzF,GACA09B,EAAAn3B,EAAAtZ,SAEA,IAAAoY,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAEAn1B,EAAA,IAAAnT,EACAmT,EAAAlT,GAAArJ,EAAAkb,EAAAE,EAAAD,EAAAtF,EAAA7U,EAAA6U,EAAA7U,EAAAqa,EAAAvF,EAAA9U,EAAA8U,EAAA9U,EACAub,EAAAlT,GAAArI,GAAAma,EAAAtF,EAAA7V,EAAA6V,EAAA7U,EAAAqa,EAAAvF,EAAA9V,EAAA8V,EAAA9U,EACAub,EAAAjT,GAAAtJ,EAAAuc,EAAAlT,GAAArI,EACAub,EAAAjT,GAAAtI,EAAAka,EAAAE,EAAAD,EAAAtF,EAAA7V,EAAA6V,EAAA7V,EAAAqb,EAAAvF,EAAA9V,EAAA8V,EAAA9V,EAEA,IAAAwc,EAAA1b,EAAAkD,IAAAuY,EAAA7S,MAAA0S,IAcA,OAZAd,EAAA3Y,OAAAuY,EAAAsB,GACAjB,GAAAJ,EAAAra,EAAA+C,MAAAgS,EAAA2G,GAEAhB,EAAAhZ,OAAA4Y,EAAAoB,GACAf,GAAAJ,EAAAva,EAAA+C,MAAAiS,EAAA0G,GAGAvb,KAAAsL,QAAAuO,WAAA9c,EAAA8D,IAAAwZ,GACAra,KAAAsL,QAAAuO,WAAA9Y,EAAAuZ,EACAta,KAAAuL,QAAAsO,WAAA9c,EAAA8D,IAAA0Z,GACAva,KAAAuL,QAAAsO,WAAA9Y,EAAAyZ,EAEA83B,GAAA3sC,EAAAK,YACAusC,GAAA5sC,EAAAO,8BCzlBAzJ,EAAAD,QAAAi2C,EAEan2C,EAAQ,GAArB,IACAs4B,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnB2L,EAAW3L,EAAQ,GACnB6L,EAAY7L,EAAQ,GACpBsN,EAAYtN,EAAQ,IACpBqH,EAAUrH,EAAQ,GAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBqyC,EAAA,EAKA8D,EAAA7tB,KAAA,kBAEA6tB,EAAA9tB,OAAA/Z,EACA6nC,EAAAn0C,UAAAN,EAAAy0C,EAAA9tB,OAAArmB,WA4BA,IAAAswC,EAAA,CACAK,aAAA,EACAyD,iBAAA,EACAC,iBAAA,EACAzD,aAAA,EACA0D,cAAA,EACA5D,WAAA,EACA/iC,QAAA,GAaA,SAAAwmC,EAAAvnC,EAAAC,EAAAC,EAAA+jC,EAAA0D,GACA,KAAA7yC,gBAAAyyC,GACA,WAAAA,EAAAvnC,EAAAC,EAAAC,EAAA+jC,EAAA0D,GAGA3nC,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAonC,EAAA7tB,KAEA5kB,KAAAovC,eAAAD,EAAAhkC,EAAAkxB,cAAA8S,GAAAjkC,EAAAmkC,cAAAxvC,EAAAI,OACAD,KAAAsvC,eAAAH,EAAA/jC,EAAAixB,cAAA8S,GAAAjkC,EAAAqkC,cAAA1vC,EAAAI,OACAD,KAAA8yC,cAAAD,EAAA1nC,EAAAmxB,eAAAuW,GAAA3nC,EAAA6nC,YAAAlzC,EAAAO,IAAA,KACAJ,KAAA8yC,cAAA9wC,YACAhC,KAAAgzC,cAAAnzC,EAAA+C,MAAA,EAAA5C,KAAA8yC,eACA9yC,KAAAwvC,iBAAA7wC,EAAAG,SAAAoM,EAAAukC,gBAAAvkC,EAAAukC,eAAArkC,EAAAlH,WAAAiH,EAAAjH,WAEAlE,KAAA0vC,UAAAznC,IACAjI,KAAA0wC,YAAA,EACA1wC,KAAA2vC,eAAA,EAEA3vC,KAAAizC,mBAAA/nC,EAAAwnC,iBACA1yC,KAAAkzC,mBAAAhoC,EAAAynC,iBACA3yC,KAAAmzC,gBAAAjoC,EAAA0nC,cACA5yC,KAAA+vC,aAAA7kC,EAAA8jC,WACAhvC,KAAAgwC,cAAA9kC,EAAA+jC,YACAjvC,KAAAiwC,cAAA/kC,EAAAgkC,YACAlvC,KAAA2wC,aAAAhC,EAEA3uC,KAAA+tC,OAAAluC,EAAAI,OACAD,KAAAozC,OAAAvzC,EAAAI,OAGAD,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QACAzwC,KAAA+tC,OAAA/tC,KAAAozC,OACApzC,KAAAqzC,KAAArzC,KAAAszC,KACAtzC,KAAAuzC,KAAAvzC,KAAAwzC,KACAxzC,KAAAyzC,IAAA,IAAA7pC,EACA5J,KAAA0wC,YA+EA+B,EAAAn0C,UAAAsyC,gBAAA,WACA,OAAA5wC,KAAAovC,gBAMAqD,EAAAn0C,UAAAuyC,gBAAA,WACA,OAAA7wC,KAAAsvC,gBAMAmD,EAAAn0C,UAAAo1C,cAAA,WACA,OAAA1zC,KAAA8yC,eAMAL,EAAAn0C,UAAAwyC,kBAAA,WACA,OAAA9wC,KAAAwvC,kBAMAiD,EAAAn0C,UAAAq1C,oBAAA,WACA,IAAAxoB,EAAAnrB,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,gBACAhkB,EAAAprB,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,gBACAtyC,EAAA6C,EAAA8B,IAAAypB,EAAAD,GACA0nB,EAAA7yC,KAAAsL,QAAA6wB,eAAAn8B,KAAA8yC,eAGA,OADAjzC,EAAA8C,IAAA3F,EAAA61C,IAOAJ,EAAAn0C,UAAA2yC,cAAA,WACA,IAAAD,EAAAhxC,KAAAsL,QACAsoC,EAAA5zC,KAAAuL,QAEAqJ,EAAAjR,EAAAa,QAAAwsC,EAAAza,KAAAvxB,EAAAnF,EAAA8B,IAAA3B,KAAAovC,eAAA4B,EAAA76B,QAAAnN,cACA6L,EAAAlR,EAAAa,QAAAovC,EAAArd,KAAAvxB,EAAAnF,EAAA8B,IAAA3B,KAAAsvC,eAAAsE,EAAAz9B,QAAAnN,cACA0H,EAAA7Q,EAAAuB,IAAA4vC,EAAA76B,QAAApZ,EAAA6X,GACAjE,EAAA9Q,EAAAuB,IAAAwyC,EAAAz9B,QAAApZ,EAAA8X,GACA7X,EAAA6C,EAAA8B,IAAAgP,EAAAD,GACAmiC,EAAAlvC,EAAAa,QAAAwsC,EAAAza,KAAAvxB,EAAAhF,KAAA8yC,eAEAh3B,EAAAk1B,EAAAta,iBACA1a,EAAA43B,EAAAld,iBACA3a,EAAAi1B,EAAAra,kBACA1a,EAAA23B,EAAAjd,kBAIA,OAFA92B,EAAA8C,IAAA3F,EAAA6C,EAAA+C,MAAAmZ,EAAA82B,IACAhzC,EAAA8C,IAAAkwC,EAAAhzC,EAAA8B,IAAA9B,EAAAgD,SAAAmZ,EAAAC,EAAApH,GAAAhV,EAAAgD,SAAAiZ,EAAAC,EAAAnH,MAOA69B,EAAAn0C,UAAAizC,eAAA,WACA,OAAAvxC,KAAAgwC,eAMAyC,EAAAn0C,UAAA2wC,YAAA,SAAA3iC,GACAA,GAAAtM,KAAAgwC,gBACAhwC,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAgwC,cAAA1jC,EACAtM,KAAA0vC,UAAAxnC,EAAA,IAOAuqC,EAAAn0C,UAAAkzC,cAAA,WACA,OAAAxxC,KAAAizC,oBAMAR,EAAAn0C,UAAAmzC,cAAA,WACA,OAAAzxC,KAAAkzC,oBAMAT,EAAAn0C,UAAAozC,UAAA,SAAAvuC,EAAAD,GAEAC,GAAAnD,KAAAizC,oBAAA/vC,GAAAlD,KAAAkzC,qBACAlzC,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAizC,mBAAA9vC,EACAnD,KAAAkzC,mBAAAhwC,EACAlD,KAAA0vC,UAAAxnC,EAAA,IAOAuqC,EAAAn0C,UAAA4yC,eAAA,WACA,OAAAlxC,KAAAiwC,eAMAwC,EAAAn0C,UAAA4wC,YAAA,SAAA5iC,GACAtM,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAiwC,cAAA3jC,GAMAmmC,EAAAn0C,UAAA8yC,cAAA,SAAAp5B,GACAhY,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAA+vC,aAAA/3B,GAMAy6B,EAAAn0C,UAAAu1C,iBAAA,SAAA5Y,GACAj7B,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAmzC,gBAAAlY,GAMAwX,EAAAn0C,UAAA+yC,cAAA,WACA,OAAArxC,KAAA+vC,cAMA0C,EAAAn0C,UAAAw1C,cAAA,SAAA5mC,GACA,OAAAA,EAAAlN,KAAA2vC,gBAGA8C,EAAAn0C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGAqD,EAAAn0C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGAmD,EAAAn0C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAAiD,QAAA9C,KAAA0vC,UAAA3wC,EAAAiB,KAAAozC,OAAApzC,KAAA2vC,eAAA3vC,KAAA0vC,UAAAxnC,EAAAlI,KAAA+tC,QAAAnsC,IAAAsL,IAGAulC,EAAAn0C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAA0vC,UAAA3vC,GAGA0yC,EAAAn0C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAAmE,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAsZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAGA5F,EAAAjR,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACAv7B,EAAAlR,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBACArzC,EAAA6C,EAAAI,OACAjD,EAAAsE,WAAA,EAAAiZ,EAAA,EAAA1F,GACA7X,EAAAyE,WAAA,EAAA4Y,EAAA,EAAAzF,GAEA,IAAAqF,EAAAja,KAAAswC,WAAAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QAAAp2B,EAAApa,KAAAywC,QAIAzwC,KAAA+tC,OAAApqC,EAAAa,QAAAmtC,EAAA3xC,KAAA8yC,eACA9yC,KAAAuzC,KAAA1zC,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA4X,GAAA5U,KAAA+tC,QACA/tC,KAAAwzC,KAAA3zC,EAAA+C,MAAAiS,EAAA7U,KAAA+tC,QAEA/tC,KAAA0wC,YAAAz2B,EAAAE,EAAAD,EAAAla,KAAAuzC,KAAAvzC,KAAAuzC,KAAAn5B,EAAApa,KAAAwzC,KACAxzC,KAAAwzC,KACAxzC,KAAA0wC,YAAA,IACA1wC,KAAA0wC,YAAA,EAAA1wC,KAAA0wC,aAMA1wC,KAAAozC,OAAAzvC,EAAAa,QAAAmtC,EAAA3xC,KAAAgzC,eAEAhzC,KAAAqzC,KAAAxzC,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA4X,GAAA5U,KAAAozC,QACApzC,KAAAszC,KAAAzzC,EAAA+C,MAAAiS,EAAA7U,KAAAozC,QAEAvzC,EAAA+C,MAAAgS,EAAA5U,KAAAozC,QAAA,IAEAr2B,EAAA9C,EAAAE,EAAAD,EAAAla,KAAAqzC,KAAArzC,KAAAqzC,KAAAj5B,EAAApa,KAAAszC,KAAAtzC,KAAAszC,KACAr2B,EAAA/C,EAAAla,KAAAqzC,KAAAj5B,EAAApa,KAAAszC,KACAS,EAAA75B,EAAAla,KAAAqzC,KAAArzC,KAAAuzC,KAAAn5B,EAAApa,KAAAszC,KAAAtzC,KAAAwzC,KACAx2B,EAAA9C,EAAAE,EACA,GAAA4C,IAEAA,EAAA,GAEA,IAAAg3B,EAAA95B,EAAAla,KAAAuzC,KAAAn5B,EAAApa,KAAAwzC,KACAS,EAAAh6B,EAAAE,EAAAD,EAAAla,KAAAuzC,KAAAvzC,KAAAuzC,KAAAn5B,EAAApa,KAAAwzC,KAAAxzC,KAAAwzC,KAQA,GANAxzC,KAAAyzC,IAAArrC,GAAAvH,IAAAkc,EAAAE,EAAA82B,GACA/zC,KAAAyzC,IAAAprC,GAAAxH,IAAAoc,EAAAD,EAAAg3B,GACAh0C,KAAAyzC,IAAA5pC,GAAAhJ,IAAAkzC,EAAAC,EAAAC,GAIAj0C,KAAAgwC,cAAA,CAEA,IAAAkE,EAAAr0C,EAAA8C,IAAA3C,KAAA+tC,OAAA/wC,GACA2B,EAAAqE,IAAAhD,KAAAkzC,mBAAAlzC,KAAAizC,oBAAA,EAAAttC,EAAAK,WACAhG,KAAA2wC,aAxaA,EA0aKuD,GAAAl0C,KAAAizC,mBA5aL,GA6aAjzC,KAAA2wC,eACA3wC,KAAA2wC,aA9aA,EA+aA3wC,KAAA0vC,UAAAxnC,EAAA,GAGKgsC,GAAAl0C,KAAAkzC,mBAjbL,GAkbAlzC,KAAA2wC,eACA3wC,KAAA2wC,aAnbA,EAobA3wC,KAAA0vC,UAAAxnC,EAAA,IAIAlI,KAAA2wC,aAAAhC,EACA3uC,KAAA0vC,UAAAxnC,EAAA,QAIAlI,KAAA2wC,aAAAhC,EACA3uC,KAAA0vC,UAAAxnC,EAAA,EAOA,GAJA,GAAAlI,KAAAiwC,gBACAjwC,KAAA2vC,eAAA,GAGApiC,EAAAoJ,aAAA,CAEA3W,KAAA0vC,UAAA9tC,IAAA2L,EAAAqJ,SACA5W,KAAA2vC,gBAAApiC,EAAAqJ,QAEA,IAAA4E,EAAA3b,EAAAiD,QAAA9C,KAAA0vC,UAAA3wC,EAAAiB,KAAAozC,OAAApzC,KAAA2vC,eACA3vC,KAAA0vC,UAAAxnC,EAAAlI,KAAA+tC,QACAoG,EAAAn0C,KAAA0vC,UAAA3wC,EAAAiB,KAAAqzC,KAAArzC,KAAA0vC,UAAA3vC,GACAC,KAAA2vC,eAAA3vC,KAAA0vC,UAAAxnC,GAAAlI,KAAAuzC,KACAa,EAAAp0C,KAAA0vC,UAAA3wC,EAAAiB,KAAAszC,KAAAtzC,KAAA0vC,UAAA3vC,GACAC,KAAA2vC,eAAA3vC,KAAA0vC,UAAAxnC,GAAAlI,KAAAwzC,KAEA13B,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAi6B,EAEAn4B,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,EAAAg6B,OAEAp0C,KAAA0vC,UAAA9uC,UACAZ,KAAA2vC,eAAA,EAGA3vC,KAAAsL,QAAAsO,WAAAtZ,EAAAO,IAAAib,GACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAAO,IAAAmb,GACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAw2B,EAAAn0C,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEAgZ,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAGA,GAAAzwC,KAAAiwC,eA5eA,GA4eAjwC,KAAA2wC,aAAA,CACA,IAAAmB,EAAAjyC,EAAA8C,IAAA3C,KAAA+tC,OAAAluC,EAAA8B,IAAAqa,EAAAF,IAAA9b,KAAAwzC,KAAAv3B,EACAjc,KAAAuzC,KAAAx3B,EACAR,EAAAvb,KAAA0wC,aAAA1wC,KAAA+vC,aAAA+B,GACAC,EAAA/xC,KAAA2vC,eACAqC,EAAAzkC,EAAA0kC,GAAAjyC,KAAAmzC,gBACAnzC,KAAA2vC,eAAAhxC,EAAAe,MAAAM,KAAA2vC,eAAAp0B,GACAy2B,KACAz2B,EAAAvb,KAAA2vC,eAAAoC,EAEA,IAAAv2B,EAAA3b,EAAA+B,IAAA2Z,EAAAvb,KAAA+tC,QACAoG,EAAA54B,EAAAvb,KAAAuzC,KACAa,EAAA74B,EAAAvb,KAAAwzC,KAEA13B,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAi6B,EAEAn4B,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,EAAAg6B,EAGA,IAAAlC,EAAAryC,EAAAI,OAKA,GAJAiyC,EAAAnzC,GAAAc,EAAA8C,IAAA3C,KAAAozC,OAAAp3B,GAAAhc,KAAAszC,KAAAr3B,EACAi2B,EAAAnzC,GAAAc,EAAA8C,IAAA3C,KAAAozC,OAAAt3B,GAAA9b,KAAAqzC,KAAAt3B,EACAm2B,EAAAnyC,EAAAkc,EAAAF,EAEA/b,KAAAgwC,eAAAhwC,KAAA2wC,cAAAhC,EAAA,CAEA,IAAAwD,EAAA,EACAA,GAAAtyC,EAAA8C,IAAA3C,KAAA+tC,OAAA/xB,GAAAhc,KAAAwzC,KAAAv3B,EACAk2B,GAAAtyC,EAAA8C,IAAA3C,KAAA+tC,OAAAjyB,GAAA9b,KAAAuzC,KAAAx3B,EAEA+1B,EAAA7pC,EAAAiqC,EAAAnzC,EAAAmzC,EAAAnyC,EAAAoyC,GAAA,IAEAkC,EAAApsC,EAAAjI,KAAA0vC,WACA4E,EAAAt0C,KAAAyzC,IAAA3pC,QAAA7B,EAAAlF,IAAA+uC,IACA9xC,KAAA0vC,UAAAtuC,IAAAkzC,GAlhBA,GAohBAt0C,KAAA2wC,aACA3wC,KAAA0vC,UAAAxnC,EAAAvJ,EAAAc,IAAAO,KAAA0vC,UAAAxnC,EAAA,GAphBA,GAqhBKlI,KAAA2wC,eACL3wC,KAAA0vC,UAAAxnC,EAAAvJ,EAAAa,IAAAQ,KAAA0vC,UAAAxnC,EAAA,IAKA,IAAAlH,EAAAnB,EAAAiD,SAAA,EAAAovC,IAAAlyC,KAAA0vC,UAAAxnC,EAAAmsC,EAAAnsC,GAAArI,EAAAO,IAAAJ,KAAAyzC,IAAA5pC,GAAA9K,EAAAiB,KAAAyzC,IAAA5pC,GAAA9J,IACAw0C,EAAA10C,EAAAuB,IAAApB,KAAAyzC,IAAA1pC,QAAA/I,GAAAnB,EAAAO,IAAAi0C,EAAAt1C,EAAAs1C,EAAAt0C,IACAC,KAAA0vC,UAAA3wC,EAAAw1C,EAAAx1C,EACAiB,KAAA0vC,UAAA3vC,EAAAw0C,EAAAx0C,EAEAu0C,EAAArsC,EAAAtG,IAAA3B,KAAA0vC,UAAA2E,GAEA74B,EAAA3b,EAAAiD,QAAAwxC,EAAAv1C,EAAAiB,KAAAozC,OAAAkB,EAAApsC,EAAAlI,KAAA+tC,QACAoG,EAAAG,EAAAv1C,EAAAiB,KAAAqzC,KAAAiB,EAAAv0C,EAAAu0C,EAAApsC,EAAAlI,KAAAuzC,KACAa,EAAAE,EAAAv1C,EAAAiB,KAAAszC,KAAAgB,EAAAv0C,EAAAu0C,EAAApsC,EAAAlI,KAAAwzC,KAEA13B,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAi6B,EAEAn4B,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,EAAAg6B,MACG,CAEHE,EAAAt0C,KAAAyzC,IAAA1pC,QAAAlK,EAAAkD,IAAAmvC,IACAlyC,KAAA0vC,UAAA3wC,GAAAu1C,EAAAv1C,EACAiB,KAAA0vC,UAAA3vC,GAAAu0C,EAAAv0C,EAEAyb,EAAA3b,EAAA+B,IAAA0yC,EAAAv1C,EAAAiB,KAAAozC,QACAe,EAAAG,EAAAv1C,EAAAiB,KAAAqzC,KAAAiB,EAAAv0C,EACAq0C,EAAAE,EAAAv1C,EAAAiB,KAAAszC,KAAAgB,EAAAv0C,EAEA+b,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAi6B,EAEAn4B,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,EAAAg6B,EAGAp0C,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAw2B,EAAAn0C,UAAAmP,yBAAA,SAAAF,GACA,IAAA8M,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACAwZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EAEA4wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEAP,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAGA77B,EAAAjR,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACAv7B,EAAAlR,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBACArzC,EAAA6C,EAAA8B,IAAA9B,EAAAuB,IAAAmZ,EAAA1F,GAAAhV,EAAAuB,IAAAiZ,EAAAzF,IAEAi+B,EAAAlvC,EAAAa,QAAAmtC,EAAA3xC,KAAA8yC,eACA5F,EAAArtC,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA4X,GAAAi+B,GACA1F,EAAAttC,EAAA+C,MAAAiS,EAAAg+B,GACA2B,EAAA7wC,EAAAa,QAAAmtC,EAAA3xC,KAAAgzC,eAEAjG,EAAAltC,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA4X,GAAA4/B,GACA5H,EAAA/sC,EAAA+C,MAAAiS,EAAA2/B,GAEAj5B,EAAAtT,IACAwsC,EAAA50C,EAAAI,OACAw0C,EAAA11C,EAAAc,EAAA8C,IAAA6xC,EAAAx3C,GACAy3C,EAAA10C,EAAAya,EAAAF,EAAAta,KAAAwvC,iBAEA,IAAAkF,EAAA/1C,EAAAqE,IAAAyxC,EAAA11C,GACAwzC,EAAA5zC,EAAAqE,IAAAyxC,EAAA10C,GAEAiG,EAAAL,EAAAK,WACAU,EAAAf,EAAAe,oBAEAuF,GAAA,EACA0oC,EAAA,EACA,GAAA30C,KAAAgwC,cAAA,CAEA,IAAA4E,EAAA/0C,EAAA8C,IAAAkwC,EAAA71C,GACA2B,EAAAqE,IAAAhD,KAAAkzC,mBAAAlzC,KAAAizC,oBAAA,EAAAjtC,GAEA2uC,EAAAh2C,EAAAe,MAAAk1C,GAAAluC,KACAguC,EAAA/1C,EAAAc,IAAAi1C,EAAA/1C,EAAAqE,IAAA4xC,IACA3oC,GAAA,GAEK2oC,GAAA50C,KAAAizC,oBAEL0B,EAAAh2C,EAAAe,MAAAk1C,EAAA50C,KAAAizC,mBAAAjtC,GACAU,EAAA,GACAguC,EAAA/1C,EACAc,IAAAi1C,EAAA10C,KAAAizC,mBAAA2B,GACA3oC,GAAA,GAEK2oC,GAAA50C,KAAAkzC,qBAELyB,EAAAh2C,EAAAe,MAAAk1C,EAAA50C,KAAAkzC,mBAAAltC,EAAA,EACAU,GACAguC,EAAA/1C,EACAc,IAAAi1C,EAAAE,EAAA50C,KAAAkzC,oBACAjnC,GAAA,GAIA,GAAAA,EAAA,CACA,IAAA8Q,EAAA9C,EAAAE,EAAAD,EAAA6yB,IAAA3yB,EAAAwyB,IACA3vB,EAAA/C,EAAA6yB,EAAA3yB,EAAAwyB,EACAmH,EAAA75B,EAAA6yB,EAAAG,EAAA9yB,EAAAwyB,EAAAO,EAEA,IADAnwB,EAAA9C,EAAAE,KAGA4C,EAAA,GAEA,IAAAg3B,EAAA95B,EAAAgzB,EAAA9yB,EAAA+yB,EACA8G,EAAAh6B,EAAAE,EAAAD,EAAAgzB,IAAA9yB,EAAA+yB,KAEA7xB,EAAA,IAAA1R,GACAxB,GAAAvH,IAAAkc,EAAAE,EAAA82B,GACAz4B,EAAAjT,GAAAxH,IAAAoc,EAAAD,EAAAg3B,GACA14B,EAAAzR,GAAAhJ,IAAAkzC,EAAAC,EAAAC,GAEA,IAAA94B,EAAAlT,IACAkT,EAAApc,EAAA01C,EAAA11C,EACAoc,EAAApb,EAAA00C,EAAA10C,EACAob,EAAAjT,EAAAysC,EAEAp5B,EAAAD,EAAAxR,QAAA7B,EAAAlF,IAAAoY,QACG,CACH,IAEA6B,EAKA1B,EAPAyB,EAAA9C,EAAAE,EAAAD,EAAA6yB,IAAA3yB,EAAAwyB,IACA3vB,EAAA/C,EAAA6yB,EAAA3yB,EAAAwyB,EAEA,IADA5vB,EAAA9C,EAAAE,KAEA4C,EAAA,IAGA1B,EAAA,IAAAnT,GACAC,GAAAvH,IAAAkc,EAAAE,GACA3B,EAAAjT,GAAAxH,IAAAoc,EAAAD,GAEA,IAAA63B,EAAAv5B,EAAA7S,MAAA5I,EAAAkD,IAAA0xC,IACAl5B,EAAAxc,EAAA81C,EAAA91C,EACAwc,EAAAxb,EAAA80C,EAAA90C,EACAwb,EAAArT,EAAA,EAGA,IAAAsT,EAAA3b,EAAAiD,QAAAyY,EAAAxc,EAAAy1C,EAAAj5B,EAAArT,EAAA2qC,GACAsB,EAAA54B,EAAAxc,EAAAguC,EAAAxxB,EAAAxb,EAAAwb,EAAArT,EAAAglC,EACAkH,EAAA74B,EAAAxc,EAAA6tC,EAAArxB,EAAAxb,EAAAwb,EAAArT,EAAAilC,EAYA,OAVA9yB,EAAA3Y,OAAAuY,EAAAuB,GACAlB,GAAAJ,EAAAi6B,EACA55B,EAAAhZ,OAAA4Y,EAAAqB,GACAhB,GAAAJ,EAAAg6B,EAEAp0C,KAAAsL,QAAAuO,WAAA9c,EAAAsd,EACAra,KAAAsL,QAAAuO,WAAA9Y,EAAAuZ,EACAta,KAAAuL,QAAAsO,WAAA9c,EAAAwd,EACAva,KAAAuL,QAAAsO,WAAA9Y,EAAAyZ,EAEAk6B,GAAA/uC,EAAAK,YACAusC,GAAA5sC,EAAAO,4BCzuBAzJ,EAAAD,QAAA,kBCAAC,EAAAD,QAAA,SAAAs4C,GACA,QAAAp4C,EAAA,EAAiBA,EAAA0kB,UAAAvf,OAAsBnF,IAAA,CACvC,IAAAwD,EAAAkhB,UAAA1kB,GACA,QAAAuB,KAAAiC,EACAA,EAAA3B,eAAAN,KACA62C,EAAA72C,GAAAiC,EAAAjC,IAIA,OAAA62C;;;;;;;ACFA,IAAAC,EAAA33C,OAAAkB,UACA02C,EAAAD,EAAAx2C,eACA02C,EAAAF,EAAAx0C,SASA20C,EAAA,iBAEAr0B,EAAApkB,EAAAD,QAAA,GAEAqkB,EAAA9f,EAAA8f,EAAAs0B,GAAAt0B,EAAAzK,KAAA,SAAAzY,EAAAyY,GACA,cAAAzY,IAAAyY,GAGAyK,EAAAu0B,QAAA,SAAAz3C,GACA,gBAAAA,GAGAkjB,EAAAw0B,MAAA,SAAA13C,GACA,IACAM,EADAmY,EAAA6+B,EAAAp4C,KAAAc,GAGA,sBAAAyY,GAAA,uBAAAA,GACA,oBAAAA,EACA,WAAAzY,EAAAkE,OAGA,uBAAAuU,EAAA,CACA,IAAAnY,KAAAN,EACA,GAAAq3C,EAAAn4C,KAAAc,EAAAM,GACA,SAGA,SAGA,OAAAN,GAGAkjB,EAAAy0B,MAAA,SAAA33C,EAAAmN,GACA,GAAAnN,IAAAmN,EACA,SAGA,IACA7M,EADAmY,EAAA6+B,EAAAp4C,KAAAc,GAGA,GAAAyY,IAAA6+B,EAAAp4C,KAAAiO,GACA,SAGA,uBAAAsL,EAAA,CACA,IAAAnY,KAAAN,EACA,KAAAkjB,EAAAy0B,MAAA33C,EAAAM,GAAA6M,EAAA7M,UAAA6M,GACA,SAGA,IAAA7M,KAAA6M,EACA,KAAA+V,EAAAy0B,MAAA33C,EAAAM,GAAA6M,EAAA7M,UAAAN,GACA,SAGA,SAGA,sBAAAyY,EAAA,CAEA,IADAnY,EAAAN,EAAAkE,UACAiJ,EAAAjJ,OACA,SAEA,OAAA5D,GACA,IAAA4iB,EAAAy0B,MAAA33C,EAAAM,GAAA6M,EAAA7M,IACA,SAGA,SAGA,4BAAAmY,EACAzY,EAAAW,YAAAwM,EAAAxM,UAGA,kBAAA8X,GACAzY,EAAA43C,YAAAzqC,EAAAyqC,WAMA10B,EAAA20B,SAAA,SAAA73C,EAAA83C,GACA,OAAA93C,aAAA83C,GAGA50B,EAAA60B,IAAA,SAAA/3C,GACA,cAAAA,GAGAkjB,EAAA80B,MAAA,SAAAh4C,GACA,gBAAAA,GAGAkjB,EAAA+0B,MAAA,SAAAj4C,GACA,yBAAAs3C,EAAAp4C,KAAAc,IAGAkjB,EAAAg1B,WAAA,SAAAl4C,GACA,OAAAkjB,EAAA+0B,MAAAj4C,IAAA,IAAAA,EAAAkE,QAGAgf,EAAAi1B,UAAA,SAAAn4C,GACA,QAAAA,IAAAkjB,EAAAk1B,QAAAp4C,IAAAq3C,EAAAn4C,KAAAc,EAAA,WACAmB,SAAAnB,EAAAkE,SAAAgf,EAAAm1B,OAAAr4C,EAAAkE,SAAAlE,EAAAkE,QAAA,GAGAgf,EAAAk1B,QAAA,SAAAp4C,GACA,2BAAAs3C,EAAAp4C,KAAAc,IAGAkjB,EAAAo1B,QAAA,SAAAt4C,GACA,YAAA+mC,IAAA/mC,GAAA,oBAAAu4C,aACAv4C,aAAAu4C,aAAA,IAAAv4C,EAAAw4C,UAGAt1B,EAAAI,GAAA,SAAAtjB,GACA,4BAAAs3C,EAAAp4C,KAAAc,IAGAkjB,EAAAm1B,OAAA,SAAAr4C,GACA,0BAAAs3C,EAAAp4C,KAAAc,IAGAkjB,EAAAu1B,IAAA,SAAAz4C,GACA,OAAAkjB,EAAAm1B,OAAAr4C,UAGAkjB,EAAAziB,OAAA,SAAAT,GACA,0BAAAs3C,EAAAp4C,KAAAc,IAGAkjB,EAAAw1B,KAAA,SAAA14C,GACA,OAAAkjB,EAAAziB,OAAAT,MAAA83C,cAAAr4C,SAAAO,EAAAw4C,WACAx4C,EAAA24C,aAGAz1B,EAAA01B,OAAA,SAAA54C,GACA,0BAAAs3C,EAAAp4C,KAAAc,IAGAkjB,EAAAc,OAAA,SAAAhkB,GACA,0BAAAs3C,EAAAp4C,KAAAc,IAGAkjB,EAAA21B,IAAA,SAAA74C,GACA,OAAAkjB,EAAAc,OAAAhkB,QAAAkE,QAAAqzC,EAAAxyB,KAAA/kB,sBCrKAnB,EAAAi6C,SAAA,GAEAj6C,EAAAmC,KAAerC,EAAQ,GACvBE,EAAAqD,KAAevD,EAAQ,GACvBE,EAAAyL,KAAe3L,EAAQ,GACvBE,EAAA2L,MAAgB7L,EAAQ,GACxBE,EAAAoN,MAAgBtN,EAAQ,IACxBE,EAAAqI,UAAoBvI,EAAQ,GAC5BE,EAAAmH,IAAcrH,EAAQ,GAEtBE,EAAAqS,KAAevS,EAAQ,IAEvBE,EAAAkR,MAAgBpR,EAAQ,IACxBE,EAAAs4B,QAAkBx4B,EAAQ,IAC1BE,EAAAm4B,KAAer4B,EAAQ,IACvBE,EAAAgV,QAAkBlV,EAAQ,IAC1BE,EAAAoO,MAAgBtO,EAAQ,IACxBE,EAAA4kC,MAAgB9kC,EAAQ,IAExBE,EAAAk6C,OAAiBp6C,EAAQ,IACzBE,EAAAm6C,KAAer6C,EAAQ,IACvBE,EAAAo6C,QAAkBt6C,EAAQ,IAC1BE,EAAAq6C,MAAgBv6C,EAAQ,IACxBE,EAAAs6C,IAAcx6C,EAAQ,IAEtBA,EAAQ,IACRA,EAAQ,IACRE,EAAAi6C,SAAAM,gBAAmCz6C,EAAQ,IAC3CA,EAAQ,IACRA,EAAQ,IAERE,EAAAw6C,cAAwB16C,EAAQ,IAChCE,EAAAy6C,cAAwB36C,EAAQ,IAChCE,EAAA06C,UAAoB56C,EAAQ,IAC5BE,EAAA26C,WAAqB76C,EAAQ,IAC7BE,EAAA46C,WAAqB96C,EAAQ,IAC7BE,EAAAi2C,eAAyBn2C,EAAQ,IACjCE,EAAA66C,YAAsB/6C,EAAQ,IAC9BE,EAAAkyC,cAAwBpyC,EAAQ,IAChCE,EAAA86C,UAAoBh7C,EAAQ,IAC5BE,EAAA+6C,UAAoBj7C,EAAQ,IAC5BE,EAAAg7C,WAAqBl7C,EAAQ,IAE7BE,EAAAi6C,SAAA1tC,MAAwBzM,EAAQ,IAChCE,EAAAi6C,SAAA71B,MAAyBtkB,EAAQ,IACjCE,EAAAi6C,SAAArlC,SAA4B9U,EAAQ,IACpCE,EAAAi6C,SAAAplC,SAA4B/U,EAAQ,IACpCE,EAAAi6C,SAAAgB,aAAgCn7C,EAAQ,IACxCE,EAAAi6C,SAAAvP,YAA+B5qC,EAAQ,IACvCE,EAAAi6C,SAAA9wC,SAA4BrJ,EAAQ,oBC3BrBA,EAAQ,GACVA,EAAQ,GAJrB,IAKAqC,EAAWrC,EAAQ,GACnBuS,EAAWvS,EAAQ,IACnB4qC,EAAkB5qC,EAAQ,IAQ1B,SAAA+kC,IACArhC,KAAA03C,OAAA,IAAAxQ,EACAlnC,KAAAy4B,aAAA,EACAz4B,KAAA23C,aAAA,GACA33C,KAAAmkC,cAAAnkC,KAAAmkC,cAAAjmC,KAAA8B,MAVAvD,EAAAD,QAAA6kC,EAgBAA,EAAA/iC,UAAAqO,YAAA,SAAAisB,GACA,OAAA54B,KAAA03C,OAAA/qC,YAAAisB,IAMAyI,EAAA/iC,UAAAyR,YAAA,SAAAo2B,EAAAC,GACA,IAAAwR,EAAA53C,KAAA03C,OAAAlQ,WAAArB,GACA0R,EAAA73C,KAAA03C,OAAAlQ,WAAApB,GACA,OAAAv3B,EAAAkB,YAAA6nC,EAAAC,IAMAxW,EAAA/iC,UAAAkpC,WAAA,SAAA5O,GACA,OAAA54B,KAAA03C,OAAAlQ,WAAA5O,IAMAyI,EAAA/iC,UAAAqmC,cAAA,WACA,OAAA3kC,KAAAy4B,cAMA4I,EAAA/iC,UAAAsmC,cAAA,WACA,OAAA5kC,KAAA03C,OAAAxO,aAMA7H,EAAA/iC,UAAAumC,eAAA,WACA,OAAA7kC,KAAA03C,OAAAzN,iBAMA5I,EAAA/iC,UAAAwmC,eAAA,WACA,OAAA9kC,KAAA03C,OAAAvO,gBAOA9H,EAAA/iC,UAAA8lC,MAAA,SAAA71B,EAAA41B,GACAnkC,KAAA03C,OAAAtT,MAAA71B,EAAA41B,IAkBA9C,EAAA/iC,UAAA2P,QAAA,SAAAE,EAAAy8B,EAAAl6B,EAAAC,EAAAO,GACAlR,KAAA03C,OAAAzpC,QAAAE,EAAAy8B,EAAAl6B,EAAAC,EAAAO,IASAmwB,EAAA/iC,UAAA8O,YAAA,SAAAC,GACArN,KAAA03C,OAAAtqC,YAAAC,IAOAg0B,EAAA/iC,UAAA8hC,YAAA,SAAA7xB,EAAApC,GAEA,IAAAysB,EAAA54B,KAAA03C,OAAAtX,YAAA7xB,EAAApC,GAGA,OAFAnM,KAAAy4B,eACAz4B,KAAA83C,WAAAlf,GACAA,GAMAyI,EAAA/iC,UAAA6hC,aAAA,SAAAvH,GACA54B,KAAA+3C,aAAAnf,GACA54B,KAAAy4B,eACAz4B,KAAA03C,OAAAvX,aAAAvH,IAOAyI,EAAA/iC,UAAAoiC,UAAA,SAAA9H,EAAArqB,EAAAkyB,GAEAzgC,KAAA03C,OAAAhX,UAAA9H,EAAArqB,EAAAkyB,IAEAzgC,KAAA83C,WAAAlf,IAQAyI,EAAA/iC,UAAAo6B,WAAA,SAAAE,GACA54B,KAAA83C,WAAAlf,IAGAyI,EAAA/iC,UAAAw5C,WAAA,SAAAlf,GACA54B,KAAA23C,aAAAp2B,KAAAqX,IAGAyI,EAAA/iC,UAAAy5C,aAAA,SAAAnf,GACA,QAAAl8B,EAAA,EAAiBA,EAAAsD,KAAA23C,aAAA91C,SAA8BnF,EAC/CsD,KAAA23C,aAAAj7C,IAAAk8B,IACA54B,KAAA23C,aAAAj7C,GAAA,OAgBA2kC,EAAA/iC,UAAAynC,YAAA,SAAAiS,GAKA,IAHAh4C,KAAAi4C,WAAAD,EAGAh4C,KAAA23C,aAAA91C,OAAA,GAEA,GADA7B,KAAAk4C,eAAAl4C,KAAA23C,aAAAhN,MACA,OAAA3qC,KAAAk4C,eAAA,CAMA,IAAAC,EAAAn4C,KAAA03C,OAAAlQ,WAAAxnC,KAAAk4C,gBAGAl4C,KAAA03C,OAAAtT,MAAA+T,EAAAn4C,KAAAmkC,iBAOA9C,EAAA/iC,UAAA6lC,cAAA,SAAAvL,GAEA,GAAAA,GAAA54B,KAAAk4C,eACA,SAGA,IAAA/R,EAAAxnC,EAAAa,IAAAo5B,EAAA54B,KAAAk4C,gBACA9R,EAAAznC,EAAAc,IAAAm5B,EAAA54B,KAAAk4C,gBAIAE,EAAAp4C,KAAA03C,OAAA/qC,YAAAw5B,GACAkS,EAAAr4C,KAAA03C,OAAA/qC,YAAAy5B,GAKA,OAFApmC,KAAAi4C,WAAAG,EAAAC,IAEA,oBCpNA57C,EAAAD,QAEA,SAAAwlB,GACA,IAAAs2B,EAAA,GACAC,EAAAv2B,EAAAviB,KAAA+Q,IAEAgoC,EAAAx2B,EAAAhkB,OACAy6C,EAAAz2B,EAAA0lB,SACAgR,EAAA12B,EAAA4lB,QACA+Q,EAAA32B,EAAA42B,QAEAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEAh5C,KAAAP,IAAA,SAAAtB,GACA,uBAAAA,GACAo6C,EAAAp6C,EACA6B,MAEAu4C,GAGAv4C,KAAAy0B,KAAA,WACA,OAAA6jB,EAAAz2C,QAGA7B,KAAA0nC,SAAA,WACA,IAAAuR,EAeA,OAdAX,EAAAz2C,OAAA,EACAo3C,EAAAX,EAAA/0B,SAEAs1B,IAEAI,EADA,mBAAAT,EACAA,IAEA,IAGAM,IACA,mBAAAL,GACAA,EAAAQ,GAEAA,GAGAj5C,KAAA4nC,QAAA,SAAAqR,GACAX,EAAAz2C,OAAA02C,GACAQ,IACA,mBAAAL,GACAA,EAAAO,GAEAX,EAAA/2B,KAAA03B,KAEAD,IACA,mBAAAL,IACAM,EAAAN,EAAAM,MAKAj5C,KAAAO,SAAA,WACA,WAAAs4C,EAAA,KAAAC,EAAA,KAAAC,EAAA,KACAC,EAAA,KAAAV,EAAAz2C,OAAA,IAAA02C,qBC/DA97C,EAAAD,QAAA8kC,EACA7kC,EAAAD,QAAAipC,WAEA,IAAA9/B,EAAerJ,EAAQ,GACvBwD,EAAaxD,EAAQ,GAErBuD,EAAWvD,EAAQ,GACnBqC,EAAWrC,EAAQ,GAMnBm7C,GAJWn7C,EAAQ,IACLA,EAAQ,IACVA,EAAQ,IAEDA,EAAQ,KAC3B48C,EAAAzB,EAAAzvB,MACA0jB,EAAA+L,EAAAvvB,OAEA7W,EAAe/U,EAAQ,IACvB+U,EAAA2W,MACA3W,EAAA6W,OACA7W,EAAA+W,MACA/W,EAAAiX,MAEA,SAAAmd,EAAAwM,GACAjyC,KAAAiyC,GAAA,EACAjyC,KAAAkN,OAAA,EACAlN,KAAA2hC,mBAAA,EACA3hC,KAAA4hC,mBAAA,EACA5hC,KAAA2W,cAAA,EACA3W,KAAAwc,YAAA,EAGAxc,KAAAm5C,QAAA,EACAn5C,KAAA4W,QAAA,EAiBA,SAAA0qB,EAAAvL,GACA/1B,KAAAg2B,QAAAD,EACA/1B,KAAAo5C,QAAA,GACAp5C,KAAAq5C,SAAA,GACAr5C,KAAAs5C,WAAA,GACAt5C,KAAAu5C,SAAA,GAnBA9T,EAAAnnC,UAAAixB,MAAA,SAAA0iB,GACAjyC,KAAAiyC,GAAA,IACAjyC,KAAAm5C,QAAAn5C,KAAAkN,QAEAlN,KAAAiyC,KACAjyC,KAAAkN,OAAA,GAAA+kC,EAAA,IAAAA,EACAjyC,KAAA4W,QAAAq7B,EAAAjyC,KAAAm5C,SAgBA7X,EAAAhjC,UAAAk7C,MAAA,WACAx5C,KAAAo5C,QAAAv3C,OAAA,EACA7B,KAAAq5C,SAAAx3C,OAAA,EACA7B,KAAAs5C,WAAAz3C,OAAA,EACA7B,KAAAu5C,SAAA13C,OAAA,GAGAy/B,EAAAhjC,UAAAm7C,QAAA,SAAAv2B,GAEAljB,KAAAq5C,SAAA93B,KAAA2B,IAQAoe,EAAAhjC,UAAAo7C,WAAA,SAAAnoC,GAEAvR,KAAAs5C,WAAA/3B,KAAAhQ,IAGA+vB,EAAAhjC,UAAAq7C,SAAA,SAAA5uC,GAEA/K,KAAAu5C,SAAAh4B,KAAAxW,IAMAu2B,EAAAhjC,UAAAunC,WAAA,SAAAt4B,GAIA,IAHA,IAAAwoB,EAAA/1B,KAAAg2B,QAGAh1B,EAAA+0B,EAAAgM,WAAgC/gC,EAAGA,IAAA4K,OACnC5K,EAAA+K,cAAA,EAEA,QAAAhP,EAAAg5B,EAAAtX,cAAmC1hB,EAAGA,IAAA6O,OACtC7O,EAAAgP,cAAA,EAEA,QAAAwK,EAAAwf,EAAAiB,YAAiCzgB,EAAGA,IAAA3K,OACpC2K,EAAAxK,cAAA,EAMA,IAFA,IAAA+X,EAAA9jB,KAAAo5C,QAEAQ,EAAA7jB,EAAAgM,WAAmC6X,EAAMA,IAAAhuC,OAEzC,GADA8wB,GACAkd,EAAA7tC,cAIA,GAAA6tC,EAAA3gB,WAAA,GAAA2gB,EAAAxtC,aAKAwtC,EAAAliB,WAAA,CAYA,IAPA13B,KAAAw5C,QAEA11B,EAAAvC,KAAAq4B,GAEAA,EAAA7tC,cAAA,EAGA+X,EAAAjiB,OAAA,IAEAb,EAAA8iB,EAAA6mB,MASA,GAPA3qC,KAAAy5C,QAAAz4C,GAGAA,EAAAiY,UAAA,IAIAjY,EAAA02B,WAAA,CAKA,QAAAS,EAAAn3B,EAAAyd,cAAoC0Z,EAAIA,IAAAltB,KAAA,CACxC,IAAAsG,EAAA4mB,EAAA5mB,QAGA,IAAAA,EAAAxF,eAKA,GAAAwF,EAAAyF,aAAA,GAAAzF,EAAA0F,cAAA,CAIA,IAAAzB,EAAAjE,EAAAS,WACAyD,EAAAlE,EAAAU,WAEA,GAAAuD,EAAApJ,YAAAqJ,EAAArJ,WAAA,CAKA,IAAAqM,EAAAjD,EAAAiqB,WACA9mB,EAAAlD,EAAAgqB,WACA,IAAAhnB,IAAAE,EAIA3Y,KAAA05C,WAAAnoC,GACAA,EAAAxF,cAAA,GAEAjB,EAAAqtB,EAAArtB,OAGAiB,eAKA+X,EAAAvC,KAAAzW,GACAA,EAAAiB,cAAA,KAIA,QAAAo5B,EAAAnkC,EAAAg2B,YAAkCmO,EAAIA,IAAAl6B,KAAA,CAKtC,IAAAH,EAJA,MAAAq6B,EAAAp6B,MAAAgB,cAAA,GAAAo5B,EAAAp6B,MAAAiB,aAOA,IAHAlB,EAAAq6B,EAAAr6B,OAGAsB,aAIApM,KAAA25C,SAAAxU,EAAAp6B,OACAo6B,EAAAp6B,MAAAgB,cAAA,EAEAjB,EAAAiB,eAKA+X,EAAAvC,KAAAzW,GACAA,EAAAiB,cAAA,MAIA/L,KAAA65C,YAAAtsC,GAGA,QAAA7Q,EAAA,EAAmBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,EAG7CsE,EAAAhB,KAAAq5C,SAAA38C,IACAg7B,aACA12B,EAAA+K,cAAA,MASAu1B,EAAAhjC,UAAAu7C,YAAA,SAAAtsC,GASA,IAPA,IAAAwoB,EAAA/1B,KAAAg2B,QACAwL,EAAAzL,EAAAqM,UACAvM,EAAAE,EAAAoM,aAEA5N,EAAAhnB,EAAA0kC,GAGAv1C,EAAA,EAAiBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,CAC3C,IAAAwmB,EAAAljB,KAAAq5C,SAAA38C,GAEAK,EAAA8C,EAAAQ,MAAA6iB,EAAA/M,QAAApZ,GACAgE,EAAAmiB,EAAA/M,QAAApV,EACAT,EAAAT,EAAAQ,MAAA6iB,EAAAwT,kBACAz1B,EAAAiiB,EAAAyT,kBAGAzT,EAAA/M,QAAAjN,GAAArI,IAAAqiB,EAAA/M,QAAApZ,GACAmmB,EAAA/M,QAAAhN,GAAA+Z,EAAA/M,QAAApV,EAEAmiB,EAAAyU,cAEAr3B,EAAAiB,OAAAgzB,EAAArR,EAAA4T,eAAA0K,GACAlhC,EAAAiB,OAAAgzB,EAAArR,EAAAjN,UAAAiN,EAAAsT,SACAv1B,GAAAszB,EAAArR,EAAAhN,OAAAgN,EAAAuT,SAYAn2B,EAAAsB,IAAA,KAAA2yB,EAAArR,EAAA0T,kBACA31B,GAAA,KAAAszB,EAAArR,EAAA2T,mBAGA3T,EAAArJ,WAAA9c,IACAmmB,EAAArJ,WAAA9Y,IACAmiB,EAAAtJ,WAAAtZ,IACA4iB,EAAAtJ,WAAA3Y,IAGA,IAAAvE,EAAA,EAAiBA,EAAAsD,KAAAs5C,WAAAz3C,SAA4BnF,EAAA,CAC7CsD,KAAAs5C,WAAA58C,GACA6Y,eAAAhI,GAKA,IAAA7Q,EAAA,EAAiBA,EAAAsD,KAAAs5C,WAAAz3C,SAA4BnF,EAAA,CAC7CsD,KAAAs5C,WAAA58C,GACA+e,uBAAAlO,GAKA,GAAAA,EAAAoJ,aAEA,IAAAja,EAAA,EAAmBA,EAAAsD,KAAAs5C,WAAAz3C,SAA4BnF,EAAA,CAC/CsD,KAAAs5C,WAAA58C,GACAwgB,oBAAA3P,GAMA,IAAA7Q,EAAA,EAAiBA,EAAAsD,KAAAu5C,SAAA13C,SAA0BnF,EAAA,CAC3CsD,KAAAu5C,SAAA78C,GACA4Q,wBAAAC,GAMA,IAAA7Q,EAAA,EAAiBA,EAAA6Q,EAAAo0B,qBAA6BjlC,EAAA,CAC9C,QAAA6Z,EAAA,EAAmBA,EAAAvW,KAAAu5C,SAAA13C,SAA0B0U,EAAA,CAC7CvW,KAAAu5C,SAAAhjC,GACA/I,yBAAAD,GAGA,IAAAgJ,EAAA,EAAmBA,EAAAvW,KAAAs5C,WAAAz3C,SAA4B0U,EAAA,CAC/CvW,KAAAs5C,WAAA/iC,GACA6G,wBAAA7P,IAOA,IAAA7Q,EAAA,EAAiBA,EAAAsD,KAAAs5C,WAAAz3C,SAA4BnF,EAAA,CAC7CsD,KAAAs5C,WAAA58C,GACAygB,wBAAA5P,GAMA,IAAA7Q,EAAA,EAAiBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,CAC3CwmB,EAAAljB,KAAAq5C,SAAA38C,GAEAK,EAAA8C,EAAAQ,MAAA6iB,EAAArJ,WAAA9c,GACAgE,EAAAmiB,EAAArJ,WAAA9Y,EACAT,EAAAT,EAAAQ,MAAA6iB,EAAAtJ,WAAAtZ,GACAW,EAAAiiB,EAAAtJ,WAAA3Y,EALA,IAQA2zC,EAAA/0C,EAAA+B,IAAA2yB,EAAAj0B,GACA,GAAAT,EAAAkC,cAAA6yC,GAAAjvC,EAAAkB,sBAAA,CACA,IAAAizC,EAAAn0C,EAAAiB,eAAAguC,EAAA/yC,SACAvB,EAAAsB,IAAAk4C,GAGA,IAAA/0C,EAAAwvB,EAAAtzB,EACA,GAAA8D,IAAAY,EAAAoB,mBAEA9F,GADA64C,EAAAn0C,EAAAmB,YAAAnI,EAAAqE,IAAA+B,GAKAhI,EAAAwE,OAAAgzB,EAAAj0B,GACAS,GAAAwzB,EAAAtzB,EAEAiiB,EAAArJ,WAAA9c,EAAA8D,IAAA9D,GACAmmB,EAAArJ,WAAA9Y,IACAmiB,EAAAtJ,WAAAtZ,EAAAO,IAAAP,GACA4iB,EAAAtJ,WAAA3Y,IAMA,IAAA84C,GAAA,EACA,IAAAr9C,EAAA,EAAiBA,EAAA6Q,EAAAq0B,qBAA6BllC,EAAA,CAC9C,IAAA+d,EAAA,EACA,IAAAlE,EAAA,EAAmBA,EAAAvW,KAAAs5C,WAAAz3C,SAA4B0U,EAAA,CAC/C,IACAoE,EADA3a,KAAAs5C,WAAA/iC,GACA8C,wBAAA9L,GACAkN,EAAA9b,EAAAa,IAAAib,EAAAE,GAIA,IAAAq/B,EAAAv/B,IAAA,EAAA9U,EAAAK,WAEAi0C,GAAA,EACA,IAAA1jC,EAAA,EAAmBA,EAAAvW,KAAAu5C,SAAA13C,SAA0B0U,EAAA,CAC7C,IACA2jC,EADAl6C,KAAAu5C,SAAAhjC,GACA9I,yBAAAF,GACA0sC,KAAAC,EAGA,GAAAF,GAAAC,EAAA,CAEAF,GAAA,EACA,OAOA,IAAAr9C,EAAA,EAAiBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,EAC3CwmB,EAAAljB,KAAAq5C,SAAA38C,IAEAyZ,QAAApZ,EAAA8D,IAAAqiB,EAAArJ,WAAA9c,GACAmmB,EAAA/M,QAAApV,EAAAmiB,EAAArJ,WAAA9Y,EACAmiB,EAAAwT,iBAAA71B,IAAAqiB,EAAAtJ,WAAAtZ,GACA4iB,EAAAyT,kBAAAzT,EAAAtJ,WAAA3Y,EACAiiB,EAAAqW,uBAKA,GAFAv5B,KAAAm6C,kBAEAtkB,EAAA,CACA,IAAAukB,EAAA5pC,IAEA6pC,EAAA10C,EAAAyB,wBACAkzC,EAAA30C,EAAA4B,yBAEA,IAAA7K,EAAA,EAAmBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,EAC7CwmB,EAAAljB,KAAAq5C,SAAA38C,IACAg7B,aAIA,GAAAxU,EAAAgT,iBACAhT,EAAAyT,kBAAAzT,EAAAyT,kBAAA2jB,GACAz6C,EAAAkC,cAAAmhB,EAAAwT,kBAAA2jB,GACAn3B,EAAA6T,YAAA,EACAqjB,EAAA,IAEAl3B,EAAA6T,aAAAxC,EACA6lB,EAAAz7C,EAAAa,IAAA46C,EAAAl3B,EAAA6T,eAIA,GAAAqjB,GAAAz0C,EAAAuB,aAAA6yC,EACA,IAAAr9C,EAAA,EAAqBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,EAC/CwmB,EAAAljB,KAAAq5C,SAAA38C,IACAuc,UAAA,MAMAqoB,EAAAhjC,UAAAi8C,YAAA,SAAAC,GACA,QAAA99C,EAAA,EAAiBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,CAC3C,IAAAsE,EAAAhB,KAAAq5C,SAAA38C,GACAoD,EAAAyD,MAAAi3C,EAAAx5C,EAAA6Y,WAAA9Y,EAAAC,EAAA6Y,WAAA9c,EAAAgC,EAAAiC,EAAA6Y,WAAA9c,EAAAgD,EAAAiB,EAAA4Y,WAAA3Y,EAAAD,EAAA4Y,WAAAtZ,EAAAvB,EAAAiC,EAAA4Y,WAAAtZ,EAAAP,KAIA,IAAA06C,EAAA,IAAAhV,EA8aA,SAAAiV,IACA16C,KAAA26C,eAAA,GACA36C,KAAA46C,gBAAA,GAzaAtZ,EAAAhjC,UAAAwnC,cAAA,SAAAv4B,GACA,IAAAwoB,EAAA/1B,KAAAg2B,QAEA,GAAAD,EAAAmM,eAAA,CACA,QAAAlhC,EAAA+0B,EAAAgM,WAAkC/gC,EAAGA,IAAA4K,OACrC5K,EAAA+K,cAAA,EACA/K,EAAAmV,QAAAlN,OAAA,EAGA,QAAAlM,EAAAg5B,EAAAtX,cAAqC1hB,EAAGA,IAAA6O,OAExC7O,EAAAyV,WAAA,EACAzV,EAAAgP,cAAA,EACAhP,EAAAwV,WAAA,EACAxV,EAAAuV,MAAA,EAKA,OAAS,CAKT,IAHA,IAAAuoC,EAAA,KACAC,EAAA,EAEA/9C,EAAAg5B,EAAAtX,cAAqC1hB,EAAGA,IAAA6O,OAExC,MAAA7O,EAAAia,eAKAja,EAAAwV,WAAA5M,EAAAU,aAAA,CAIA,IAAAoD,EAAA,EACA,GAAA1M,EAAAyV,UAEA/I,EAAA1M,EAAAuV,UACO,CACP,IAAAb,EAAA1U,EAAAma,cACAvF,EAAA5U,EAAAoa,cAEA,IAAA1F,EAAArF,aAAAuF,EAAAvF,WACA,SAIA,GAAAqF,EAAAiH,YAAA/G,EAAA+G,WACA,SAGA,IAAAs4B,EAAAv/B,EAAAoE,UACA+9B,EAAAjiC,EAAAkE,UAIAowB,EAAA+K,EAAA/X,YAAA+X,EAAAtZ,WACAwO,EAAA0N,EAAA3a,YAAA2a,EAAAlc,WAGA,MAAAuO,GAAA,GAAAC,EACA,SAGA,IAAA6U,EAAA/J,EAAAnY,aAAAmY,EAAArZ,YACAqjB,EAAApH,EAAA/a,aAAA+a,EAAAjc,YAGA,MAAAojB,GAAA,GAAAC,EACA,SAKA,IAAA/xC,EAAA+nC,EAAA76B,QAAAlN,OAEA+nC,EAAA76B,QAAAlN,OAAA2qC,EAAAz9B,QAAAlN,QACAA,EAAA2qC,EAAAz9B,QAAAlN,OACA+nC,EAAA76B,QAAA3M,QAAAP,IACS2qC,EAAAz9B,QAAAlN,OAAA+nC,EAAA76B,QAAAlN,SACTA,EAAA+nC,EAAA76B,QAAAlN,OACA2qC,EAAAz9B,QAAA3M,QAAAP,IAKA,IAAAyI,EAAA3U,EAAAqa,iBACAxF,EAAA7U,EAAAsa,iBAMAlJ,GAJA6iC,EAAA76B,QACAy9B,EAAAz9B,QAGA,IAAA+iC,GACA/qC,EAAAqa,OAAA3nB,IAAA4Q,EAAAkE,WAAAjE,GACAvD,EAAAsa,OAAA5nB,IAAA8Q,EAAAgE,WAAA/D,GACAzD,EAAA09B,OAAAhrC,IAAAmwC,EAAA76B,SACAhI,EAAA29B,OAAAjrC,IAAA+yC,EAAAz9B,SACAhI,EAAAy9B,KAAA,EAEA,IAAA19B,EAAA,IAAAw9B,EACA+L,EAAAvpC,EAAAC,GAGA,IAAA5E,EAAA2E,EAAAtQ,EAEA6L,EADAyE,EAAAu9B,OAAAC,EAAAY,WACA3tC,EAAAa,IAAAyJ,GAAA,EAAAA,GAAAM,EAAA,GAEA,EAGAxM,EAAAuV,MAAA7I,EACA1M,EAAAyV,WAAA,EAGA/I,EAAAqxC,IAEAD,EAAA99C,EACA+9C,EAAArxC,GAIA,SAAAoxC,GAAA,KAAAl8C,EAAAE,QAAAi8C,EAAA,CAEA/kB,EAAAmM,gBAAA,EACA,MAIAzwB,EAAAopC,EAAA3jC,cACAvF,EAAAkpC,EAAA1jC,cACA65B,EAAAv/B,EAAAoE,UACA+9B,EAAAjiC,EAAAkE,UAHA,IAKAolC,EAAAjK,EAAA76B,QAAA9V,QACA66C,EAAAtH,EAAAz9B,QAAA9V,QAWA,GATA2wC,EAAAxnC,QAAAsxC,GACAlH,EAAApqC,QAAAsxC,GAGAD,EAAAxiC,OAAA0d,GACA8kB,EAAAroC,WAAA,IACAqoC,EAAAtoC,WAGA,GAAAsoC,EAAA7jC,aAAA,GAAA6jC,EAAA5jC,aAAA,CAUA+5B,EAAA/3B,UAAA,GACA26B,EAAA36B,UAAA,GAGAjZ,KAAAw5C,QACAx5C,KAAAy5C,QAAAzI,GACAhxC,KAAAy5C,QAAA7F,GACA5zC,KAAA05C,WAAAmB,GAEA7J,EAAAjlC,cAAA,EACA6nC,EAAA7nC,cAAA,EACA8uC,EAAA9uC,cAAA,EAIA,IADA,IAAAovC,EAAA,CAAAnK,EAAA4C,GACAl3C,EAAA,EAAmBA,EAAAy+C,EAAAt5C,SAAmBnF,EAAA,CAEtC,IADAwmB,EAAAi4B,EAAAz+C,IACAi7B,YACA,QAAAQ,EAAAjV,EAAAzE,cAAyC0Z,EAAIA,IAAAltB,KAAA,CAI7C,IAAAsG,EAAA4mB,EAAA5mB,QAGA,IAAAA,EAAAxF,aAAA,CAKA,IAAAjB,EAAAqtB,EAAArtB,MACA,IAAAA,EAAA6sB,aAAAzU,EAAA2V,YAAA/tB,EAAA+tB,WAAA,CAKA,IAAApgB,EAAAlH,EAAAS,WAAAytB,WACA9mB,EAAApH,EAAAU,WAAAwtB,WACA,IAAAhnB,IAAAE,EAAA,CAKA,IAAAyiC,EAAAtwC,EAAAqL,QAAA9V,QACA,GAAAyK,EAAAiB,cACAjB,EAAAtB,QAAAsxC,GAIAvpC,EAAA8G,OAAA0d,GAIA,GAAAxkB,EAAAyF,aAAA,GAAAzF,EAAA0F,cAOA1F,EAAAxF,cAAA,EACA/L,KAAA05C,WAAAnoC,GAGAzG,EAAAiB,eAKAjB,EAAAiB,cAAA,EAEAjB,EAAA4sB,YACA5sB,EAAAmO,UAAA,GAGAjZ,KAAAy5C,QAAA3uC,MArBAA,EAAAqL,QAAAtV,IAAAu6C,GACAtwC,EAAAyuB,4BAyBAkhB,EAAAlrB,OAAA,EAAAurB,GAAAvtC,EAAA0kC,IACAwI,EAAA7jC,QAAA,EACA6jC,EAAA7Y,mBAAA,GACA6Y,EAAA9Y,mBAAAp0B,EAAAo0B,mBACA8Y,EAAA9jC,cAAA,EAEA3W,KAAAq7C,eAAAZ,EAAAzJ,EAAA4C,GAGA,IAAAl3C,EAAA,EAAmBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,CAC7C,IAAAwmB,EAGA,IAHAA,EAAAljB,KAAAq5C,SAAA38C,IACAqP,cAAA,EAEAmX,EAAAyU,YAAA,CAIAzU,EAAAgV,sBAGA,IAAAC,EAAAjV,EAAAzE,cAAuC0Z,EAAIA,IAAAltB,KAC3CktB,EAAA5mB,QAAAiB,WAAA,EACA2lB,EAAA5mB,QAAAxF,cAAA,GASA,GAFAgqB,EAAA4P,kBAEA5P,EAAA0M,cAAA,CACA1M,EAAAmM,gBAAA,EACA,YAzHA2Y,EAAA9jC,YAAA,GACAi6B,EAAA76B,QAAAtV,IAAAo6C,GACArH,EAAAz9B,QAAAtV,IAAAq6C,GACAlK,EAAAzX,uBACAqa,EAAAra,yBAsIA+H,EAAAhjC,UAAA+8C,eAAA,SAAAC,EAAA9hC,EAAAC,GACAzZ,KAAAg2B,QAGA,IAHA,IAGAt5B,EAAA,EAAiBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,EAC3CwmB,EAAAljB,KAAAq5C,SAAA38C,IACAmd,WAAA9c,EAAA8D,IAAAqiB,EAAA/M,QAAApZ,GACAmmB,EAAArJ,WAAA9Y,EAAAmiB,EAAA/M,QAAApV,EACAmiB,EAAAtJ,WAAAtZ,EAAAO,IAAAqiB,EAAAwT,kBACAxT,EAAAtJ,WAAA3Y,EAAAiiB,EAAAyT,kBAGA,QAAAj6B,EAAA,EAAiBA,EAAAsD,KAAAs5C,WAAAz3C,SAA4BnF,EAAA,CAC7CsD,KAAAs5C,WAAA58C,GACA6Y,eAAA+lC,GAIA,IAAA5+C,EAAA,EAAiBA,EAAA4+C,EAAA1Z,qBAAgCllC,EAAA,CAEjD,IADA,IAAA+d,EAAA,EACAlE,EAAA,EAAmBA,EAAAvW,KAAAs5C,WAAAz3C,SAA4B0U,EAAA,CAC/C,IACAoE,EADA3a,KAAAs5C,WAAA/iC,GACAgD,2BAAA+hC,EAAA9hC,EAAAC,GACAgB,EAAA9b,EAAAa,IAAAib,EAAAE,GAKA,GADAF,IAAA,IAAA9U,EAAAK,WAEA,MAmCAwT,EAAArD,QAAAjN,GAAArI,IAAA2Y,EAAAK,WAAA9c,GACAyc,EAAArD,QAAAhN,GAAAqQ,EAAAK,WAAA9Y,EACA0Y,EAAAtD,QAAAjN,GAAArI,IAAA4Y,EAAAI,WAAA9c,GACA0c,EAAAtD,QAAAhN,GAAAsQ,EAAAI,WAAA9Y,EAIA,IAAArE,EAAA,EAAiBA,EAAAsD,KAAAs5C,WAAAz3C,SAA4BnF,EAAA,CAC7CsD,KAAAs5C,WAAA58C,GACA+e,uBAAA6/B,GAIA,IAAA5+C,EAAA,EAAiBA,EAAA4+C,EAAA3Z,qBAAgCjlC,EACjD,IAAA6Z,EAAA,EAAmBA,EAAAvW,KAAAs5C,WAAAz3C,SAA4B0U,EAAA,CAC/CvW,KAAAs5C,WAAA/iC,GACA6G,wBAAAk+B,GAOA,IAAA/mB,EAAA+mB,EAAArJ,GAGA,IAAAv1C,EAAA,EAAiBA,EAAAsD,KAAAq5C,SAAAx3C,SAA0BnF,EAAA,CAC3C,IAAAwmB,EAAAljB,KAAAq5C,SAAA38C,GAEAK,EAAA8C,EAAAQ,MAAA6iB,EAAArJ,WAAA9c,GACAgE,EAAAmiB,EAAArJ,WAAA9Y,EACAT,EAAAT,EAAAQ,MAAA6iB,EAAAtJ,WAAAtZ,GACAW,EAAAiiB,EAAAtJ,WAAA3Y,EAGA2zC,EAAA/0C,EAAA+B,IAAA2yB,EAAAj0B,GACA,GAAAT,EAAA8C,IAAAiyC,KAAAjvC,EAAAkB,sBAAA,CACA,IAAAizC,EAAAn0C,EAAAiB,eAAAguC,EAAA/yC,SACAvB,EAAAsB,IAAAk4C,GAGA,IAAA/0C,EAAAwvB,EAAAtzB,EACA,GAAA8D,IAAAY,EAAAoB,mBAEA9F,GADA64C,EAAAn0C,EAAAmB,YAAAnI,EAAAqE,IAAA+B,GAKAhI,EAAAwE,OAAAgzB,EAAAj0B,GACAS,GAAAwzB,EAAAtzB,EAEAiiB,EAAArJ,WAAA9c,IACAmmB,EAAArJ,WAAA9Y,IACAmiB,EAAAtJ,WAAAtZ,IACA4iB,EAAAtJ,WAAA3Y,IAGAiiB,EAAA/M,QAAApZ,IACAmmB,EAAA/M,QAAApV,IACAmiB,EAAAwT,iBAAAp2B,EACA4iB,EAAAyT,kBAAA11B,EACAiiB,EAAAqW,uBAGAv5B,KAAAm6C,mBAaA7Y,EAAAhjC,UAAA67C,gBAAA,WAGA,IADA,IAAA5+B,EAAA,IAAAm/B,EACA39C,EAAA,EAAiBA,EAAAiD,KAAAs5C,WAAAz3C,SAA4B9E,EAAA,CAE7C,IADA,IAAAwU,EAAAvR,KAAAs5C,WAAAv8C,GACAyB,EAAA,EAAmBA,EAAA+S,EAAA2B,SAAArR,SAA6BrD,EAChD+c,EAAAo/B,eAAAp5B,KAAAhQ,EAAA2B,SAAA1U,GAAAsW,eACAyG,EAAAq/B,gBAAAr5B,KAAAhQ,EAAA2B,SAAA1U,GAAAuW,gBAEA/U,KAAAg2B,QAAA4Q,UAAAr1B,EAAAgK,sBC54BA9e,EAAAD,QAAAymB,IAAA,WACA,OAAAD,KAAAC,OAGAxmB,EAAAD,QAAA4T,KAAA,SAAA4uB,GACA,OAAAhc,KAAAC,MAAA+b,oBCcAviC,EAAAD,QAAA++C,EAEaj/C,EAAQ,GAArB,IACA0B,EAAa1B,EAAQ,GACrBioB,EAAmBjoB,EAAQ,IAU3B,SAAAi/C,EAAA30B,EAAAC,EAAAC,EAAAljB,GACA,KAAA5D,gBAAAu7C,GACA,WAAAA,EAAA30B,EAAAC,EAAAC,EAAAljB,GAGA23C,EAAA52B,OAAA9nB,KAAAmD,MAEAA,KAAAqlB,UAAAuB,EAAAC,EAAAC,EAAAljB,GAfA23C,EAAA52B,OAAAJ,EACAg3B,EAAAj9C,UAAAN,EAAAu9C,EAAA52B,OAAArmB,WAEAi9C,EAAA32B,KAAA,2BCZA,IACAhlB,GAAsD,EAEtDE,EAAaxD,EAAQ,GAGrBuI,GAFavI,EAAQ,GACVA,EAAQ,GACHA,EAAQ,IACxBuD,EAAWvD,EAAQ,GAGnBkV,GAFelV,EAAQ,GACXA,EAAQ,IACNA,EAAQ,KACtB8U,EAAe9U,EAAQ,IACvBuwB,EAAkBvwB,EAAQ,IAU1B,SAAAk/C,EAAA1lC,EAAA2lC,EAAAtjC,EAAAujC,EAAAtjC,GACAtC,EAAAE,WAAA,EAEA,IAAAmV,EAAAtmB,EAAAL,QAAA2T,EAAAsjC,EAAA3uB,KACA1B,EAAAvmB,EAAAL,QAAA4T,EAAAsjC,EAAA5uB,KAEA6uB,EAAA97C,EAAA2C,gBAAA4oB,EAAAD,GAGA+B,EAFAuuB,EAAA9tC,SACA+tC,EAAA/tC,SAEAguC,EAAAzuB,MAIApX,EAAAM,KAAAhF,EAAAwJ,UACA9E,EAAAQ,WAAAzV,IAAA46C,EAAA3uB,KACAhX,EAAAO,YAAAzV,UACAkV,EAAAE,WAAA,EACAF,EAAAW,OAAA,GAAAH,WAAAzV,IAAA66C,EAAA5uB,KAGAhX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UAhCAnO,EAAA2M,QAAA0O,EAAAjI,KAAAiI,EAAAjI,KAEA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAhS,GAAAE,EAAAb,OAAAuW,EAAAjJ,WAAAsgB,EAAAjI,MACAhlB,GAAAE,EAAAb,OAAAwW,EAAAlJ,WAAAsgB,EAAAjI,MACA42B,EAAA1lC,EAAAN,EAAAG,WAAAwC,EAAA1C,EAAAE,WAAAyC,KA8BA5b,EAAAg/C,kCCjDA,IACA57C,GAAsD,EAEtDE,EAAaxD,EAAQ,GAGrBuI,GAFavI,EAAQ,GACVA,EAAQ,GACHA,EAAQ,IACxBuD,EAAWvD,EAAQ,GAInBkV,GAHUlV,EAAQ,GACHA,EAAQ,GACXA,EAAQ,IACNA,EAAQ,KACtB8U,EAAe9U,EAAQ,IACvB2wB,EAAgB3wB,EAAQ,IACxBmgC,EAAiBngC,EAAQ,IACzBuwB,EAAkBvwB,EAAQ,IA+B1B,SAAAs/C,EAAA9lC,EAAA+lC,EAAA1jC,EAAAujC,EAAAtjC,GACAtC,EAAAE,WAAA,EAGA,IAAA8lC,EAAAj3C,EAAAD,SAAAuT,EAAAtT,EAAAL,QAAA4T,EAAAsjC,EAAA5uB,MAEA+b,EAAAgT,EAAA1uB,UACA2b,EAAA+S,EAAAzuB,UACArF,EAAAloB,EAAA8B,IAAAmnC,EAAAD,GAGAkT,EAAAl8C,EAAA8C,IAAAolB,EAAAloB,EAAA8B,IAAAmnC,EAAAgT,IACAx7C,EAAAT,EAAA8C,IAAAolB,EAAAloB,EAAA8B,IAAAm6C,EAAAjT,IAEA3b,EAAA2uB,EAAAluC,SAAA+tC,EAAA/tC,SAGA,GAAArN,GAAA,GACA,IAAAkb,EAAA3b,EAAAQ,MAAAwoC,GACA7rC,EAAA6C,EAAA8B,IAAAm6C,EAAAtgC,GAEA,GADA3b,EAAA8C,IAAA3F,KACAkwB,IACA,OAIA,GAAA2uB,EAAApuB,aAAA,CACA,IAAAuuB,EAAAH,EAAAtuB,UACA0uB,EAAApT,EACAriB,EAAA3mB,EAAA8B,IAAAs6C,EAAAD,GAIA,GAHAn8C,EAAA8C,IAAA6jB,EAAA3mB,EAAA8B,IAAAs6C,EAAAH,IAGA,EACA,OAeA,OAXAhmC,EAAAM,KAAAhF,EAAAwJ,UACA9E,EAAAO,YAAAzV,UACAkV,EAAAQ,WAAAzV,IAAA2a,GACA1F,EAAAE,WAAA,EACAF,EAAAW,OAAA,GAAAH,WAAAzV,IAAA66C,EAAA5uB,KAGAhX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,OACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UAKA,GAAAo8B,GAAA,GACAvgC,EAAA3b,EAAAQ,MAAAyoC,GACA9rC,EAAA6C,EAAA8B,IAAAm6C,EAAAtgC,GAEA,GADA3b,EAAA8C,IAAA3F,KACAkwB,IACA,OAIA,GAAA2uB,EAAAnuB,aAAA,CACA,IAAAwuB,EAAAL,EAAAruB,UACA2uB,EAAArT,EACAriB,EAAA5mB,EAAA8B,IAAAu6C,EAAAC,GAIA,GAHAt8C,EAAA8C,IAAA8jB,EAAA5mB,EAAA8B,IAAAm6C,EAAAK,IAGA,EACA,OAeA,OAXArmC,EAAAM,KAAAhF,EAAAwJ,UACA9E,EAAAO,YAAAzV,UACAkV,EAAAQ,WAAAzV,IAAA2a,GACA1F,EAAAE,WAAA,EACAF,EAAAW,OAAA,GAAAH,WAAAzV,IAAA66C,EAAA5uB,KAGAhX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,OACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UAKA,IAAAy8B,EAAAv8C,EAAA8C,IAAAolB,KACAnoB,GAAAE,EAAAb,OAAAm9C,EAAA,GACA5gC,EAAA3b,EAAAiD,QAAAi5C,EAAAK,EAAAvT,EAAAvoC,EAAA87C,EAAAtT,GACA9rC,EAAA6C,EAAA8B,IAAAm6C,EAAAtgC,GAEA,KADA3b,EAAA8C,IAAA3F,KACAkwB,KAAA,CAIA,IAAA/uB,EAAA0B,EAAAO,KAAA2nB,EAAAhoB,EAAAgoB,EAAAhpB,GACAc,EAAA8C,IAAAxE,EAAA0B,EAAA8B,IAAAm6C,EAAAjT,IAAA,GACA1qC,EAAA0C,KAAA1C,EAAAY,GAAAZ,EAAA4B,GAEA5B,EAAA6D,YAEA8T,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAAlY,EACA2X,EAAAQ,WAAAzV,IAAAgoC,GACA/yB,EAAAE,WAAA,EACAF,EAAAW,OAAA,GAAAH,WAAAzV,IAAA66C,EAAA5uB,KAGAhX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACA9J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UA/IAnO,EAAA2M,QAAA8O,EAAArI,KAAAiI,EAAAjI,KAGA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAhS,GAAAE,EAAAb,OAAAuW,EAAAjJ,WAAA0gB,EAAArI,MACAhlB,GAAAE,EAAAb,OAAAwW,EAAAlJ,WAAAsgB,EAAAjI,MAEA,IAAAlP,EAAAF,EAAAG,WACAC,EAAAH,EAAAE,WAEAimC,EAAA9lC,EAAAJ,EAAAyC,EAAAvC,EAAAwC,KATA5G,EAAA2M,QAAAse,EAAA7X,KAAAiI,EAAAjI,KAYA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAhS,GAAAE,EAAAb,OAAAuW,EAAAjJ,WAAAkwB,EAAA7X,MACAhlB,GAAAE,EAAAb,OAAAwW,EAAAlJ,WAAAsgB,EAAAjI,MAEA,IAAAy3B,EAAA7mC,EAAAG,WACAuQ,EAAA,IAAA+G,EACAovB,EAAA/e,aAAApX,EAAAxU,GAEA,IAAAgE,EAAAwQ,EACAtQ,EAAAH,EAAAE,WAEAimC,EAAA9lC,EAAAJ,EAAAyC,EAAAvC,EAAAwC,sBCzCA,IACAxY,GAAsD,EAEtDE,EAAaxD,EAAQ,GAErBuI,GADWvI,EAAQ,GACHA,EAAQ,IACxBqH,EAAUrH,EAAQ,GAClBuD,EAAWvD,EAAQ,GAEnBqJ,GADWrJ,EAAQ,IACJA,EAAQ,IACvB8U,EAAe9U,EAAQ,IACvBkV,EAAclV,EAAQ,IAEtBioB,GADYjoB,EAAQ,IACDA,EAAQ,KAgB3B,SAAAggD,EAAAC,EAAAlc,EAAAmc,EAAAlc,GAUA,IATA,IAAAmc,EAAAF,EAAAv3B,QACA03B,EAAAF,EAAAx3B,QACA23B,EAAAJ,EAAAx3B,UACA63B,EAAAL,EAAAz3B,WACA+3B,EAAAL,EAAA13B,WACA7f,EAAAJ,EAAAa,OAAA46B,EAAAD,GAEA5V,EAAA,EACAqyB,GAAAtsC,IACA9T,EAAA,EAAiBA,EAAA+/C,IAAY//C,EAAA,CAQ7B,IANA,IAAAyB,EAAAwF,EAAAa,QAAAS,EAAAD,EAAA23C,EAAAjgD,IACA8nB,EAAA3f,EAAAL,QAAAS,EAAA23C,EAAAlgD,IACA2iB,EAAAxf,EAAA8C,IAAAxE,EAAAqmB,GAGAu4B,EAAAvsC,IACA+F,EAAA,EAAmBA,EAAAmmC,IAAYnmC,EAAA,CAC/B,IAAAymC,EAAAn9C,EAAA8C,IAAAxE,EAAA0+C,EAAAtmC,IAAA8I,EACA29B,EAAAD,IACAA,EAAAC,GAIAD,EAAAD,IACAA,EAAAC,EACAtyB,EAAA/tB,GAKA4/C,EAAAW,eAAAH,EACAR,EAAAY,WAAAzyB,EAyDA,SAAAssB,EAAAjhC,EAAAqnC,EAAAhlC,EAAAilC,EAAAhlC,GACAtC,EAAAE,WAAA,EACA,IAAA+1B,EAAAoR,EAAAxvC,SAAAyvC,EAAAzvC,SAEA2uC,EAAAa,EAAAhlC,EAAAilC,EAAAhlC,GACA,IAAAyjC,EAAAS,EAAAY,WACAG,EAAAf,EAAAW,eACA,KAAAI,EAAAtR,GAAA,CAGAuQ,EAAAc,EAAAhlC,EAAA+kC,EAAAhlC,GACA,IAAAmlC,EAAAhB,EAAAY,WACAK,EAAAjB,EAAAW,eACA,KAAAM,EAAAxR,GAAA,CAGA,IAAAwQ,EACAC,EACAnc,EACAC,EACAkd,EACAC,EAGAF,EAAAF,EAFA,GAAA13C,EAAAK,YAGAu2C,EAAAa,EACAZ,EAAAW,EACA9c,EAAAjoB,EACAkoB,EAAAnoB,EACAqlC,EAAAF,EACAxnC,EAAAM,KAAAhF,EAAA8J,QACAuiC,EAAA,IAEAlB,EAAAY,EACAX,EAAAY,EACA/c,EAAAloB,EACAmoB,EAAAloB,EACAolC,EAAA3B,EACA/lC,EAAAM,KAAAhF,EAAA2J,QACA0iC,EAAA,GAGA,IAAAC,EAAA,KAAAtsC,EAAAyO,WAAA,IAAAzO,EAAAyO,aA5FA,SAAA9iB,EAAAw/C,EAAAlc,EAAAmd,EAAAhB,EAAAlc,GACA,IAAAqd,EAAApB,EAAAx3B,UAEA23B,EAAAF,EAAAx3B,QACA44B,EAAApB,EAAA13B,WACA+4B,EAAArB,EAAAz3B,UAEAnlB,GAAAE,EAAAb,OAAA,GAAAu+C,KAAAjB,EAAAv3B,SAQA,IALA,IAAA84B,EAAAn6C,EAAAe,KAAA47B,EAAAt7B,EAAArB,EAAAa,QAAA67B,EAAAr7B,EAAA24C,EAAAH,KAGAp4B,EAAA,EACA24B,EAAAvtC,IACA9T,EAAA,EAAiBA,EAAAggD,IAAYhgD,EAAA,CAC7B,IAAAiG,EAAA9C,EAAA8C,IAAAm7C,EAAAD,EAAAnhD,IACAiG,EAAAo7C,IACAA,EAAAp7C,EACAyiB,EAAA1oB,GAKA,IAAAspB,EAAAZ,EACAa,EAAAD,EAAA,EAAA02B,EAAA12B,EAAA,IAEAjpB,EAAA,GAAAuD,EAAAuE,EAAAL,QAAA87B,EAAAsd,EAAA53B,IACAjpB,EAAA,GAAAic,GAAA8F,GAAApN,OAAA8rC,EACAzgD,EAAA,GAAAic,GAAA8F,GAAAlN,OAAAoU,EACAjpB,EAAA,GAAAic,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACA7iB,EAAA,GAAAic,GAAA8F,GAAAN,MAAApN,EAAAuO,SAEA5iB,EAAA,GAAAuD,EAAAuE,EAAAL,QAAA87B,EAAAsd,EAAA33B,IACAlpB,EAAA,GAAAic,GAAA8F,GAAApN,OAAA8rC,EACAzgD,EAAA,GAAAic,GAAA8F,GAAAlN,OAAAqU,EACAlpB,EAAA,GAAAic,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACA7iB,EAAA,GAAAic,GAAA8F,GAAAN,MAAApN,EAAAuO,SAwDAq+B,CAAAN,EAAAnB,EAAAlc,EAAAmd,EAAAhB,EAAAlc,GAEA,IAAAmc,EAAAF,EAAAv3B,QACAi5B,EAAA1B,EAAAz3B,WAEAo5B,EAAAV,EACAW,EAAAX,EAAA,EAAAf,EAAAe,EAAA,IAEAY,EAAAH,EAAAC,GACAG,EAAAJ,EAAAE,GAEAG,EAAAz+C,EAAA8B,IAAA08C,EAAAD,GACAE,EAAAt8C,YAEA,IAAAqU,EAAAxW,EAAA+C,MAAA07C,EAAA,GACAtjC,EAAAnb,EAAAiD,QAAA,GAAAs7C,EAAA,GAAAC,GAEAliC,EAAAxY,EAAAa,QAAA67B,EAAAr7B,EAAAs5C,GACAp8C,EAAArC,EAAA+C,MAAAuZ,EAAA,GAEAiiC,EAAAv5C,EAAAL,QAAA67B,EAAA+d,GACAC,EAAAx5C,EAAAL,QAAA67B,EAAAge,GAGA,IAAAE,EAAA1+C,EAAA8C,IAAAT,EAAAk8C,GAGAI,GAAA3+C,EAAA8C,IAAAwZ,EAAAiiC,GAAArS,EACA0S,EAAA5+C,EAAA8C,IAAAwZ,EAAAkiC,GAAAtS,EAGA2S,EAAA,KAAAttC,EAAAyO,WAAA,IAAAzO,EAAAyO,YACA8+B,EAAA,KAAAvtC,EAAAyO,WAAA,IAAAzO,EAAAyO,YAOA,KAHAzO,EAAA8N,kBAAAw/B,EAAAhB,EAAA79C,EAAAkD,IAAAoZ,GACAqiC,EAAAN,GAEA,GAKA9sC,EAAA8N,kBAAAy/B,EAAAD,EAAAviC,EACAsiC,EAAAN,GAEA,IAKAroC,EAAAO,cACAP,EAAAQ,WAAA0E,EAGA,IADA,IAAAhF,EAAA,EACAtZ,EAAA,EAAiBA,EAAAiiD,EAAA98C,SAA+CnF,EAAA,CAGhE,GAFAmD,EAAA8C,IAAAT,EAAAy8C,EAAAjiD,GAAA4D,GAAAi+C,GAEAxS,EAAA,CACA,IAAAv1B,EAAAV,EAAAW,OAAAT,GAGA,GAFAQ,EAAAF,WAAAzV,IAAAgE,EAAAD,SAAA07B,EAAAqe,EAAAjiD,GAAA4D,IACAkW,EAAAwC,GAAA2lC,EAAAjiD,GAAAsc,GACAykC,EAAA,CAEA,IAAA3+B,EAAAtI,EAAAwC,GAAA8F,GACApN,EAAAoN,EAAApN,OACAE,EAAAkN,EAAAlN,OACA2M,EAAAO,EAAAP,MACAC,EAAAM,EAAAN,MACAM,EAAApN,OAAAE,EACAkN,EAAAlN,OAAAF,EACAoN,EAAAP,MAAAC,EACAM,EAAAN,MAAAD,IAEAvI,GAIAF,EAAAE,gBAlOAvZ,EAAAD,QAAAu6C,EAEAvlC,EAAA2M,QAAAoG,EAAAK,KAAAL,EAAAK,KAEA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAhS,GAAAE,EAAAb,OAAAuW,EAAAjJ,WAAAgY,EAAAK,MACAhlB,GAAAE,EAAAb,OAAAwW,EAAAlJ,WAAAgY,EAAAK,MACAmyB,EAAAjhC,EAAAN,EAAAG,WAAAwC,EAAA1C,EAAAE,WAAAyC,sBCtBA,IACAxY,GAAsD,EAEtDE,EAAaxD,EAAQ,GACrBqC,EAAWrC,EAAQ,GACnBuI,EAAgBvI,EAAQ,GAExBuD,GADUvD,EAAQ,GACPA,EAAQ,IAGnB8U,GAFW9U,EAAQ,IACJA,EAAQ,GACRA,EAAQ,KACvBkV,EAAclV,EAAQ,IAEtBuwB,GADYvwB,EAAQ,IACFA,EAAQ,KAC1BioB,EAAmBjoB,EAAQ,IAE3BkV,EAAA2M,QAAAoG,EAAAK,KAAAiI,EAAAjI,KAEA,SAAA9O,EAAAqC,EAAA3C,EAAA9D,EAAA0G,EAAA3C,EAAA7D,GACAhS,GAAAE,EAAAb,OAAAuW,EAAAjJ,WAAAgY,EAAAK,MACAhlB,GAAAE,EAAAb,OAAAwW,EAAAlJ,WAAAsgB,EAAAjI,MAKA,SAAA9O,EAAA8oC,EAAAzmC,EAAAujC,EAAAtjC,GACAtC,EAAAE,WAAA,EAcA,IAXA,IAAAjZ,EAAA8H,EAAAL,QAAA4T,EAAAsjC,EAAA5uB,KACA+xB,EAAAh6C,EAAAD,SAAAuT,EAAApb,GAGA+hD,EAAA,EACAnkC,GAAAnK,IACA0c,EAAA0xB,EAAAjxC,SAAA+tC,EAAA/tC,SACAoxC,EAAAH,EAAA55B,QACAN,EAAAk6B,EAAA95B,WACAk6B,EAAAJ,EAAA75B,UAEAroB,EAAA,EAAiBA,EAAAqiD,IAAiBriD,EAAA,CAClC,IAAA+B,EAAAoB,EAAA8C,IAAAq8C,EAAAtiD,GAAAmD,EAAA8B,IAAAk9C,EAAAn6B,EAAAhoB,KAEA,GAAA+B,EAAAyuB,EAEA,OAGAzuB,EAAAkc,IACAA,EAAAlc,EACAqgD,EAAApiD,GAKA,IAAAuiD,EAAAH,EACAI,EAAAD,EAAA,EAAAF,EAAAE,EAAA,IACAz6B,EAAAE,EAAAu6B,GACAx6B,EAAAC,EAAAw6B,GAGA,GAAAvkC,EAAAhc,EAAAE,QAYA,OAXAiX,EAAAE,WAAA,EACAF,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAAxV,IAAAm+C,EAAAF,IACAhpC,EAAAQ,WAAApV,WAAA,GAAAsjB,EAAA,GAAAC,GACA3O,EAAAW,OAAA,GAAAH,WAAAolC,EAAA5uB,IAGAhX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,OACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UAKA,IAAAw/B,EAAAt/C,EAAA8C,IAAA9C,EAAA8B,IAAAk9C,EAAAr6B,GAAA3kB,EAAA8B,IAAA8iB,EAAAD,IACA46B,EAAAv/C,EAAA8C,IAAA9C,EAAA8B,IAAAk9C,EAAAp6B,GAAA5kB,EAAA8B,IAAA6iB,EAAAC,IACA,GAAA06B,GAAA,GACA,GAAAt/C,EAAA2C,gBAAAq8C,EAAAr6B,GAAA0I,IACA,OAGApX,EAAAE,WAAA,EACAF,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAAnV,WAAA,EAAA29C,GAAA,EAAAr6B,GACA1O,EAAAO,YAAArU,YACA8T,EAAAQ,WAAAkO,EACA1O,EAAAW,OAAA,GAAAH,WAAAzV,IAAA66C,EAAA5uB,KAGAhX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,cACG,GAAAy/B,GAAA,GACH,GAAAv/C,EAAA2C,gBAAAq8C,EAAAp6B,GAAAyI,IACA,OAGApX,EAAAE,WAAA,EACAF,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAAnV,WAAA,EAAA29C,GAAA,EAAAp6B,GACA3O,EAAAO,YAAArU,YACA8T,EAAAQ,WAAAzV,IAAA4jB,GACA3O,EAAAW,OAAA,GAAAH,WAAAzV,IAAA66C,EAAA5uB,KAGAhX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,aACG,CACH,IAAA0/B,EAAAx/C,EAAAoD,IAAAuhB,EAAAC,GACA9J,EAAA9a,EAAA8C,IAAAk8C,EAAAG,EAAAC,IACAp/C,EAAA8C,IAAA08C,EAAAL,EAAAC,IACA,GAAAtkC,EAAAuS,EACA,OAGApX,EAAAE,WAAA,EACAF,EAAAM,KAAAhF,EAAA2J,QACAjF,EAAAO,YAAAxV,IAAAm+C,EAAAC,IACAnpC,EAAAQ,WAAAzV,IAAAw+C,GACAvpC,EAAAW,OAAA,GAAAH,WAAAzV,IAAA66C,EAAA5uB,KAGAhX,EAAAW,OAAA,GAAAuC,GAAA8F,GAAApN,OAAA,EACAoE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACA7J,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAlN,OAAA,EACAkE,EAAAW,OAAA,GAAAuC,GAAA8F,GAAAN,MAAApN,EAAAuO,UA9GA2/B,CAAAxpC,EAAAN,EAAAG,WAAAwC,EAAA1C,EAAAE,WACAyC,sBCtBA,IACAxY,GAAsD,EAEtDE,EAAaxD,EAAQ,GAErBqC,GADarC,EAAQ,GACVA,EAAQ,IACnBuI,EAAgBvI,EAAQ,GACxBuD,EAAWvD,EAAQ,GACnBqH,EAAUrH,EAAQ,GAClBqJ,EAAerJ,EAAQ,GAEvBkV,GADYlV,EAAQ,IACNA,EAAQ,KACtB8U,EAAe9U,EAAQ,IACvB2wB,EAAgB3wB,EAAQ,IACxBmgC,EAAiBngC,EAAQ,IACzBioB,EAAmBjoB,EAAQ,IAE3BkV,EAAA2M,QAAA8O,EAAArI,KAAAL,EAAAK,KAGA,SAAA9O,EAAAqC,EAAA1G,EAAAC,EAAA0G,EAAAzG,EAAAC,GACAhS,GAAAE,EAAAb,OAAAwS,EAAAlF,WAAA0gB,EAAArI,MACAhlB,GAAAE,EAAAb,OAAA0S,EAAApF,WAAAgY,EAAAK,MAEA26B,EAAAzpC,EAAArE,EAAAkE,WAAAwC,EAAAxG,EAAAgE,WAAAyC,KANA5G,EAAA2M,QAAAse,EAAA7X,KAAAL,EAAAK,KASA,SAAA9O,EAAAqC,EAAA1G,EAAAC,EAAA0G,EAAAzG,EAAAC,GACAhS,GAAAE,EAAAb,OAAAwS,EAAAlF,WAAAkwB,EAAA7X,MACAhlB,GAAAE,EAAAb,OAAA0S,EAAApF,WAAAgY,EAAAK,MAEA,IAAAy3B,EAAA5qC,EAAAkE,WACAuQ,EAAA,IAAA+G,EACAovB,EAAA/e,aAAApX,EAAAxU,GAEA6tC,EAAAzpC,EAAAoQ,EAAA/N,EAAAxG,EAAAgE,WAAAyC,KAIA,IAAAuzB,GAAA,EACA6T,EAAA,EACAC,EAAA,EAGA,SAAAC,IACA1/C,KAAAoW,KACApW,KAAAolB,MACAplB,KAAA2a,WAsBA,IAAAglC,EAAA,IAAAD,EACAE,EAAA,IAAAF,EACAG,EAAA,IApBA,WACA7/C,KAAA0kB,SAAA,GACA1kB,KAAAg/C,QAAA,GACAh/C,KAAAomB,MAAA,GAkBA05B,EAAA,IAdA,WACA9/C,KAAAgmB,GAAAhmB,KAAAimB,GACAjmB,KAAAwkB,GAAAxkB,KAAAykB,GACAzkB,KAAAkC,OAAArC,EAAAI,OACAD,KAAA+/C,YAAAlgD,EAAAI,OACAD,KAAAw+C,YACAx+C,KAAAggD,YAAAngD,EAAAI,OACAD,KAAAy+C,aAaA,SAAAc,EAAAzpC,EAAA+lC,EAAA1jC,EAAA8nC,EAAA7nC,GAWA,IAAAnT,EAAAJ,EAAAa,OAAAyS,EAAAC,GAEA8nC,EAAAr7C,EAAAL,QAAAS,EAAAg7C,EAAAp7B,YAEAiJ,EAAA+tB,EAAAtuB,UACA/I,EAAAq3B,EAAA1uB,UACA1I,EAAAo3B,EAAAzuB,UACAQ,EAAAiuB,EAAAruB,UAEA2yB,EAAAtE,EAAApuB,aACA2yB,EAAAvE,EAAAnuB,aAEA8vB,EAAA39C,EAAA8B,IAAA8iB,EAAAD,GACAg5B,EAAAx7C,YACA,IAyBAq+C,EAzBAvC,EAAAj+C,EAAAO,IAAAo9C,EAAAz9C,GAAAy9C,EAAAz+C,GACAuhD,EAAAzgD,EAAA8C,IAAAm7C,EAAAj+C,EAAA8B,IAAAu+C,EAAA17B,IACA+7B,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EAGA,GAAAP,EAAA,CACA,IAAAQ,EAAA9gD,EAAA8B,IAAA6iB,EAAAsJ,GACA6yB,EAAA3+C,YACA,IAAA4+C,EAAA/gD,EAAAO,IAAAugD,EAAA5gD,GAAA4gD,EAAA5hD,GACA0hD,EAAA5gD,EAAA+C,MAAA+9C,EAAAnD,IAAA,EACA+C,EAAA1gD,EAAA8C,IAAAi+C,EAAAV,GAAArgD,EAAA8C,IAAAi+C,EAAA9yB,GAIA,GAAAsyB,EAAA,CACA,IAAAS,EAAAhhD,EAAA8B,IAAAisB,EAAAnJ,GACAo8B,EAAA7+C,YACA,IAAA8+C,EAAAjhD,EAAAO,IAAAygD,EAAA9gD,GAAA8gD,EAAA9hD,GACA2hD,EAAA7gD,EAAA+C,MAAA46C,EAAAqD,GAAA,EACAL,EAAA3gD,EAAA8C,IAAAm+C,EAAAZ,GAAArgD,EAAA8C,IAAAm+C,EAAAr8B,GAIA,IAAAviB,EAAArC,EAAAI,OACA8gD,EAAAlhD,EAAAI,OACA+gD,EAAAnhD,EAAAI,OAGAkgD,GAAAC,EACAK,GAAAC,GACAL,EAAAE,GAAA,GAAAD,GAAA,GAAAE,GAAA,IAEAt+C,EAAArB,IAAAi9C,GACAiD,EAAAlgD,IAAA+/C,GACAI,EAAAngD,IAAAigD,KAEA5+C,EAAAf,QAAA,EAAA28C,GACAiD,EAAA5/C,QAAA,EAAA28C,GACAkD,EAAA7/C,QAAA,EAAA28C,IAEK2C,GACLJ,EAAAE,GAAA,GAAAD,GAAA,GAAAE,GAAA,IAEAt+C,EAAArB,IAAAi9C,GACAiD,EAAAlgD,IAAA+/C,GACAI,EAAAngD,IAAAi9C,KAEA57C,EAAAf,QAAA,EAAA28C,GACAiD,EAAA5/C,QAAA,EAAA2/C,GACAE,EAAA7/C,QAAA,EAAA28C,IAEK4C,GACLL,EAAAG,GAAA,GAAAD,GAAA,GAAAD,GAAA,IAEAp+C,EAAArB,IAAAi9C,GACAiD,EAAAlgD,IAAAi9C,GACAkD,EAAAngD,IAAAigD,KAEA5+C,EAAAf,QAAA,EAAA28C,GACAiD,EAAA5/C,QAAA,EAAA28C,GACAkD,EAAA7/C,QAAA,EAAAy/C,KAGAP,EAAAE,GAAA,GAAAD,GAAA,GAAAE,GAAA,IAEAt+C,EAAArB,IAAAi9C,GACAiD,EAAAlgD,IAAAi9C,GACAkD,EAAAngD,IAAAi9C,KAEA57C,EAAAf,QAAA,EAAA28C,GACAiD,EAAA5/C,QAAA,EAAA2/C,GACAE,EAAA7/C,QAAA,EAAAy/C,IAGGT,EACHM,GACAJ,EAAAE,GAAA,GAAAD,GAAA,IAEAp+C,EAAArB,IAAAi9C,GACAiD,EAAAlgD,IAAA+/C,GACAI,EAAA7/C,QAAA,EAAA28C,KAEA57C,EAAAf,QAAA,EAAA28C,GACAiD,EAAAlgD,IAAAi9C,GACAkD,EAAA7/C,QAAA,EAAA28C,KAGAuC,EAAAE,GAAA,GAAAD,GAAA,IAEAp+C,EAAArB,IAAAi9C,GACAiD,EAAAlgD,IAAAi9C,GACAkD,EAAA7/C,QAAA,EAAA28C,KAEA57C,EAAAf,QAAA,EAAA28C,GACAiD,EAAAlgD,IAAAi9C,GACAkD,EAAA7/C,QAAA,EAAAy/C,IAGGR,EACHM,GACAL,EAAAC,GAAA,GAAAE,GAAA,IAEAt+C,EAAArB,IAAAi9C,GACAiD,EAAA5/C,QAAA,EAAA28C,GACAkD,EAAAngD,IAAAigD,KAEA5+C,EAAAf,QAAA,EAAA28C,GACAiD,EAAA5/C,QAAA,EAAA28C,GACAkD,EAAAngD,IAAAi9C,KAGAuC,EAAAC,GAAA,GAAAE,GAAA,IAEAt+C,EAAArB,IAAAi9C,GACAiD,EAAA5/C,QAAA,EAAA28C,GACAkD,EAAAngD,IAAAi9C,KAEA57C,EAAAf,QAAA,EAAA28C,GACAiD,EAAA5/C,QAAA,EAAA2/C,GACAE,EAAAngD,IAAAi9C,KAIAuC,EAAAC,GAAA,IAEAp+C,EAAArB,IAAAi9C,GACAiD,EAAA5/C,QAAA,EAAA28C,GACAkD,EAAA7/C,QAAA,EAAA28C,KAEA57C,EAAAf,QAAA,EAAA28C,GACAiD,EAAAlgD,IAAAi9C,GACAkD,EAAAngD,IAAAi9C,IAKA+B,EAAAz5B,MAAA65B,EAAAj7B,QACA,QAAAtoB,EAAA,EAAiBA,EAAAujD,EAAAj7B,UAAsBtoB,EACvCmjD,EAAAn7B,SAAAhoB,GAAAmI,EAAAL,QAAAS,EAAAg7C,EAAAn7B,WAAApoB,IACAmjD,EAAAb,QAAAtiD,GAAAiH,EAAAa,QAAAS,EAAAD,EAAAi7C,EAAAl7B,UAAAroB,IAGA,IAAAwwB,EAAA2uB,EAAAluC,SAAAsyC,EAAAtyC,SAEAmI,EAAAE,WAAA,EAGA2pC,EAAAvpC,KAAAopC,EACAG,EAAAv6B,MAAAi7B,EAAA,IACAV,EAAAhlC,WAAAnK,IAEA,IAAA9T,EAAA,EAAmBA,EAAAmjD,EAAAz5B,QAAqB1pB,EAAA,EACxC+B,EAAAoB,EAAA8C,IAAAT,EAAArC,EAAA8B,IAAAk+C,EAAAn7B,SAAAhoB,GAAA8nB,KACAm7B,EAAAhlC,aACAglC,EAAAhlC,WAAAlc,GAMA,GAAAkhD,EAAAvpC,MAAAu1B,KAIAgU,EAAAhlC,WAAAuS,GAAA,CAKA0yB,EAAAxpC,KAAAu1B,EACAiU,EAAAx6B,OAAA,EACAw6B,EAAAjlC,YAAAnK,IAEA,IAAAgkC,EAAA30C,EAAAO,KAAA8B,EAAAnC,EAAAmC,EAAAnD,GAEA,IAAArC,EAAA,EAAmBA,EAAAmjD,EAAAz5B,QAAqB1pB,EAAA,CACxC,IAIA+B,EAJAN,EAAA0B,EAAAkD,IAAA88C,EAAAb,QAAAtiD,IAEAqwC,EAAAltC,EAAA8C,IAAAxE,EAAA0B,EAAA8B,IAAAk+C,EAAAn7B,SAAAhoB,GAAA8nB,IACAooB,EAAA/sC,EAAA8C,IAAAxE,EAAA0B,EAAA8B,IAAAk+C,EAAAn7B,SAAAhoB,GAAA+nB,IAGA,IAFAhmB,EAAAE,EAAAa,IAAAutC,EAAAH,IAEA1f,EAAA,CAEA0yB,EAAAxpC,KAAAqpC,EACAG,EAAAx6B,MAAA1oB,EACAkjD,EAAAjlC,WAAAlc,EACA,MAIA,GAAAoB,EAAA8C,IAAAxE,EAAAq2C,IAAA,GACA,GAAA30C,EAAA8C,IAAA9C,EAAA8B,IAAAxD,EAAA6iD,GAAA9+C,IAAAyD,EAAAO,YACA,cAGA,GAAArG,EAAA8C,IAAA9C,EAAA8B,IAAAxD,EAAA4iD,GAAA7+C,IAAAyD,EAAAO,YACA,SAIAzH,EAAAmhD,EAAAjlC,aACAilC,EAAAxpC,KAAAqpC,EACAG,EAAAx6B,MAAA1oB,EACAkjD,EAAAjlC,WAAAlc,GAKA,KAAAmhD,EAAAxpC,MAAAu1B,GAAAiU,EAAAjlC,WAAAuS,GAAA,CAKA,IAGA+zB,EAEAA,EADArB,EAAAxpC,MAAAu1B,EACAgU,EACGC,EAAAjlC,WANH,IAMGglC,EAAAhlC,WALH,KAMAilC,EAEAD,EAGA,IAAA95B,EAAA,KAAAzU,EAAAyO,WAAA,IAAAzO,EAAAyO,YAEA,GAAAohC,EAAA7qC,MAAAopC,EAAA,CACA1pC,EAAAM,KAAAhF,EAAA2J,QAIA,IAAA0P,EAAA,EACAC,EAAA7qB,EAAA8C,IAAAT,EAAA29C,EAAAb,QAAA,IACA,IAAAtiD,EAAA,EAAmBA,EAAAmjD,EAAAz5B,QAAqB1pB,EAAA,CACxC,IAAAiB,EAAAkC,EAAA8C,IAAAT,EAAA29C,EAAAb,QAAAtiD,IACAiB,EAAA+sB,IACAA,EAAA/sB,EACA8sB,EAAA/tB,GAIA,IAAAspB,EAAAyE,EACAxE,GAAAD,EAAA,EAAA65B,EAAAz5B,MAAAJ,EAAA,IAEAH,EAAA,GAAAvlB,EAAAu/C,EAAAn7B,SAAAsB,GACAH,EAAA,GAAA7M,GAAA8F,GAAApN,OAAA,EACAmU,EAAA,GAAA7M,GAAA8F,GAAAlN,OAAAoU,EACAH,EAAA,GAAA7M,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACAiG,EAAA,GAAA7M,GAAA8F,GAAAN,MAAApN,EAAAuO,SAEAkG,EAAA,GAAAvlB,EAAAu/C,EAAAn7B,SAAAuB,IACAJ,EAAA,GAAA7M,GAAA8F,GAAApN,OAAA,EACAmU,EAAA,GAAA7M,GAAA8F,GAAAlN,OAAAqU,GACAJ,EAAA,GAAA7M,GAAA8F,GAAAP,MAAAnN,EAAAwO,OACAiG,EAAA,GAAA7M,GAAA8F,GAAAN,MAAApN,EAAAuO,SAEA0gC,GACAP,EAAA95B,GAAA,EACA85B,EAAA75B,GAAA,EACA65B,EAAAt7B,KACAs7B,EAAAr7B,KACAq7B,EAAA59C,OAAArB,IAAAi9C,KAEAgC,EAAA95B,GAAA,EACA85B,EAAA75B,GAAA,EACA65B,EAAAt7B,GAAAC,EACAq7B,EAAAr7B,GAAAD,EACAs7B,EAAA59C,OAAAf,QAAA,EAAA28C,SAGAhoC,EAAAM,KAAAhF,EAAA8J,QAEA2K,EAAA,GAAAvlB,EAAAkkB,EACAqB,EAAA,GAAA7M,GAAA8F,GAAApN,OAAA,EACAmU,EAAA,GAAA7M,GAAA8F,GAAAlN,OAAAqvC,EAAA77B,MACAS,EAAA,GAAA7M,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACAkG,EAAA,GAAA7M,GAAA8F,GAAAN,MAAApN,EAAAwO,OAEAiG,EAAA,GAAAvlB,EAAAmkB,EACAoB,EAAA,GAAA7M,GAAA8F,GAAApN,OAAA,EACAmU,EAAA,GAAA7M,GAAA8F,GAAAlN,OAAAqvC,EAAA77B,MACAS,EAAA,GAAA7M,GAAA8F,GAAAP,MAAAnN,EAAAuO,SACAkG,EAAA,GAAA7M,GAAA8F,GAAAN,MAAApN,EAAAwO,OAEAkgC,EAAA95B,GAAAi7B,EAAA77B,MACA06B,EAAA75B,GAAA65B,EAAA95B,GAAA,EAAA65B,EAAAz5B,MAAA05B,EAAA95B,GAAA,IACA85B,EAAAt7B,GAAAq7B,EAAAn7B,SAAAo7B,EAAA95B,IACA85B,EAAAr7B,GAAAo7B,EAAAn7B,SAAAo7B,EAAA75B,IACA65B,EAAA59C,OAAArB,IAAAg/C,EAAAb,QAAAc,EAAA95B,KAGA85B,EAAAC,YAAAl/C,IAAAi/C,EAAA59C,OAAAnC,GAAA+/C,EAAA59C,OAAAnD,GACA+gD,EAAAE,YAAA7+C,QAAA,EAAA2+C,EAAAC,aACAD,EAAAtB,YAAA3+C,EAAA8C,IAAAm9C,EAAAC,YAAAD,EAAAt7B,IACAs7B,EAAArB,YAAA5+C,EAAA8C,IAAAm9C,EAAAE,YAAAF,EAAAr7B,IAGA,IAAAi6B,GAAA,KAAAttC,EAAAyO,WAAA,IAAAzO,EAAAyO,YACA8+B,GAAA,KAAAvtC,EAAAyO,WAAA,IAAAzO,EAAAyO,YAOA,KAFAzO,EAAA8N,kBAAAw/B,GAAA74B,EAAAi6B,EAAAC,YAAAD,EAAAtB,YAAAsB,EAAA95B,IAEArgB,EAAAC,mBAKAwL,EAAA8N,kBAAAy/B,GAAAD,GAAAoB,EAAAE,YAAAF,EAAArB,YAAAqB,EAAA75B,IAEAtgB,EAAAC,mBAAA,CAKAq7C,EAAA7qC,MAAAopC,GACA1pC,EAAAO,YAAAxW,EAAAQ,MAAAy/C,EAAA59C,QACA4T,EAAAQ,WAAAzW,EAAAQ,MAAAy/C,EAAAt7B,MAEA1O,EAAAO,YAAAxW,EAAAQ,MAAA4/C,EAAAl7B,UAAA+6B,EAAA95B,KACAlQ,EAAAQ,WAAAzW,EAAAQ,MAAA4/C,EAAAn7B,WAAAg7B,EAAA95B,MAGA,IAAAhQ,GAAA,EACA,IAAAtZ,EAAA,EAAiBA,EAAAiJ,EAAAC,oBAAgClJ,EAAA,CAGjD,GAFAmD,EAAA8C,IAAAm9C,EAAA59C,OAAArC,EAAA8B,IAAAg9C,GAAAjiD,GAAA4D,EAAAw/C,EAAAt7B,MAEA0I,EAAA,CACA,IAAA1W,GAAAV,EAAAW,OAAAT,IAEAirC,EAAA7qC,MAAAopC,GACAhpC,GAAAF,WAAAzR,EAAAH,KAAAO,EAAA05C,GAAAjiD,GAAA4D,GACAkW,GAAAwC,GAAA2lC,GAAAjiD,GAAAsc,KAEAxC,GAAAF,WAAAqoC,GAAAjiD,GAAA4D,EACAkW,GAAAwC,GAAA8F,GAAAP,MAAAogC,GAAAjiD,GAAAsc,GAAA8F,GAAAN,MACAhI,GAAAwC,GAAA8F,GAAAN,MAAAmgC,GAAAjiD,GAAAsc,GAAA8F,GAAAP,MACA/H,GAAAwC,GAAA8F,GAAApN,OAAAitC,GAAAjiD,GAAAsc,GAAA8F,GAAAlN,OACA4E,GAAAwC,GAAA8F,GAAAlN,OAAA+sC,GAAAjiD,GAAAsc,GAAA8F,GAAApN,UAGAsE,IAIAF,EAAAE,mCCpcAvZ,EAAAD,QAAAw6C,EAEA,IAAApiB,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB06C,EAAApyB,KAAA,iBAEAoyB,EAAAryB,OAAA/Z,EACAosC,EAAA14C,UAAAN,EAAAg5C,EAAAryB,OAAArmB,WAqBA,IAAAswC,EAAA,CACAsS,YAAA,EACAC,aAAA,EACAl1C,QAAA,GAaA,SAAA+qC,EAAA9rC,EAAAC,EAAAC,EAAAg2C,EAAAC,GACA,KAAArhD,gBAAAg3C,GACA,WAAAA,EAAA9rC,EAAAC,EAAAC,EAAAg2C,EAAAC,GAIA,GAAAj2C,GAAAg2C,GAAA,WAAAA,GAAA,MAAAh2C,GAAA,MAAAA,EAAA,CACA,IAAA6F,EAAA7F,EACAA,EAAAg2C,EACAA,EAAAnwC,EAGA/F,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA2rC,EAAApyB,KAGA5kB,KAAAovC,eAAAgS,EAAAj2C,EAAAkxB,cAAA+kB,GAAAl2C,EAAAmkC,cAAAxvC,EAAAI,OACAD,KAAAsvC,eAAA+R,EAAAj2C,EAAAixB,cAAAglB,GAAAn2C,EAAAqkC,cAAA1vC,EAAAI,OACAD,KAAAshD,SAAA3iD,EAAAG,SAAAoM,EAAArJ,QAAAqJ,EAAArJ,OACAhC,EAAAwC,SAAA8I,EAAA6uB,cAAAh6B,KAAAovC,gBAAAhkC,EAAA4uB,cAAAh6B,KAAAsvC,iBACAtvC,KAAAuhD,cAAAr2C,EAAAg2C,YACAlhD,KAAAwhD,eAAAt2C,EAAAi2C,aACAnhD,KAAA0vC,UAAA,EACA1vC,KAAAyhD,QAAA,EACAzhD,KAAA0hD,OAAA,EAGA1hD,KAAA2hD,IACA3hD,KAAAkwC,KACAlwC,KAAAmwC,KACAnwC,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QACAzwC,KAAAq2B,OAqBA2gB,EAAA14C,UAAAsyC,gBAAA,WACA,OAAA5wC,KAAAovC,gBAMA4H,EAAA14C,UAAAuyC,gBAAA,WACA,OAAA7wC,KAAAsvC,gBAOA0H,EAAA14C,UAAAsjD,UAAA,SAAA//C,GACA7B,KAAAshD,SAAAz/C,GAGAm1C,EAAA14C,UAAAujD,UAAA,WACA,OAAA7hD,KAAAshD,UAGAtK,EAAA14C,UAAAwjD,aAAA,SAAAC,GACA/hD,KAAAuhD,cAAAQ,GAGA/K,EAAA14C,UAAA0jD,aAAA,WACA,OAAAhiD,KAAAuhD,eAGAvK,EAAA14C,UAAA2jD,gBAAA,SAAAnI,GACA95C,KAAAwhD,eAAA1H,GAGA9C,EAAA14C,UAAA4jD,gBAAA,WACA,OAAAliD,KAAAwhD,gBAGAxK,EAAA14C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGA4H,EAAA14C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGA0H,EAAA14C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAA5B,KAAA0vC,UAAA1vC,KAAA2hD,KAAA//C,IAAAsL,IAGA8pC,EAAA14C,UAAA6O,kBAAA,SAAAD,GACA,UAGA8pC,EAAA14C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAAmE,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAsZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEAxa,KAAAkwC,KAAAvsC,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACApwC,KAAAmwC,KAAAxsC,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBACArwC,KAAA2hD,IAAA9hD,EAAA8B,IAAA9B,EAAAuB,IAAAmZ,EAAAva,KAAAmwC,MAAAtwC,EAAAuB,IAAAiZ,EAAAra,KAAAkwC,OAGA,IAAAruC,EAAA7B,KAAA2hD,IAAA9/C,SACAA,EAAA8D,EAAAK,WACAhG,KAAA2hD,IAAA//C,IAAA,EAAAC,GAEA7B,KAAA2hD,IAAA9gD,IAAA,KAGA,IAAAshD,EAAAtiD,EAAA+C,MAAA5C,KAAAkwC,KAAAlwC,KAAA2hD,KACAS,EAAAviD,EAAA+C,MAAA5C,KAAAmwC,KAAAnwC,KAAA2hD,KACAU,EAAAriD,KAAAswC,WAAAtwC,KAAAwwC,QAAA2R,IAAAniD,KAAAuwC,WACAvwC,KAAAywC,QAAA2R,IAKA,GAFApiD,KAAAq2B,OAAA,GAAAgsB,EAAA,EAAAA,EAAA,EAEAriD,KAAAuhD,cAAA,GACA,IAAApmC,EAAAtZ,EAAA7B,KAAAshD,SAGAgB,EAAA,EAAA3jD,EAAAwH,GAAAnG,KAAAuhD,cAGAvkD,EAAA,EAAAgD,KAAAq2B,OAAAr2B,KAAAwhD,eAAAc,EAGA5zB,EAAA1uB,KAAAq2B,OAAAisB,IAGA/tB,EAAAhnB,EAAA0kC,GACAjyC,KAAAyhD,QAAAltB,GAAAv3B,EAAAu3B,EAAA7F,GACA1uB,KAAAyhD,QAAA,GAAAzhD,KAAAyhD,QAAA,EAAAzhD,KAAAyhD,QAAA,EACAzhD,KAAA0hD,OAAAvmC,EAAAoZ,EAAA7F,EAAA1uB,KAAAyhD,QAEAY,GAAAriD,KAAAyhD,QACAzhD,KAAAq2B,OAAA,GAAAgsB,EAAA,EAAAA,EAAA,OAEAriD,KAAAyhD,QAAA,EACAzhD,KAAA0hD,OAAA,EAGA,GAAAn0C,EAAAoJ,aAAA,CAEA3W,KAAA0vC,WAAAniC,EAAAqJ,QAEA,IAAA4E,EAAA3b,EAAA+B,IAAA5B,KAAA0vC,UAAA1vC,KAAA2hD,KAEA7lC,EAAApa,OAAA1B,KAAAswC,WAAA90B,GACAO,GAAA/b,KAAAwwC,QAAA3wC,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAEAQ,EAAAza,OAAAvB,KAAAuwC,WAAA/0B,GACAS,GAAAjc,KAAAywC,QAAA5wC,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,QAGAxb,KAAA0vC,UAAA,EAGA1vC,KAAAsL,QAAAsO,WAAAtZ,EAAAO,IAAAib,GACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAAO,IAAAmb,GACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGA+6B,EAAA14C,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAGAshD,EAAA1iD,EAAAuB,IAAA0a,EAAAjc,EAAA+C,MAAAmZ,EAAA/b,KAAAkwC,OACAsS,EAAA3iD,EAAAuB,IAAA4a,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,OACA2B,EAAAjyC,EAAA8C,IAAA3C,KAAA2hD,IAAAa,GAAA3iD,EAAA8C,IAAA3C,KAAA2hD,IAAAY,GAEAhnC,GAAAvb,KAAAq2B,QACAyb,EAAA9xC,KAAA0hD,OAAA1hD,KAAAyhD,QAAAzhD,KAAA0vC,WACA1vC,KAAA0vC,WAAAn0B,EAEA,IAAAC,EAAA3b,EAAA+B,IAAA2Z,EAAAvb,KAAA2hD,KACA7lC,EAAApa,OAAA1B,KAAAswC,WAAA90B,GACAO,GAAA/b,KAAAwwC,QAAA3wC,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GACAQ,EAAAza,OAAAvB,KAAAuwC,WAAA/0B,GACAS,GAAAjc,KAAAywC,QAAA5wC,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,GAEAxb,KAAAsL,QAAAsO,WAAAtZ,EAAAO,IAAAib,GACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAAO,IAAAmb,GACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGA+6B,EAAA14C,UAAAmP,yBAAA,SAAAF,GACA,GAAAvN,KAAAuhD,cAAA,EAEA,SAGA,IAAAlnC,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACAwZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EAEA4wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEA5F,EAAAjR,EAAAc,OAAAktC,EAAA3xC,KAAAovC,eAAApvC,KAAAowC,gBACAv7B,EAAAlR,EAAAc,OAAAmtC,EAAA5xC,KAAAsvC,eAAAtvC,KAAAqwC,gBACA0L,EAAAl8C,EAAA8B,IAAA9B,EAAAuB,IAAAmZ,EAAA1F,GAAAhV,EAAAuB,IAAAiZ,EAAAzF,IAGAuG,EADA4gC,EAAA/5C,YACAhC,KAAAshD,SACAnmC,EAAAxc,EACAe,MAAAyb,GAAAxV,EAAAe,oBAAAf,EAAAe,qBAEA,IAAA6U,GAAAvb,KAAAq2B,OAAAlb,EACAK,EAAA3b,EAAA+B,IAAA2Z,EAAAwgC,GAYA,OAVA1hC,EAAA3Y,OAAA1B,KAAAswC,WAAA90B,GACAlB,GAAAta,KAAAwwC,QAAA3wC,EAAA+C,MAAAgS,EAAA4G,GACAjB,EAAAhZ,OAAAvB,KAAAuwC,WAAA/0B,GACAhB,GAAAxa,KAAAywC,QAAA5wC,EAAA+C,MAAAiS,EAAA2G,GAEAxb,KAAAsL,QAAAuO,WAAA9c,EAAA8D,IAAAwZ,GACAra,KAAAsL,QAAAuO,WAAA9Y,EAAAuZ,EACAta,KAAAuL,QAAAsO,WAAA9c,EAAA8D,IAAA0Z,GACAva,KAAAuL,QAAAsO,WAAA9Y,EAAAyZ,EAEA7b,EAAAqE,IAAAmY,GAAAxV,EAAAK,6BCtUAvJ,EAAAD,QAAAy6C,EAEa36C,EAAQ,GAArB,IACAs4B,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GAGrBqC,GAFerC,EAAQ,GAEZA,EAAQ,IACnBuD,EAAWvD,EAAQ,GAEnB6L,GADW7L,EAAQ,GACPA,EAAQ,IAEpBqH,GADYrH,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB26C,EAAAryB,KAAA,iBAEAqyB,EAAAtyB,OAAA/Z,EACAqsC,EAAA34C,UAAAN,EAAAi5C,EAAAtyB,OAAArmB,WAcA,IAAAswC,EAAA,CACA6T,SAAA,EACAC,UAAA,EACAz2C,QAAA,GAYA,SAAAgrC,EAAA/rC,EAAAC,EAAAC,EAAA+jC,GACA,KAAAnvC,gBAAAi3C,GACA,WAAAA,EAAA/rC,EAAAC,EAAAC,EAAA+jC,GAGAjkC,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA4rC,EAAAryB,KAEA5kB,KAAAovC,eAAAD,EAAAhkC,EAAAkxB,cAAA8S,GAAAjkC,EAAAmkC,cAAAxvC,EAAAI,OACAD,KAAAsvC,eAAAH,EAAA/jC,EAAAixB,cAAA8S,GAAAjkC,EAAAqkC,cAAA1vC,EAAAI,OAGAD,KAAA2iD,gBAAA9iD,EAAAI,OACAD,KAAA4iD,iBAAA,EACA5iD,KAAA6iD,WAAA33C,EAAAu3C,SACAziD,KAAA8iD,YAAA53C,EAAAw3C,UAGA1iD,KAAAkwC,KACAlwC,KAAAmwC,KACAnwC,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QACAzwC,KAAA+iD,aACA/iD,KAAAgjD,cAkBA/L,EAAA34C,UAAAsyC,gBAAA,WACA,OAAA5wC,KAAAovC,gBAMA6H,EAAA34C,UAAAuyC,gBAAA,WACA,OAAA7wC,KAAAsvC,gBAMA2H,EAAA34C,UAAA2kD,YAAA,SAAAhoB,GAEAj7B,KAAA6iD,WAAA5nB,GAMAgc,EAAA34C,UAAA4kD,YAAA,WACA,OAAAljD,KAAA6iD,YAMA5L,EAAA34C,UAAA6kD,aAAA,SAAA9nB,GAEAr7B,KAAA8iD,YAAAznB,GAMA4b,EAAA34C,UAAA8kD,aAAA,WACA,OAAApjD,KAAA8iD,aAGA7L,EAAA34C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGA6H,EAAA34C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGA2H,EAAA34C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAAsL,EAAAlN,KAAA2iD,kBAGA1L,EAAA34C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAA4iD,kBAGA3L,EAAA34C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAAoE,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAuZ,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GAAAs3B,EAAAjuC,EAAAvD,IAAAoa,GAGAxa,KAAAkwC,KAAAvsC,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACApwC,KAAAmwC,KAAAxsC,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBAWA,IAAAp2B,EAAAja,KAAAswC,WAAAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QAAAp2B,EAAApa,KAAAywC,QAEAn1B,EAAA,IAAAnT,EAeA,GAdAmT,EAAAlT,GAAArJ,EAAAkb,EAAAE,EAAAD,EAAAla,KAAAkwC,KAAAnwC,EAAAC,KAAAkwC,KAAAnwC,EAAAqa,EAAApa,KAAAmwC,KAAApwC,EACAC,KAAAmwC,KAAApwC,EACAub,EAAAlT,GAAArI,GAAAma,EAAAla,KAAAkwC,KAAAnxC,EAAAiB,KAAAkwC,KAAAnwC,EAAAqa,EAAApa,KAAAmwC,KAAApxC,EAAAiB,KAAAmwC,KAAApwC,EACAub,EAAAjT,GAAAtJ,EAAAuc,EAAAlT,GAAArI,EACAub,EAAAjT,GAAAtI,EAAAka,EAAAE,EAAAD,EAAAla,KAAAkwC,KAAAnxC,EAAAiB,KAAAkwC,KAAAnxC,EAAAqb,EAAApa,KAAAmwC,KAAApxC,EACAiB,KAAAmwC,KAAApxC,EAEAiB,KAAA+iD,aAAAznC,EAAAhT,aAEAtI,KAAAgjD,cAAA9oC,EAAAE,EACApa,KAAAgjD,cAAA,IACAhjD,KAAAgjD,cAAA,EAAAhjD,KAAAgjD,eAGAz1C,EAAAoJ,aAAA,CAEA3W,KAAA2iD,gBAAA/gD,IAAA2L,EAAAqJ,SACA5W,KAAA4iD,kBAAAr1C,EAAAqJ,QAEA,IAAA4E,EAAA3b,EAAAO,IAAAJ,KAAA2iD,gBAAA5jD,EAAAiB,KAAA2iD,gBAAA5iD,GAEA+b,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,GAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAAAxb,KAAA4iD,kBAEA5mC,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,GAAAxb,KAAA4iD,uBAGA5iD,KAAA2iD,gBAAA/hD,UACAZ,KAAA4iD,iBAAA,EAGA5iD,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAg7B,EAAA34C,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEAgZ,EAAAja,KAAAswC,WAAAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QAAAp2B,EAAApa,KAAAywC,QAEAlc,EAAAhnB,EAAA0kC,GAIAH,EAAA71B,EAAAF,EACAR,GAAAvb,KAAAgjD,cAAAlR,EAEAC,EAAA/xC,KAAA4iD,iBACA5Q,EAAAzd,EAAAv0B,KAAA8iD,YACA9iD,KAAA4iD,iBAAAjkD,EAAAe,MAAAM,KAAA4iD,iBAAArnC,GACAy2B,KAGAj2B,GAAA7B,GAFAqB,EAAAvb,KAAA4iD,iBAAA7Q,GAGA91B,GAAA7B,EAAAmB,EAKAu2B,EAAAjyC,EAAA8B,IAAA9B,EAAAuB,IAAA4a,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,OAAAtwC,EAAAuB,IAAA0a,EACAjc,EAAA+C,MAAAmZ,EAAA/b,KAAAkwC,QAEA30B,EAAA1b,EAAAkD,IAAAoF,EAAA3D,QAAAxE,KAAA+iD,aAAAjR,IACAC,EAAA/xC,KAAA2iD,gBACA3iD,KAAA2iD,gBAAAvhD,IAAAma,GAEAy2B,EAAAzd,EAAAv0B,KAAA6iD,WAEA7iD,KAAA2iD,gBAAA5gD,gBAAAiwC,MACAhyC,KAAA2iD,gBAAA3gD,YACAhC,KAAA2iD,gBAAA/gD,IAAAowC,IAGAz2B,EAAA1b,EAAA8B,IAAA3B,KAAA2iD,gBAAA5Q,GAEAj2B,EAAApa,OAAAuY,EAAAsB,GACAQ,GAAA7B,EAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA30B,GAEAS,EAAAza,OAAA4Y,EAAAoB,GACAU,GAAA7B,EAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA50B,GAGAvb,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAg7B,EAAA34C,UAAAmP,yBAAA,SAAAF,GACA,2BCpSA,IACA3N,GAAsD,EAEtDnD,EAAAD,QAAA06C,EAEA,IAAAp3C,EAAaxD,EAAQ,GACrBs4B,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBoyC,EAAoBpyC,EAAQ,IAC5Bm2C,EAAqBn2C,EAAQ,IAE7B46C,EAAAtyB,KAAA,aAEAsyB,EAAAvyB,OAAA/Z,EACAssC,EAAA54C,UAAAN,EAAAk5C,EAAAvyB,OAAArmB,WAeA,IAAAswC,EAAA,CACAkL,MAAA,EACA7tC,QAAA,GAoBA,SAAAirC,EAAAhsC,EAAAC,EAAAC,EAAAi4C,EAAAC,EAAAxJ,GACA,KAAA95C,gBAAAk3C,GACA,WAAAA,EAAAhsC,EAAAC,EAAAC,EAAAi4C,EAAAC,EAAAxJ,GAyBA,IAAAyJ,EAAAC,EAtBAt4C,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA6rC,EAAAtyB,KAEAhlB,GAAAE,EAAAb,OAAAokD,EAAAh4C,SAAAqjC,EAAA9pB,MACAy+B,EAAAh4C,SAAAonC,EAAA7tB,MACAhlB,GAAAE,EAAAb,OAAAqkD,EAAAj4C,SAAAqjC,EAAA9pB,MACA0+B,EAAAj4C,SAAAonC,EAAA7tB,MAEA5kB,KAAAyjD,SAAAJ,GAAAn4C,EAAAm4C,OACArjD,KAAA0jD,SAAAJ,GAAAp4C,EAAAo4C,OACAtjD,KAAA2jD,QAAAhlD,EAAAG,SAAAg7C,KAAA5uC,EAAA4uC,MAEA95C,KAAA4jD,QAAA5jD,KAAAyjD,SAAAl3C,UACAvM,KAAA6jD,QAAA7jD,KAAA0jD,SAAAn3C,UASAvM,KAAA8jD,QAAA9jD,KAAAyjD,SAAAj3C,WACAxM,KAAAsL,QAAAtL,KAAAyjD,SAAAh3C,WAGA,IAAA0L,EAAAnY,KAAAsL,QAAAirB,KACAjc,EAAAta,KAAAsL,QAAA6K,QAAApV,EACAgjD,EAAA/jD,KAAA8jD,QAAAvtB,KACAytB,EAAAhkD,KAAA8jD,QAAA3tC,QAAApV,EAEA,GAAAf,KAAA4jD,UAAAlV,EAAA9pB,KAAA,CACA,IAAAq/B,EAAAjkD,KAAAyjD,SACAzjD,KAAAkkD,eAAAD,EAAA7U,eACApvC,KAAAovC,eAAA6U,EAAA3U,eACAtvC,KAAAmkD,kBAAAF,EAAAzU,iBACAxvC,KAAAokD,aAAAvkD,EAAAI,OAEAsjD,EAAAjpC,EAAA0pC,EAAAhkD,KAAAmkD,sBACG,CACH,IAAAE,EAAArkD,KAAAyjD,SACAzjD,KAAAkkD,eAAAG,EAAAjV,eACApvC,KAAAovC,eAAAiV,EAAA/U,eACAtvC,KAAAmkD,kBAAAE,EAAA7U,iBACAxvC,KAAAokD,aAAAC,EAAAvR,cAEA,IAAAwR,EAAAtkD,KAAAkkD,eACA/4B,EAAAxnB,EAAAiB,SAAAm/C,EAAA/+C,EAAAnF,EAAAuB,IAAAuC,EAAA/B,IAAAuW,EAAAnT,EAAAhF,KAAAovC,gBAAAvvC,EAAA8B,IAAAwW,EAAA3Z,EAAAulD,EAAAvlD,KACA+kD,EAAA1jD,EAAA8C,IAAAwoB,EAAAnrB,KAAAokD,cAAAvkD,EAAA8C,IAAA2hD,EAAAtkD,KAAAokD,cAGApkD,KAAAukD,QAAAvkD,KAAA0jD,SAAAl3C,WACAxM,KAAAuL,QAAAvL,KAAA0jD,SAAAj3C,WAGA,IAAA2L,EAAApY,KAAAuL,QAAAgrB,KACA/b,EAAAxa,KAAAuL,QAAA4K,QAAApV,EACAyjD,EAAAxkD,KAAAukD,QAAAhuB,KACAkuB,EAAAzkD,KAAAukD,QAAApuC,QAAApV,EAEA,GAAAf,KAAA6jD,UAAAnV,EAAA9pB,KAAA,CACAq/B,EAAAjkD,KAAA0jD,SACA1jD,KAAA0kD,eAAAT,EAAA7U,eACApvC,KAAAsvC,eAAA2U,EAAA3U,eACAtvC,KAAA2kD,kBAAAV,EAAAzU,iBACAxvC,KAAA4kD,aAAA/kD,EAAAI,OAEAujD,EAAAhpC,EAAAiqC,EAAAzkD,KAAA2kD,sBACG,CACHN,EAAArkD,KAAA0jD,SACA1jD,KAAA0kD,eAAAL,EAAAjV,eACApvC,KAAAsvC,eAAA+U,EAAA/U,eACAtvC,KAAA2kD,kBAAAN,EAAA7U,iBACAxvC,KAAA4kD,aAAAP,EAAAvR,cAEA,IAAA+R,EAAA7kD,KAAA0kD,eACAt5B,EAAAznB,EAAAiB,SAAA4/C,EAAAx/C,EAAAnF,EAAAuB,IAAAuC,EAAA/B,IAAAwW,EAAApT,EAAAhF,KAAAsvC,gBAAAzvC,EAAA8B,IAAAyW,EAAA5Z,EAAAgmD,EAAAhmD,KACAglD,EAAA3jD,EAAA8C,IAAAyoB,EAAAprB,KAAA4kD,cAAA/kD,EAAA8C,IAAAkiD,EAAA7kD,KAAA4kD,cAGA5kD,KAAA8kD,WAAAvB,EAAAvjD,KAAA2jD,QAAAH,EAEAxjD,KAAA0vC,UAAA,EAGA1vC,KAAA+kD,MAAA/kD,KAAAglD,MAAAhlD,KAAAilD,MAAAjlD,KAAAklD,MACAllD,KAAAmlD,KAAAnlD,KAAAolD,KAAAplD,KAAAqlD,KAAArlD,KAAAslD,KACAtlD,KAAAulD,KAAAvlD,KAAAwlD,KAAAxlD,KAAAylD,KAAAzlD,KAAA0lD,KACA1lD,KAAA2lD,OAAA3lD,KAAA4lD,OACA5lD,KAAA6lD,MAAA7lD,KAAA8lD,MAAA9lD,KAAA+lD,MAAA/lD,KAAAgmD,MACAhmD,KAAAq2B,OAyBA6gB,EAAA54C,UAAA2nD,UAAA,WACA,OAAAjmD,KAAAyjD,UAMAvM,EAAA54C,UAAA4nD,UAAA,WACA,OAAAlmD,KAAA0jD,UAMAxM,EAAA54C,UAAA6nD,SAAA,SAAArM,GACAl6C,GAAAE,EAAAb,OAAAN,EAAAG,SAAAg7C,IACA95C,KAAA2jD,QAAA7J,GAGA5C,EAAA54C,UAAA8nD,SAAA,WACA,OAAApmD,KAAA2jD,SAGAzM,EAAA54C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGA8H,EAAA54C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGA4H,EAAA54C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAA5B,KAAA0vC,UAAA1vC,KAAA2lD,QAAA/jD,IAAAsL,IAGAgqC,EAAA54C,UAAA6O,kBAAA,SAAAD,GAEA,OAAAA,GADAlN,KAAA0vC,UAAA1vC,KAAA6lD,QAIA3O,EAAA54C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAA+kD,MAAA/kD,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAglD,MAAAhlD,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAilD,MAAAjlD,KAAA8jD,QAAA3tC,QAAAnN,YACAhJ,KAAAklD,MAAAllD,KAAAukD,QAAApuC,QAAAnN,YACAhJ,KAAAmlD,KAAAnlD,KAAAsL,QAAA2K,UACAjW,KAAAolD,KAAAplD,KAAAuL,QAAA0K,UACAjW,KAAAqlD,KAAArlD,KAAA8jD,QAAA7tC,UACAjW,KAAAslD,KAAAtlD,KAAAukD,QAAAtuC,UACAjW,KAAAulD,KAAAvlD,KAAAsL,QAAA4K,OACAlW,KAAAwlD,KAAAxlD,KAAAuL,QAAA2K,OACAlW,KAAAylD,KAAAzlD,KAAA8jD,QAAA5tC,OACAlW,KAAA0lD,KAAA1lD,KAAAukD,QAAAruC,OAEA,IAAAoE,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAuZ,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA+iD,EAAAhkD,KAAA8jD,QAAAjqC,WAAA9Y,EACAslD,EAAArmD,KAAA8jD,QAAAlqC,WAAAtZ,EACAgmD,EAAAtmD,KAAA8jD,QAAAlqC,WAAA3Y,EAEAwjD,EAAAzkD,KAAAukD,QAAA1qC,WAAA9Y,EACAwlD,EAAAvmD,KAAAukD,QAAA3qC,WAAAtZ,EACA+P,EAAArQ,KAAAukD,QAAA3qC,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GACAgsC,EAAA7iD,EAAAvD,IAAA4jD,GACAyC,EAAA9iD,EAAAvD,IAAAqkD,GAIA,GAFAzkD,KAAAq2B,OAAA,EAEAr2B,KAAA4jD,SAAAlV,EAAA9pB,KACA5kB,KAAA2lD,OAAA9lD,EAAAI,OACAD,KAAA6lD,MAAA,EACA7lD,KAAA+lD,MAAA,EACA/lD,KAAAq2B,QAAAr2B,KAAAulD,KAAAvlD,KAAAylD,SACG,CACH,IAAA1J,EAAAp4C,EAAAa,QAAAgiD,EAAAxmD,KAAAokD,cACAsC,EAAA/iD,EAAAc,OAAA+hD,EAAAxmD,KAAAkkD,eAAAlkD,KAAAilD,OACArwC,EAAAjR,EAAAc,OAAAktC,EAAA3xC,KAAAovC,eAAApvC,KAAA+kD,OACA/kD,KAAA2lD,OAAA5J,EACA/7C,KAAA+lD,MAAAlmD,EAAA+C,MAAA8jD,EAAA3K,GACA/7C,KAAA6lD,MAAAhmD,EAAA+C,MAAAgS,EAAAmnC,GACA/7C,KAAAq2B,QAAAr2B,KAAAqlD,KAAArlD,KAAAmlD,KAAAnlD,KAAAylD,KAAAzlD,KAAA+lD,MAAA/lD,KAAA+lD,MAAA/lD,KAAAulD,KAAAvlD,KAAA6lD,MAAA7lD,KAAA6lD,MAGA,GAAA7lD,KAAA6jD,SAAAnV,EAAA9pB,KACA5kB,KAAA4lD,OAAA/lD,EAAAI,OACAD,KAAA8lD,MAAA9lD,KAAA2jD,QACA3jD,KAAAgmD,MAAAhmD,KAAA2jD,QACA3jD,KAAAq2B,QAAAr2B,KAAA2jD,QAAA3jD,KAAA2jD,SAAA3jD,KAAAwlD,KAAAxlD,KAAA0lD,UACG,CACH3J,EAAAp4C,EAAAa,QAAAiiD,EAAAzmD,KAAA4kD,cAAA,IACA+B,EAAAhjD,EAAAc,OAAAgiD,EAAAzmD,KAAA0kD,eAAA1kD,KAAAklD,OACArwC,EAAAlR,EAAAc,OAAAmtC,EAAA5xC,KAAAsvC,eAAAtvC,KAAAglD,OACAhlD,KAAA4lD,OAAA/lD,EAAA+B,IAAA5B,KAAA2jD,QAAA5H,GACA/7C,KAAAgmD,MAAAhmD,KAAA2jD,QAAA9jD,EAAA+C,MAAA+jD,EAAA5K,GACA/7C,KAAA8lD,MAAA9lD,KAAA2jD,QAAA9jD,EAAA+C,MAAAiS,EAAAknC,GACA/7C,KAAAq2B,QAAAr2B,KAAA2jD,QAAA3jD,KAAA2jD,SAAA3jD,KAAAslD,KAAAtlD,KAAAolD,MAAAplD,KAAA0lD,KAAA1lD,KAAAgmD,MAAAhmD,KAAAgmD,MAAAhmD,KAAAwlD,KAAAxlD,KAAA8lD,MAAA9lD,KAAA8lD,MAIA9lD,KAAAq2B,OAAAr2B,KAAAq2B,OAAA,IAAAr2B,KAAAq2B,OAAA,EAEA9oB,EAAAoJ,cACAmF,EAAAva,OAAAvB,KAAAmlD,KAAAnlD,KAAA0vC,UAAA1vC,KAAA2lD,QACA5pC,GAAA/b,KAAAulD,KAAAvlD,KAAA0vC,UAAA1vC,KAAA6lD,MAEA7pC,EAAAza,OAAAvB,KAAAolD,KAAAplD,KAAA0vC,UAAA1vC,KAAA4lD,QACA3pC,GAAAjc,KAAAwlD,KAAAxlD,KAAA0vC,UAAA1vC,KAAA8lD,MAEAO,EAAA3kD,OAAA1B,KAAAqlD,KAAArlD,KAAA0vC,UAAA1vC,KAAA2lD,QACAW,GAAAtmD,KAAAylD,KAAAzlD,KAAA0vC,UAAA1vC,KAAA+lD,MAEAQ,EAAA7kD,OAAA1B,KAAAslD,KAAAtlD,KAAA0vC,UAAA1vC,KAAA4lD,QACAv1C,GAAArQ,KAAA0lD,KAAA1lD,KAAA0vC,UAAA1vC,KAAAgmD,OAGAhmD,KAAA0vC,UAAA,EAGA1vC,KAAAsL,QAAAsO,WAAAtZ,EAAAO,IAAAib,GACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAAO,IAAAmb,GACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,EACAjc,KAAA8jD,QAAAlqC,WAAAtZ,EAAAO,IAAAwlD,GACArmD,KAAA8jD,QAAAlqC,WAAA3Y,EAAAqlD,EACAtmD,KAAAukD,QAAA3qC,WAAAtZ,EAAAO,IAAA0lD,GACAvmD,KAAAukD,QAAA3qC,WAAA3Y,EAAAoP,GAGA6mC,EAAA54C,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EACAolD,EAAArmD,KAAA8jD,QAAAlqC,WAAAtZ,EACAgmD,EAAAtmD,KAAA8jD,QAAAlqC,WAAA3Y,EACAslD,EAAAvmD,KAAAukD,QAAA3qC,WAAAtZ,EACA+P,EAAArQ,KAAAukD,QAAA3qC,WAAA3Y,EAEA6wC,EAAAjyC,EAAA8C,IAAA3C,KAAA2lD,OAAA7pC,GAAAjc,EAAA8C,IAAA3C,KAAA2lD,OAAAU,GACAxmD,EAAA8C,IAAA3C,KAAA4lD,OAAA5pC,GAAAnc,EAAA8C,IAAA3C,KAAA4lD,OAAAW,GACAzU,GAAA9xC,KAAA6lD,MAAA9pC,EAAA/b,KAAA+lD,MAAAO,GACAtmD,KAAA8lD,MAAA7pC,EAAAjc,KAAAgmD,MAAA31C,GAEA,IAAAkL,GAAAvb,KAAAq2B,OAAAyb,EACA9xC,KAAA0vC,WAAAn0B,EAEAO,EAAAva,OAAAvB,KAAAmlD,KAAA5pC,EAAAvb,KAAA2lD,QACA5pC,GAAA/b,KAAAulD,KAAAhqC,EAAAvb,KAAA6lD,MACA7pC,EAAAza,OAAAvB,KAAAolD,KAAA7pC,EAAAvb,KAAA4lD,QACA3pC,GAAAjc,KAAAwlD,KAAAjqC,EAAAvb,KAAA8lD,MACAO,EAAA3kD,OAAA1B,KAAAqlD,KAAA9pC,EAAAvb,KAAA2lD,QACAW,GAAAtmD,KAAAylD,KAAAlqC,EAAAvb,KAAA+lD,MACAQ,EAAA7kD,OAAA1B,KAAAslD,KAAA/pC,EAAAvb,KAAA4lD,QACAv1C,GAAArQ,KAAA0lD,KAAAnqC,EAAAvb,KAAAgmD,MAEAhmD,KAAAsL,QAAAsO,WAAAtZ,EAAAO,IAAAib,GACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAAO,IAAAmb,GACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,EACAjc,KAAA8jD,QAAAlqC,WAAAtZ,EAAAO,IAAAwlD,GACArmD,KAAA8jD,QAAAlqC,WAAA3Y,EAAAqlD,EACAtmD,KAAAukD,QAAA3qC,WAAAtZ,EAAAO,IAAA0lD,GACAvmD,KAAAukD,QAAA3qC,WAAA3Y,EAAAoP,GAGA6mC,EAAA54C,UAAAmP,yBAAA,SAAAF,GACA,IAgBAg2C,EAAAC,EAEAoD,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAnBA5sC,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACAwZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAmmD,EAAAlnD,KAAA8jD,QAAAjqC,WAAA9c,EACAinD,EAAAhkD,KAAA8jD,QAAAjqC,WAAA9Y,EACAomD,EAAAnnD,KAAAukD,QAAA1qC,WAAA9c,EACA0nD,EAAAzkD,KAAAukD,QAAA1qC,WAAA9Y,EAEA4wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GACAgsC,EAAA7iD,EAAAvD,IAAA4jD,GACAyC,EAAA9iD,EAAAvD,IAAAqkD,GAQA58B,EAAA,EAEA,GAAA7nB,KAAA4jD,SAAAlV,EAAA9pB,KACAgiC,EAAA/mD,EAAAI,OACA6mD,EAAA,EACAE,EAAA,EACAn/B,GAAA7nB,KAAAulD,KAAAvlD,KAAAylD,KAEAlC,EAAAjpC,EAAA0pC,EAAAhkD,KAAAmkD,sBACG,CACH,IAAApI,EAAAp4C,EAAAa,QAAAgiD,EAAAxmD,KAAAokD,cACAsC,EAAA/iD,EAAAc,OAAA+hD,EAAAxmD,KAAAkkD,eAAAlkD,KAAAilD,OACArwC,EAAAjR,EAAAc,OAAAktC,EAAA3xC,KAAAovC,eAAApvC,KAAA+kD,OACA6B,EAAA7K,EACAiL,EAAAnnD,EAAA+C,MAAA8jD,EAAA3K,GACA+K,EAAAjnD,EAAA+C,MAAAgS,EAAAmnC,GACAl0B,GAAA7nB,KAAAqlD,KAAArlD,KAAAmlD,KAAAnlD,KAAAylD,KAAAuB,IAAAhnD,KAAAulD,KAAAuB,IAEA,IAAAxC,EAAAzkD,EAAA8B,IAAA3B,KAAAkkD,eAAAlkD,KAAAilD,OACA95B,EAAAxnB,EAAAiB,SAAA4hD,EAAA3mD,EAAAuB,IAAAwT,EAAA/U,EAAA8B,IAAA0Y,EAAA6sC,KACA3D,EAAA1jD,EAAA8C,IAAA9C,EAAA8B,IAAAwpB,EAAAm5B,GAAAtkD,KAAAokD,cAGA,GAAApkD,KAAA6jD,SAAAnV,EAAA9pB,KACAiiC,EAAAhnD,EAAAI,OACA8mD,EAAA/mD,KAAA2jD,QACAsD,EAAAjnD,KAAA2jD,QACA97B,GAAA7nB,KAAA2jD,QAAA3jD,KAAA2jD,SAAA3jD,KAAAwlD,KAAAxlD,KAAA0lD,MAEAlC,EAAAhpC,EAAAiqC,EAAAzkD,KAAA2kD,sBACG,CACH5I,EAAAp4C,EAAAa,QAAAiiD,EAAAzmD,KAAA4kD,cAAA,IACA+B,EAAAhjD,EAAAc,OAAAgiD,EAAAzmD,KAAA0kD,eAAA1kD,KAAAklD,OACArwC,EAAAlR,EAAAc,OAAAmtC,EAAA5xC,KAAAsvC,eAAAtvC,KAAAglD,OACA6B,EAAAhnD,EAAA+B,IAAA5B,KAAA2jD,QAAA5H,GACAkL,EAAAjnD,KAAA2jD,QAAA9jD,EAAA+C,MAAA+jD,EAAA5K,GACAgL,EAAA/mD,KAAA2jD,QAAA9jD,EAAA+C,MAAAiS,EAAAknC,GACAl0B,GAAA7nB,KAAA2jD,QAAA3jD,KAAA2jD,SAAA3jD,KAAAslD,KAAAtlD,KAAAolD,MAAAplD,KAAA0lD,KACAuB,IAAAjnD,KAAAwlD,KAAAuB,IAEA,IAAAlC,EAAAhlD,EAAA8B,IAAA3B,KAAA0kD,eAAA1kD,KAAAklD,OACA95B,EAAAznB,EAAAiB,SAAA6hD,EAAA5mD,EAAAuB,IAAAyT,EAAAhV,EAAA8B,IAAA4Y,EAAA4sC,KACA3D,EAAA3jD,EAAA8C,IAAAyoB,EAAAprB,KAAA4kD,cACA/kD,EAAA8C,IAAAkiD,EAAA7kD,KAAA4kD,cAGA,IAAAzpC,EAAAooC,EAAAvjD,KAAA2jD,QAAAH,EAAAxjD,KAAA8kD,WAEAvpC,EAAA,EAwBA,OAvBAsM,EAAA,IACAtM,GAAAJ,EAAA0M,GAGAxN,EAAA9Y,OAAAvB,KAAAmlD,KAAA5pC,EAAAqrC,GACAtsC,GAAAta,KAAAulD,KAAAhqC,EAAAurC,EACAvsC,EAAAhZ,OAAAvB,KAAAolD,KAAA7pC,EAAAsrC,GACArsC,GAAAxa,KAAAwlD,KAAAjqC,EAAAwrC,EACAG,EAAAxlD,OAAA1B,KAAAqlD,KAAA9pC,EAAAqrC,GACA5C,GAAAhkD,KAAAylD,KAAAlqC,EAAAyrC,EACAG,EAAAzlD,OAAA1B,KAAAslD,KAAA/pC,EAAAsrC,GACApC,GAAAzkD,KAAA0lD,KAAAnqC,EAAA0rC,EAEAjnD,KAAAsL,QAAAuO,WAAA9c,EAAA8D,IAAAwZ,GACAra,KAAAsL,QAAAuO,WAAA9Y,EAAAuZ,EACAta,KAAAuL,QAAAsO,WAAA9c,EAAA8D,IAAA0Z,GACAva,KAAAuL,QAAAsO,WAAA9Y,EAAAyZ,EACAxa,KAAA8jD,QAAAjqC,WAAA9c,EAAA8D,IAAAqmD,GACAlnD,KAAA8jD,QAAAjqC,WAAA9Y,EAAAijD,EACAhkD,KAAAukD,QAAA1qC,WAAA9c,EAAA8D,IAAAsmD,GACAnnD,KAAAukD,QAAA1qC,WAAA9Y,EAAA0jD,EA3EA,EA8EA9+C,EAAAK,6BCtcAvJ,EAAAD,QAAA26C,EAEa76C,EAAQ,GAArB,IACAs4B,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GAGrBqC,GAFerC,EAAQ,GAEZA,EAAQ,IACnBuD,EAAWvD,EAAQ,GAEnB6L,GADW7L,EAAQ,GACPA,EAAQ,IAEpBqH,GADYrH,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB66C,EAAAvyB,KAAA,cAEAuyB,EAAAxyB,OAAA/Z,EACAusC,EAAA74C,UAAAN,EAAAm5C,EAAAxyB,OAAArmB,WAeA,IAAAswC,EAAA,CACA6T,SAAA,EACAC,UAAA,EACA0E,iBAAA,GACAn7C,QAAA,GAYA,SAAAkrC,EAAAjsC,EAAAC,EAAAC,GACA,KAAApL,gBAAAm3C,GACA,WAAAA,EAAAjsC,EAAAC,EAAAC,GAGAF,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA8rC,EAAAvyB,KAEA5kB,KAAAqnD,eAAAn8C,EAAAo8C,aAAAp8C,EAAAo8C,aAAAn8C,EAAAkxB,cAAAjxB,EAAAouB,eAEA,IAAA+tB,EAAAp8C,EAAAjH,WACAsjD,EAAAp8C,EAAAlH,WACAlE,KAAAynD,gBAAAD,EAAAD,EAEAvnD,KAAA2iD,gBAAA9iD,EAAAI,OACAD,KAAA4iD,iBAAA,EAEA5iD,KAAA6iD,WAAA33C,EAAAu3C,SACAziD,KAAA8iD,YAAA53C,EAAAw3C,UACA1iD,KAAA0nD,mBAAAx8C,EAAAk8C,iBAGApnD,KAAAkwC,KACAlwC,KAAAmwC,KACAnwC,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAA2nD,cACA3nD,KAAA4nD,eACA5nD,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QACAzwC,KAAA+iD,aACA/iD,KAAAgjD,cAkBA7L,EAAA74C,UAAA2kD,YAAA,SAAAhoB,GAEAj7B,KAAA6iD,WAAA5nB,GAMAkc,EAAA74C,UAAA4kD,YAAA,WACA,OAAAljD,KAAA6iD,YAMA1L,EAAA74C,UAAA6kD,aAAA,SAAA9nB,GAEAr7B,KAAA8iD,YAAAznB,GAMA8b,EAAA74C,UAAA8kD,aAAA,WACA,OAAApjD,KAAA8iD,aAMA3L,EAAA74C,UAAAupD,oBAAA,SAAAC,GAEA9nD,KAAA0nD,mBAAAI,GAMA3Q,EAAA74C,UAAAypD,oBAAA,WACA,OAAA/nD,KAAA0nD,oBAMAvQ,EAAA74C,UAAA0pD,gBAAA,SAAAV,GACAA,EAAAvoD,GAAAiB,KAAAqnD,eAAAtoD,GACAuoD,EAAAvnD,GAAAC,KAAAqnD,eAAAtnD,IACAC,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAqnD,eAAAC,IAIAnQ,EAAA74C,UAAA2pD,gBAAA,WACA,OAAAjoD,KAAAqnD,gBAMAlQ,EAAA74C,UAAA4pD,iBAAA,SAAAC,GACAA,GAAAnoD,KAAAynD,kBACAznD,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAynD,gBAAAU,IAIAhR,EAAA74C,UAAA8pD,iBAAA,WACA,OAAApoD,KAAAynD,iBAGAtQ,EAAA74C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAAkuB,eAGA2d,EAAA74C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAiuB,eAGA2d,EAAA74C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAAsL,EAAAlN,KAAA2iD,kBAGAxL,EAAA74C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAA4iD,kBAGAzL,EAAA74C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAAmE,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAsZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GAAAs3B,EAAAjuC,EAAAvD,IAAAoa,GAGAxa,KAAAkwC,KAAAvsC,EAAAa,QAAAmtC,EAAA9xC,EAAAkD,IAAA/C,KAAAowC,iBACApwC,KAAAmwC,KAAAxsC,EAAAa,QAAAotC,EAAA/xC,EAAAkD,IAAA/C,KAAAqwC,iBAWA,IAAAp2B,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAEAn1B,EAAA,IAAAnT,EAsBA,GArBAmT,EAAAlT,GAAArJ,EAAAkb,EAAAE,EAAAD,EAAAla,KAAAkwC,KAAAnwC,EAAAC,KAAAkwC,KAAAnwC,EAAAqa,EAAApa,KAAAmwC,KAAApwC,EACAC,KAAAmwC,KAAApwC,EACAub,EAAAlT,GAAArI,GAAAma,EAAAla,KAAAkwC,KAAAnxC,EAAAiB,KAAAkwC,KAAAnwC,EAAAqa,EAAApa,KAAAmwC,KAAApxC,EAAAiB,KAAAmwC,KAAApwC,EACAub,EAAAjT,GAAAtJ,EAAAuc,EAAAlT,GAAArI,EACAub,EAAAjT,GAAAtI,EAAAka,EAAAE,EAAAD,EAAAla,KAAAkwC,KAAAnxC,EAAAiB,KAAAkwC,KAAAnxC,EAAAqb,EAAApa,KAAAmwC,KAAApxC,EACAiB,KAAAmwC,KAAApxC,EAEAiB,KAAA+iD,aAAAznC,EAAAhT,aAEAtI,KAAAgjD,cAAA9oC,EAAAE,EACApa,KAAAgjD,cAAA,IACAhjD,KAAAgjD,cAAA,EAAAhjD,KAAAgjD,eAGAhjD,KAAA2nD,cAAA9nD,EAAAI,OACAD,KAAA2nD,cAAArmD,WAAA,EAAAiZ,EAAA,EAAAva,KAAAmwC,MACAnwC,KAAA2nD,cAAAlmD,WAAA,EAAA4Y,EAAA,EAAAra,KAAAkwC,MACAlwC,KAAA2nD,cAAAhmD,IAAAgC,EAAAa,QAAAmtC,EAAA3xC,KAAAqnD,iBAEArnD,KAAA4nD,eAAAptC,EAAAF,EAAAta,KAAAynD,gBAEAl6C,EAAAoJ,aAAA,CAEA3W,KAAA2iD,gBAAA/gD,IAAA2L,EAAAqJ,SACA5W,KAAA4iD,kBAAAr1C,EAAAqJ,QAEA,IAAA4E,EAAA3b,EAAAO,IAAAJ,KAAA2iD,gBAAA5jD,EAAAiB,KAAA2iD,gBAAA5iD,GAEA+b,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,GAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAAAxb,KAAA4iD,kBAEA5mC,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,GAAAxb,KAAA4iD,uBAGA5iD,KAAA2iD,gBAAA/hD,UACAZ,KAAA4iD,iBAAA,EAGA5iD,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAk7B,EAAA74C,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEAgZ,EAAAja,KAAAswC,WAAAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QAAAp2B,EAAApa,KAAAywC,QAEAlc,EAAAhnB,EAAA0kC,GACAoW,EAAA96C,EAAAL,OAIA4kC,EAAA71B,EAAAF,EAAAssC,EAAAroD,KAAA0nD,mBAAA1nD,KAAA4nD,eACArsC,GAAAvb,KAAAgjD,cAAAlR,EAEAC,EAAA/xC,KAAA4iD,iBACA5Q,EAAAzd,EAAAv0B,KAAA8iD,YACA9iD,KAAA4iD,iBAAAjkD,EAAAe,MAAAM,KAAA4iD,iBAAArnC,GACAy2B,KAGAj2B,GAAA7B,GAFAqB,EAAAvb,KAAA4iD,iBAAA7Q,GAGA91B,GAAA7B,EAAAmB,GAKAu2B,EAAAjyC,EAAAI,QACAqB,WAAA,EAAA0a,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,OACA2B,EAAArwC,WAAA,EAAAqa,EAAA,EAAAjc,EAAA+C,MAAAmZ,EAAA/b,KAAAkwC,OACA4B,EAAAvwC,OAAA8mD,EAAAroD,KAAA0nD,mBAAA1nD,KAAA2nD,eAEApsC,EAAA1b,EAAAkD,IAAAoF,EAAA3D,QAAAxE,KAAA+iD,aAAAjR,IACAC,EAAAlyC,EAAAQ,MAAAL,KAAA2iD,iBACA3iD,KAAA2iD,gBAAAvhD,IAAAma,GAEAy2B,EAAAzd,EAAAv0B,KAAA6iD,WAEA7iD,KAAA2iD,gBAAAjjD,MAAAsyC,GAEAz2B,EAAA1b,EAAA8B,IAAA3B,KAAA2iD,gBAAA5Q,GAEAj2B,EAAApa,OAAAuY,EAAAsB,GACAQ,GAAA7B,EAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA30B,GAEAS,EAAAza,OAAA4Y,EAAAoB,GACAU,GAAA7B,EAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA50B,GAGAvb,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAk7B,EAAA74C,UAAAmP,yBAAA,SAAAF,GACA,2BCvVA,IACA3N,GAAsD,EAEtDnD,EAAAD,QAAA46C,EAEA,IAAAt3C,EAAaxD,EAAQ,GACrBs4B,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GAErBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAEnB6L,GADW7L,EAAQ,GACPA,EAAQ,IAEpBqH,GADYrH,EAAQ,IACVA,EAAQ,IAElBuI,GADYvI,EAAQ,IACJA,EAAQ,IAIxBsO,GAHetO,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB86C,EAAAxyB,KAAA,cAEAwyB,EAAAzyB,OAAA/Z,EACAwsC,EAAA94C,UAAAN,EAAAo5C,EAAAzyB,OAAArmB,WAmBA,IAAAswC,EAAA,CACA6T,SAAA,EACAvB,YAAA,EACAC,aAAA,GACAl1C,QAAA,GAgBA,SAAAmrC,EAAAlsC,EAAAC,EAAAC,EAAA4gC,GACA,KAAAhsC,gBAAAo3C,GACA,WAAAA,EAAAlsC,EAAAC,EAAAC,EAAA4gC,GAGA9gC,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAA+rC,EAAAxyB,KAEAhlB,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAu3C,WAAAv3C,EAAAu3C,UAAA,GACA7iD,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAg2C,cAAAh2C,EAAAg2C,aAAA,GACAthD,GAAAE,EAAAb,OAAAN,EAAAG,SAAAoM,EAAAi2C,eAAAj2C,EAAAi2C,cAAA,GAEAnhD,KAAAsoD,UAAAtc,EAAAnsC,EAAAQ,MAAA2rC,GAAA9gC,EAAA8gC,QAAAnsC,EAAAI,OACAD,KAAAsvC,eAAAzqC,EAAAD,SAAAwG,EAAA9B,eAAAtJ,KAAAsoD,WAEAtoD,KAAA6iD,WAAA33C,EAAAu3C,SACAziD,KAAA0vC,UAAA7vC,EAAAI,OAEAD,KAAAuhD,cAAAr2C,EAAAg2C,YACAlhD,KAAAwhD,eAAAt2C,EAAAi2C,aAEAnhD,KAAAuoD,OAAA,EACAvoD,KAAAyhD,QAAA,EAGAzhD,KAAAmwC,KAAAtwC,EAAAI,OACAD,KAAAqwC,eAAAxwC,EAAAI,OACAD,KAAAuwC,WAAA,EACAvwC,KAAAywC,QAAA,EACAzwC,KAAA6nB,KAAA,IAAA1f,EACAnI,KAAAwoD,IAAA3oD,EAAAI,OAcAm3C,EAAA94C,UAAAmqD,UAAA,SAAAzc,GACA,GAAAhsC,KAAAuL,QAAA0tB,WACAj5B,KAAAuL,QAAA0N,UAAA,GAEAjZ,KAAAsoD,UAAAzoD,EAAAQ,MAAA2rC,IAGAoL,EAAA94C,UAAAoqD,UAAA,WACA,OAAA1oD,KAAAsoD,WAMAlR,EAAA94C,UAAA2kD,YAAA,SAAAhoB,GACAj7B,KAAA6iD,WAAA5nB,GAGAmc,EAAA8L,YAAA,WACA,OAAAljD,KAAA6iD,YAMAzL,EAAA94C,UAAAwjD,aAAA,SAAAC,GACA/hD,KAAAuhD,cAAAQ,GAGA3K,EAAA94C,UAAA0jD,aAAA,WACA,OAAAhiD,KAAAuhD,eAMAnK,EAAA94C,UAAA2jD,gBAAA,SAAAnI,GACA95C,KAAAwhD,eAAA1H,GAGA1C,EAAA94C,UAAA4jD,gBAAA,WACA,OAAAliD,KAAAwhD,gBAGApK,EAAA94C,UAAAyO,WAAA,WACA,OAAAlN,EAAAQ,MAAAL,KAAAsoD,YAGAlR,EAAA94C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGA8H,EAAA94C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAAsL,EAAAlN,KAAA0vC,YAGA0H,EAAA94C,UAAA6O,kBAAA,SAAAD,GACA,SAAAA,GAGAkqC,EAAA94C,UAAA8O,YAAA,SAAAC,GACArN,KAAAsoD,UAAA3mD,IAAA0L,IAGA+pC,EAAA94C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAApR,EAAA9E,KAAAuL,QAAAsO,WACA8uC,EAAA3oD,KAAAuL,QAAAqO,WAEAW,EAAAzV,EAAA/H,EACAyd,EAAA1V,EAAA/D,EACAib,EAAA2sC,EAAAroD,EACA2b,EAAA0sC,EAAA1nD,EAEA2wC,EAAAjuC,EAAAvD,IAAAoa,GAEAqN,EAAA7nB,KAAAuL,QAAAmvB,UAGA4nB,EAAA,EAAA3jD,EAAAwH,GAAAnG,KAAAuhD,cAGAvkD,EAAA,EAAA6qB,EAAA7nB,KAAAwhD,eAAAc,EAGA5zB,EAAA7G,GAAAy6B,KAKA/tB,EAAAhnB,EAAA0kC,GACAryC,GAAAE,EAAAb,OAAAjC,EAAAu3B,EAAA7F,EAAA/vB,EAAAE,SACAmB,KAAAyhD,QAAAltB,GAAAv3B,EAAAu3B,EAAA7F,GACA,GAAA1uB,KAAAyhD,UACAzhD,KAAAyhD,QAAA,EAAAzhD,KAAAyhD,SAEAzhD,KAAAuoD,OAAAh0B,EAAA7F,EAAA1uB,KAAAyhD,QAGAzhD,KAAAmwC,KAAAxsC,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBAOA,IAAA/0B,EAAA,IAAAnT,EACAmT,EAAAlT,GAAArJ,EAAAiB,KAAAuwC,WAAAvwC,KAAAywC,QAAAzwC,KAAAmwC,KAAApwC,EAAAC,KAAAmwC,KAAApwC,EACAC,KAAAyhD,QACAnmC,EAAAlT,GAAArI,GAAAC,KAAAywC,QAAAzwC,KAAAmwC,KAAApxC,EAAAiB,KAAAmwC,KAAApwC,EACAub,EAAAjT,GAAAtJ,EAAAuc,EAAAlT,GAAArI,EACAub,EAAAjT,GAAAtI,EAAAC,KAAAuwC,WAAAvwC,KAAAywC,QAAAzwC,KAAAmwC,KAAApxC,EAAAiB,KAAAmwC,KAAApxC,EACAiB,KAAAyhD,QAEAzhD,KAAAq2B,OAAA/a,EAAAhT,aAEAtI,KAAAwoD,IAAA3nD,IAAA0Z,GACAva,KAAAwoD,IAAAlnD,WAAA,EAAAtB,KAAAmwC,MAAA,EAAAnwC,KAAAsoD,WACAtoD,KAAAwoD,IAAA5mD,IAAA5B,KAAAuoD,QAGAtsC,GAAA,IAEA1O,EAAAoJ,cACA3W,KAAA0vC,UAAA9tC,IAAA2L,EAAAqJ,SACAoF,EAAAza,OAAAvB,KAAAuwC,WAAAvwC,KAAA0vC,WACAzzB,GAAAjc,KAAAywC,QAAA5wC,EAAA+C,MAAA5C,KAAAmwC,KAAAnwC,KAAA0vC,YAGA1vC,KAAA0vC,UAAA9uC,UAGA+nD,EAAAroD,EAAAO,IAAAmb,GACA2sC,EAAA1nD,EAAAgb,GAGAm7B,EAAA94C,UAAAkP,yBAAA,SAAAD,GACA,IAAAo7C,EAAA3oD,KAAAuL,QAAAqO,WACAoC,EAAAnc,EAAAQ,MAAAsoD,EAAAroD,GACA2b,EAAA0sC,EAAA1nD,EAIA6wC,EAAAjyC,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,MACA2B,EAAA1wC,IAAA4a,GAEA81B,EAAAxwC,WAAA,EAAAtB,KAAAwoD,IAAAxoD,KAAAyhD,QAAAzhD,KAAA0vC,WACAoC,EAAA/uC,MAEA,IAAAwY,EAAApT,EAAA3D,QAAAxE,KAAAq2B,OAAAyb,GAEAC,EAAAlyC,EAAAQ,MAAAL,KAAA0vC,WACA1vC,KAAA0vC,UAAAtuC,IAAAma,GACA,IAAAy2B,EAAAzkC,EAAA0kC,GAAAjyC,KAAA6iD,WACA7iD,KAAA0vC,UAAAhwC,MAAAsyC,GACAz2B,EAAA1b,EAAA8B,IAAA3B,KAAA0vC,UAAAqC,GAEA/1B,EAAAza,OAAAvB,KAAAuwC,WAAAh1B,GACAU,GAAAjc,KAAAywC,QAAA5wC,EAAA+C,MAAA5C,KAAAmwC,KAAA50B,GAEAotC,EAAAroD,EAAAO,IAAAmb,GACA2sC,EAAA1nD,EAAAgb,GAGAm7B,EAAA94C,UAAAmP,yBAAA,SAAAF,GACA,2BCxRA,IACA3N,GAAsD,EAEtDnD,EAAAD,QAAA66C,EAEA,IAAAv3C,EAAaxD,EAAQ,GACrBs4B,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpB+6C,EAAAzyB,KAAA,eACAyyB,EAAAuR,kBAAA,EAEAvR,EAAA1yB,OAAA/Z,EACAysC,EAAA/4C,UAAAN,EAAAq5C,EAAA1yB,OAAArmB,WAkBA,IAAAuqD,EAAA,CACAn9C,kBAAA,EACAO,QAAA,GAkBA,SAAAorC,EAAAnsC,EAAAC,EAAAC,EAAA09C,EAAAC,EAAA3H,EAAAC,EAAAvH,GACA,KAAA95C,gBAAAq3C,GACA,WAAAA,EAAAnsC,EAAAC,EAAAC,EAAA09C,EAAAC,EAAA3H,EAAAC,EAAAvH,GAGA5uC,EAAA0pB,EAAA1pB,EAAA29C,GACAj+C,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAgsC,EAAAzyB,KACA5kB,KAAAgpD,gBAAAF,IAAA59C,EAAA+9C,eAAAppD,EAAAO,KAAA,MACAJ,KAAAkpD,gBAAAH,IAAA79C,EAAAi+C,eAAAtpD,EAAAO,IAAA,MACAJ,KAAAovC,eAAAgS,EAAAj2C,EAAAkxB,cAAA+kB,GAAAl2C,EAAAmkC,cAAAxvC,EAAAO,KAAA,KACAJ,KAAAsvC,eAAA+R,EAAAj2C,EAAAixB,cAAAglB,GAAAn2C,EAAAqkC,cAAA1vC,EAAAO,IAAA,KACAJ,KAAAopD,UAAAzqD,EAAAG,SAAAoM,EAAAm+C,SAAAn+C,EAAAm+C,QAAAxpD,EAAAwC,SAAA++C,EAAA0H,GACA9oD,KAAAspD,UAAA3qD,EAAAG,SAAAoM,EAAAq+C,SAAAr+C,EAAAq+C,QAAA1pD,EAAAwC,SAAAg/C,EAAA0H,GACA/oD,KAAA2jD,QAAAhlD,EAAAG,SAAAg7C,KAAA5uC,EAAA4uC,MAEAl6C,GAAAE,EAAAb,OAAA66C,EAAAn7C,EAAAE,SAEAmB,KAAA8kD,WAAA9kD,KAAAopD,UAAAppD,KAAA2jD,QAAA3jD,KAAAspD,UAEAtpD,KAAA0vC,UAAA,EAGA1vC,KAAAwpD,KACAxpD,KAAAypD,KACAzpD,KAAAkwC,KACAlwC,KAAAmwC,KACAnwC,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QACAzwC,KAAAq2B,OAmBAghB,EAAA/4C,UAAAorD,iBAAA,WACA,OAAA1pD,KAAAgpD,iBAMA3R,EAAA/4C,UAAAqrD,iBAAA,WACA,OAAA3pD,KAAAkpD,iBAMA7R,EAAA/4C,UAAAsrD,WAAA,WACA,OAAA5pD,KAAAopD,WAMA/R,EAAA/4C,UAAAurD,WAAA,WACA,OAAA7pD,KAAAspD,WAMAjS,EAAA/4C,UAAA8nD,SAAA,WACA,OAAApmD,KAAA2jD,SAMAtM,EAAA/4C,UAAAwrD,kBAAA,WACA,IAAAtrD,EAAAwB,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,gBACA3wC,EAAAuB,KAAAgpD,gBACA,OAAAnpD,EAAAwC,SAAA7D,EAAAC,IAMA44C,EAAA/4C,UAAAyrD,kBAAA,WACA,IAAAvrD,EAAAwB,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,gBACA7wC,EAAAuB,KAAAkpD,gBACA,OAAArpD,EAAAwC,SAAA7D,EAAAC,IAGA44C,EAAA/4C,UAAA8O,YAAA,SAAAC,GACArN,KAAAgpD,gBAAArnD,IAAA0L,GACArN,KAAAkpD,gBAAAvnD,IAAA0L,IAGAgqC,EAAA/4C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGAiI,EAAA/4C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGA+H,EAAA/4C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAA5B,KAAA0vC,UAAA1vC,KAAAypD,MAAA7nD,IAAAsL,IAGAmqC,EAAA/4C,UAAA6O,kBAAA,SAAAD,GACA,UAGAmqC,EAAA/4C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAAmE,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAsZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEAxa,KAAAkwC,KAAAvsC,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACApwC,KAAAmwC,KAAAxsC,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBAGArwC,KAAAwpD,KAAA3pD,EAAA8B,IAAA9B,EAAAuB,IAAAiZ,EAAAra,KAAAkwC,MAAAlwC,KAAAgpD,iBACAhpD,KAAAypD,KAAA5pD,EAAA8B,IAAA9B,EAAAuB,IAAAmZ,EAAAva,KAAAmwC,MAAAnwC,KAAAkpD,iBAEA,IAAAG,EAAArpD,KAAAwpD,KAAA3nD,SACA0nD,EAAAvpD,KAAAypD,KAAA5nD,SAEAwnD,EAAA,GAAA1jD,EAAAK,WACAhG,KAAAwpD,KAAA5nD,IAAA,EAAAynD,GAEArpD,KAAAwpD,KAAA5oD,UAGA2oD,EAAA,GAAA5jD,EAAAK,WACAhG,KAAAypD,KAAA7nD,IAAA,EAAA2nD,GAEAvpD,KAAAypD,KAAA7oD,UAIA,IAAAopD,EAAAnqD,EAAA+C,MAAA5C,KAAAkwC,KAAAlwC,KAAAwpD,MACAS,EAAApqD,EAAA+C,MAAA5C,KAAAmwC,KAAAnwC,KAAAypD,MAEAxvC,EAAAja,KAAAswC,WAAAtwC,KAAAwwC,QAAAwZ,IACA7vC,EAAAna,KAAAuwC,WAAAvwC,KAAAywC,QAAAwZ,IAQA,GANAjqD,KAAAq2B,OAAApc,EAAAja,KAAA2jD,QAAA3jD,KAAA2jD,QAAAxpC,EAEAna,KAAAq2B,OAAA,IACAr2B,KAAAq2B,OAAA,EAAAr2B,KAAAq2B,QAGA9oB,EAAAoJ,aAAA,CAEA3W,KAAA0vC,WAAAniC,EAAAqJ,QAGA,IAAAszC,EAAArqD,EAAA+B,KAAA5B,KAAA0vC,UAAA1vC,KAAAwpD,MACAW,EAAAtqD,EAAA+B,KAAA5B,KAAA2jD,QAAA3jD,KAAA0vC,UAAA1vC,KAAAypD,MAEA3tC,EAAAva,OAAAvB,KAAAswC,WAAA4Z,GACAnuC,GAAA/b,KAAAwwC,QAAA3wC,EAAA+C,MAAA5C,KAAAkwC,KAAAga,GAEAluC,EAAAza,OAAAvB,KAAAuwC,WAAA4Z,GACAluC,GAAAjc,KAAAywC,QAAA5wC,EAAA+C,MAAA5C,KAAAmwC,KAAAga,QAGAnqD,KAAA0vC,UAAA,EAGA1vC,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAo7B,EAAA/4C,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEAshD,EAAA1iD,EAAAuB,IAAA0a,EAAAjc,EAAA+C,MAAAmZ,EAAA/b,KAAAkwC,OACAsS,EAAA3iD,EAAAuB,IAAA4a,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,OAEA2B,GAAAjyC,EAAA8C,IAAA3C,KAAAwpD,KAAAjH,GAAAviD,KAAA2jD,QACA9jD,EAAA8C,IAAA3C,KAAAypD,KAAAjH,GACAjnC,GAAAvb,KAAAq2B,OAAAyb,EACA9xC,KAAA0vC,WAAAn0B,EAEA,IAAA2uC,EAAArqD,EAAA+B,KAAA2Z,EAAAvb,KAAAwpD,MACAW,EAAAtqD,EAAA+B,KAAA5B,KAAA2jD,QAAApoC,EAAAvb,KAAAypD,MACA3tC,EAAAva,OAAAvB,KAAAswC,WAAA4Z,GACAnuC,GAAA/b,KAAAwwC,QAAA3wC,EAAA+C,MAAA5C,KAAAkwC,KAAAga,GACAluC,EAAAza,OAAAvB,KAAAuwC,WAAA4Z,GACAluC,GAAAjc,KAAAywC,QAAA5wC,EAAA+C,MAAA5C,KAAAmwC,KAAAga,GAEAnqD,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAo7B,EAAA/4C,UAAAmP,yBAAA,SAAAF,GACA,IAAA8M,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACAwZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EAEA4wC,EAAAhuC,EAAAvD,IAAAka,GAAAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEA5F,EAAAjR,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACAv7B,EAAAlR,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBAGA+Z,EAAAvqD,EAAA8B,IAAA9B,EAAAuB,IAAAiZ,EAAAra,KAAAkwC,MAAAlwC,KAAAgpD,iBACAqB,EAAAxqD,EAAA8B,IAAA9B,EAAAuB,IAAAmZ,EAAAva,KAAAmwC,MAAAnwC,KAAAkpD,iBAEAG,EAAAe,EAAAvoD,SACA0nD,EAAAc,EAAAxoD,SAEAwnD,EAAA,GAAA1jD,EAAAK,WACAokD,EAAAxoD,IAAA,EAAAynD,GAEAe,EAAAxpD,UAGA2oD,EAAA,GAAA5jD,EAAAK,WACAqkD,EAAAzoD,IAAA,EAAA2nD,GAEAc,EAAAzpD,UAIA,IAAAopD,EAAAnqD,EAAA+C,MAAAgS,EAAAw1C,GACAH,EAAApqD,EAAA+C,MAAAiS,EAAAw1C,GAEApwC,EAAAja,KAAAswC,WAAAtwC,KAAAwwC,QAAAwZ,IACA7vC,EAAAna,KAAAuwC,WAAAvwC,KAAAywC,QAAAwZ,IAEApiC,EAAA5N,EAAAja,KAAA2jD,QAAA3jD,KAAA2jD,QAAAxpC,EAEA0N,EAAA,IACAA,EAAA,EAAAA,GAGA,IAAA1M,EAAAnb,KAAA8kD,WAAAuE,EAAArpD,KAAA2jD,QAAA4F,EACA7U,EAAA/1C,EAAAqE,IAAAmY,GAEAI,GAAAsM,EAAA1M,EAEA+uC,EAAArqD,EAAA+B,KAAA2Z,EAAA6uC,GACAD,EAAAtqD,EAAA+B,KAAA5B,KAAA2jD,QAAApoC,EAAA8uC,GAYA,OAVAhwC,EAAA9Y,OAAAvB,KAAAswC,WAAA4Z,GACA5vC,GAAAta,KAAAwwC,QAAA3wC,EAAA+C,MAAAgS,EAAAs1C,GACA3vC,EAAAhZ,OAAAvB,KAAAuwC,WAAA4Z,GACA3vC,GAAAxa,KAAAywC,QAAA5wC,EAAA+C,MAAAiS,EAAAs1C,GAEAnqD,KAAAsL,QAAAuO,WAAA9c,EAAAsd,EACAra,KAAAsL,QAAAuO,WAAA9Y,EAAAuZ,EACAta,KAAAuL,QAAAsO,WAAA9c,EAAAwd,EACAva,KAAAuL,QAAAsO,WAAA9Y,EAAAyZ,EAEAk6B,EAAA/uC,EAAAK,6BCpWAvJ,EAAAD,QAAA86C,EAEA,IAAA1iB,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBqyC,EAAA,EAKA2I,EAAA1yB,KAAA,aAEA0yB,EAAA3yB,OAAA/Z,EACA0sC,EAAAh5C,UAAAN,EAAAs5C,EAAA3yB,OAAArmB,WAgBA,IAAAswC,EAAA,CACA0b,UAAA,EACAr+C,QAAA,GAkBA,SAAAqrC,EAAApsC,EAAAC,EAAAC,EAAA+jC,GACA,KAAAnvC,gBAAAs3C,GACA,WAAAA,EAAApsC,EAAAC,EAAAC,EAAA+jC,GAGAjkC,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAisC,EAAA1yB,KACA5kB,KAAAovC,eAAAD,EAAAhkC,EAAAkxB,cAAA8S,GAAAjkC,EAAAmkC,cAAAxvC,EAAAO,KAAA,KACAJ,KAAAsvC,eAAAH,EAAA/jC,EAAAixB,cAAA8S,GAAAjkC,EAAAqkC,cAAA1vC,EAAAO,IAAA,KAEAJ,KAAAuqD,YAAAr/C,EAAAo/C,UAEAtqD,KAAAq2B,OAAA,EACAr2B,KAAA0vC,UAAA,EACA1vC,KAAAshD,SAAA,EACAthD,KAAAwqD,QAAA7b,EAGA3uC,KAAA2hD,IACA3hD,KAAAkwC,KACAlwC,KAAAmwC,KACAnwC,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QACAzwC,KAAAq2B,OAcAihB,EAAAh5C,UAAAsyC,gBAAA,WACA,OAAA5wC,KAAAovC,gBAMAkI,EAAAh5C,UAAAuyC,gBAAA,WACA,OAAA7wC,KAAAsvC,gBAMAgI,EAAAh5C,UAAAmsD,aAAA,SAAA5oD,GACA7B,KAAAuqD,YAAA1oD,GAGAy1C,EAAAh5C,UAAAosD,aAAA,WACA,OAAA1qD,KAAAuqD,aAGAjT,EAAAh5C,UAAAqsD,cAAA,WAEA,OAAA3qD,KAAAwqD,SAGAlT,EAAAh5C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGAkI,EAAAh5C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGAgI,EAAAh5C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAA+B,IAAA5B,KAAA0vC,UAAA1vC,KAAA2hD,KAAA//C,IAAAsL,IAGAoqC,EAAAh5C,UAAA6O,kBAAA,SAAAD,GACA,UAGAoqC,EAAAh5C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAAmE,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAsZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEAxa,KAAAkwC,KAAAvsC,EAAAc,OAAAktC,EAAA3xC,KAAAovC,eAAApvC,KAAAowC,gBACApwC,KAAAmwC,KAAAxsC,EAAAc,OAAAmtC,EAAA5xC,KAAAsvC,eAAAtvC,KAAAqwC,gBACArwC,KAAA2hD,IAAA9hD,EAAAI,OACAD,KAAA2hD,IAAArgD,WAAA,EAAAiZ,EAAA,EAAAva,KAAAmwC,MACAnwC,KAAA2hD,IAAAlgD,WAAA,EAAA4Y,EAAA,EAAAra,KAAAkwC,MAEAlwC,KAAAshD,SAAAthD,KAAA2hD,IAAA9/C,SAEA,IAAAsZ,EAAAnb,KAAAshD,SAAAthD,KAAAuqD,YAOA,GALAvqD,KAAAwqD,QADArvC,EAAA,EAhKA,EAmKAwzB,IAGA3uC,KAAAshD,SAAA37C,EAAAK,YAMA,OAHAhG,KAAA2hD,IAAA/gD,UACAZ,KAAAq2B,OAAA,OACAr2B,KAAA0vC,UAAA,GAJA1vC,KAAA2hD,IAAA//C,IAAA,EAAA5B,KAAAshD,UASA,IAAAsJ,EAAA/qD,EAAA+C,MAAA5C,KAAAkwC,KAAAlwC,KAAA2hD,KACAkJ,EAAAhrD,EAAA+C,MAAA5C,KAAAmwC,KAAAnwC,KAAA2hD,KACAU,EAAAriD,KAAAswC,WAAAtwC,KAAAwwC,QAAAoa,IAAA5qD,KAAAuwC,WACAvwC,KAAAywC,QAAAoa,IAIA,GAFA7qD,KAAAq2B,OAAA,GAAAgsB,EAAA,EAAAA,EAAA,EAEA90C,EAAAoJ,aAAA,CAEA3W,KAAA0vC,WAAAniC,EAAAqJ,QAEA,IAAA4E,EAAA3b,EAAA+B,IAAA5B,KAAA0vC,UAAA1vC,KAAA2hD,KAEA7lC,EAAApa,OAAA1B,KAAAswC,WAAA90B,GACAO,GAAA/b,KAAAwwC,QAAA3wC,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAEAQ,EAAAza,OAAAvB,KAAAuwC,WAAA/0B,GACAS,GAAAjc,KAAAywC,QAAA5wC,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,QAGAxb,KAAA0vC,UAAA,EAGA1vC,KAAAsL,QAAAsO,WAAAtZ,EAAAO,IAAAib,GACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAAO,IAAAmb,GACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAq7B,EAAAh5C,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAGAshD,EAAA1iD,EAAAgD,SAAAiZ,EAAAC,EAAA/b,KAAAkwC,MACAsS,EAAA3iD,EAAAgD,SAAAmZ,EAAAC,EAAAjc,KAAAmwC,MACAh1B,EAAAnb,KAAAshD,SAAAthD,KAAAuqD,YACAzY,EAAAjyC,EAAA8C,IAAA3C,KAAA2hD,IAAA9hD,EAAA8B,IAAA6gD,EAAAD,IAGApnC,EAAA,IACA22B,GAAAvkC,EAAAL,OAAAiO,GAGA,IAAAI,GAAAvb,KAAAq2B,OAAAyb,EACAC,EAAA/xC,KAAA0vC,UACA1vC,KAAA0vC,UAAA/wC,EAAAa,IAAA,EAAAQ,KAAA0vC,UAAAn0B,GACAA,EAAAvb,KAAA0vC,UAAAqC,EAEA,IAAAv2B,EAAA3b,EAAA+B,IAAA2Z,EAAAvb,KAAA2hD,KACA7lC,EAAApa,OAAA1B,KAAAswC,WAAA90B,GACAO,GAAA/b,KAAAwwC,QAAA3wC,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GACAQ,EAAAza,OAAAvB,KAAAuwC,WAAA/0B,GACAS,GAAAjc,KAAAywC,QAAA5wC,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,GAEAxb,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAq7B,EAAAh5C,UAAAmP,yBAAA,SAAAF,GACA,IAAA8M,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACAwZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EAEA4wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEA5F,EAAAjR,EAAAc,OAAAktC,EAAA3xC,KAAAovC,eAAApvC,KAAAowC,gBACAv7B,EAAAlR,EAAAc,OAAAmtC,EAAA5xC,KAAAsvC,eAAAtvC,KAAAqwC,gBACA0L,EAAAl8C,EAAAI,OACA87C,EAAAz6C,WAAA,EAAAiZ,EAAA,EAAA1F,GACAknC,EAAAt6C,WAAA,EAAA4Y,EAAA,EAAAzF,GAEA,IAAA/S,EAAAk6C,EAAA/5C,YACAmZ,EAAAtZ,EAAA7B,KAAAuqD,YAEApvC,EAAAxc,EAAAe,MAAAyb,EAAA,EAAAxV,EAAAe,qBAEA,IAAA6U,GAAAvb,KAAAq2B,OAAAlb,EACAK,EAAA3b,EAAA+B,IAAA2Z,EAAAwgC,GAYA,OAVA1hC,EAAA3Y,OAAA1B,KAAAswC,WAAA90B,GACAlB,GAAAta,KAAAwwC,QAAA3wC,EAAA+C,MAAAgS,EAAA4G,GACAjB,EAAAhZ,OAAAvB,KAAAuwC,WAAA/0B,GACAhB,GAAAxa,KAAAywC,QAAA5wC,EAAA+C,MAAAiS,EAAA2G,GAEAxb,KAAAsL,QAAAuO,WAAA9c,EAAA8D,IAAAwZ,GACAra,KAAAsL,QAAAuO,WAAA9Y,EAAAuZ,EACAta,KAAAuL,QAAAsO,WAAA9c,EAAA8D,IAAA0Z,GACAva,KAAAuL,QAAAsO,WAAA9Y,EAAAyZ,EAEA3Y,EAAA7B,KAAAuqD,YAAA5kD,EAAAK,6BCrSAvJ,EAAAD,QAAA+6C,EAEA,IAAA3iB,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GACnB2L,EAAW3L,EAAQ,GAEnBsN,GADYtN,EAAQ,GACRA,EAAQ,KACpBqH,EAAUrH,EAAQ,GAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBi7C,EAAA3yB,KAAA,aAEA2yB,EAAA5yB,OAAA/Z,EACA2sC,EAAAj5C,UAAAN,EAAAu5C,EAAA5yB,OAAArmB,WAmBA,IAAAswC,EAAA,CACAsS,YAAA,EACAC,aAAA,EACAl1C,QAAA,GAWA,SAAAsrC,EAAArsC,EAAAC,EAAAC,EAAA+jC,GACA,KAAAnvC,gBAAAu3C,GACA,WAAAA,EAAArsC,EAAAC,EAAAC,EAAA+jC,GAGAjkC,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAksC,EAAA3yB,KAEA5kB,KAAAovC,eAAAD,EAAAhkC,EAAAkxB,cAAA8S,GAAAjkC,EAAAmkC,cAAAxvC,EAAAI,OACAD,KAAAsvC,eAAAH,EAAA/jC,EAAAixB,cAAA8S,GAAAjkC,EAAAqkC,cAAA1vC,EAAAI,OACAD,KAAAwvC,iBAAA7wC,EAAAG,SAAAoM,EAAAukC,gBAAAvkC,EAAAukC,eAAArkC,EAAAlH,WAAAiH,EAAAjH,WAEAlE,KAAAuhD,cAAAr2C,EAAAg2C,YACAlhD,KAAAwhD,eAAAt2C,EAAAi2C,aAEAnhD,KAAA0vC,UAAAznC,IAEAjI,KAAA0hD,OAAA,EACA1hD,KAAAyhD,QAAA,EAGAzhD,KAAAkwC,KACAlwC,KAAAmwC,KACAnwC,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QACAzwC,KAAAq2B,OAAA,IAAAzsB,EAoBA2tC,EAAAj5C,UAAAsyC,gBAAA,WACA,OAAA5wC,KAAAovC,gBAMAmI,EAAAj5C,UAAAuyC,gBAAA,WACA,OAAA7wC,KAAAsvC,gBAMAiI,EAAAj5C,UAAAwyC,kBAAA,WACA,OAAA9wC,KAAAwvC,kBAMA+H,EAAAj5C,UAAAwjD,aAAA,SAAAC,GACA/hD,KAAAuhD,cAAAQ,GAGAxK,EAAAj5C,UAAA0jD,aAAA,WACA,OAAAhiD,KAAAuhD,eAMAhK,EAAAj5C,UAAA2jD,gBAAA,SAAAnI,GACA95C,KAAAwhD,eAAA1H,GAGAvC,EAAAj5C,UAAA4jD,gBAAA,WACA,OAAAliD,KAAAwhD,gBAGAjK,EAAAj5C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGAmI,EAAAj5C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGAiI,EAAAj5C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAAO,IAAAJ,KAAA0vC,UAAA3wC,EAAAiB,KAAA0vC,UAAA3vC,GAAA6B,IAAAsL,IAGAqqC,EAAAj5C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAA0vC,UAAAxnC,GAGAqvC,EAAAj5C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAAoE,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAuZ,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GAAAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEAxa,KAAAkwC,KAAAvsC,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACApwC,KAAAmwC,KAAAxsC,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBAWA,IAAAp2B,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAEAn1B,EAAA,IAAA1R,EAaA,GAZA0R,EAAAlT,GAAArJ,EAAAkb,EAAAE,EAAAna,KAAAkwC,KAAAnwC,EAAAC,KAAAkwC,KAAAnwC,EAAAma,EAAAla,KAAAmwC,KAAApwC,EAAAC,KAAAmwC,KAAApwC,EACAqa,EACAkB,EAAAjT,GAAAtJ,GAAAiB,KAAAkwC,KAAAnwC,EAAAC,KAAAkwC,KAAAnxC,EAAAmb,EAAAla,KAAAmwC,KAAApwC,EAAAC,KAAAmwC,KAAApxC,EAAAqb,EACAkB,EAAAzR,GAAA9K,GAAAiB,KAAAkwC,KAAAnwC,EAAAma,EAAAla,KAAAmwC,KAAApwC,EAAAqa,EACAkB,EAAAlT,GAAArI,EAAAub,EAAAjT,GAAAtJ,EACAuc,EAAAjT,GAAAtI,EAAAka,EAAAE,EAAAna,KAAAkwC,KAAAnxC,EAAAiB,KAAAkwC,KAAAnxC,EAAAmb,EAAAla,KAAAmwC,KAAApxC,EAAAiB,KAAAmwC,KAAApxC,EACAqb,EACAkB,EAAAzR,GAAA9J,EAAAC,KAAAkwC,KAAAnxC,EAAAmb,EAAAla,KAAAmwC,KAAApxC,EAAAqb,EACAkB,EAAAlT,GAAAF,EAAAoT,EAAAzR,GAAA9K,EACAuc,EAAAjT,GAAAH,EAAAoT,EAAAzR,GAAA9J,EACAub,EAAAzR,GAAA3B,EAAAgS,EAAAE,EAEApa,KAAAuhD,cAAA,GACAjmC,EAAAlR,aAAApK,KAAAq2B,QAEA,IAAAy0B,EAAA5wC,EAAAE,EACAtd,EAAAguD,EAAA,IAAAA,EAAA,EAEA3vC,EAAAX,EAAAF,EAAAta,KAAAwvC,iBAGA8S,EAAA,EAAA3jD,EAAAwH,GAAAnG,KAAAuhD,cAGAvkD,EAAA,EAAAF,EAAAkD,KAAAwhD,eAAAc,EAGA5zB,EAAA5xB,EAAAwlD,IAGA/tB,EAAAhnB,EAAA0kC,GACAjyC,KAAAyhD,QAAAltB,GAAAv3B,EAAAu3B,EAAA7F,GACA1uB,KAAAyhD,QAAA,GAAAzhD,KAAAyhD,QAAA,EAAAzhD,KAAAyhD,QAAA,EACAzhD,KAAA0hD,OAAAvmC,EAAAoZ,EAAA7F,EAAA1uB,KAAAyhD,QAEAqJ,GAAA9qD,KAAAyhD,QACAzhD,KAAAq2B,OAAAxsB,GAAA3B,EAAA,GAAA4iD,EAAA,EAAAA,EAAA,OACG,GAAAxvC,EAAAzR,GAAA3B,GACHoT,EAAAlR,aAAApK,KAAAq2B,QACAr2B,KAAAyhD,QAAA,EACAzhD,KAAA0hD,OAAA,IAEApmC,EAAAhR,gBAAAtK,KAAAq2B,QACAr2B,KAAAyhD,QAAA,EACAzhD,KAAA0hD,OAAA,GAGA,GAAAn0C,EAAAoJ,aAAA,CAEA3W,KAAA0vC,UAAA9tC,IAAA2L,EAAAqJ,SAEA,IAAA4E,EAAA3b,EAAAO,IAAAJ,KAAA0vC,UAAA3wC,EAAAiB,KAAA0vC,UAAA3vC,GAEA+b,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,GAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAAAxb,KAAA0vC,UAAAxnC,GAEA8T,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,GAAAxb,KAAA0vC,UAAAxnC,QAGAlI,KAAA0vC,UAAA9uC,UAGAZ,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAs7B,EAAAj5C,UAAAkP,yBAAA,SAAAD,GACA,IAAAuO,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEAgZ,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAEA,GAAAzwC,KAAAuhD,cAAA,GACA,IAAApP,EAAAl2B,EAAAF,EAEAgvC,GAAA/qD,KAAAq2B,OAAAxsB,GAAA3B,GACAiqC,EAAAnyC,KAAA0hD,OAAA1hD,KAAAyhD,QAAAzhD,KAAA0vC,UAAAxnC,GACAlI,KAAA0vC,UAAAxnC,GAAA6iD,EAEAhvC,GAAA7B,EAAA6wC,EACA9uC,GAAA7B,EAAA2wC,GAEA7Y,EAAAryC,EAAAI,QACAqB,WAAA,EAAA0a,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,OACA+B,EAAAzwC,WAAA,EAAAqa,EAAA,EAAAjc,EAAA+C,MAAAmZ,EAAA/b,KAAAkwC,OAEA,IAAA2E,EAAAh1C,EAAAkD,IAAA6G,EAAApF,QAAAxE,KAAAq2B,OAAA6b,IACAlyC,KAAA0vC,UAAA3wC,GAAA81C,EAAA91C,EACAiB,KAAA0vC,UAAA3vC,GAAA80C,EAAA90C,EAEA,IAAAyb,EAAA3b,EAAAQ,MAAAw0C,GAEA/4B,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAEAQ,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,EAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,OACG,CACH,IAAA02B,KAAAryC,EAAAI,QACAqB,WAAA,EAAA0a,EAAA,EAAAnc,EAAA+C,MAAAqZ,EAAAjc,KAAAmwC,OACA+B,EAAAzwC,WAAA,EAAAqa,EAAA,EAAAjc,EAAA+C,MAAAmZ,EAAA/b,KAAAkwC,OACAiC,EAAAl2B,EAAAF,EAAA,IACA+1B,EAAA7pC,EAAAiqC,EAAAnzC,EAAAmzC,EAAAnyC,EAAAoyC,GAEA52B,EAAAtT,EAAAlF,IAAA6G,EAAAc,QAAA1K,KAAAq2B,OAAAyb,IACA9xC,KAAA0vC,UAAAtuC,IAAAma,GAEAC,EAAA3b,EAAAO,IAAAmb,EAAAxc,EAAAwc,EAAAxb,GAEA+b,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,GAAAra,EAAA+C,MAAA5C,KAAAkwC,KAAA10B,GAAAD,EAAArT,GAEA8T,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,GAAAva,EAAA+C,MAAA5C,KAAAmwC,KAAA30B,GAAAD,EAAArT,GAGAlI,KAAAsL,QAAAsO,WAAAtZ,EAAAwb,EACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAA0b,EACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAs7B,EAAAj5C,UAAAmP,yBAAA,SAAAF,GACA,IAaA+kC,EAAAC,EAbAl4B,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACAwZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EAEA4wC,EAAAhuC,EAAAvD,IAAAka,GAAAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEAP,EAAAja,KAAAswC,WAAAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QAAAp2B,EAAApa,KAAAywC,QAEA77B,EAAAjR,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACAv7B,EAAAlR,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBAIA/0B,EAAA,IAAA1R,EAWA,GAVA0R,EAAAlT,GAAArJ,EAAAkb,EAAAE,EAAAvF,EAAA7U,EAAA6U,EAAA7U,EAAAma,EAAArF,EAAA9U,EAAA8U,EAAA9U,EAAAqa,EACAkB,EAAAjT,GAAAtJ,GAAA6V,EAAA7U,EAAA6U,EAAA7V,EAAAmb,EAAArF,EAAA9U,EAAA8U,EAAA9V,EAAAqb,EACAkB,EAAAzR,GAAA9K,GAAA6V,EAAA7U,EAAAma,EAAArF,EAAA9U,EAAAqa,EACAkB,EAAAlT,GAAArI,EAAAub,EAAAjT,GAAAtJ,EACAuc,EAAAjT,GAAAtI,EAAAka,EAAAE,EAAAvF,EAAA7V,EAAA6V,EAAA7V,EAAAmb,EAAArF,EAAA9V,EAAA8V,EAAA9V,EAAAqb,EACAkB,EAAAzR,GAAA9J,EAAA6U,EAAA7V,EAAAmb,EAAArF,EAAA9V,EAAAqb,EACAkB,EAAAlT,GAAAF,EAAAoT,EAAAzR,GAAA9K,EACAuc,EAAAjT,GAAAH,EAAAoT,EAAAzR,GAAA9J,EACAub,EAAAzR,GAAA3B,EAAAgS,EAAAE,EAEApa,KAAAuhD,cAAA,IACA9M,EAAA50C,EAAAI,QACAqB,WAAA,EAAAiZ,EAAA,EAAA1F,GACA4/B,EAAAhzC,WAAA,EAAA4Y,EAAA,EAAAzF,GAEA09B,EAAAmC,EAAA5yC,SACA0wC,EAAA,EAEA,IAAA/2B,EAAA3b,EAAAkD,IAAAuY,EAAAvR,QAAA0qC,IAEAp6B,EAAA3Y,OAAAuY,EAAAuB,GACAlB,GAAAJ,EAAAra,EAAA+C,MAAAgS,EAAA4G,GAEAjB,EAAAhZ,OAAA4Y,EAAAqB,GACAhB,GAAAJ,EAAAva,EAAA+C,MAAAiS,EAAA2G,OACG,CACH,IAAAi5B,KAAA50C,EAAAI,QACAqB,WAAA,EAAAiZ,EAAA,EAAA1F,GACA4/B,EAAAhzC,WAAA,EAAA4Y,EAAA,EAAAzF,GAEA,IAAA+/B,EAAAn6B,EAAAF,EAAAta,KAAAwvC,iBAEA8C,EAAAmC,EAAA5yC,SACA0wC,EAAA5zC,EAAAqE,IAAA2xC,GAEA,IAAAx5B,EAAAlT,EAAAwsC,EAAA11C,EAAA01C,EAAA10C,EAAA40C,GAEAp5B,EAAAtT,IACA,GAAAqT,EAAAzR,GAAA3B,EAAA,EACAqT,EAAAtT,EAAAlF,IAAAuY,EAAAxR,QAAAqR,QACK,CACL,IAAA4vC,EAAAlrD,EAAAkD,IAAAuY,EAAAvR,QAAA0qC,IACAl5B,EAAA1a,IAAAkqD,EAAAhsD,EAAAgsD,EAAAhrD,EAAA,GAGAyb,EAAA3b,EAAAO,IAAAmb,EAAAxc,EAAAwc,EAAAxb,GAEAsa,EAAA3Y,OAAAuY,EAAAuB,GACAlB,GAAAJ,GAAAra,EAAA+C,MAAAgS,EAAA4G,GAAAD,EAAArT,GAEAqS,EAAAhZ,OAAA4Y,EAAAqB,GACAhB,GAAAJ,GAAAva,EAAA+C,MAAAiS,EAAA2G,GAAAD,EAAArT,GAQA,OALAlI,KAAAsL,QAAAuO,WAAA9c,EAAAsd,EACAra,KAAAsL,QAAAuO,WAAA9Y,EAAAuZ,EACAta,KAAAuL,QAAAsO,WAAA9c,EAAAwd,EACAva,KAAAuL,QAAAsO,WAAA9Y,EAAAyZ,EAEA83B,GAAA3sC,EAAAK,YACAusC,GAAA5sC,EAAAO,8BCvZAzJ,EAAAD,QAAAg7C,EAEA,IAAA5iB,EAAct4B,EAAQ,GACtB0B,EAAa1B,EAAQ,GACrBqJ,EAAerJ,EAAQ,GAEvBqC,EAAWrC,EAAQ,GACnBuD,EAAWvD,EAAQ,GAInBqH,GAHWrH,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IACVA,EAAQ,IAMlBsO,GALYtO,EAAQ,IACJA,EAAQ,GACTA,EAAQ,IACRA,EAAQ,IAEXA,EAAQ,KAEpBk7C,EAAA5yB,KAAA,cAEA4yB,EAAA7yB,OAAA/Z,EACA4sC,EAAAl5C,UAAAN,EAAAw5C,EAAA7yB,OAAArmB,WAuBA,IAAAswC,EAAA,CACAM,aAAA,EACAH,eAAA,EACAC,WAAA,EACAkS,YAAA,EACAC,aAAA,GACAl1C,QAAA,GAaA,SAAAurC,EAAAtsC,EAAAC,EAAAC,EAAA+jC,EAAA0D,GACA,KAAA7yC,gBAAAw3C,GACA,WAAAA,EAAAtsC,EAAAC,EAAAC,EAAA+jC,EAAA0D,GAGA3nC,EAAA0pB,EAAA1pB,EAAA0jC,GACAhkC,EAAA/N,KAAAmD,KAAAkL,EAAAC,EAAAC,GACAD,EAAAnL,KAAAsL,QACAF,EAAApL,KAAAuL,QAEAvL,KAAAqL,OAAAmsC,EAAA5yB,KAEA5kB,KAAAovC,eAAAD,EAAAhkC,EAAAkxB,cAAA8S,GAAAjkC,EAAAmkC,cAAAxvC,EAAAI,OACAD,KAAAsvC,eAAAH,EAAA/jC,EAAAixB,cAAA8S,GAAAjkC,EAAAqkC,cAAA1vC,EAAAI,OACAD,KAAAgrD,YAAAnY,EAAA1nC,EAAAmxB,eAAAuW,GAAA3nC,EAAA6nC,YAAAlzC,EAAAO,IAAA,KAEAJ,KAAA8yC,cAAA9yC,KAAAgrD,YACAhrD,KAAAgzC,cAAAnzC,EAAA+C,MAAA,EAAA5C,KAAA8yC,eAEA9yC,KAAAq2B,OAAA,EACAr2B,KAAA0vC,UAAA,EACA1vC,KAAA0wC,YAAA,EACA1wC,KAAA2vC,eAAA,EACA3vC,KAAAirD,aAAA,EACAjrD,KAAAkrD,gBAAA,EAEAlrD,KAAA8vC,iBAAA5kC,EAAA6jC,eACA/uC,KAAA+vC,aAAA7kC,EAAA8jC,WACAhvC,KAAAiwC,cAAA/kC,EAAAgkC,YAEAlvC,KAAAuhD,cAAAr2C,EAAAg2C,YACAlhD,KAAAwhD,eAAAt2C,EAAAi2C,aAEAnhD,KAAA0hD,OAAA,EACA1hD,KAAAyhD,QAAA,EAGAzhD,KAAAowC,eACApwC,KAAAqwC,eACArwC,KAAAswC,WACAtwC,KAAAuwC,WACAvwC,KAAAwwC,QACAxwC,KAAAywC,QAEAzwC,KAAAmrD,KAAAtrD,EAAAI,OACAD,KAAAorD,KAAAvrD,EAAAI,OACAD,KAAAqrD,MACArrD,KAAAsrD,MACAtrD,KAAAurD,MACAvrD,KAAAwrD,MAyBAhU,EAAAl5C,UAAAsyC,gBAAA,WACA,OAAA5wC,KAAAovC,gBAMAoI,EAAAl5C,UAAAuyC,gBAAA,WACA,OAAA7wC,KAAAsvC,gBAMAkI,EAAAl5C,UAAAo1C,cAAA,WACA,OAAA1zC,KAAA8yC,eAMA0E,EAAAl5C,UAAAq1C,oBAAA,WACA,IAAA3C,EAAAhxC,KAAAsL,QACAsoC,EAAA5zC,KAAAuL,QAEA4f,EAAA6lB,EAAAhX,cAAAh6B,KAAAovC,gBACAhkB,EAAAwoB,EAAA5Z,cAAAh6B,KAAAsvC,gBACAtyC,EAAA6C,EAAA8B,IAAAypB,EAAAD,GACA0nB,EAAA7B,EAAA7U,eAAAn8B,KAAA8yC,eAGA,OADAjzC,EAAA8C,IAAA3F,EAAA61C,IAOA2E,EAAAl5C,UAAA2yC,cAAA,WACA,IAAAl1B,EAAA/b,KAAAsL,QAAAqrB,kBAEA,OADA32B,KAAAuL,QAAAorB,kBACA5a,GAMAy7B,EAAAl5C,UAAA4yC,eAAA,WACA,OAAAlxC,KAAAiwC,eAMAuH,EAAAl5C,UAAA4wC,YAAA,SAAA5iC,GACAtM,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAAiwC,cAAA3jC,GAMAkrC,EAAAl5C,UAAA8yC,cAAA,SAAAp5B,GACAhY,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAA+vC,aAAA/3B,GAMAw/B,EAAAl5C,UAAA+yC,cAAA,WACA,OAAArxC,KAAA+vC,cAMAyH,EAAAl5C,UAAAgzC,kBAAA,SAAAjW,GACAr7B,KAAAsL,QAAA2N,UAAA,GACAjZ,KAAAuL,QAAA0N,UAAA,GACAjZ,KAAA8vC,iBAAAzU,GAGAmc,EAAAl5C,UAAAmtD,kBAAA,WACA,OAAAzrD,KAAA8vC,kBAMA0H,EAAAl5C,UAAA6yC,eAAA,SAAAjkC,GACA,OAAAA,EAAAlN,KAAA2vC,gBAOA6H,EAAAl5C,UAAAotD,qBAAA,SAAA3J,GACA/hD,KAAAuhD,cAAAQ,GAGAvK,EAAAl5C,UAAAqtD,qBAAA,WACA,OAAA3rD,KAAAuhD,eAMA/J,EAAAl5C,UAAAstD,sBAAA,SAAA9R,GACA95C,KAAAwhD,eAAA1H,GAGAtC,EAAAl5C,UAAAutD,sBAAA,WACA,OAAA7rD,KAAAwhD,gBAGAhK,EAAAl5C,UAAAyO,WAAA,WACA,OAAA/M,KAAAsL,QAAA0uB,cAAAh6B,KAAAovC,iBAGAoI,EAAAl5C,UAAA0O,WAAA,WACA,OAAAhN,KAAAuL,QAAAyuB,cAAAh6B,KAAAsvC,iBAGAkI,EAAAl5C,UAAA2O,iBAAA,SAAAC,GACA,OAAArN,EAAAiD,QAAA9C,KAAA0vC,UAAA1vC,KAAAorD,KAAAprD,KAAAkrD,gBAAAlrD,KAAAmrD,MAAAvpD,IAAAsL,IAGAsqC,EAAAl5C,UAAA6O,kBAAA,SAAAD,GACA,OAAAA,EAAAlN,KAAA2vC,gBAGA6H,EAAAl5C,UAAAgP,wBAAA,SAAAC,GACAvN,KAAAowC,eAAApwC,KAAAsL,QAAA6K,QAAAnN,YACAhJ,KAAAqwC,eAAArwC,KAAAuL,QAAA4K,QAAAnN,YACAhJ,KAAAswC,WAAAtwC,KAAAsL,QAAA2K,UACAjW,KAAAuwC,WAAAvwC,KAAAuL,QAAA0K,UACAjW,KAAAwwC,QAAAxwC,KAAAsL,QAAA4K,OACAlW,KAAAywC,QAAAzwC,KAAAuL,QAAA2K,OAEA,IAAA+D,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAEAp2B,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACA+a,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EAEAsZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EACAib,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAEA0wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAGA5F,EAAAjR,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACAv7B,EAAAlR,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBAuBA,IAtBArzC,EAAA6C,EAAAI,QACAqB,WAAA,EAAAiZ,EAAA,EAAA1F,GACA7X,EAAAyE,WAAA,EAAA4Y,EAAA,EAAAzF,GAIA5U,KAAAorD,KAAAznD,EAAAa,QAAAmtC,EAAA3xC,KAAAgzC,eACAhzC,KAAAurD,MAAA1rD,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA4X,GAAA5U,KAAAorD,MACAprD,KAAAwrD,MAAA3rD,EAAA+C,MAAAiS,EAAA7U,KAAAorD,MAEAprD,KAAAq2B,OAAApc,EAAAE,EAAAD,EAAAla,KAAAurD,MAAAvrD,KAAAurD,MAAAnxC,EAAApa,KAAAwrD,MACAxrD,KAAAwrD,MAEAxrD,KAAAq2B,OAAA,IACAr2B,KAAAq2B,OAAA,EAAAr2B,KAAAq2B,QAKAr2B,KAAAirD,aAAA,EACAjrD,KAAA0hD,OAAA,EACA1hD,KAAAyhD,QAAA,EACAzhD,KAAAuhD,cAAA,GACAvhD,KAAAmrD,KAAAxnD,EAAAa,QAAAmtC,EAAA3xC,KAAA8yC,eACA9yC,KAAAqrD,MAAAxrD,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA4X,GAAA5U,KAAAmrD,MACAnrD,KAAAsrD,MAAAzrD,EAAA+C,MAAAiS,EAAA7U,KAAAmrD,MAEA,IAAA9I,EAAApoC,EAAAE,EAAAD,EAAAla,KAAAqrD,MAAArrD,KAAAqrD,MAAAjxC,EAAApa,KAAAsrD,MACAtrD,KAAAsrD,MAEA,GAAAjJ,EAAA,GACAriD,KAAAirD,aAAA,EAAA5I,EAEA,IAAAlnC,EAAAtb,EAAA8C,IAAA3F,EAAAgD,KAAAmrD,MAGA7I,EAAA,EAAA3jD,EAAAwH,GAAAnG,KAAAuhD,cAGAvkD,EAAA,EAAAgD,KAAAirD,aAAAjrD,KAAAwhD,eAAAc,EAGA5zB,EAAA1uB,KAAAirD,aAAA3I,IAGA/tB,EAAAhnB,EAAA0kC,GACAjyC,KAAAyhD,QAAAltB,GAAAv3B,EAAAu3B,EAAA7F,GACA1uB,KAAAyhD,QAAA,IACAzhD,KAAAyhD,QAAA,EAAAzhD,KAAAyhD,SAGAzhD,KAAA0hD,OAAAvmC,EAAAoZ,EAAA7F,EAAA1uB,KAAAyhD,QAEAzhD,KAAAirD,aAAA5I,EAAAriD,KAAAyhD,QACAzhD,KAAAirD,aAAA,IACAjrD,KAAAirD,aAAA,EAAAjrD,KAAAirD,oBAIAjrD,KAAAkrD,gBAAA,EAcA,GAVAlrD,KAAAiwC,eACAjwC,KAAA0wC,YAAAx2B,EAAAE,EACApa,KAAA0wC,YAAA,IACA1wC,KAAA0wC,YAAA,EAAA1wC,KAAA0wC,eAGA1wC,KAAA0wC,YAAA,EACA1wC,KAAA2vC,eAAA,GAGApiC,EAAAoJ,aAAA,CAEA3W,KAAA0vC,WAAAniC,EAAAqJ,QACA5W,KAAAkrD,iBAAA39C,EAAAqJ,QACA5W,KAAA2vC,gBAAApiC,EAAAqJ,QAEA,IAAA4E,EAAA3b,EAAAiD,QAAA9C,KAAA0vC,UAAA1vC,KAAAorD,KAAAprD,KAAAkrD,gBAAAlrD,KAAAmrD,MACAhX,EAAAn0C,KAAA0vC,UAAA1vC,KAAAurD,MAAAvrD,KAAAkrD,gBAAAlrD,KAAAqrD,MAAArrD,KAAA2vC,eACAyE,EAAAp0C,KAAA0vC,UAAA1vC,KAAAwrD,MAAAxrD,KAAAkrD,gBAAAlrD,KAAAsrD,MAAAtrD,KAAA2vC,eAEA7zB,EAAApa,OAAA1B,KAAAswC,WAAA90B,GACAO,GAAA/b,KAAAwwC,QAAA2D,EAEAn4B,EAAAza,OAAAvB,KAAAuwC,WAAA/0B,GACAS,GAAAjc,KAAAywC,QAAA2D,OAGAp0C,KAAA0vC,UAAA,EACA1vC,KAAAkrD,gBAAA,EACAlrD,KAAA2vC,eAAA,EAGA3vC,KAAAsL,QAAAsO,WAAAtZ,EAAAO,IAAAib,GACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAAO,IAAAmb,GACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAu7B,EAAAl5C,UAAAkP,yBAAA,SAAAD,GACA,IAAA0M,EAAAja,KAAAswC,WACAn2B,EAAAna,KAAAuwC,WACAr2B,EAAAla,KAAAwwC,QACAp2B,EAAApa,KAAAywC,QAEA30B,EAAA9b,KAAAsL,QAAAsO,WAAAtZ,EACAyb,EAAA/b,KAAAsL,QAAAsO,WAAA3Y,EACA+a,EAAAhc,KAAAuL,QAAAqO,WAAAtZ,EACA2b,EAAAjc,KAAAuL,QAAAqO,WAAA3Y,EAIA6wC,EAAAjyC,EAAA8C,IAAA3C,KAAAmrD,KAAAnvC,GAAAnc,EAAA8C,IAAA3C,KAAAmrD,KAAArvC,GAAA9b,KAAAsrD,MACArvC,EAAAjc,KAAAqrD,MAAAtvC,EACAR,GAAAvb,KAAAirD,cACAnZ,EAAA9xC,KAAA0hD,OAAA1hD,KAAAyhD,QAAAzhD,KAAAkrD,iBACAlrD,KAAAkrD,iBAAA3vC,EAEA,IAAAC,EAAA3b,EAAA+B,IAAA2Z,EAAAvb,KAAAmrD,MACAhX,EAAA54B,EAAAvb,KAAAqrD,MACAjX,EAAA74B,EAAAvb,KAAAsrD,MAEAxvC,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAi6B,EAEAn4B,EAAAza,OAAA4Y,EAAAqB,GAMAs2B,GALA71B,GAAA7B,EAAAg6B,GAKAr4B,EAAA/b,KAAA+vC,aACAx0B,GAAAvb,KAAA0wC,YAAAoB,EADA,IAGAC,EAAA/xC,KAAA2vC,eACAqC,EAAAzkC,EAAA0kC,GAAAjyC,KAAA8vC,iBACA9vC,KAAA2vC,eAAAhxC,EAAAe,MAAAM,KAAA2vC,eAAAp0B,GACAy2B,KAGAj2B,GAAA7B,GAFAqB,EAAAvb,KAAA2vC,eAAAoC,GAGA91B,GAAA7B,EAAAmB,EAKAu2B,EAAAjyC,EAAA8C,IAAA3C,KAAAorD,KAAApvC,GAAAnc,EAAA8C,IAAA3C,KAAAorD,KAAAtvC,GAAA9b,KAAAwrD,MACAvvC,EAAAjc,KAAAurD,MAAAxvC,EACAR,GAAAvb,KAAAq2B,OAAAyb,EACA9xC,KAAA0vC,WAAAn0B,EAEAC,EAAA3b,EAAA+B,IAAA2Z,EAAAvb,KAAAorD,MACAjX,EAAA54B,EAAAvb,KAAAurD,MACAnX,EAAA74B,EAAAvb,KAAAwrD,MAEA1vC,EAAApa,OAAAuY,EAAAuB,GACAO,GAAA7B,EAAAi6B,EAEAn4B,EAAAza,OAAA4Y,EAAAqB,GACAS,GAAA7B,EAAAg6B,EAGAp0C,KAAAsL,QAAAsO,WAAAtZ,EAAAO,IAAAib,GACA9b,KAAAsL,QAAAsO,WAAA3Y,EAAA8a,EACA/b,KAAAuL,QAAAqO,WAAAtZ,EAAAO,IAAAmb,GACAhc,KAAAuL,QAAAqO,WAAA3Y,EAAAgb,GAGAu7B,EAAAl5C,UAAAmP,yBAAA,SAAAF,GACA,IAAA8M,EAAAra,KAAAsL,QAAAuO,WAAA9c,EACAud,EAAAta,KAAAsL,QAAAuO,WAAA9Y,EACAwZ,EAAAva,KAAAuL,QAAAsO,WAAA9c,EACAyd,EAAAxa,KAAAuL,QAAAsO,WAAA9Y,EAEA4wC,EAAAhuC,EAAAvD,IAAAka,GACAs3B,EAAAjuC,EAAAvD,IAAAoa,GAEA5F,EAAAjR,EAAAa,QAAAmtC,EAAA9xC,EAAA8B,IAAA3B,KAAAovC,eAAApvC,KAAAowC,iBACAv7B,EAAAlR,EAAAa,QAAAotC,EAAA/xC,EAAA8B,IAAA3B,KAAAsvC,eAAAtvC,KAAAqwC,iBACArzC,EAAA6C,EAAAI,OACAjD,EAAAsE,WAAA,EAAAiZ,EAAA,EAAA1F,GACA7X,EAAAyE,WAAA,EAAA4Y,EAAA,EAAAzF,GAEA,IAUA2G,EAVAuwC,EAAAnoD,EAAAa,QAAAmtC,EAAA3xC,KAAAgzC,eAEA+Y,EAAAlsD,EAAA+C,MAAA/C,EAAAuB,IAAApE,EAAA4X,GAAAk3C,GACAE,EAAAnsD,EAAA+C,MAAAiS,EAAAi3C,GAEA3wC,EAAAtb,EAAA8C,IAAA3F,EAAA8uD,GAEAp9B,EAAA1uB,KAAAswC,WAAAtwC,KAAAuwC,WAAAvwC,KAAAwwC,QAAAxwC,KAAAurD,MACAvrD,KAAAurD,MAAAvrD,KAAAywC,QAAAzwC,KAAAwrD,MAAAxrD,KAAAwrD,MAIAjwC,EADA,GAAAmT,GACAvT,EAAAuT,EAEA,EAGA,IAAAlT,EAAA3b,EAAA+B,IAAA2Z,EAAAuwC,GACA3X,EAAA54B,EAAAwwC,EACA3X,EAAA74B,EAAAywC,EAYA,OAVA3xC,EAAA3Y,OAAA1B,KAAAswC,WAAA90B,GACAlB,GAAAta,KAAAwwC,QAAA2D,EACA55B,EAAAhZ,OAAAvB,KAAAuwC,WAAA/0B,GACAhB,GAAAxa,KAAAywC,QAAA2D,EAEAp0C,KAAAsL,QAAAuO,WAAA9c,EAAA8D,IAAAwZ,GACAra,KAAAsL,QAAAuO,WAAA9Y,EAAAuZ,EACAta,KAAAuL,QAAAsO,WAAA9c,EAAA8D,IAAA0Z,GACAva,KAAAuL,QAAAsO,WAAA9Y,EAAAyZ,EAEA7b,EAAAqE,IAAAmY,IAAAxV,EAAAK,6BC3hBA,IAAA4a,EAAYtkB,EAAQ,IACpBsC,EAAWtC,EAAQ,IAEnB,SAAA2vD,EAAAC,EAAApS,GACA,iBAAAoS,GACAlsD,KAAA2iB,IAAAupC,EAAApS,GAIAmS,EAAA3tD,UAAA6tD,KAAA,WACA,WAAAF,EAAAjsD,OAMAisD,EAAA3tD,UAAAqkB,IAAA,SAAA5jB,EAAAgB,EAAAkB,EAAAszB,GACA,oBAAAx1B,EAAA,CACA,IAAAmtD,EAAAntD,EAAA+6C,EAAA/5C,GAAA,EAEAC,KAAAosD,OAAAF,EACAlsD,KAAAqsD,IAAArsD,KAAAssD,IAAA,EACAtsD,KAAAusD,IAAAvsD,KAAAwsD,IAAA,EACAxsD,KAAAysD,IAAAzsD,KAAA0sD,IAAAR,EAAAv5B,MAAAmnB,EACA95C,KAAA2sD,IAAA3sD,KAAA4sD,IAAAV,EAAA99B,OAAA0rB,EAEA95C,KAAA2yB,MAAAu5B,EAAAv5B,MAAAmnB,EACA95C,KAAAouB,OAAA89B,EAAA99B,OAAA0rB,EAEA95C,KAAA85C,kBAGA,IAAA74C,GACAA,EAAAlC,EAAAw1B,EAAAx0B,IAEAC,KAAAqsD,IAAAttD,EAAAiB,KAAAusD,IAAAxsD,GAEAC,KAAAysD,IAAAzsD,KAAA0sD,IAAAzrD,EACAjB,KAAA2sD,IAAA3sD,KAAA4sD,IAAAr4B,EAEAv0B,KAAA2yB,MAAA1xB,EACAjB,KAAAouB,OAAAmG,EAEA,OAAAv0B,MAMAisD,EAAA3tD,UAAAuuD,KAAA,SAAA9tD,EAAAgB,EAAAkB,EAAAszB,GAOA,OANAv0B,KAAAssD,IAAAvtD,EAAAiB,KAAAwsD,IAAAzsD,EACAC,KAAAssD,IAAAvtD,EAAAiB,KAAAwsD,IAAAzsD,OACA,IAAAkB,IACAjB,KAAA0sD,IAAAzrD,EAAAjB,KAAA4sD,IAAAr4B,EACAv0B,KAAA2yB,MAAA1xB,EAAAjB,KAAAouB,OAAAmG,GAEAv0B,MAGAisD,EAAA3tD,UAAAu/B,KAAA,SAAAH,EAAAovB,EAAAt+B,EAAAu+B,EAAAj+B,EAAAk+B,EAAAC,EAAAC,EAAAC,GACA,IAAAjB,EAAAlsD,KAAAosD,OACA,UAAAF,GAAA,iBAAAA,EAAA,CAIA,IAAAkB,EAAAptD,KAAAqsD,IAAAgB,EAAArtD,KAAAusD,IACAe,EAAAttD,KAAAysD,IAAAc,EAAAvtD,KAAA2sD,IACArqD,EAAAtC,KAAAssD,IAAA/pD,EAAAvC,KAAAwsD,IACAgB,EAAAxtD,KAAA0sD,IAAAe,EAAAztD,KAAA4sD,SAEA,IAAAI,GACAF,EAAAluD,EAAA8uD,MAAAZ,EAAA,EAAA9sD,KAAAysD,KAAAM,EAAAnuD,EAAA8uD,MAAAX,EAAA,EAAA/sD,KAAAysD,IAAAK,GAEAM,GAAAN,EAAAO,GADA7+B,EAAA5vB,EAAA8uD,MAAAl/B,EAAA,EAAAxuB,KAAA2sD,KACAW,EAAAP,EAAAQ,EADAz+B,EAAAlwB,EAAA8uD,MAAA5+B,EAAA,EAAA9uB,KAAA2sD,IAAAn+B,GAEAlsB,EAAA0qD,EAAAzqD,EAAA0qD,EAAAO,EAAAN,EAAAO,EAAAN,QAEG,IAAAJ,GACHzqD,EAAAwqD,EAAAvqD,EAAAisB,EAAAg/B,EAAAT,EAAAU,EAAA3+B,QAEG,IAAAg+B,IACHU,EAAAV,EAAAW,EAAAj/B,GAGA,IAAAsrB,EAAA95C,KAAA85C,OAAA,EACAsT,GAAAtT,EAAAuT,GAAAvT,EAAAwT,GAAAxT,EAAAyT,GAAAzT,EAEA,IACA,mBAAAoS,EAAAruB,KACAquB,EAAAruB,KAAAH,EAAA0vB,EAAAC,EAAAC,EAAAC,EAAAjrD,EAAAC,EAAAirD,EAAAC,IAEA7sC,EAAAid,OACAH,EAAAiwB,UAAAzB,EAAAkB,EAAAC,EAAAC,EAAAC,EAAAjrD,EAAAC,EAAAirD,EAAAC,IAEG,MAAArlD,GACH8jD,EAAA0B,eACAC,QAAAnqD,IAAA,mBAAAwoD,GACA2B,QAAAnqD,IAAA0E,GACA8jD,EAAA0B,cAAA,MAKAnxD,EAAAD,QAAAyvD,mBCtGA,IAAAjuD,EAAa1B,EAAQ,IACrBoC,EAAAC,KAEAlC,EAAAD,QAAAwB,EAAAW,MAEAlC,EAAAD,QAAAmD,OAAA,SAAAH,EAAAC,GAMA,YALA,IAAAD,GACAC,EAAA,EAAAD,EAAA,QACG,IAAAC,IACHA,EAAAD,IAAA,GAEAA,GAAAC,EAAAD,EAAAd,EAAAiB,UAAAF,EAAAD,MAGA/C,EAAAD,QAAA21B,OAAA,SAAA5yB,EAAAC,EAAAC,GAMA,YALA,IAAAD,GACAC,EAAA,EAAAD,EAAA,QACG,IAAAC,IACHA,EAAAD,IAAA,GAEAC,EAAAD,GACAD,KAAAC,IAAAC,EAAAD,KACAD,EAAA,EAAAE,EAAAD,IAEAD,KAAAE,IAAAD,EAAAC,KACAF,GAAA,EAAAC,EAAAC,IAIAhD,EAAAD,QAAAkxD,MAAA,SAAAnuD,EAAAC,EAAAC,GACA,OAAAF,EAAAC,EACAA,EACGD,EAAAE,EACHA,EAEAF,GAIA9C,EAAAD,QAAAqF,OAAA,SAAA9C,EAAAgB,GACA,OAAArB,EAAAS,KAAAJ,IAAAgB,qBCxCA,SAAAgvB,EAAAhuB,EAAAC,EAAAjE,EAAAC,EAAA+qB,EAAAlX,GACA7Q,KAAAuvB,MAAAxuB,EAAAC,EAAAjE,EAAAC,EAAA+qB,EAAAlX,GAGAke,EAAAzwB,UAAAiC,SAAA,WACA,UAAAP,KAAAe,EAAA,KAAAf,KAAAgB,EAAA,KAAAhB,KAAAjD,EAAA,KAAAiD,KAAAhD,EAAA,KACAgD,KAAA+nB,EAAA,KAAA/nB,KAAA6Q,EAAA,KAGAke,EAAAzwB,UAAA+B,MAAA,WACA,WAAA0uB,EAAA/uB,KAAAe,EAAAf,KAAAgB,EAAAhB,KAAAjD,EAAAiD,KAAAhD,EAAAgD,KAAA+nB,EAAA/nB,KAAA6Q,IAGAke,EAAAzwB,UAAAixB,MAAA,SAAAxuB,EAAAC,EAAAjE,EAAAC,EAAA+qB,EAAAlX,GAWA,OAVA7Q,KAAA8tD,QAAA,EACA,iBAAA/sD,GACAf,KAAAe,MAAAf,KAAAhD,EAAA+D,EAAA/D,EACAgD,KAAAgB,EAAAD,EAAAC,EAAAhB,KAAAjD,EAAAgE,EAAAhE,EACAiD,KAAA+nB,EAAAhnB,EAAAgnB,EAAA/nB,KAAA6Q,EAAA9P,EAAA8P,IAEA7Q,KAAAe,KAAA,EAAAf,KAAAhD,KAAA,EACAgD,KAAAgB,KAAA,EAAAhB,KAAAjD,KAAA,EACAiD,KAAA+nB,KAAA,EAAA/nB,KAAA6Q,KAAA,GAEA7Q,MAGA+uB,EAAAzwB,UAAAyF,SAAA,WAQA,OAPA/D,KAAA8tD,QAAA,EACA9tD,KAAAe,EAAA,EACAf,KAAAgB,EAAA,EACAhB,KAAAjD,EAAA,EACAiD,KAAAhD,EAAA,EACAgD,KAAA+nB,EAAA,EACA/nB,KAAA6Q,EAAA,EACA7Q,MAGA+uB,EAAAzwB,UAAA6zB,OAAA,SAAAvuB,GACA,IAAAA,EACA,OAAA5D,KAGAA,KAAA8tD,QAAA,EAEA,IAAA/R,EAAAn4C,EAAAjF,KAAAsF,IAAAL,GAAA,EAEAtD,EAAAsD,EAAAjF,KAAAqF,IAAAJ,GAAA,EAEA7C,EAAAg7C,EAAA/7C,KAAAe,EAAAT,EAAAN,KAAAgB,EACAA,EAAA+6C,EAAA/7C,KAAAgB,EAAAV,EAAAN,KAAAe,EACAhE,EAAAg/C,EAAA/7C,KAAAjD,EAAAuD,EAAAN,KAAAhD,EACAA,EAAA++C,EAAA/7C,KAAAhD,EAAAsD,EAAAN,KAAAjD,EACAgrB,EAAAg0B,EAAA/7C,KAAA+nB,EAAAznB,EAAAN,KAAA6Q,EACAA,EAAAkrC,EAAA/7C,KAAA6Q,EAAAvQ,EAAAN,KAAA+nB,EASA,OAPA/nB,KAAAe,IACAf,KAAAgB,IACAhB,KAAAjD,IACAiD,KAAAhD,IACAgD,KAAA+nB,IACA/nB,KAAA6Q,IAEA7Q,MAGA+uB,EAAAzwB,UAAA2zB,UAAA,SAAAlzB,EAAAgB,GACA,OAAAhB,GAAAgB,GAGAC,KAAA8tD,QAAA,EACA9tD,KAAA+nB,GAAAhpB,EACAiB,KAAA6Q,GAAA9Q,EACAC,MALAA,MAQA+uB,EAAAzwB,UAAA4zB,MAAA,SAAAnzB,EAAAgB,GACA,OAAAhB,EAAA,GAAAgB,EAAA,GAGAC,KAAA8tD,QAAA,EACA9tD,KAAAe,GAAAhC,EACAiB,KAAAgB,GAAAjB,EACAC,KAAAjD,GAAAgC,EACAiB,KAAAhD,GAAA+C,EACAC,KAAA+nB,GAAAhpB,EACAiB,KAAA6Q,GAAA9Q,EACAC,MATAA,MAYA+uB,EAAAzwB,UAAAoE,KAAA,SAAA3D,EAAAgB,GACA,IAAAhB,IAAAgB,EACA,OAAAC,KAEAA,KAAA8tD,QAAA,EAEA,IAAA/sD,EAAAf,KAAAe,EAAAf,KAAAgB,EAAAjC,EACAiC,EAAAhB,KAAAgB,EAAAhB,KAAAe,EAAAhB,EACAhD,EAAAiD,KAAAjD,EAAAiD,KAAAhD,EAAA+B,EACA/B,EAAAgD,KAAAhD,EAAAgD,KAAAjD,EAAAgD,EACAgoB,EAAA/nB,KAAA+nB,EAAA/nB,KAAA6Q,EAAA9R,EACA8R,EAAA7Q,KAAA6Q,EAAA7Q,KAAA+nB,EAAAhoB,EAQA,OANAC,KAAAe,IACAf,KAAAgB,IACAhB,KAAAjD,IACAiD,KAAAhD,IACAgD,KAAA+nB,IACA/nB,KAAA6Q,IACA7Q,MAGA+uB,EAAAzwB,UAAAwzB,OAAA,SAAAh1B,GACAkD,KAAA8tD,QAAA,EAEA,IAAA3vD,EAAA6B,KAEAe,EAAA5C,EAAA4C,EAAAjE,EAAAiE,EAAA5C,EAAA6C,EAAAlE,EAAAC,EACAiE,EAAA7C,EAAA6C,EAAAlE,EAAAE,EAAAmB,EAAA4C,EAAAjE,EAAAkE,EACAjE,EAAAoB,EAAApB,EAAAD,EAAAiE,EAAA5C,EAAAnB,EAAAF,EAAAC,EACAC,EAAAmB,EAAAnB,EAAAF,EAAAE,EAAAmB,EAAApB,EAAAD,EAAAkE,EACA+mB,EAAA5pB,EAAA4pB,EAAAjrB,EAAAiE,EAAAjE,EAAAirB,EAAA5pB,EAAA0S,EAAA/T,EAAAC,EACA8T,EAAA1S,EAAA0S,EAAA/T,EAAAE,EAAAF,EAAA+T,EAAA1S,EAAA4pB,EAAAjrB,EAAAkE,EASA,OAPAhB,KAAAe,IACAf,KAAAgB,IACAhB,KAAAjD,IACAiD,KAAAhD,IACAgD,KAAA+nB,IACA/nB,KAAA6Q,IAEA7Q,MAGA+uB,EAAAzwB,UAAAyvD,QAAAh/B,EAAAzwB,UAAA0vD,QAAA,WACA,GAAAhuD,KAAA8tD,OAAA,CACA9tD,KAAA8tD,QAAA,EACA9tD,KAAAiuD,SAAAjuD,KAAAiuD,UAAA,IAAAl/B,EACA,IAAA7mB,EAAAlI,KAAAe,EAAAf,KAAAhD,EAAAgD,KAAAgB,EAAAhB,KAAAjD,EACAiD,KAAAiuD,SAAAltD,EAAAf,KAAAhD,EAAAkL,EACAlI,KAAAiuD,SAAAjtD,GAAAhB,KAAAgB,EAAAkH,EACAlI,KAAAiuD,SAAAlxD,GAAAiD,KAAAjD,EAAAmL,EACAlI,KAAAiuD,SAAAjxD,EAAAgD,KAAAe,EAAAmH,EACAlI,KAAAiuD,SAAAlmC,GAAA/nB,KAAAjD,EAAAiD,KAAA6Q,EAAA7Q,KAAA+nB,EAAA/nB,KAAAhD,GAAAkL,EACAlI,KAAAiuD,SAAAp9C,GAAA7Q,KAAA+nB,EAAA/nB,KAAAgB,EAAAhB,KAAAe,EAAAf,KAAA6Q,GAAA3I,EAEA,OAAAlI,KAAAiuD,UAGAl/B,EAAAzwB,UAAA4vD,IAAA,SAAA1vD,EAAAwG,GAIA,OAHAA,KAAA,IACAjG,EAAAiB,KAAAe,EAAAvC,EAAAO,EAAAiB,KAAAjD,EAAAyB,EAAAuB,EAAAC,KAAA+nB,EACA/iB,EAAAjF,EAAAC,KAAAgB,EAAAxC,EAAAO,EAAAiB,KAAAhD,EAAAwB,EAAAuB,EAAAC,KAAA6Q,EACA7L,GAGA+pB,EAAAzwB,UAAA6vD,KAAA,SAAApvD,EAAAgB,GAGA,MAFA,iBAAAhB,IACAgB,EAAAhB,EAAAgB,EAAAhB,OACAiB,KAAAe,EAAAhC,EAAAiB,KAAAjD,EAAAgD,EAAAC,KAAA+nB,GAGAgH,EAAAzwB,UAAA8vD,KAAA,SAAArvD,EAAAgB,GAGA,MAFA,iBAAAhB,IACAgB,EAAAhB,EAAAgB,EAAAhB,OACAiB,KAAAgB,EAAAjC,EAAAiB,KAAAhD,EAAA+C,EAAAC,KAAA6Q,GAGApU,EAAAD,QAAAuyB,mBCxKA,IAAAs/B,EAAa/xD,EAAQ,IACrBgyD,EAAYhyD,EAAQ,IAgWpB,SAAAiyD,EAAAx4B,EAAA/T,GACAusC,EAAA5pC,OAAA9nB,KAAAmD,MACAA,KAAAwuD,MAAA,UAEAxsC,KAAA,GAEA,IAAA4S,EAAA50B,KAAAyuD,SAAA,GACAzuD,KAAAyuD,SAAAz2C,MAAAgK,EAAAhK,OAAA,EACAhY,KAAAyuD,SAAA1M,GAAA//B,EAAA+/B,IAAA,GACApjD,KAAAqE,IAAAhD,KAAAyuD,SAAA1M,IAAA,IACA/hD,KAAAyuD,SAAA1M,GAAA,EAAA/hD,KAAAyuD,SAAA1M,IAEA/hD,KAAAyuD,SAAA3U,MAAA93B,EAAA83B,OAAA,GACA95C,KAAAyuD,SAAAC,UAAA,EAAA1uD,KAAAyuD,SAAA3U,MAEA95C,KAAA2uD,OAAA54B,EAEA,IAAA2P,EAAA,EAAA1lC,KAAAyuD,SAAA1M,GACA6M,EAAA,EACA5uD,KAAAw+B,KAAA,SAAAyT,GAGA,IADA2c,GADA3c,EAAA,KAAAA,EAAArd,EAAA5c,MAEA42C,EAAAlpB,GACA3P,EAAAxoB,KAAAm4B,GACAkpB,GAAAlpB,EAGA,OADA1lC,KAAA6uD,eACA,IACG,GAEH94B,EAAAuQ,GAAA,0BAAApmC,GACAA,EAAA4uD,IAAA5uD,EAAA4uD,GAAAC,WAGAh5B,EAAAuQ,GAAA,wBAAApmC,GACAA,EAAA4uD,IAAA5uD,EAAA4uD,GAAAC,WAjYAtyD,EAAAD,QAAA6xD,EAQAA,EAAAW,QAAA,SAAAhtC,EAAA1D,GACA,mBAAA0D,IACA1D,EAAA0D,EACAA,EAAA,MAGAssC,EAAA,SAAApsC,EAAAC,GAEAD,EAAAokB,GAAAgoB,EAAAW,MAAAC,MAAA,WACAxrC,OAAAyrC,QACAtsC,SAAAusC,eAAAvsC,SAAAusC,cAAAC,OACAltC,EAAAgtC,UAGAjtC,EAAAic,WAAA,OACA,IAAAt+B,EAAAwuD,EAAAxuD,KAEAmvD,EAAA,GACAA,EAAA7sC,SAEA,IAAAmtC,GAAA,EACAptC,EAAAokB,GAAA,oBACAgpB,GAAA,EACAN,EAAAO,SAAAP,EAAAO,YAEArtC,EAAAokB,GAAA,mBACAgpB,GAAA,EACAN,EAAAQ,QAAAR,EAAAQ,WAEAR,EAAAS,SAAA,WACA,OAAAH,GAEAN,EAAAU,YAAA,WACAJ,EAAAN,EAAAvrC,SAAAurC,EAAAxrC,SAEAwrC,EAAAxrC,MAAA,WACAtB,EAAAsB,SAEAwrC,EAAAvrC,OAAA,WACAvB,EAAAuB,SACAurC,EAAAG,SAEAH,EAAAG,MAAA,WACAtsC,SAAAusC,eAAAvsC,SAAAusC,cAAAC,OACAltC,EAAAgtC,SAGAH,EAAAzrD,OAAA,EACAyrD,EAAAr8B,MAAA,GACAq8B,EAAA5gC,OAAA,GACA4gC,EAAAjwD,EAAA,EACAiwD,EAAAjvD,GAAA,GACAivD,EAAAlV,MAAA,GACAkV,EAAAjN,GAAA,GACAiN,EAAAh3C,MAAA,EACAg3C,EAAAW,WAAA,GACAX,EAAAY,WAAA,UAEA,IAAAC,EAAA,GACAC,EAAA,GAEA,SAAAC,EAAA9yD,EAAAU,GACA,mBAAAA,GAAA,iBAAAA,IACAmyD,EAAA7yD,GAAAU,GAUAqxD,EAAAgB,OAAA,SAAAjvD,EAAAC,QACA,IAAAA,EACA+uD,EAAAhvD,EAAAC,GACOD,GAAA,iBAAAA,EATP,SAAAb,GACA,QAAAjC,KAAAiC,EACA6vD,EAAA9xD,EAAAiC,EAAAjC,IAQAgyD,CAAAlvD,GACO,iBAAAA,IACP8uD,EAAA9uD,GAGAiuD,EAAAkB,SAAAlB,EAAAkB,QAAAL,EAAAC,IAGAd,EAAAmB,KAAA,SAAAC,GACApB,EAAAqB,OAAArB,EAAAqB,MAAAD,IAGA,IAAAE,EAAA,GAAAC,EAAA,IAEA,WACA,IAAAC,EAAA,IAAAlC,EAAArC,QACA/pC,EAAAuuC,OAAAnC,EAAApC,MAAAsE,IAEA,IAAAE,EAAA,GACAxuC,EAAAsc,KAAA,WACAkyB,EAAA7uD,OAAA,IACO,GAEP2uD,EAAA3yB,KAAA,SAAA8yB,GACAA,EAAAC,OACAD,EAAAviD,UAAA,UAAA4gD,EAAAjwD,GAAAiwD,EAAAjvD,GACA4wD,EAAAjC,UAAA,EAAAM,EAAAlV,MACA6W,EAAAE,QAAA,QACA,QAAAC,EAAAJ,EAAAntC,QAA0CutC,EAASA,EAAAJ,EAAAntC,QACnDutC,EAAAH,EAAA3B,EAAAlV,OAEA6W,EAAAI,WAGA/B,EAAAgC,UAAA,SAAAxyD,EAAAhB,EAAAyzD,GACAP,EAAAnvC,KAAA,SAAAovC,EAAA7W,GACA6W,EAAAO,YACAP,EAAAQ,IAAA3yD,EAAAO,EAAAP,EAAAuB,EAAA,EAAA+5C,EAAA,IAAAn7C,KAAAwH,IACAwqD,EAAAS,YAAAH,EACAN,EAAAU,WAEAd,GAAA,QAAA/xD,EAAAO,EAAA,IAAAP,EAAAuB,EAAA,IAAAvC,EAAA,IAAAyzD,GAGAjC,EAAAsC,WAAA,SAAA9yD,EAAAhB,EAAAyzD,GACAP,EAAAnvC,KAAA,SAAAovC,GACAA,EAAAO,YACAP,EAAAQ,IAAA3yD,EAAAO,EAAAP,EAAAuB,EAAAvC,EAAA,IAAAmB,KAAAwH,IACAwqD,EAAAS,YAAAH,EACAN,EAAAU,WAEAd,GAAA,SAAA/xD,EAAAO,EAAA,IAAAP,EAAAuB,EAAA,IAAAvC,EAAA,IAAAyzD,GAGAjC,EAAAuC,YAAA,SAAAxwD,EAAAC,EAAAiwD,GACAP,EAAAnvC,KAAA,SAAAovC,GACAA,EAAAO,YACAP,EAAAa,OAAAzwD,EAAAhC,EAAAgC,EAAAhB,GACA4wD,EAAAc,OAAAzwD,EAAAjC,EAAAiC,EAAAjB,GACA4wD,EAAAS,YAAAH,EACAN,EAAAU,WAEAd,GAAA,UAAAxvD,EAAAhC,EAAA,IAAAgC,EAAAhB,EAAA,IAAAiB,EAAAjC,EAAA,IAAAiC,EAAAjB,EAAA,IAAAkxD,GAGAjC,EAAA0C,YAAA,SAAAj7C,EAAAw6C,GACA,GAAAx6C,KAAA5U,OAAA,CAGA6uD,EAAAnvC,KAAA,SAAAovC,GACAA,EAAAO,YACAP,EAAAa,OAAA/6C,EAAA,GAAA1X,EAAA0X,EAAA,GAAA1W,GACA,QAAArD,EAAA,EAAyBA,EAAA+Z,EAAA5U,OAAmBnF,IAC5Ci0D,EAAAc,OAAAh7C,EAAA/Z,GAAAqC,EAAA0X,EAAA/Z,GAAAqD,GAEA4wD,EAAAS,YAAAH,EACAN,EAAAgB,YACAhB,EAAAU,WAEAd,GAAA,UACA,QAAA7zD,EAAA,EAAuBA,EAAA+Z,EAAA5U,OAAmBnF,IAC1C6zD,GAAA95C,EAAA/Z,GAAAqC,EAAA,IAAA0X,EAAA/Z,GAAAqD,EAAA,IAEAwwD,GAAAU,IAGAjC,EAAA4C,SAAA,SAAArjD,EAAA0iD,GACAP,EAAAnvC,KAAA,SAAAovC,GACAA,EAAAO,YACAP,EAAAa,OAAAjjD,EAAAO,WAAA/P,EAAAwP,EAAAO,WAAA/O,GACA4wD,EAAAc,OAAAljD,EAAAQ,WAAAhQ,EAAAwP,EAAAO,WAAA/O,GACA4wD,EAAAc,OAAAljD,EAAAQ,WAAAhQ,EAAAwP,EAAAQ,WAAAhP,GACA4wD,EAAAc,OAAAljD,EAAAO,WAAA/P,EAAAwP,EAAAQ,WAAAhP,GACA4wD,EAAAS,YAAAH,EACAN,EAAAgB,YACAhB,EAAAU,WAEAd,GAAA,OACAA,GAAAhiD,EAAAO,WAAA/P,EAAA,IAAAwP,EAAAO,WAAA/O,EAAA,IACAwwD,GAAAhiD,EAAAQ,WAAAhQ,EAAA,IAAAwP,EAAAQ,WAAAhP,EAAA,IACAwwD,GAAAU,GAGAjC,EAAAiC,MAAA,SAAAzzD,EAAAq0D,EAAA7wD,GAIA,cAHAxD,EAAA,IAAAA,EAAA,GAGA,MAFAq0D,EAAA,IAAAA,EAAA,GAEA,MADA7wD,EAAA,IAAAA,EAAA,GACA,KA7FA,GAkGA,IAAA+0B,EAAAzX,EAAA0wC,GAEA8C,EAAA,IAAAvD,EAAAx4B,EAAAi5B,GAEA+C,EAAA,EAAAC,EAAA,EACA9vC,EAAAsc,KAAA,SAAAyT,EAAAr0C,GAEAm0D,IAAA/C,EAAAjwD,GAAAizD,IAAAhD,EAAAjvD,IACA+xD,EAAAzyC,QAAA2vC,EAAAjwD,GAAAiwD,EAAAjvD,GACAgyD,EAAA/C,EAAAjwD,EAAAizD,EAAAhD,EAAAjvD,KAIA+xD,EAAAtzB,KAAA,SAAAyT,EAAAr0C,GAgBA,MAdA,mBAAAoxD,EAAAzhD,MACAyhD,EAAAzhD,KAAA0kC,EAAAr0C,GAGAq0D,GACAjD,EAAAuC,YAAAU,EAAAz4B,cAAA04B,EAAA,yBAGA5B,IAAAC,IACAD,EAAAC,EACAruC,EAAAuQ,SAEA89B,EAAA,IAEA,IAIAruC,EAAA0tC,WAAAZ,EAAAY,YACA1tC,EAAAiwC,QAAAnD,EAAAr8B,MAAAq8B,EAAA5gC,QACAlM,EAAA2N,IAAA,cACA3N,EAAA2N,IAAA,cACA3N,EAAAkwC,QAAAN,GAkBA,IACAO,EAEAJ,EAHAK,EAAAv8B,EAAAgP,aAIAmtB,EAAA,CAAqBnzD,EAAA,EAAAgB,EAAA,GAErB+xD,EAAAS,KAAA,UAAAjsB,GAAAgoB,EAAAW,MAAAC,MAAA,SAAAx0C,GAEA,GADAA,EAAA,CAAe3b,EAAA2b,EAAA3b,EAAAgB,GAAA2a,EAAA3a,IACfkyD,EAAA,CAIA,IAAA/uC,EA5BA,SAAAxI,GACA,IAAAwI,EACA3U,EAAA8/C,EAAAx/C,KAAA6L,KAWA,OAVAqb,EAAAmO,UAAA31B,EAAA,SAAAstB,GACA,IAAA3Y,GAGA2Y,EAAAhmB,UAAA8hB,aAAAkE,EAAA7tB,UAAA0M,GAIA,OADAwI,EAAA2Y,EAAAhmB,WACA,IAEAqN,EAeAsvC,CAAA93C,GACAwI,IAIA8rC,EAAAyD,WACAR,EAAA/uC,GAGAmvC,EAAAhE,EAAAjX,WAAA,CAAwCqL,SAAA,KAAe6P,EAAApvC,EAAArjB,EAAA6a,IACvDqb,EAAAwP,YAAA8sB,QAGK/rB,GAAAgoB,EAAAW,MAAAyD,KAAA,SAAAh4C,GACLA,EAAA,CAAe3b,EAAA2b,EAAA3b,EAAAgB,GAAA2a,EAAA3a,GACfsyD,GACAA,EAAA5J,UAAA/tC,GAGAw3C,EAAAnzD,EAAA2b,EAAA3b,EACAmzD,EAAAnyD,EAAA2a,EAAA3a,IACKumC,GAAAgoB,EAAAW,MAAA0D,IAAA,SAAAj4C,GAML,GALAA,EAAA,CAAe3b,EAAA2b,EAAA3b,EAAAgB,GAAA2a,EAAA3a,GACfsyD,IACAt8B,EAAAsP,aAAAgtB,GACAA,EAAA,MAEAJ,EAAA,CACA,IAAAh3B,EAAAp7B,EAAA8B,IAAA+Y,EAAAu3C,EAAAz4B,eACAy4B,EAAA92B,mBAAAF,EAAAr5B,IAAAotD,EAAAyD,aAAA,GACAR,EAAA,QAGK3rB,GAAAgoB,EAAAW,MAAA2D,OAAA,SAAAl4C,GACLA,EAAA,CAAe3b,EAAA2b,EAAA3b,EAAAgB,GAAA2a,EAAA3a,GACfsyD,IACAt8B,EAAAsP,aAAAgtB,GACAA,EAAA,MAEAJ,IACAA,EAAA,QAIAvuC,OAAAX,iBAAA,mBAAAgF,GACA,OAAAA,EAAA8qC,SACA,QAAAC,WAAA,GACA9D,EAAAU,iBAGK,GAEL,IAAAqD,EAAA,GACArvC,OAAAX,iBAAA,mBAAAgF,GACA,IAAA8qC,EAAA9qC,EAAA8qC,QACAE,EAAAF,IAAA,EACAG,EAAAH,GAAA,GACA7D,EAAAiE,SAAAjE,EAAAiE,QAAAJ,EAAAK,OAAAC,aAAAN,MAEAnvC,OAAAX,iBAAA,iBAAAgF,GACA,IAAA8qC,EAAA9qC,EAAA8qC,QACAE,EAAAF,IAAA,EACAG,EAAAH,GAAA,GACA7D,EAAAoE,OAAApE,EAAAoE,MAAAP,EAAAK,OAAAC,aAAAN,MAGA,IAAAlD,EAAAX,EAAAW,WACA,SAAAqD,EAAAH,EAAAQ,GACA,IAAAC,EAAAJ,OAAAC,aAAAN,GACA,KAAAnwC,KAAA4wC,KACA3D,EAAA2D,GAAAD,GAEA1D,EAAA4D,MAAAR,EAAA,KAAApD,EAAA,EACAA,EAAA6D,KAAAT,EAAA,KAAApD,EAAA,EACAA,EAAA8D,GAAAV,EAAA,KAAApD,EAAA,EACAA,EAAA0D,KAAAN,EAAA,KAAApD,EAAA,EACAA,EAAA+D,KAAAX,EAAA,KAAAA,EAAA,QAOAxE,EAAA5pC,OAAA2pC,EACAC,EAAAjwD,UAAAgwD,EAAAqF,QAAApF,EAAA5pC,OAAArmB,WAyCAiwD,EAAAjwD,UAAAuwD,YAAA,SAAA94B,GAIA,IAHA,IAGA/0B,GAHA+0B,EAAA/1B,KAAA2uD,QAGA1rB,cAAmCjiC,EAAGA,IAAA0L,UACtC,QAAAmE,EAAA7P,EAAAu2B,iBAAoC1mB,EAAGA,IAAAnE,UAAA,CAEvC,IAAAmE,EAAAi+C,GAAA,CACAj+C,EAAA4sB,QAAA5sB,EAAA4sB,OAAA4zB,OACArxD,KAAAyuD,SAAA2C,YAAAvgD,EAAA4sB,OAAA4zB,OACSrwD,EAAAy8B,QAAAz8B,EAAAy8B,OAAA4zB,OACTrxD,KAAAyuD,SAAA2C,YAAApwD,EAAAy8B,OAAA4zB,OACSrwD,EAAA22B,YACT33B,KAAAyuD,SAAA2C,YAAA,wBACSpwD,EAAA42B,cACT53B,KAAAyuD,SAAA2C,YAAA,wBACSpwD,EAAA02B,aACT13B,KAAAyuD,SAAA2C,YAAA,yBAGAvgD,EAAA4sB,QAAA5sB,EAAA4sB,OAAAm2B,KACA5zD,KAAAyuD,SAAAoF,UAAAhjD,EAAA4sB,OAAAm2B,KACS5yD,EAAAy8B,QAAAz8B,EAAAy8B,OAAAm2B,KACT5zD,KAAAyuD,SAAAoF,UAAA7yD,EAAAy8B,OAAAm2B,KAEA5zD,KAAAyuD,SAAAoF,UAAA,GAGA,IAAAz9C,EAAAvF,EAAAtE,UACAqB,EAAAiD,EAAA8E,WACA,UAAAS,IACAvF,EAAAi+C,GA7BA9uD,KA6BAsxD,WAAA1jD,EAAA5N,KAAAyuD,WAEA,QAAAr4C,IACAvF,EAAAi+C,GAhCA9uD,KAgCA8zD,SAAAlmD,EAAA5N,KAAAyuD,WAEA,WAAAr4C,IACAvF,EAAAi+C,GAnCA9uD,KAmCA0xD,YAAA9jD,EAAA5N,KAAAyuD,WAEA,SAAAr4C,IACAvF,EAAAi+C,GAtCA9uD,KAsCA+zD,UAAAnmD,EAAA5N,KAAAyuD,WAGA59C,EAAAi+C,IACAj+C,EAAAi+C,GAAAkF,SA1CAh0D,MA8CA,GAAA6Q,EAAAi+C,GAAA,CACA,IAAAtwD,EAAAwC,EAAAw4B,cAAAh8B,EAAAwD,EAAAkD,WACA2M,EAAAi+C,GAAAmF,UAAAz1D,EAAAO,GAAA8R,EAAAi+C,GAAAoF,UAAA11D,EAAAuB,GAAA8Q,EAAAi+C,GAAAqF,UAAA32D,IACAqT,EAAAi+C,GAAAmF,QAAAz1D,EAAAO,EACA8R,EAAAi+C,GAAAoF,QAAA11D,EAAAuB,EACA8Q,EAAAi+C,GAAAqF,QAAA32D,EACAqT,EAAAi+C,GAAAzvC,OAAA7gB,EAAAO,GAAAP,EAAAuB,GACA8Q,EAAAi+C,GAAA38B,QAAA30B,KAOA,QAAA+Y,EAAAwf,EAAAyB,eAAoCjhB,EAAGA,IAAA7J,UAAA,CACvC0J,EAAAG,EAAAhK,UAAA,IACAxL,EAAAwV,EAAAxJ,aACA/L,EAAAuV,EAAAvJ,aAYA,GAVAuJ,EAAAu4C,KACA9uD,KAAAyuD,SAAA2C,YAAA,wBAEA76C,EAAAu4C,GApEA9uD,KAoEAo0D,UAAA79C,EAAAvW,KAAAyuD,UACAl4C,EAAAu4C,GAAAj/B,IAAA,aACAtZ,EAAAu4C,IACAv4C,EAAAu4C,GAAAkF,SAvEAh0D,OA2EAuW,EAAAu4C,GAAA,CACA,IAAAuF,EAAA,IAAAtzD,EAAAhC,EAAAiC,EAAAjC,GACAu1D,EAAA,KAAAvzD,EAAAhB,EAAAiB,EAAAjB,GACAuC,EAAAvB,EAAAhC,EAAAiC,EAAAjC,EACAwD,GAAAxB,EAAAhB,IAAAiB,EAAAjB,EACA/C,EAAA2B,KAAAQ,KAAAmD,IAAAC,KACAgU,EAAAu4C,GAAAn8B,MAAA31B,GACAuZ,EAAAu4C,GAAA38B,OAAAxzB,KAAAwF,MAAA5B,EAAAD,IACAiU,EAAAu4C,GAAAzvC,OAAAg1C,EAAAC,MAMA/F,EAAAjwD,UAAA81D,UAAA,SAAArpD,EAAA6pB,GACA,IAAA2/B,EAAA3/B,EAAA85B,UACA5U,EAAAllB,EAAAklB,MAIA0a,EAAAlG,EAAAnsC,OAAA,SAAAwuC,GAEA3wD,KAAAy0B,KAJA,GAIA,EAAA8/B,EAAA,EAAAA,EAAAza,GAEA6W,EAAAz+B,MAAA4nB,KACA6W,EAAAO,YACAP,EAAAa,OAAA+C,KACA5D,EAAAc,OAAA8C,EATA,GASAA,GAEA5D,EAAAE,QAAA,QACAF,EAAAjC,UAAA95B,EAAA85B,UACAiC,EAAAS,YAAAx8B,EAAAw8B,YACAT,EAAAU,WAIA,OADA/C,EAAApC,MAAAsI,GAAAC,WAIAlG,EAAAjwD,UAAAgzD,WAAA,SAAA1jD,EAAAgnB,GACA,IAAA2/B,EAAA3/B,EAAA85B,UACA5U,EAAAllB,EAAAklB,MAEAt8C,EAAAoQ,EAAAD,SACA0mD,EAAA72D,EAAA+2D,EACAD,EAAA92D,EAAA+2D,EACAtzD,EAAA,EAAAzD,EAAA,EAAA+2D,EACAhgC,EAAA,EAAA/2B,EAAA,EAAA+2D,EAEAC,EAAAlG,EAAAnsC,OAAA,SAAAwuC,GAEA3wD,KAAAy0B,KAAAxzB,EAAAszB,EAAAulB,GAEA6W,EAAAz+B,MAAA4nB,KACA6W,EAAAQ,IAAAkD,EAAAC,EAAA92D,EAAA,IAAAmB,KAAAwH,IACAyuB,EAAAi/B,YACAlD,EAAAkD,UAAAj/B,EAAAi/B,UACAlD,EAAAiD,QAEAjD,EAAAc,OAAA4C,EAAAC,GACA3D,EAAAjC,UAAA95B,EAAA85B,UACAiC,EAAAS,YAAAx8B,EAAAw8B,YACAT,EAAAU,WAEAnF,EAAAoC,EAAApC,MAAAsI,GACAn1C,OAAAzR,EAAAkf,IAAA/tB,EAAAs1D,GAAAzmD,EAAAkf,IAAA/sB,EAAAu0D,GAEA,OADAhG,EAAAtwD,SAAAyyD,OAAAvE,IAIAqC,EAAAjwD,UAAAw1D,SAAA,SAAA5tC,EAAA0O,GACA,IAAA2/B,EAAA3/B,EAAA85B,UACA5U,EAAAllB,EAAAklB,MAEAt1B,EAAA0B,EAAAiH,UACA1I,EAAAyB,EAAAkH,UAEA9qB,EAAAmiB,EAAA1lB,EAAAylB,EAAAzlB,EACAwD,EAAAkiB,EAAA1kB,EAAAykB,EAAAzkB,EAEA8B,EAAAlD,KAAAQ,KAAAmD,IAAAC,KAEAiyD,EAAAlG,EAAAnsC,OAAA,SAAAwuC,GAEA3wD,KAAAy0B,KAAA5yB,EAAA,EAAA0yD,EAAA,EAAAA,EAAAza,GAEA6W,EAAAz+B,MAAA4nB,KACA6W,EAAAO,YACAP,EAAAa,OAAA+C,KACA5D,EAAAc,OAAA8C,EAAA1yD,EAAA0yD,GAEA5D,EAAAE,QAAA,QACAF,EAAAjC,UAAA95B,EAAA85B,UACAiC,EAAAS,YAAAx8B,EAAAw8B,YACAT,EAAAU,WAGAhqC,EAAA1oB,KAAAa,IAAAglB,EAAAzlB,EAAA0lB,EAAA1lB,GACAuoB,EAAA3oB,KAAAa,KAAAglB,EAAAzkB,GAAA0kB,EAAA1kB,GAEAmsD,EAAAoC,EAAApC,MAAAsI,GAIA,OAHAtI,EAAA/5B,QAAAxzB,KAAAwF,MAAA5B,EAAAD,IACA4pD,EAAA7sC,OAAAgI,EAAAktC,EAAAjtC,EAAAitC,GACAjG,EAAAtwD,SAAAyyD,OAAAvE,IAIAqC,EAAAjwD,UAAAozD,YAAA,SAAA9jD,EAAAgnB,GACA,IAAA2/B,EAAA3/B,EAAA85B,UACA5U,EAAAllB,EAAAklB,MAEAp1B,EAAA9W,EAAAkX,WAEA,GAAAJ,EAAA7iB,OAAA,CAMA,IAFA,IAAAwlB,EAAA7W,IAAA8W,EAAA9W,IACAsV,GAAAtV,IAAAuV,GAAAvV,IACA9T,EAAA,EAAiBA,EAAAgoB,EAAA7iB,SAAqBnF,EAAA,CACtC,IAAA4D,EAAAokB,EAAAhoB,GACA2qB,EAAA1oB,KAAAa,IAAA6nB,EAAA/mB,EAAAvB,GACA+mB,EAAAnnB,KAAAc,IAAAqmB,EAAAxlB,EAAAvB,GACAuoB,EAAA3oB,KAAAa,IAAA8nB,GAAAhnB,EAAAP,GACAgmB,EAAApnB,KAAAc,IAAAsmB,GAAAzlB,EAAAP,GAGA,IAAA4yB,EAAA7M,EAAAuB,EACA+G,EAAArI,EAAAuB,EAEAktC,EAAAlG,EAAAnsC,OAAA,SAAAwuC,GAEA3wD,KAAAy0B,KAAA9B,EAAA,EAAA4hC,EAAAnmC,EAAA,EAAAmmC,EAAAza,GAEA6W,EAAAz+B,MAAA4nB,KACA6W,EAAAO,YACA,QAAAx0D,EAAA,EAAmBA,EAAAgoB,EAAA7iB,SAAqBnF,EAAA,CACxC,IAAA4D,EAAAokB,EAAAhoB,GACAqC,EAAAuB,EAAAvB,EAAAsoB,EAAAktC,EACAx0D,GAAAO,EAAAP,EAAAunB,EAAAitC,EACA,GAAA73D,EACAi0D,EAAAa,OAAAzyD,EAAAgB,GAEA4wD,EAAAc,OAAA1yD,EAAAgB,GAGA2kB,EAAA7iB,OAAA,GACA8uD,EAAAgB,YAGA/8B,EAAAi/B,YACAlD,EAAAkD,UAAAj/B,EAAAi/B,UACAlD,EAAAiD,OACAjD,EAAAgB,aAGAhB,EAAAE,QAAA,QACAF,EAAAjC,UAAA95B,EAAA85B,UACAiC,EAAAS,YAAAx8B,EAAAw8B,YACAT,EAAAU,WAGAnF,EAAAoC,EAAApC,MAAAsI,GAGA,OAFAtI,EAAA7sC,OAAAgI,EAAAktC,EAAAjtC,EAAAitC,GACAjG,EAAAtwD,SAAAyyD,OAAAvE,KAIAqC,EAAAjwD,UAAAy1D,UAAA,SAAAnmD,EAAAgnB,GACA,IAAA2/B,EAAA3/B,EAAA85B,UACA5U,EAAAllB,EAAAklB,MAEAp1B,EAAA9W,EAAAkX,WAEA,GAAAJ,EAAA7iB,OAAA,CAMA,IAFA,IAAAwlB,EAAA7W,IAAA8W,EAAA9W,IACAsV,GAAAtV,IAAAuV,GAAAvV,IACA9T,EAAA,EAAiBA,EAAAgoB,EAAA7iB,SAAqBnF,EAAA,CACtC,IAAA4D,EAAAokB,EAAAhoB,GACA2qB,EAAA1oB,KAAAa,IAAA6nB,EAAA/mB,EAAAvB,GACA+mB,EAAAnnB,KAAAc,IAAAqmB,EAAAxlB,EAAAvB,GACAuoB,EAAA3oB,KAAAa,IAAA8nB,GAAAhnB,EAAAP,GACAgmB,EAAApnB,KAAAc,IAAAsmB,GAAAzlB,EAAAP,GAGA,IAAA4yB,EAAA7M,EAAAuB,EACA+G,EAAArI,EAAAuB,EAEAktC,EAAAlG,EAAAnsC,OAAA,SAAAwuC,GAEA3wD,KAAAy0B,KAAA9B,EAAA,EAAA4hC,EAAAnmC,EAAA,EAAAmmC,EAAAza,GAEA6W,EAAAz+B,MAAA4nB,KACA6W,EAAAO,YACA,QAAAx0D,EAAA,EAAmBA,EAAAgoB,EAAA7iB,SAAqBnF,EAAA,CACxC,IAAA4D,EAAAokB,EAAAhoB,GACAqC,EAAAuB,EAAAvB,EAAAsoB,EAAAktC,EACAx0D,GAAAO,EAAAP,EAAAunB,EAAAitC,EACA,GAAA73D,EACAi0D,EAAAa,OAAAzyD,EAAAgB,GAEA4wD,EAAAc,OAAA1yD,EAAAgB,GAIA2kB,EAAA7iB,OAIA+yB,EAAAi/B,YACAlD,EAAAkD,UAAAj/B,EAAAi/B,UACAlD,EAAAiD,OACAjD,EAAAgB,aAGAhB,EAAAE,QAAA,QACAF,EAAAjC,UAAA95B,EAAA85B,UACAiC,EAAAS,YAAAx8B,EAAAw8B,YACAT,EAAAU,WAGAnF,EAAAoC,EAAApC,MAAAsI,GAGA,OAFAtI,EAAA7sC,OAAAgI,EAAAktC,EAAAjtC,EAAAitC,GACAjG,EAAAtwD,SAAAyyD,OAAAvE,sBCvrBAzvD,EAAAD,QAAiBF,EAAQ,IAEzBG,EAAAD,QAAAi6C,SAAA,GAEAn6C,EAAQ,IACRG,EAAAD,QAAAi6C,SAAAie,MAAgCp4D,EAAQ,IACxCA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRG,EAAAD,QAAAyyD,MAAuB3yD,EAAQ,IAC/BG,EAAAD,QAAAmC,KAAsBrC,EAAQ,IAC9BG,EAAAD,QAAAm4D,QAAyBr4D,EAAQ,IACjCG,EAAAD,QAAAm3D,QAAyBr3D,EAAQ,IAEjCA,EAAQ,qBCfRG,EAAAD,QAAiBF,EAAQ,IACzBG,EAAAD,QAAAuyB,OAAwBzyB,EAAQ,IAChCG,EAAAD,QAAAyvD,QAAyB3vD,EAAQ,IACjCA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IAERA,EAAQ,IACRA,EAAQ,mBCTRG,EAAAD,QAAA,WACA,IAAA4pB,EAAA,EACA,SAAAwuC,EAAA3zC,EAAA9iB,GAEA,OADAioB,GAAAjoB,EAAA,iBAAAA,MAAA,EAAAA,EAAA,EACA,WACA8iB,KAAAE,MAAAnhB,KAAAohB,WACAjjB,EAAA,IACAA,IAAAioB,IAKA,WACA,OAAAA,EACA,KAAA/C,EAAAxhB,QACAo9B,WAAA5b,EAAAE,QAAA,GARA1mB,KAIA,IAAAwmB,EAAA,GAeA,OAPAuxC,EAAAvxC,KAAA,SAAApC,GACA,IAAAmF,EACA6Y,WAAAhe,EAAA,GAEAoC,EAAA9B,KAAAN,IAGA2zC,oBCvBA,IAAA7zC,EAAYzkB,EAAQ,IACpB2vD,EAAc3vD,EAAQ,IAEtBwT,EAAaxT,EAAQ,IACrB0B,EAAa1B,EAAQ,IACrBukB,EAASvkB,EAAQ,IAEjBqlB,EAAarlB,EAAQ,IAGrBu4D,EAAA,GAEAC,EAAA,GA6CA,SAAAC,EAAA7pD,GACA6pD,EAAApwC,OAAA9nB,KAAAmD,MAEA,IAAAqhB,EAAArhB,KAEAg1D,EAAA9pD,EAAA,UACA8pD,EAAA9pD,EAAA,WACA8pD,EAAA9pD,EAAA,WACA8pD,EAAA9pD,EAAA,WAEA,IAAAgjD,EAAAhjD,EAAAgjD,KAAAhjD,EAAA01B,OACAq0B,EAAA/pD,EAAA+pD,KAAA/pD,EAAA4uC,OAAA,EACAob,EAAAhqD,EAAAgqD,MAAA,EACAC,EAAAjqD,EAAAiqD,SACAC,EAAAlqD,EAAAkqD,QACAC,EAAAnqD,EAAAmqD,SAAAnqD,EAAAoqD,QAEA,SAAAC,EAAArqD,GACA,IAAAA,GAAA2V,EAAAI,GAAA/V,EAAA2yB,MACA,OAAA3yB,EAGAA,EAAA4E,EAAA,GAAmB5E,GAEnB2V,EAAAI,GAAAitC,KACAhjD,EAAAgjD,EAAAhjD,IAGA,GAAA+pD,IACA/pD,EAAAnM,GAAAk2D,EAAA/pD,EAAAnL,GAAAk1D,EACA/pD,EAAAynB,OAAAsiC,EAAA/pD,EAAAkjB,QAAA6mC,EACA/pD,EAAAsqD,KAAAP,EAAA/pD,EAAAuqD,QAAAR,EACA/pD,EAAAsoD,MAAAyB,EAAA/pD,EAAAqoD,OAAA0B,GAGA,GAAAC,IACAhqD,EAAAnM,GAAAm2D,EAAAhqD,EAAAnL,GAAAm1D,EACAhqD,EAAAynB,OAAA,EAAAuiC,EAAAhqD,EAAAkjB,QAAA,EAAA8mC,EACAhqD,EAAAsqD,KAAAN,EAAAhqD,EAAAuqD,QAAAP,EACAhqD,EAAAsoD,MAAA0B,EAAAhqD,EAAAqoD,OAAA2B,GAGA,IAAAV,EAAAnzC,EAAA8qC,OAIA,OAHAqI,EAAAgB,IAAAtqD,EAAAsqD,IAAAhB,EAAAiB,OAAAvqD,EAAAuqD,OACAjB,EAAAhB,KAAAtoD,EAAAsoD,KAAAgB,EAAAjB,MAAAroD,EAAAqoD,MACAiB,EAAA7xC,IAAAzX,EAAAnM,EAAAmM,EAAAnL,EAAAmL,EAAAynB,MAAAznB,EAAAkjB,QACAomC,EAGA,SAAAjmB,EAAAnK,GACA,GAAA+wB,EAAA,CACA,GAAAt0C,EAAAI,GAAAk0C,GACA,OAAAA,EAAA/wB,GACO,GAAAvjB,EAAAw1B,KAAA8e,GACP,OAAAA,EAAA/wB,GAGA,GAAAixB,EAAA,CAEA,IADA,IAAAxlD,EAAA,KAAA1R,EAAA,EACAzB,EAAA,EAAqBA,EAAA24D,EAAAxzD,OAAoBnF,IACzCilB,EAAA+zC,WAAAL,EAAA34D,GAAAO,KAAAmnC,KACA,IAAAjmC,EACA0R,EAAAwlD,EAAA34D,GACW,IAAAyB,EACX0R,EAAA,CAAAA,EAAAwlD,EAAA34D,IAEAmT,EAAA0R,KAAA8zC,EAAA34D,IAEAyB,KAQA,OALA,IAAAA,GAAA0iB,EAAAI,GAAAm0C,KACAvlD,EAAA,SAAA8lD,GACA,OAAAP,EAAAhxB,GAAAuxB,GAAA,OAGA9lD,GAIA7P,KAAA41D,OAAA,SAAAxxB,GACA,IAAAA,EAEA,WAAAyxB,EAAA71D,KAAAmsD,QAEA,IAAAnwB,EAAAuS,EAAAnK,GACA,OAAApI,EACA,IAAA65B,EAAA75B,EAAAuS,EAAAgnB,QADA,GA9HAx0C,EAAAM,MAAA,SAAAnW,GACA,IAAAmW,EAAAR,EAAAI,GAAA/V,EAAA2yB,MAAA3yB,EAAA,IAAA6pD,EAAA7pD,GACAA,EAAAjO,OACA43D,EAAA3pD,EAAAjO,MAAAokB,GAEAyzC,EAAAvzC,KAAAF,GAEA2zC,EAAA9pD,EAAA,aACA8pD,EAAA9pD,EAAA,cAEA,IAAAsX,EAAAtX,EAAA4qD,UACAhc,EAAA5uC,EAAA6qD,YAAA,EAuBA,OAtBAl1C,EAAAc,OAAAzW,EAAAghD,OACA1pC,EAAAtX,EAAAghD,MACGrrC,EAAAw1B,KAAAnrC,EAAAghD,SACH1pC,EAAAtX,EAAAghD,MAAAvpC,KAAAzX,EAAAghD,MAAA1pC,IACAs3B,EAAA5uC,EAAAghD,MAAApS,UAEAt3B,GAAAzB,EAAAuB,QAAA,SAAAoqB,GACAlqB,EAAAzB,EAAA0B,QAAAD,GAEAzB,EAAAW,OAAA,eAEAs0C,CAAAxzC,EAAA,SAAA0pC,GAEA7qC,EAAAsB,IAAAupC,EAAApS,GACApN,KAEK,SAAAjpC,GAELipC,QAIArrB,GAGA0zC,EAAApwC,OAAAsnC,EACA8I,EAAAz2D,UAAAN,EAAA+2D,EAAApwC,OAAArmB,WA+FA,IAAA23D,EAAA,IAAAhK,EACAgK,EAAAl3D,EAAAk3D,EAAAl2D,EAAAk2D,EAAAtjC,MAAAsjC,EAAA7nC,OAAA,EACA6nC,EAAA9J,KAAA8J,EAAAtzC,IAAAszC,EAAApJ,KAAA,WACA,OAAA7sD,MAEAi2D,EAAAp4B,KAAA,aAGA,IAAAq4B,EAAA,IAAAL,EAAAI,GAEA,SAAAJ,EAAAhmD,EAAA0+B,EAAAgnB,GACA,SAAAY,EAAAtmD,EAAA8lD,GACA,OAAA9lD,EAGKgR,EAAAI,GAAApR,EAAAguB,MACLhuB,EAEKgR,EAAAw1B,KAAAxmC,IAAAgR,EAAAm1B,OAAAnmC,EAAA8iB,QACL9R,EAAAm1B,OAAAnmC,EAAAue,SAAAvN,EAAAI,GAAAs0C,GACAA,EAAA1lD,GAEKgR,EAAAw1B,KAAAxmC,IAAAgR,EAAAu0B,QAAAugB,GACLQ,EAAAtmD,EAAA8lD,IAEK90C,EAAAI,GAAApR,GACLsmD,EAAAtmD,EAAA8lD,IAEK90C,EAAA+0B,MAAA/lC,GACLsmD,EAAAtmD,EAAA,IAEKgR,EAAAc,OAAA9R,IAAAgR,EAAAI,GAAAstB,GACL4nB,EAAA5nB,EAAA1+B,SADK,EAlBLomD,EAuBAj2D,KAAAo2D,IAAA,SAAAT,GACA,OAAAQ,EAAAtmD,EAAA8lD,IAGA31D,KAAA41C,MAAA,SAAAxwC,GACA,IAAAwwC,EAAA/0B,EAAA+0B,MAAAxwC,KAAA,GACA,GAAAyb,EAAA+0B,MAAA/lC,GACA,QAAAnT,EAAA,EAAqBA,EAAAmT,EAAAhO,OAAmBnF,IACxCk5C,EAAAl5C,GAAAy5D,EAAAtmD,EAAAnT,SAGAk5C,EAAA,GAAAugB,EAAAtmD,GAEA,OAAA+lC,GAgCA,SAAAof,EAAA3e,EAAAp5C,EAAAo5D,GACAp5D,KAAAo5C,GACAwX,QAAAnqD,IAAA2yD,IAAAC,QAAA,QAAAr5D,GAAA,IAAAA,EACA,2CA/BA8jB,EAAAyzC,QAAA,SAAApwB,GACA,IAAAvjB,EAAAc,OAAAyiB,GACA,WAAAyxB,EAAAzxB,GAGA,IAAA/iB,EAAA3kB,EAAAmT,EAAA,KAWA,KATAnT,EAAA0nC,EAAAvF,QAAA,SAAAuF,EAAAviC,OAAAnF,EAAA,IAEAmT,GADAwR,EAAAwzC,EAAAzwB,EAAAmyB,MAAA,EAAA75D,MACA2kB,EAAAu0C,OAAAxxB,EAAAmyB,MAAA75D,EAAA,MAGAmT,IAAAwR,EAAAwzC,EAAAzwB,MACAv0B,EAAAwR,EAAAu0C,UAGAl5D,EAAA,GAAamT,GAAAnT,EAAAo4D,EAAAjzD,OAAoCnF,IACjDmT,EAAAilD,EAAAp4D,GAAAk5D,OAAAxxB,GAQA,OALAv0B,IACAg+C,QAAA2I,MAAA,sBAAApyB,GACAv0B,EAAAqmD,GAGArmD,GASApT,EAAAD,QAAAu4D,iBChPAt4D,EAAAD,QAAAk5D,WAAA,SAAAe,EAAA90D,GACA,uBAAA80D,GAAA,iBAAA90D,GACA80D,EAAApyC,UAAA,EAAA1iB,EAAAE,SAAAF,oBCFA,IAAAof,EAAYzkB,EAAQ,IACpBukB,EAASvkB,EAAQ,IAEjB0yB,EAAA,EAoMA,SAAAyhC,EAAA1pB,EAAAjJ,GACA44B,EAAA54B,GACA44B,EAAA3vB,GAEAjJ,EAAAixB,SAEAhoB,EAAA4vB,QACA5vB,EAAA4vB,MAAA34B,MAAAF,EACAA,EAAA84B,MAAA7vB,EAAA4vB,OAGA74B,EAAA1O,QAAA2X,EACAA,EAAA4vB,MAAA74B,EAEAiJ,EAAAhJ,SACAgJ,EAAAhJ,OAAAD,GAGAA,EAAA1O,QAAAqP,MAAAX,GAAA,GAEAA,EAAA+4B,aAAA7nC,EACA+X,EAAA+vB,eAAA9nC,EACA+X,EAAAtU,QAGA,SAAA2/B,EAAArrB,EAAAjJ,GACA44B,EAAA54B,GACA44B,EAAA3vB,GAEAjJ,EAAAixB,SAEAhoB,EAAAhJ,SACAgJ,EAAAhJ,OAAA64B,MAAA94B,EACAA,EAAAE,MAAA+I,EAAAhJ,QAGAD,EAAA1O,QAAA2X,EACAA,EAAAhJ,OAAAD,EAEAiJ,EAAA4vB,QACA5vB,EAAA4vB,MAAA74B,GAGAA,EAAA1O,QAAAqP,MAAAX,GAAA,GAEAA,EAAA+4B,aAAA7nC,EACA+X,EAAA+vB,eAAA9nC,EACA+X,EAAAtU,QAGA,SAAAskC,EAAAC,EAAA/rD,GACAyrD,EAAAM,GACAN,EAAAzrD,GAEA+rD,EAAAjI,SAEA,IAAAhoB,EAAA97B,EAAAmkB,QACApkB,EAAAC,EAAA2rD,MAEA3rD,EAAA2rD,MAAAI,EACAhsD,MAAAgzB,MAAAg5B,IAAAjwB,MAAAhJ,OAAAi5B,GAEAA,EAAA5nC,QAAA2X,EACAiwB,EAAAJ,MAAA5rD,EACAgsD,EAAAh5B,MAAA/yB,EAEA+rD,EAAA5nC,QAAAqP,MAAAu4B,GAAA,GAEAA,EAAAH,aAAA7nC,EACAgoC,EAAAvkC,QAGA,SAAAwkC,EAAAD,EAAAhsD,GACA0rD,EAAAM,GACAN,EAAA1rD,GAEAgsD,EAAAjI,SAEA,IAAAhoB,EAAA/7B,EAAAokB,QACAnkB,EAAAD,EAAAgzB,MAEAhzB,EAAAgzB,MAAAg5B,EACA/rD,MAAA2rD,MAAAI,IAAAjwB,MAAA4vB,MAAAK,GAEAA,EAAA5nC,QAAA2X,EACAiwB,EAAAJ,MAAA5rD,EACAgsD,EAAAh5B,MAAA/yB,EAEA+rD,EAAA5nC,QAAAqP,MAAAu4B,GAAA,GAEAA,EAAAH,aAAA7nC,EACAgoC,EAAAvkC,QAkHA,SAAAikC,EAAAx2D,GACA,GAAAA,gBAAA6gB,EACA,OAAA7gB,EAEA,sBAAAA,EAjZA6gB,EAAAziB,UAAA44D,OAAA,GAEAn2C,EAAAziB,UAAAq/B,UAAA,EAEA5c,EAAAziB,UAAA8wB,QAAA,KACArO,EAAAziB,UAAA0/B,MAAA,KACAjd,EAAAziB,UAAAs4D,MAAA,KAEA71C,EAAAziB,UAAAy/B,OAAA,KACAhd,EAAAziB,UAAAq4D,MAAA,KAEA51C,EAAAziB,UAAA64D,OAAA,KACAp2C,EAAAziB,UAAA84D,OAAA,KAEAr2C,EAAAziB,UAAAiC,SAAA,WACA,UAAAP,KAAAk3D,OAAA,KAMAn2C,EAAAziB,UAAA0a,GAAA,SAAAA,GACA,OAAAhZ,KAAAwuD,MAAAx1C,IAGA+H,EAAAziB,UAAAkwD,MAAA,SAAAA,GACA,gBAAAA,EACAxuD,KAAAk3D,QAEAl3D,KAAAk3D,OAAA1I,EACAxuD,OAGA+gB,EAAAziB,UAAAi0D,KAAA,SAAAt1D,EAAAU,GACA,gBAAAA,EACA,OAAAqC,KAAAm3D,OAAAn3D,KAAAm3D,OAAAl6D,QAAAynC,IAEA,OAAA1kC,KAAAm3D,OAAAn3D,KAAAm3D,OAAAn3D,KAAAm3D,OAAA,IAAwDl6D,GAAAU,EACxDqC,OAGA+gB,EAAAziB,UAAA+4D,QAAA,SAAAA,GACA,gBAAAA,EACAr3D,KAAA29B,UAEA39B,KAAA29B,SAAA05B,EACAr3D,KAAAovB,UAAApvB,KAAAovB,QAAA0nC,eAAA9nC,GACAhvB,KAAAwyB,UAAAxD,EACAhvB,KAAAyyB,QACAzyB,OAGA+gB,EAAAziB,UAAAg5D,KAAA,WACA,OAAAt3D,KAAAq3D,SAAA,IAGAt2C,EAAAziB,UAAAi5D,KAAA,WACA,OAAAv3D,KAAAq3D,SAAA,IAGAt2C,EAAAziB,UAAAyoC,OAAA,WACA,OAAA/mC,KAAAovB,SAGArO,EAAAziB,UAAA2M,KAAA,SAAAosD,GAEA,IADA,IAAApsD,EAAAjL,KAAAg+B,MACA/yB,GAAAosD,IAAApsD,EAAA0yB,UACA1yB,IAAA+yB,MAEA,OAAA/yB,GAGA8V,EAAAziB,UAAA0M,KAAA,SAAAqsD,GAEA,IADA,IAAArsD,EAAAhL,KAAA42D,MACA5rD,GAAAqsD,IAAArsD,EAAA2yB,UACA3yB,IAAA4rD,MAEA,OAAA5rD,GAGA+V,EAAAziB,UAAAk5D,MAAA,SAAAH,GAEA,IADA,IAAApsD,EAAAjL,KAAA+9B,OACA9yB,GAAAosD,IAAApsD,EAAA0yB,UACA1yB,IAAA+yB,MAEA,OAAA/yB,GAGA8V,EAAAziB,UAAAggC,KAAA,SAAA+4B,GAEA,IADA,IAAArsD,EAAAhL,KAAA22D,MACA3rD,GAAAqsD,IAAArsD,EAAA2yB,UACA3yB,IAAA4rD,MAEA,OAAA5rD,GAGA+V,EAAAziB,UAAAm5D,MAAA,SAAAC,EAAA7qD,GACA,IAAAmhD,EAAA0J,EAAA1J,QACAqJ,EAAAK,EAAAL,QACA,IAAAK,EAAAt1C,QAAAs1C,EAAAt1C,MAAApiB,KAAA6M,GAAA,CAIA,IADA,IAAAixB,EAAA7yB,EAAA+iD,EAAAhuD,KAAAs+B,KAAA+4B,GAAAr3D,KAAAw3D,MAAAH,GACAv5B,EAAA7yB,GAEA,GADAA,EAAA+iD,EAAAlwB,EAAA9yB,KAAAqsD,GAAAv5B,EAAA7yB,KAAAosD,GACAv5B,EAAA25B,MAAAC,EAAA7qD,GACA,SAGA,OAAA6qD,EAAAC,KAAAD,EAAAC,IAAA33D,KAAA6M,KAGAkU,EAAAziB,UAAAmyD,OAAA,SAAA3yB,EAAA85B,GACA,GAAA/2C,EAAA+0B,MAAA9X,GACA,QAAAphC,EAAA,EAAmBA,EAAAohC,EAAAj8B,OAAkBnF,IACrC+zD,EAAAzwD,KAAA89B,EAAAphC,SAEA,YAAAk7D,EACA,IAAAl7D,EAAA,EAAmBA,EAAA0kB,UAAAvf,OAAsBnF,IACzC+zD,EAAAzwD,KAAAohB,UAAA1kB,cAEA,IAAAohC,GACA2yB,EAAAzwD,KAAA89B,GAEA,OAAA99B,MAGA+gB,EAAAziB,UAAA8zD,QAAA,SAAAt0B,EAAA85B,GACA,GAAA/2C,EAAA+0B,MAAA9X,GACA,QAAAphC,EAAAohC,EAAAj8B,OAAA,EAAkCnF,GAAA,EAAQA,IAC1C01D,EAAApyD,KAAA89B,EAAAphC,SAEA,YAAAk7D,EACA,IAAAl7D,EAAA0kB,UAAAvf,OAAA,EAAsCnF,GAAA,EAAQA,IAC9C01D,EAAApyD,KAAAohB,UAAA1kB,cAEA,IAAAohC,GACAs0B,EAAApyD,KAAA89B,GAEA,OAAA99B,MAGA+gB,EAAAziB,UAAA01D,SAAA,SAAAjtB,GAEA,OADA0pB,EAAA1pB,EAAA/mC,MACAA,MAGA+gB,EAAAziB,UAAAu5D,UAAA,SAAA9wB,GAEA,OADAqrB,EAAArrB,EAAA/mC,MACAA,MAGA+gB,EAAAziB,UAAAw5D,WAAA,SAAAtvB,EAAAovB,GACA,GAAA/2C,EAAA+0B,MAAApN,GACA,QAAA9rC,EAAA,EAAmBA,EAAA8rC,EAAA3mC,OAAoBnF,IACvCu6D,EAAAzuB,EAAA9rC,GAAAsD,WAEA,YAAA43D,EACA,IAAAl7D,EAAA,EAAmBA,EAAA0kB,UAAAvf,OAAsBnF,IACzCu6D,EAAA71C,UAAA1kB,GAAAsD,gBAEA,IAAAwoC,GACAyuB,EAAAzuB,EAAAxoC,MAEA,OAAAA,MAGA+gB,EAAAziB,UAAAy5D,WAAA,SAAAvvB,EAAAovB,GACA,GAAA/2C,EAAA+0B,MAAApN,GACA,QAAA9rC,EAAA8rC,EAAA3mC,OAAA,EAAoCnF,GAAA,EAAQA,IAC5Cq6D,EAAAvuB,EAAA9rC,GAAAsD,WAEA,YAAA43D,EACA,IAAAl7D,EAAA0kB,UAAAvf,OAAA,EAAsCnF,GAAA,EAAQA,IAC9Cq6D,EAAA31C,UAAA1kB,GAAAsD,gBAEA,IAAAwoC,GACAuuB,EAAAvuB,EAAAxoC,MAEA,OAAAA,MAGA+gB,EAAAziB,UAAA24D,YAAA,SAAAjsD,GAEA,OADAisD,EAAAj3D,KAAAgL,GACAhL,MAGA+gB,EAAAziB,UAAAy4D,aAAA,SAAA9rD,GAEA,OADA8rD,EAAA/2D,KAAAiL,GACAjL,MAiGA+gB,EAAAziB,UAAAywD,OAAA,SAAAjxB,EAAA85B,GACA,YAAA95B,EAAA,CACA,GAAAjd,EAAA+0B,MAAA9X,GACA,QAAAphC,EAAA,EAAqBA,EAAAohC,EAAAj8B,OAAkBnF,IACvCg6D,EAAA54B,EAAAphC,IAAAqyD,cAEK,YAAA6I,EACL,IAAAl7D,EAAA,EAAqBA,EAAA0kB,UAAAvf,OAAsBnF,IAC3Cg6D,EAAAt1C,UAAA1kB,IAAAqyD,cAGA2H,EAAA54B,GAAAixB,SAEA,OAAA/uD,KA4BA,OAzBAA,KAAA42D,QACA52D,KAAA42D,MAAA54B,MAAAh+B,KAAAg+B,OAEAh+B,KAAAg+B,QACAh+B,KAAAg+B,MAAA44B,MAAA52D,KAAA42D,OAGA52D,KAAAovB,UACApvB,KAAAovB,QAAA2O,SAAA/9B,OACAA,KAAAovB,QAAA2O,OAAA/9B,KAAAg+B,OAEAh+B,KAAAovB,QAAAunC,QAAA32D,OACAA,KAAAovB,QAAAunC,MAAA32D,KAAA42D,OAGA52D,KAAAovB,QAAAqP,MAAAz+B,MAAA,GAEAA,KAAAovB,QAAA0nC,eAAA9nC,EACAhvB,KAAAovB,QAAAqD,SAGAzyB,KAAA42D,MAAA52D,KAAAg+B,MAAAh+B,KAAAovB,QAAA,KACApvB,KAAA62D,aAAA7nC,EAGAhvB,MAGA+gB,EAAAziB,UAAA+2C,MAAA,WAEA,IADA,IAAAvX,EAAA7yB,EAAAjL,KAAA+9B,OACAD,EAAA7yB,GACAA,EAAA6yB,EAAAE,MACAF,EAAA84B,MAAA94B,EAAAE,MAAAF,EAAA1O,QAAA,KAEApvB,KAAAy+B,MAAAX,GAAA,GAOA,OAJA99B,KAAA+9B,OAAA/9B,KAAA22D,MAAA,KAEA32D,KAAA82D,eAAA9nC,EACAhvB,KAAAyyB,QACAzyB,MAGA+gB,EAAAziB,UAAAm0B,MAAA,WAGA,OAFAzyB,KAAAg4D,YAAAhpC,EACAhvB,KAAAovB,SAAApvB,KAAAovB,QAAAqD,QACAzyB,MAMA+gB,EAAAziB,UAAAmgC,MAAA,SAAAv+B,EAAAjD,GACA,YAAAA,EACA,cAAA+C,KAAAo3D,QAAAp3D,KAAAo3D,OAAAl3D,IAAA,EAiBA,GAfA,iBAAAA,IACAjD,GACA+C,KAAAo3D,OAAAp3D,KAAAo3D,QAAA,IACAp3D,KAAAo3D,OAAAl3D,IAAAF,KAAAovB,SACApvB,KAAAovB,QAAAqP,MAAAv+B,GAAA,GAEAF,KAAAo3D,OAAAl3D,IAAAF,KAAAo3D,OAAAl3D,IAAA,MAEKF,KAAAo3D,QAAAp3D,KAAAo3D,OAAAl3D,GAAA,IACL,GAAAF,KAAAo3D,OAAAl3D,IAAAF,KAAAovB,SACApvB,KAAAovB,QAAAqP,MAAAv+B,GAAA,GAEAF,KAAAo3D,OAAAl3D,GAAAF,KAAAo3D,OAAAl3D,GAAA,IAGA,iBAAAA,GACAA,EAAAk3D,OACA,QAAAhhD,KAAAlW,EAAAk3D,OACAl3D,EAAAk3D,OAAAhhD,GAAA,GACApW,KAAAy+B,MAAAroB,EAAAnZ,GAKA,OAAA+C,MAMA+gB,EAAAziB,UAAA25D,QAAA,SAAAC,GACA,QAAAl4D,KAAAuyD,KAAA,QAGA2F,EAAAn5D,GAAA,GAAAm5D,EAAAn5D,GAAAiB,KAAAwvB,KAAAQ,QAAAkoC,EAAAn4D,GAAA,GACAm4D,EAAAn4D,GAAAC,KAAAwvB,KAAAS,SAUAxzB,EAAAD,QAAAukB,mBC3ZAzkB,EAAQ,GAARA,CAAwBA,EAAQ,IAAQgC,UAAA,SAAA4B,EAAAjD,EAAAqpC,GACxCpmC,EAAAu+B,MAAAxhC,EAAAqpC,oBCDA7pC,EAAAD,QAAA,SAAA8B,EAAAggB,GAEAhgB,EAAA+nC,WAAA,KAEA/nC,EAAAgoC,GAAAhoC,EAAA65D,OAAA,SAAAC,EAAA9/C,GACA,IAAA8/C,MAAAv2D,QAAA,mBAAAyW,EACA,OAAAtY,KAMA,GAJA,OAAAA,KAAAqmC,aACArmC,KAAAqmC,WAAA,IAGA+xB,GADA,iBAAAA,GAAA,mBAAAA,EAAAC,KACAD,EAAAC,KAAA,KAAAD,GAAAp0C,MAAA,QACA,QAAAtnB,EAAA,EAAqBA,EAAA07D,EAAAv2D,OAAkBnF,IAAA,CACvC,IAAA0Z,EAAAgiD,EAAA17D,GACAsD,KAAAqmC,WAAAjwB,GAAApW,KAAAqmC,WAAAjwB,IAAA,GACApW,KAAAqmC,WAAAjwB,GAAAmL,KAAAjJ,GACA,mBAAAgG,GACAA,EAAAte,KAAAoW,GAAA,GAIA,OAAApW,MAGA1B,EAAAioC,IAAA,SAAA6xB,EAAA9/C,GACA,IAAA8/C,MAAAv2D,QAAA,mBAAAyW,EACA,OAAAtY,KAEA,UAAAA,KAAAqmC,WACA,OAAArmC,KAGA,GAAAo4D,GADA,iBAAAA,GAAA,mBAAAA,EAAAC,KACAD,EAAAC,KAAA,KAAAD,GAAAp0C,MAAA,QACA,QAAAtnB,EAAA,EAAqBA,EAAA07D,EAAAv2D,OAAkBnF,IAAA,CACvC,IAAA0oB,EAAAhP,EAAAgiD,EAAA17D,GAAAs3B,EAAAh0B,KAAAqmC,WAAAjwB,GACA4d,IAAA5O,EAAA4O,EAAA6K,QAAAvmB,KAAA,IACA0b,EAAA8K,OAAA1Z,EAAA,GACA4O,EAAAnyB,eACA7B,KAAAqmC,WAAAjwB,GAEA,mBAAAkI,GACAA,EAAAte,KAAAoW,GAAA,IAKA,OAAApW,MAGA1B,EAAAkoC,UAAA,SAAApwB,GACA,OAAApW,KAAAqmC,YAAArmC,KAAAqmC,WAAAjwB,IAGA9X,EAAA49B,QAAA,SAAAj/B,EAAAqmB,GACA,IAAAkjB,EAAAxmC,KAAAwmC,UAAAvpC,GACA,IAAAupC,MAAA3kC,OACA,SAEA,QAAAlF,EAAA,EAAmBA,EAAA6pC,EAAA3kC,OAAsBlF,IACzC6pC,EAAA7pC,GAAAwkB,MAAAnhB,KAAAsjB,GAEA,OAAAkjB,EAAA3kC,QAGAvD,EAAAg6D,QAAA,SAAAr7D,EAAAqmB,GAEA,OADAtjB,KAAAk8B,QAAAj/B,EAAAqmB,GACAtjB,wBCnEA,IAAA+gB,EAAYzkB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAER,IAAAskB,EAAYtkB,EAAQ,IACpB0B,EAAa1B,EAAQ,IACrBwT,EAAaxT,EAAQ,IASrB,SAAAi8D,EAAAC,EAAA/6B,GACA86B,EAAA5zC,OAAA9nB,KAAAmD,MACAA,KAAAwuD,MAAA,QAEA,IAAAc,GAAA,EAEA0H,EAAAh3D,KACAy4D,EAAA,EACA/7B,EAAA,SAAAzZ,GACA,QAAAqsC,EAAA,CAIA1uC,EAAA4d,KAAA5d,EAAAqb,KAAArb,EAAAid,KAAA,EAEA,IAAAS,EAAAm6B,GAAAx1C,EACAob,EAAApb,EAAAqb,EACAm6B,EAAAx1C,EAEA,IAAAsb,EAAAy4B,EAAA54B,MAAAC,EAAApb,EAAAqb,GACA04B,EAAA0B,WAAA1B,EAAAgB,WACAhB,EAAA0B,UAAA1B,EAAAgB,UACAv6B,EAAAu5B,GACAwB,EAAA97B,IACK6B,EACLi6B,EAAA97B,GAEA4yB,GAAA,EAGA1uC,EAAA+3C,IAAAt6B,EAAA,IAAAA,EAAA,IAGAr+B,KAAAoiB,MAAA,WACA,OAAApiB,KAAAyjB,UAGAzjB,KAAAyjB,OAAA,WAMA,OALA6rC,IACAtvD,KAAAk8B,QAAA,UACAozB,GAAA,EACAkJ,EAAA97B,IAEA18B,MAGAA,KAAAwjB,MAAA,WAKA,OAJA8rC,GACAtvD,KAAAk8B,QAAA,SAEAozB,GAAA,EACAtvD,MAGAA,KAAA44D,WAAA54D,KAAAyyB,MACAzyB,KAAAyyB,MAAA,WAEA,OADAzyB,KAAAyjB,SACAzjB,KAAA44D,cAhEAL,EAAA5zC,OAAA5D,EACAw3C,EAAAj6D,UAAAN,EAAAu6D,EAAA5zC,OAAArmB,WAEAyiB,EAAAuqB,KAAA,SAAAktB,EAAA/6B,GACA,WAAA86B,EAAAC,EAAA/6B,IAgEA86B,EAAAj6D,UAAAsxD,WAAA,SAAAqB,GAEA,OAAAjxD,MAGAu4D,EAAAj6D,UAAAu6D,SAAA,SAAAlmC,EAAAvE,EAAA0rB,GACA,YAAAnnB,EACA,OAAA7iB,EAAA,GAAoB9P,KAAA84D,WAEpB94D,KAAA84D,UAAA,CACAnmC,QACAvE,SACA0rB,SAAA,GAEA95C,KAAAmyD,UACA,IAAAtlD,EAAAiD,EAAA,GAAsB9P,KAAA84D,WAStB,OARA94D,KAAAy3D,MAAA,CACAr1C,MAAA,SAAA6Z,GACA,IAAAA,EAAAwC,MAAA,YACA,SAEAxC,EAAAC,QAAA,YAAArvB,OAGA7M,MAIAu4D,EAAAj6D,UAAA6zD,QAAA,SAAAx/B,EAAAvE,EAAAvwB,GACA,iBAAA80B,GAAA,iBAAAvE,IACApuB,KAAA+4D,SAAA,CACApmC,QACAvE,SACAvwB,KAAA,6BAAA6kB,KAAA7kB,KAAA,WAIA,IAAAm7D,EAAAh5D,KAAA+4D,SACAtkC,EAAAz0B,KAAA84D,UAcA,OAbArkC,GAAAukC,GACAh5D,KAAA6vB,IAAA,CACA8C,MAAAqmC,EAAArmC,MACAvE,OAAA4qC,EAAA5qC,SAEApuB,KAAAi0B,QAAAQ,EAAA9B,MAAA8B,EAAArG,OAAA4qC,EAAAn7D,OACG42B,GACHz0B,KAAA6vB,IAAA,CACA8C,MAAA8B,EAAA9B,MACAvE,OAAAqG,EAAArG,SAIApuB,uBChIA,IAAA+gB,EAAYzkB,EAAQ,IACpB2vD,EAAc3vD,EAAQ,IAEtBykB,EAAAoB,OAAA,SAAA/L,EAAA6iD,EAAA36C,GACA,iBAAAlI,EACA,iBAAA6iD,IAEA,mBAAAA,IACA36C,EAAA26C,GAEAA,EAAA,KAGA,mBAAA7iD,IACAkI,EAAAlI,GAEA6iD,EAAA,GACA7iD,EAAA,MAGA,IAAA+L,EAAAU,SAAAC,cAAA,UACA4a,EAAAvb,EAAA+2C,WAAA9iD,EAAA6iD,GACAzE,EAAA,IAAAvI,EAAA9pC,GA2BA,OAzBAqyC,EAAA92B,QAAA,WACA,OAAAA,GAGA82B,EAAA//B,KAAA,SAAA9B,EAAAvE,EAAA0rB,GAKA,OAJAA,KAAA,EACA33B,EAAAwQ,QAAAmnB,EACA33B,EAAAiM,SAAA0rB,EACA95C,KAAA2iB,IAAAR,EAAA23B,GACA95C,MAGAw0D,EAAAryC,OAAA,SAAAlB,GAMA,MALA,mBAAAA,EACAA,EAAApkB,KAAAmD,KAAA09B,QACK,IAAAzc,GAAA,mBAAA3C,GACLA,EAAAzhB,KAAAmD,KAAA09B,GAEA19B,MAGA,mBAAAse,GACAA,EAAAzhB,KAAA23D,EAAA92B,GAGA82B,oBCjDA,IAAAzzC,EAAYzkB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAER,IAAA68D,EAAa78D,EAAQ,IACrB0B,EAAa1B,EAAQ,IAarB,SAAAo4D,IACAA,EAAA/vC,OAAA9nB,KAAAmD,MACAA,KAAAwuD,MAAA,SACAxuD,KAAAw9B,UAAA,GACAx9B,KAAAosD,OAAA,KAfA3vD,EAAAD,QAAAk4D,EAEA3zC,EAAAmrC,MAAA,SAAAA,GACA,IAAAkN,EAAA,IAAA1E,EAEA,OADAxI,GAAAkN,EAAAlN,SACAkN,GAGA1E,EAAA/vC,OAAA5D,EACA2zC,EAAAp2D,UAAAN,EAAA02D,EAAA/vC,OAAArmB,WAYAo2D,EAAAp2D,UAAA+6D,SAAA,SAAAt4D,EAAAC,EAAAjE,GACA,OAAAiD,KAAAksD,MAAAnrD,EAAAC,EAAAjE,IAGA23D,EAAAp2D,UAAA4tD,MAAA,SAAAA,GAMA,OALAlsD,KAAAosD,OAAArrC,EAAAyzC,QAAAtI,GAAAkK,MACAp2D,KAAA6vB,IAAA,QAAA7vB,KAAAosD,OAAApsD,KAAAosD,OAAAz5B,MAAA,GACA3yB,KAAA6vB,IAAA,SAAA7vB,KAAAosD,OAAApsD,KAAAosD,OAAAh+B,OAAA,GACApuB,KAAAw9B,UAAA,GAAAx9B,KAAAosD,OAAAD,OACAnsD,KAAAw9B,UAAA37B,OAAA,EACA7B,MAGA00D,EAAAp2D,UAAAg7D,KAAA,SAAAC,GAEA,OADAv5D,KAAAw5D,SAAA,EAAAD,GACAv5D,MAGA00D,EAAAp2D,UAAAm2D,QAAA,SAAA8E,GAEA,OADAv5D,KAAAw5D,SAAA,EAAAD,GACAv5D,MAGA00D,EAAAp2D,UAAAk7D,QAAA,SAAA/E,EAAA8E,GACA,IAAAvC,EAAAh3D,KAaA,SAAAy5D,EAAA/8D,EAAA0wD,EAAAC,EAAAC,EAAAC,EAAAjrD,EAAAC,EAAAirD,EAAAC,GACA,IAAA0L,EAAAnC,EAAAx5B,UAAA37B,OAAAnF,EAAAs6D,EAAAx5B,UAAA9gC,GACAs6D,EAAAx5B,UAAA9gC,GAAAs6D,EAAA5K,OAAAD,OACAgN,EAAAx2C,IAAAyqC,EAAAC,EAAAC,EAAAC,GACA4L,EAAAtM,KAAAvqD,EAAAC,EAAAirD,EAAAC,GAhBAztD,KAAA4+B,OAAA5+B,KAAA05D,eACA15D,KAAAw+B,KAAAx+B,KAAA05D,cAAA,WACA,GAAA15D,KAAA25D,aAAA35D,KAAAwvB,KAAA+B,cAAA,CAGAvxB,KAAA25D,YAAA35D,KAAAwvB,KAAA+B,cACA,IAAAoB,EAAA3yB,KAAA6vB,IAAA,SACAzB,EAAApuB,KAAA6vB,IAAA,UACA7vB,KAAAw9B,UAAA37B,OAAAs3D,EAAAn5D,KAAAosD,OAAAz5B,EAAAvE,EAAAqmC,EAAA8E,EACAE,sBC9DAh9D,EAAAD,QAAA,SAAA48D,EAAAQ,EAAAC,EAAApF,EAAA8E,EAAAE,GAEA,IAAA9mC,EAAAymC,EAAAzmC,MACAvE,EAAAgrC,EAAAhrC,OACAolC,EAAA4F,EAAA5F,KACAD,EAAA6F,EAAA7F,MACAiC,EAAA4D,EAAA5D,IACAC,EAAA2D,EAAA3D,OAOA9iC,KALA6gC,EAAA,iBAAAA,UAAA,IACAD,EAAA,iBAAAA,UAAA,GAKAnlC,KAJAonC,EAAA,iBAAAA,UAAA,IACAC,EAAA,iBAAAA,UAAA,GAKA8D,IACAK,EAAAj7D,KAAAc,IAAAm6D,EAAApG,EAAAD,EAAA,GACAsG,EAAAl7D,KAAAc,IAAAo6D,EAAArE,EAAAC,EAAA,IAGA,IAAA/4D,EAAA,EAYA,GAVA84D,EAAA,GAAAhC,EAAA,GACAiG,EAAA/8D,IAAA,IAAA82D,EAAAgC,EAAA,IAAAhC,EAAAgC,GACAC,EAAA,GAAAjC,EAAA,GACAiG,EAAA/8D,IAAA,EAAA0xB,EAAAonC,EAAAhC,EAAAiC,EAAA,EAAAoE,EAAArE,EAAAhC,EAAAiC,GACAD,EAAA,GAAAjC,EAAA,GACAkG,EAAA/8D,IAAAi2B,EAAA6gC,EAAA,EAAAD,EAAAiC,EAAAoE,EAAApG,EAAA,EAAAD,EAAAiC,GACAC,EAAA,GAAAlC,EAAA,GACAkG,EAAA/8D,IAAAi2B,EAAA6gC,EAAAplC,EAAAonC,EAAAjC,EAAAkC,EAAAmE,EAAApG,EACAqG,EAAArE,EAAAjC,EAAAkC,GAEAhB,EACAe,EAAA,GACAiE,EAAA/8D,IAAA82D,EAAA,EAAA7gC,EAAA6iC,EAAAhC,EAAA,EAAAoG,EAAApE,GACAC,EAAA,GACAgE,EAAA/8D,IAAA82D,EAAAplC,EAAAonC,EAAA7iC,EAAA8iC,EAAAjC,EAAAqG,EAAArE,EACAoE,EAAAnE,GACAjC,EAAA,GACAiG,EAAA/8D,IAAA,EAAA84D,EAAAhC,EAAAplC,EAAA,EAAAonC,EAAAhC,EAAAqG,GACAtG,EAAA,GACAkG,EAAA/8D,IAAAi2B,EAAA6gC,EAAAgC,EAAAjC,EAAAnlC,EAAAwrC,EAAApG,EAAAgC,EAAAjC,EACAsG,GAEAJ,EAAA/8D,IAAA82D,EAAAgC,EAAA7iC,EAAAvE,EAAAolC,EAAAgC,EAAAoE,EAAAC,QAIA,IADA,IAAA54D,EAAAtE,EAAA62D,EAAAh2D,EAAAo8D,EACAp8D,EAAA,IACAyD,EAAAtC,KAAAa,IAAAmzB,EAAAn1B,MAAAm1B,EAEA,IADA,IAAA4B,EAAA32B,EAAA43D,EAAAx0D,EAAA64D,EACA74D,EAAA,GACAuzB,EAAA51B,KAAAa,IAAA4uB,EAAAptB,MAAAotB,EACAqrC,EAAA/8D,IAAA82D,EAAAgC,EAAAv0D,EAAAszB,EAAA53B,EAAAiB,EAAAqD,EAAAszB,GACA/2B,GAAA,IACAg2D,GACAiG,EAAA/8D,IAAA,EAAA84D,EAAAhC,EAAAj/B,EAAA,EAAA32B,EAAA41D,EAAAj/B,GACAg/B,GACAkG,EAAA/8D,IAAAi2B,EAAA6gC,EAAAgC,EAAAjC,EAAAh/B,EAAA53B,EAAAsE,EAAArD,EAAA21D,EAAAh/B,IAEA32B,GAAA22B,EAEAihC,GACAiE,EAAA/8D,IAAA82D,EAAA,EAAAvyD,EAAAu0D,EAAA74D,EAAA,EAAAsE,EAAAu0D,GACAC,GACAgE,EAAA/8D,IAAA82D,EAAAplC,EAAAonC,EAAAv0D,EAAAw0D,EAAA94D,EAAAiB,EAAAqD,EAAAw0D,GACA94D,GAAAsE,EAIA,OAAAvE,oBCxEA,IAAAqkB,EAAYzkB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAER,IAAA0B,EAAa1B,EAAQ,IACrBsC,EAAWtC,EAAQ,IAiBnB,SAAAw9D,IACAA,EAAAn1C,OAAA9nB,KAAAmD,MACAA,KAAAwuD,MAAA,QAEAxuD,KAAAw9B,UAAA,GAEAx9B,KAAA+5D,KAAAh5C,EAAA+4C,KAAAE,IACAh6D,KAAAi6D,IAAA,IAAAj6D,KAAA+5D,KAEA/5D,KAAAk6D,OAAA,EACAl6D,KAAAw5D,QAAA,EAEAx5D,KAAAm6D,OAAA,EACAn6D,KAAAo6D,QAAA,GAEA,IAAA3B,EAAA,EACAz4D,KAAAw+B,KAAA,SAAA5gC,EAAAqlB,EAAAqb,GACA,KAAAt+B,KAAAk6D,MAAA,GAAAl6D,KAAAo6D,QAAAv4D,QAAA,IAKA,IAAAw4D,EAAA5B,GAAAn6B,EAEA,GADAm6B,EAAAx1C,EACAo3C,EACA,SAIA,GADAr6D,KAAAk6D,OAAAt8D,EACAoC,KAAAk6D,MAAAl6D,KAAAi6D,IACA,SAEA,IAAA97D,EAAA6B,KAAAk6D,MAAAl6D,KAAAi6D,IAAA,EAGA,OAFAj6D,KAAAk6D,OAAA/7D,EAAA6B,KAAAi6D,IACAj6D,KAAAs6D,UAAAn8D,KACA6B,KAAAw5D,QAAA,IAAAx5D,KAAAw5D,SAAAr7D,IAAA,KACA6B,KAAAu6D,OACAv6D,KAAAw6D,WAAAx6D,KAAAw6D,aACA,MAGG,GAxDHz5C,EAAA05C,KAAA,SAAAC,EAAA/B,GACA,IAAA8B,EAAA,IAAAX,EAGA,OAFAW,EAAAC,UAAAC,UAAA,GACAhC,GAAA8B,EAAA9B,OACA8B,GAGAX,EAAAn1C,OAAA5D,EACA+4C,EAAAx7D,UAAAN,EAAA87D,EAAAn1C,OAAArmB,WAGAyiB,EAAA+4C,KAAA,CACAE,IAAA,IA+CAF,EAAAx7D,UAAAq6D,IAAA,SAAAA,GACA,gBAAAA,EACA34D,KAAA+5D,MAEA/5D,KAAA+5D,KAAApB,EAAA,EAAAA,EAAA53C,EAAA+4C,KAAAE,IACAh6D,KAAAi6D,IAAA,IAAAj6D,KAAA+5D,KACA/5D,OAMA85D,EAAAx7D,UAAAs8D,UAAA,SAAA75D,EAAAC,EAAAjE,GACA,OAAAiD,KAAA06D,OAAA35D,EAAAC,EAAAjE,IAGA+8D,EAAAx7D,UAAAo8D,OAAA,SAAAA,GAIA,OAHA16D,KAAAm6D,OAAA,EACAn6D,KAAAo6D,QAAAr5C,EAAAyzC,QAAAkG,GAAA9kB,QACA51C,KAAAyyB,QACAzyB,MAGA85D,EAAAx7D,UAAAuD,OAAA,WACA,OAAA7B,KAAAo6D,QAAAp6D,KAAAo6D,QAAAv4D,OAAA,GAGAi4D,EAAAx7D,UAAAq8D,UAAA,SAAAE,EAAAC,GASA,OARA96D,KAAAm6D,OAAA,EAAAv7D,EAAAuzB,OAAA0oC,EAAA76D,KAAAo6D,QAAAv4D,QACAi5D,MAAA96D,KAAAw9B,UAAA,GACAx9B,KAAAw9B,UAAA,GAAAx9B,KAAAo6D,QAAAp6D,KAAAm6D,QACAW,IACA96D,KAAA6vB,IAAA,QAAA7vB,KAAAw9B,UAAA,GAAA7K,OACA3yB,KAAA6vB,IAAA,SAAA7vB,KAAAw9B,UAAA,GAAApP,SAEApuB,KAAAyyB,QACAzyB,MAGA85D,EAAAx7D,UAAAg8D,UAAA,SAAAS,GACA,OAAA/6D,KAAA26D,UAAA36D,KAAAm6D,OAAAY,IAGAjB,EAAAx7D,UAAA66D,OAAA,SAAAA,EAAA76C,GAIA,OAHAte,KAAAw5D,QAAAL,EAAAn5D,KAAAo6D,QAAAv4D,OAAA,EACA7B,KAAAw6D,UAAAl8C,EACAte,KAAAg7D,OACAh7D,MAGA85D,EAAAx7D,UAAA08D,KAAA,SAAAH,GASA,YARA,IAAAA,GACA76D,KAAA26D,UAAAE,GACA76D,KAAAk6D,MAAA,GACGl6D,KAAAk6D,MAAA,IACHl6D,KAAAk6D,MAAA,GAGAl6D,KAAAyyB,QACAzyB,MAGA85D,EAAAx7D,UAAAi8D,KAAA,SAAAM,GAKA,OAJA76D,KAAAk6D,OAAA,OACA,IAAAW,GACA76D,KAAA26D,UAAAE,GAEA76D,uBCrIA,IAAA+gB,EAAYzkB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAER,IAAA0B,EAAa1B,EAAQ,IACrBukB,EAASvkB,EAAQ,IASjB,SAAA2+D,IACAA,EAAAt2C,OAAA9nB,KAAAmD,MACAA,KAAAwuD,MAAA,UACAxuD,KAAAw9B,UAAA,GAVAzc,EAAAY,OAAA,SAAA+4C,GACA,WAAAO,GAAAP,WAGAO,EAAAt2C,OAAA5D,EACAk6C,EAAA38D,UAAAN,EAAAi9D,EAAAt2C,OAAArmB,WAWA28D,EAAA38D,UAAA48D,QAAA,SAAAn6D,EAAAC,EAAAjE,GACA,OAAAiD,KAAA06D,OAAA35D,EAAAC,EAAAjE,IAGAk+D,EAAA38D,UAAAo8D,OAAA,SAAAA,GAcA,OAbA16D,KAAAw9B,UAAA,GACA,iBAAAk9B,GACAA,EAAA35C,EAAAyzC,QAAAkG,GACA16D,KAAAm7D,MAAA,SAAAx9D,GACA,OAAA+8D,EAAAtE,IAAAz4D,KAEG,iBAAA+8D,EACH16D,KAAAm7D,MAAA,SAAAx9D,GACA,OAAA+8D,EAAA/8D,IAEG,mBAAA+8D,IACH16D,KAAAm7D,MAAAT,GAEA16D,MAMAi7D,EAAA38D,UAAA88D,SAAA,SAAAr6D,EAAAC,EAAAjE,GACA,OAAAiD,KAAArC,MAAAoD,EAAAC,EAAAjE,IAGAk+D,EAAA38D,UAAAX,MAAA,SAAAA,GACA,YAAAA,EACA,OAAAqC,KAAAq7D,OAEA,GAAAr7D,KAAAq7D,SAAA19D,EACA,OAAAqC,KAEAA,KAAAq7D,OAAA19D,EAEA,OAAAA,EACAA,EAAA,GACG,iBAAAA,GAAAkjB,EAAA+0B,MAAAj4C,KACHA,IAAA4C,YAGAP,KAAAs7D,SAAAt7D,KAAAs7D,UAAA,EAGA,IADA,IAAA3oC,EAAA,EAAAvE,EAAA,EACA1xB,EAAA,EAAiBA,EAAAiB,EAAAkE,OAAkBnF,IAAA,CACnC,IAAAwvD,EAAAlsD,KAAAw9B,UAAA9gC,GAAAsD,KAAAm7D,MAAAx9D,EAAAjB,IACAi2B,GAAAj2B,EAAA,EAAAsD,KAAAs7D,SAAA,EACApP,EAAAW,KAAAl6B,EAAA,GACAA,GAAAu5B,EAAAv5B,MACAvE,EAAAzvB,KAAAc,IAAA2uB,EAAA89B,EAAA99B,QAKA,OAHApuB,KAAA6vB,IAAA,QAAA8C,GACA3yB,KAAA6vB,IAAA,SAAAzB,GACApuB,KAAAw9B,UAAA37B,OAAAlE,EAAAkE,OACA7B,uBC/EA,IAAA+gB,EAAYzkB,EAAQ,IACpBA,EAAQ,IACRA,EAAQ,IAEKA,EAAQ,IAErBykB,EAAAw6C,IAAA,SAAA1nC,GACA,OAAA9S,EAAA/iB,SAAAu9D,IAAA1nC,GAAA26B,MAAA,QAGAztC,EAAAziB,UAAAi9D,IAAA,SAAA1nC,GAEA,OADA7zB,KAAAw7D,SAAA,MAAA3nC,GACA7zB,MAGA+gB,EAAA06C,OAAA,SAAA5nC,GACA,OAAA9S,EAAA/iB,SAAAy9D,OAAA5nC,GAAA26B,MAAA,QAGAztC,EAAAziB,UAAAm9D,OAAA,SAAA5nC,GAEA,OADA7zB,KAAAw7D,SAAA,SAAA3nC,GACA7zB,MAGA+gB,EAAAy6C,SAAA,SAAAplD,EAAAyd,GACA,OAAA9S,EAAA/iB,SAAAw9D,SAAAplD,EAAAyd,GAAA26B,MAAA,aAGAztC,EAAAziB,UAAAk9D,SAAA,SAAAplD,EAAAyd,GA+CA,OA7CA7zB,KAAA07D,SAAA17D,KAAA07D,UAAA,EACA17D,KAAAs7D,SAAAt7D,KAAAs7D,UAAA,EAEAt7D,KAAA4+B,OAAA5+B,KAAA27D,cACA37D,KAAAw+B,KAAAx+B,KAAA27D,aAAA,WACA,GAAA37D,KAAA47D,SAAA57D,KAAAg4D,UAAA,CAGAh4D,KAAA47D,QAAA57D,KAAAg4D,UAEA,IAAA6D,EAAA77D,KAAA87D,cAAA97D,KAAA82D,aACA92D,KAAA87D,aAAA97D,KAAA82D,aAMA,IAJA,IAEAh5B,EAFAnL,EAAA,EAAAvE,EAAA,EAEAnjB,EAAAjL,KAAAw3D,OAAA,GACAA,GAAA,EACA15B,EAAA7yB,GAAA,CACAA,EAAA6yB,EAAA7yB,MAAA,GAEA6yB,EAAArO,QAAA,GACA,IAAAxuB,EAAA68B,EAAAjO,IAAA,YACA0E,EAAAuJ,EAAAjO,IAAA,aAEA,UAAAzZ,IACAohD,IAAAppC,GAAApuB,KAAAs7D,UACAx9B,EAAAjO,IAAA,YAAAzB,GAAA0P,EAAAjO,IAAA,UAAAzB,GACAuE,EAAAh0B,KAAAc,IAAAkzB,EAAA1xB,GACAmtB,GAAAmG,EACAsnC,GAAA/9B,EAAAjO,IAAA,SAAAgE,IAEO,OAAAzd,KACPohD,IAAA7kC,GAAA3yB,KAAAs7D,UACAx9B,EAAAjO,IAAA,YAAA8C,GAAAmL,EAAAjO,IAAA,UAAA8C,GACAA,GAAA1xB,EACAmtB,EAAAzvB,KAAAc,IAAA2uB,EAAAmG,GACAsnC,GAAA/9B,EAAAjO,IAAA,SAAAgE,IAEA2jC,GAAA,EAEA7kC,GAAA,EAAA3yB,KAAA07D,SACAttC,GAAA,EAAApuB,KAAA07D,SACA17D,KAAA6vB,IAAA,UAAA8C,GAAA3yB,KAAA6vB,IAAA,QAAA8C,GACA3yB,KAAA6vB,IAAA,WAAAzB,GAAApuB,KAAA6vB,IAAA,SAAAzB,MAEApuB,MAGA+gB,EAAAi4C,IAAA,WACA,OAAAj4C,EAAA/iB,SAAAg7D,MAAAxK,MAAA,QAGAztC,EAAAziB,UAAA06D,IAAA,WAyBA,OAxBAh5D,KAAA07D,SAAA17D,KAAA07D,UAAA,EAEA17D,KAAA4+B,OAAA5+B,KAAA27D,cACA37D,KAAAw+B,KAAAx+B,KAAA27D,aAAA,WACA,GAAA37D,KAAA+7D,SAAA/7D,KAAAg4D,UAAA,CAGAh4D,KAAA+7D,QAAA/7D,KAAAg4D,UAIA,IAFA,IACAl6B,EADAnL,EAAA,EAAAvE,EAAA,EACAnjB,EAAAjL,KAAAw3D,OAAA,GACA15B,EAAA7yB,GAAA,CACAA,EAAA6yB,EAAA7yB,MAAA,GACA6yB,EAAArO,QAAA,GACA,IAAAxuB,EAAA68B,EAAAjO,IAAA,YACA0E,EAAAuJ,EAAAjO,IAAA,aACA8C,EAAAh0B,KAAAc,IAAAkzB,EAAA1xB,GACAmtB,EAAAzvB,KAAAc,IAAA2uB,EAAAmG,GAEA5B,GAAA,EAAA3yB,KAAA07D,SACAttC,GAAA,EAAApuB,KAAA07D,SACA17D,KAAA6vB,IAAA,UAAA8C,GAAA3yB,KAAA6vB,IAAA,QAAA8C,GACA3yB,KAAA6vB,IAAA,WAAAzB,GAAApuB,KAAA6vB,IAAA,SAAAzB,MAEApuB,MAGA+gB,EAAAi7C,MAAA,WACA,OAAAj7C,EAAA/iB,SAAAg+D,QAAAxN,MAAA,UAGAztC,EAAAziB,UAAA09D,MAAA,WAgBA,OAdAh8D,KAAA4+B,OAAA5+B,KAAA27D,cACA37D,KAAAw+B,KAAAx+B,KAAA27D,aAAA,WACA,IAAA50B,EAAA/mC,KAAA+mC,SACA,GAAAA,EAAA,CACA,IAAApU,EAAAoU,EAAAlX,IAAA,SACA7vB,KAAA6vB,IAAA,UAAA8C,GACA3yB,KAAA6vB,IAAA,QAAA8C,GAEA,IAAAvE,EAAA2Y,EAAAlX,IAAA,UACA7vB,KAAA6vB,IAAA,WAAAzB,GACApuB,KAAA6vB,IAAA,SAAAzB,MAGG,GACHpuB,MAIA+gB,EAAAziB,UAAA29D,QAAA,SAAAC,GAEA,OADAl8D,KAAA07D,SAAAQ,EACAl8D,MAGA+gB,EAAAziB,UAAA69D,QAAA,SAAAC,GAEA,OADAp8D,KAAAs7D,SAAAc,EACAp8D,uBC7IA,IAAAq8D,EAAa//D,EAAQ,IACrBykB,EAAYzkB,EAAQ,IACpB2yB,EAAU3yB,EAAQ,IAyDlB,SAAAggE,EAAAptC,EAAAqtC,EAAAC,GACAx8D,KAAAy8D,KAAA,GACAz8D,KAAA08D,UAAAH,GAAA,IACAv8D,KAAA28D,OAAAH,GAAA,EAEAx8D,KAAAmvB,OAAAD,EACAlvB,KAAAk6D,MAAA,EA4FA,SAAA0C,EAAA3gC,EAAAiyB,EAAAjwD,EAAAN,GACA,iBAAAs+B,EAAApM,IAAA5xB,GACAiwD,EAAAjwD,GAAAN,EACG,iBAAAs+B,EAAApM,IAAA5xB,EAAA,MACH,iBAAAg+B,EAAApM,IAAA5xB,EAAA,OACAiwD,EAAAjwD,EAAA,KAAAN,EACAuwD,EAAAjwD,EAAA,KAAAN,GA/JAojB,EAAAziB,UAAAu+D,MAAA,SAAAN,EAAAC,EAAA/L,GAOA,GANA,iBAAA8L,GACA9L,EAAA8L,EAAAC,EAAA,EAAAD,EAAA,GACG,iBAAAC,IACH/L,EAAA+L,IAAA,IAGAx8D,KAAA88D,QAAA,CACA98D,KAAA88D,QAAA,GACA,IAAAC,EAAA,EACA/8D,KAAAw+B,KAAA,SAAAH,EAAApb,EAAAqb,GACA,GAAAt+B,KAAA88D,QAAAj7D,OAAA,CAKA,IAAAw4D,EAAA0C,GAAAz+B,EAEA,GADAy+B,EAAA95C,EACAo3C,EACA,SAGA,IAAA2C,EAAAh9D,KAAA88D,QAAA,GAEA7xD,EAAA+xD,EAAAx+B,KAAAx+B,KAAAq+B,EAAApb,EAAAqb,GAMA,GAJArzB,GAAA+xD,IAAAh9D,KAAA88D,QAAA,IACA98D,KAAA88D,QAAAv5C,QAGA,mBAAAtY,EACA,IACAA,EAAApO,KAAAmD,MACS,MAAA+nB,GACT8lC,QAAAnqD,IAAAqkB,GAQA,MAJA,iBAAA9c,GACAjL,KAAA88D,QAAAG,QAAAhyD,IAGA,KACK,GAGLjL,KAAAyyB,QACAg+B,IACAzwD,KAAA88D,QAAAj7D,OAAA,GAEA,IAAAg7D,EAAA,IAAAP,EAAAt8D,KAAAu8D,EAAAC,GAEA,OADAx8D,KAAA88D,QAAAv7C,KAAAs7C,GACAA,GAYAP,EAAAh+D,UAAAkgC,KAAA,SAAAvC,EAAAoC,EAAApb,EAAAqb,GAGA,GAFAt+B,KAAAk6D,OAAA77B,IAEAr+B,KAAAk6D,MAAAl6D,KAAA28D,QAAA,CAIA,IASAn+D,EAAA0+D,EATAl+B,EAAAh/B,KAAAk6D,MAAAl6D,KAAA28D,OAEA,IAAA38D,KAAAm9D,OAEA,QAAAl/D,KADA+B,KAAAm9D,OAAA,GACAn9D,KAAAy8D,KACAz8D,KAAAm9D,OAAAl/D,GAAA+B,KAAAmvB,OAAAU,IAAA5xB,GAKA+gC,EAAAh/B,KAAA08D,WACAl+D,EAAAwgC,EAAAh/B,KAAA08D,UACAQ,GAAA,IAEA1+D,EAAA,EACA0+D,GAAA,GAGA,mBAAAl9D,KAAAo9D,UACA5+D,EAAAwB,KAAAo9D,QAAA5+D,IAGA,IAAAwG,EAAA,EAAAxG,EAEA,QAAAP,KAAA+B,KAAAy8D,KACAz8D,KAAAmvB,OAAAU,IAAA5xB,EAAA+B,KAAAm9D,OAAAl/D,GAAA+G,EAAAhF,KAAAy8D,KAAAx+D,GAAAO,GAGA,OAAA0+D,EACAl9D,KAAAg+B,OAAAh+B,KAAAq9D,QAAA,OADA,IAKAf,EAAAh+D,UAAAu+D,MAAA,SAAAN,EAAAC,GACA,OAAAx8D,KAAAg+B,MAAA,IAAAs+B,EAAAt8D,KAAAmvB,OAAAotC,EAAAC,IAGAF,EAAAh+D,UAAAi+D,SAAA,SAAAA,GAEA,OADAv8D,KAAA08D,UAAAH,EACAv8D,MAGAs8D,EAAAh+D,UAAAk+D,MAAA,SAAAA,GAEA,OADAx8D,KAAA28D,OAAAH,EACAx8D,MAGAs8D,EAAAh+D,UAAAg/D,KAAA,SAAAC,GAEA,OADAv9D,KAAAo9D,QAAAf,EAAAkB,GACAv9D,MAGAs8D,EAAAh+D,UAAAouC,KAAA,SAAAzrB,GAEA,OADAjhB,KAAAq9D,MAAAp8C,EACAjhB,MAGAs8D,EAAAh+D,UAAAg5D,KAAA,WAIA,OAHAt3D,KAAA0sC,KAAA,WACA1sC,KAAAs3D,SAEAt3D,MAGAs8D,EAAAh+D,UAAAywD,OAAA,WAIA,OAHA/uD,KAAA0sC,KAAA,WACA1sC,KAAA+uD,WAEA/uD,MAGAs8D,EAAAh+D,UAAAuxB,IAAA,SAAA9uB,EAAAC,GACA,oBAAAD,EACA,QAAAwxD,KAAAxxD,EACA67D,EAAA58D,KAAAmvB,OAAAnvB,KAAAy8D,KAAAlK,EAAAxxD,EAAAwxD,cAEG,IAAAvxD,GACH47D,EAAA58D,KAAAmvB,OAAAnvB,KAAAy8D,KAAA17D,EAAAC,GAEA,OAAAhB,MAaAivB,EAAAuF,eAAA8nC,GAKAA,EAAAh+D,UAAA+kB,KAAA,SAAApC,GAEA,OADAjhB,KAAA0sC,KAAAzrB,GACAjhB,MAMAs8D,EAAAh+D,UAAAk7C,MAAA,SAAA9vC,GACA,OAAA1J,MAGAvD,EAAAD,QAAA8/D,iBCxLA,SAAAkB,EAAAz+D,GACA,OAAAA,EAEA,IAAA0+D,EAAA,GACAC,EAAA,GACAC,EAAA,GAEA,SAAAtB,EAAAuB,GACA,sBAAAA,EACA,OAAAA,EAEA,oBAAAA,EACA,OAAAJ,EAEA,IAAAv8C,EAAAw8C,EAAAG,GACA,GAAA38C,EACA,OAAAA,EAEA,IAAA+C,EAAA,gDAAA65C,KAAAD,GACA,IAAA55C,MAAAniB,OACA,OAAA27D,EAEA,IAAAD,EAAAI,EAAA35C,EAAA,IACAnmB,EAAA6/D,EAAA15C,EAAA,IACA85C,EAAA95C,EAAA,GAcA,OAZA/C,EADAs8C,KAAAt8C,GACAs8C,EAAAt8C,GACGs8C,KAAAQ,GACHR,EAAAQ,GAAA58C,MAAAo8C,EAAAQ,GAAAD,GACAA,EAAAxH,QAAA,UAAAvyC,MAAA,MAEAy5C,EAEA3/D,IACAojB,EAAApjB,EAAAojB,OAGAw8C,EAAAG,GAAA38C,EACAA,EAGAo7C,EAAAj7D,IAAA,SAAAyL,GAGA,IADA,IAAAmxD,GAAAnxD,EAAA5P,MAAA4P,EAAAhP,MAAAkmB,MAAA,OACArnB,EAAA,EAAiBA,EAAAshE,EAAAn8D,OAAkBnF,IAAA,CACnC,IAAAO,EAAA+gE,EAAAthE,GACAO,KACA4P,EAAA5P,KAAA0gE,EAAAD,GAAAzgE,GAAA4P,KAKAwvD,EAAAj7D,IAAA,CACAvD,KAAA,KACAojB,GAAA,SAAApQ,GACA,OAAAA,KAIAwrD,EAAAj7D,IAAA,CACAvD,KAAA,MACAojB,GAAA,SAAApQ,GACA,gBAAAjT,GACA,SAAAiT,EAAA,EAAAjT,OAKAy+D,EAAAj7D,IAAA,CACAvD,KAAA,SACAojB,GAAA,SAAApQ,GACA,gBAAAjT,GACA,OAAAA,EAAA,GAAAiT,EAAA,EAAAjT,GAAA,IAAAiT,EAAA,KAAAjT,IAAA,MAKAy+D,EAAAj7D,IAAA,CACAvD,KAAA,SACAojB,GAAA,SAAApQ,GACA,gBAAAjT,GACA,OAAAA,EAAA,KAAAiT,EAAA,KAAAjT,IAAA,EAAAiT,EAAA,EAAAjT,GAAA,MAKAy+D,EAAAj7D,IAAA,CACAnE,KAAA,SACAgkB,GAAA,SAAArjB,GACA,OAAAA,KAIAy+D,EAAAj7D,IAAA,CACAnE,KAAA,OACAgkB,GAAA,SAAArjB,GACA,OAAAA,OAIAy+D,EAAAj7D,IAAA,CACAnE,KAAA,QACAgkB,GAAA,SAAArjB,GACA,OAAAA,SAIAy+D,EAAAj7D,IAAA,CACAnE,KAAA,QACAgkB,GAAA,SAAArjB,GACA,OAAAA,WAIAy+D,EAAAj7D,IAAA,CACAnE,KAAA,QACAgkB,GAAA,SAAArjB,GACA,OAAAA,aAIAy+D,EAAAj7D,IAAA,CACAnE,KAAA,WACAgkB,GAAA,SAAArjB,GACA,SAAAe,KAAAsF,IAAArG,EAAAe,KAAAwH,GAAA,MAIAk2D,EAAAj7D,IAAA,CACAnE,KAAA,WACAgkB,GAAA,SAAArjB,GACA,UAAAA,EAAA,EAAAe,KAAA0I,IAAA,MAAAzJ,EAAA,OAIAy+D,EAAAj7D,IAAA,CACAnE,KAAA,cACAgkB,GAAA,SAAArjB,GACA,SAAAe,KAAAQ,KAAA,EAAAvB,QAIAy+D,EAAAj7D,IAAA,CACAnE,KAAA,SACAgkB,GAAA,SAAArjB,GACA,OAAAA,EAAA,cAAAA,MAAA,eACAA,GAAA,UAAAA,EAAA,IAAAA,EAAA,iBACAA,GAAA,WAAAA,EAAA,cAAAA,GAAA,YAAAA,EACA,WAIAy+D,EAAAj7D,IAAA,CACAnE,KAAA,OACA8gE,GAAA,SAAAh2C,GACA,gBAAAnqB,GACA,OAAAe,KAAA0I,IAAAzJ,EAAAmqB,OAKAs0C,EAAAj7D,IAAA,CACAnE,KAAA,UACA8gE,GAAA,SAAAh9D,EAAAvC,GAEAuC,KAAA,EACA,IAAAtC,GAFAD,KAAA,MAEA,EAAAG,KAAAwH,IAAAxH,KAAAs/D,KAAA,EAAAl9D,GACA,gBAAAnD,GACA,SAAAmD,EAAApC,KAAA0I,IAAA,MAAAzJ,GACAe,KAAAqF,KAAApG,EAAAa,IAAA,EAAAE,KAAAwH,IAAA3H,OAKA69D,EAAAj7D,IAAA,CACAnE,KAAA,OACA8gE,GAAA,SAAAt/D,GAEA,OADAA,OAAA,IAAAA,IAAA,QACA,SAAAb,GACA,OAAAA,MAAAa,EAAA,GAAAb,EAAAa,OAKAhC,EAAAD,QAAA6/D,mBC3GA,SAAApN,EAAA/sC,EAAAg8C,GACA,GAAAl+D,gBAAAivD,EAAA,CAKA,IAAAnV,EAAA53B,EAAA22C,WAAA/e,OAAA,EAEA53B,EAAAokB,GAAA,oBAAA7R,GACAqlB,EAAArlB,EAAAqlB,WAGA95C,KAAAjB,EAAA,EACAiB,KAAAD,EAAA,EACAC,KAAAO,SAAA,WACA,SAAAP,KAAAjB,GAAA,OAAAiB,KAAAD,IAEAC,KAAAm+D,OAAA,SAAAC,IA+FA,SAAAx7C,EAAAy7C,EAAAC,GAEAD,EAAAE,SAAAF,EAAAE,QAAA18D,QACAy8D,EAAAv/D,EAAAs/D,EAAAE,QAAA,GAAAC,QACAF,EAAAv+D,EAAAs+D,EAAAE,QAAA,GAAAE,UAEAH,EAAAv/D,EAAAs/D,EAAAG,QACAF,EAAAv+D,EAAAs+D,EAAAI,SAEA,IAAAC,EAAA97C,EAAA+7C,wBACAL,EAAAv/D,GAAA2/D,EAAAlL,KACA8K,EAAAv+D,GAAA2+D,EAAAlJ,IACA8I,EAAAv/D,GAAA,EAAA6jB,EAAAg8C,WACAN,EAAAv+D,GAAA,EAAA6iB,EAAAi8C,UA3GAC,CAAAZ,EAAAE,EAAAp+D,MACAA,KAAAjB,GAAA+6C,EACA95C,KAAAD,GAAA+5C,GAEA95C,KAAA++D,OAAA,SAAA3oD,EAAA4oD,GACAh/D,KAAAoW,OACApW,KAAAsrC,KAAAppB,EACAliB,KAAAo+D,MAAA,KACAY,EAAAn9D,OAAA,EACA7B,KAAAg/D,UAEAh/D,KAAAsrC,KAAAmsB,MAAAz3D,KAAA03D,QAAA13D,OAEAA,KAAAk8B,QAAA,SAAA9lB,EAAAgoD,EAAAa,GAWA,GAVAj/D,KAAAoW,OACApW,KAAAsrC,KAAAppB,EACAliB,KAAAo+D,QACAp+D,KAAAg/D,SAAA,EACAh/D,KAAAk/D,UAAAl8C,KAAAC,MAMAg8C,EAAA,CACA,KAAAA,EAAAp9D,SACA7B,KAAA03D,QAAAC,IAAAsH,EAAA17C,QAAAvjB,QAEAi/D,EAAAp9D,OAAA,OAEA7B,KAAAsrC,KAAAmsB,MAAAz3D,KAAA03D,QAAA13D,OAGAA,KAAA03D,QAAA,CACA1J,SAAA,EACAqJ,SAAA,EACAj1C,MAAA,SAAA6Z,EAAAkjC,GACA,OAAAljC,EAAAwC,MAAA0gC,EAAA/oD,OAEAuhD,IAAA,SAAA17B,EAAAkjC,GAEAntC,EAAAotC,IAAAD,EAAAf,MACApsC,EAAA5b,KAAA+oD,EAAA/oD,KACA4b,EAAAktC,UAAAC,EAAAD,UACAltC,EAAAhvB,IAAAjE,EAAAogE,EAAApgE,EACAizB,EAAAhvB,IAAAjD,EAAAo/D,EAAAp/D,EAEA,IAAAymC,EAAAvK,EAAAuK,UAAA24B,EAAA/oD,MACA,GAAAowB,IAGAvK,EAAAxM,SAAAs+B,UAAAG,IAAAiR,EAAAntC,IACAiK,IAAAkjC,EAAA7zB,MAAArP,EAAAg8B,QAAAjmC,MAGAmtC,EAAAH,SACAG,EAAAH,QAAAz9C,KAAA0a,GAEAkjC,EAAAf,QAAA,CAEA,IADA,IAAAiB,GAAA,EACA1iE,EAAA,EAAuBA,EAAA6pC,EAAA3kC,OAAsBlF,IAC7C0iE,IAAA74B,EAAA7pC,GAAAE,KAAAo/B,EAAAjK,IAAAqtC,EAEA,OAAAA,MA3JA/iE,EAAQ,IAASklB,MAAA,SAAAU,EAAAg8C,GACjBjP,EAAAqQ,UAAAp9C,EAAAg8C,KAKAjP,EAAAsQ,MAAA,QACAtQ,EAAAC,MAAA,uBACAD,EAAAyD,KAAA,sBACAzD,EAAA0D,IAAA,mBACA1D,EAAA2D,OAAA,0BAEA3D,EAAAqQ,UAAA,SAAAp9C,EAAAg8C,GACA,IAAAh8C,EAAAi9C,MAAA,CAIAj9C,EAAAi9C,MAAA,IAAAlQ,EAAA/sC,EAAAg8C,GAKAA,EAAAn7C,iBAAA,aAAAy8C,GACAtB,EAAAn7C,iBAAA,WAAA08C,GACAvB,EAAAn7C,iBAAA,YAAA28C,GACAxB,EAAAn7C,iBAAA,cAAA48C,GAEAzB,EAAAn7C,iBAAA,YAAAy8C,GACAtB,EAAAn7C,iBAAA,UAAA08C,GACAvB,EAAAn7C,iBAAA,YAAA28C,GAEA78C,SAAAE,iBAAA,UAAA48C,GACAj8C,OAAAX,iBAAA,OAAA48C,GAEA,IAAAC,EAAA,GAAAC,EAAA,GAEA,SAAAL,EAAApB,GACAA,EAAA0B,iBACA59C,EAAAi9C,MAAAhB,OAAAC,GAEAl8C,EAAAi9C,MAAAjjC,QAAAkiC,EAAAhoD,KAAAgoD,GAEAl8C,EAAAi9C,MAAAJ,OAAA,QAAAa,GACA19C,EAAAi9C,MAAAJ,OAAA,cAAAc,GAGA,SAAAH,EAAAtB,GACAA,EAAA0B,iBACA59C,EAAAi9C,MAAAhB,OAAAC,GACAl8C,EAAAi9C,MAAAjjC,QAAAkiC,EAAAhoD,KAAAgoD,GAGA,SAAAqB,EAAArB,GACAA,EAAA0B,iBAGA59C,EAAAi9C,MAAAjjC,QAAAkiC,EAAAhoD,KAAAgoD,GAEAwB,EAAA/9D,QAEAqgB,EAAAi9C,MAAAjjC,QAAA,QAAAkiC,EAAAwB,GAEAC,EAAAh+D,OAAA,EAGA,SAAA89D,EAAAvB,GACAyB,EAAAh+D,QAEAqgB,EAAAi9C,MAAAjjC,QAAA,cAAAkiC,EAAAyB,GAEAD,EAAA/9D,OAAA,IA4FA,IAAAmwB,EAAA,GAAYhvB,EAAA,GAkBZ,SAAA+8D,EAAA7/D,EAAAjD,EAAAU,GACAP,OAAAC,eAAA6C,EAAAjD,EAAA,CACAU,UAlBAoiE,EAAA/tC,EAAA,iBAAA9xB,GAEA,OADAA,KAAA,IAAiBnB,EAAAiB,KAAAjB,EAAAmB,EAAAH,EAAAC,KAAAD,EACjBG,IAEA6/D,EAAA/tC,EAAA,sBACA,SAAAhyB,KAAAjB,GAAA,OAAAiB,KAAAD,GAAA,KAAAC,KAAAgD,IAAA,MAEA+8D,EAAA/tC,EAAA,MAAAhvB,GACA+8D,EAAA/8D,EAAA,iBAAA9C,GAEA,OADAA,KAAA,IAAiBnB,EAAAiB,KAAAjB,EAAAmB,EAAAH,EAAAC,KAAAD,EACjBG,IAEA6/D,EAAA/8D,EAAA,sBACA,SAAAhD,KAAAjB,GAAA,OAAAiB,KAAAD,KA0BAtD,EAAAD,QAAAyyD,mBCvMA,IAGAiP,EAHAn9C,EAAYzkB,EAAQ,IAEpBykB,EAAAi/C,eACA9B,EAAAr7C,SAAAC,cAAA,WACAo2C,aAAAgF,EAAAhF,WAAA,OAGAx1C,OAAAX,iBAAA,kBAEAhC,EAAAi/C,YACAj/C,EAAAqB,UAGC,GAEDrB,EAAAW,OAAA,CACAu+C,aAIA,SAAA/+C,EAAAg/C,GAEA,IAAA/9C,GADA+9C,KAAA,IACA/9C,OAAAub,EAAA,KAAAyiC,GAAA,EACAxtC,EAAA,EAAAvE,EAAA,EAAA0rB,EAAA,EAEA,iBAAA33B,IACAA,EAAAU,SAAAu9C,eAAAj+C,IAGAA,IACAA,EAAAU,SAAAu9C,eAAA,UACAv9C,SAAAu9C,eAAA,UAGA,IAAAj+C,EAAA,CACAg+C,GAAA,GAEAh+C,EAAAU,SAAAC,cAAA,WACAu9C,MAAAv7D,SAAA,WACAqd,EAAAk+C,MAAA7K,IAAA,IACArzC,EAAAk+C,MAAA7M,KAAA,IAEA,IAAAtwC,EAAAL,SAAAK,KACAA,EAAA6zC,aAAA50C,EAAAe,EAAAo9C,YAGA5iC,EAAAvb,EAAA+2C,WAAA,MAEA,IAAAqH,EAAA78C,OAAA68C,kBAAA,EACAC,EAAA9iC,EAAA+iC,8BACA/iC,EAAAgjC,2BAAAhjC,EAAAijC,0BACAjjC,EAAAkjC,yBAAAljC,EAAAmjC,wBAAA,EACA/mB,EAAAymB,EAAAC,EAEA,IAAAM,EAAAp9C,OAAAo9C,uBACAp9C,OAAAq9C,yBAAAr9C,OAAAs9C,0BACAt9C,OAAAu9C,6BAAAv9C,OAAAw9C,wBACA,SAAA5iD,GACA,OAAAoF,OAAAub,WAAA3gB,EAAA,SAIA,IAAAgtB,EAAAvqB,EAAAuqB,KAAAw1B,EAAArjC,GAEA,SAAAA,IACAC,EAAAt0B,aAAA,aACAs0B,EAAAyjC,UAAA,IAAAxuC,EAAAvE,GACAkd,EAAA7N,OAAAC,GAcA,SAAAo9B,IAEAqF,GAEAxtC,EAAAjP,OAAA09C,WAAA,EAAA19C,OAAA09C,WAAAC,OAAA1uC,MACAvE,EAAA1K,OAAA49C,YAAA,EAAA59C,OAAA49C,YAAAD,OAAAjzC,OAEAjM,EAAAk+C,MAAA1tC,QAAA,KACAxQ,EAAAk+C,MAAAjyC,SAAA,OAGAuE,EAAAxQ,EAAAo/C,YACAnzC,EAAAjM,EAAAq/C,cAGA7uC,GAAAmnB,EACA1rB,GAAA0rB,EAEA33B,EAAAwQ,WAAAxQ,EAAAiM,aAIAjM,EAAAwQ,QACAxQ,EAAAiM,SAIAkd,EAAAutB,SAAAlmC,EAAAvE,EAAA0rB,GAEArc,KAxCA6N,EAAAskB,WAAA,SAAAqB,GAEA,OADA9uC,EAAAk+C,MAAAoB,gBAAAxQ,EACAjxD,MAGAkhB,EAAAoqB,EAAAnpB,GAEA24C,IACAp3C,OAAAX,iBAAA,SAAA+3C,GAAA,GACAp3C,OAAAX,iBAAA,oBAAA+3C,GAAA,IA9DA4G,eAiGA,SAAA/+C,EAAAg/C,EAAAnL,GAEA,IAAAtK,EAAA,IAAAwI,MACAxI,EAAA0V,OAAA,WACAD,EAAAzV,IAEAA,EAAA2V,QAAArL,EACAtK,EAAAvpC","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\n/**\n * Creates zero vector.\n *\n * @return {Vec2} Zero vector.\n */\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\n/**\n * Zero vector for internal usage. Must not be modified.\n */\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns this vector.\n */\nVec2.prototype.normal = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return this;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return this;\n};\n\n/**\n * Rotates current vector inline by specified rotation angle.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Rotates current vector inline by rotation angle negative to the specified one.\n *\n * @param {Rot} rot Specifies rotation angle.\n * @return {Vec2} Current vector.\n */\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_activeFlag = def.active;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive or joint itself is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_activeFlag && this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This joint will be used in physics callculations if true, and skipped if false.\n */\nJoint.prototype.setActive = function(flag) {\n  this.m_activeFlag = flag;\n};\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2(), rot = new Rot();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  /*if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }*/\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  if (this.m_vertices[3]) {\n    this.m_vertices[0].set(-hx, -hy);\n    this.m_vertices[1].set(hx, -hy);\n    this.m_vertices[2].set(hx, hy);\n    this.m_vertices[3].set(-hx, hy);\n  } else {\n    this.m_vertices[0] = Vec2.neo(-hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, -hy);\n    this.m_vertices[2] = Vec2.neo(hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, hy);\n  }\n  if (this.m_normals[3]) {\n    this.m_normals[0].set(0.0, -1.0);\n    this.m_normals[1].set(1.0, 0.0);\n    this.m_normals[2].set(0.0, 1.0);\n    this.m_normals[3].set(-1.0, 0.0);\n  } else {\n    this.m_normals[0] = Vec2.neo(0.0, -1.0);\n    this.m_normals[1] = Vec2.neo(1.0, 0.0);\n    this.m_normals[2] = Vec2.neo(0.0, 1.0);\n    this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n  }\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center) &&\n    (center.x < -Math.EPSILON || Math.EPSILON < center.x ||\n    center.y < -Math.EPSILON || Math.EPSILON < center.y)) {\n    \n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n    rot.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = this.m_vertices[i].rot(rot).add(center);\n      this.m_normals[i] = this.m_normals[i].rot(rot);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    d = d.set(this.m_outsidePoint).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set( v1.set(this.m_vertices[i]) ).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (denominator == 0.0) { // Ray is parallel to poligon's side.\n      continue;\n    } else {\n\n      var a = numerator / denominator;\n      p.set(d).mul(a).add(p1);\n\n      v2.set( this.m_vertices[ i + 1 < this.m_count ? i + 1 : 0 ] ); // Set second vertex.\n      var intersects = Vec2.dot(v1.sub(p), v2.sub(p)) < 0.0; // If ray line intersects polygon side.\n      if (!intersects) {\n        continue;\n      }\n\n      lower = 0.0;\n      upper = maxFraction;\n\n      intersects = lower < a; // If half-line intersects polygon side.\n      if (intersects) {\n        ++count;\n      }\n\n      if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = a;\n      } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = a;\n      }\n\n    }\n\n    if (lower <= upper && lower < lowest) {\n      index = i; // Save closest intersection.\n    }\n\n  }\n\n  if (count & 1) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = isPoint ? Vec2.ZERO : d.neg().normal().rot(xf.q);\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    // we are safe to return a reference as it's coppied in c# wrapper.\n    output.normal = d.set(this.m_normals[index]).rot(xf.q);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n  var r = Vec2.sub(input.p2, input.p1);\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = r.neg().normal();\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r)).normal();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n *\n * @param {Number} radius Radius extending around the edge.\n */\nfunction EdgeShape(v1, v2, radius) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n    this.m_noAlignRot = true; // This rotation is used to align the edge to y axis,\n                              // so v1 is in origin and (v1, v2) is codirectional with y.\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  this.m_noAlignRot = true;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  clone.m_edgeRadius = this.m_edgeRadius;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nEdgeShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0) { // No radius => we never inside.\n    return false;\n  }\n  // Put the point into the edge's frame of reference.\n  p = p1.set(p).sub(xf.p).rotT(xf.q);\n\n  // Transform all points so v2 is on y axis, positive half-space, v1 is in (0, 0).\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n  p = this._alignPoint(p);\n  var v2 = this.m_alignedV2;\n\n  var radius = this.m_edgeRadius;\n  if (p.y > v2.y) {\n    var dx = p.x - v2.x, dy = p.y - v2.y;\n    return dx * dx + dy * dy < radius * radius;\n  }\n  if (p.y < 0.0) {\n    return p.x * p.x + p.y * p.y < radius * radius;\n  }\n  return -radius < p.x && p.x < radius;\n};\n\n/**\n * Creates a rotation to be used to align the edge to y axis.\n *\n * @return {Rot} Rotation used to align points.\n */\nEdgeShape.prototype._getAlignRot = function() {\n  var rot = this.m_alignRot = this.m_alignRot || new Rot();\n  this.m_noAlignRot = false;\n\n  var v1 = this.m_vertex1, v2 = this.m_vertex2;\n  var length = d.set(v2).sub(v1).length();\n\n  if (length <= Math.EPSILON) {\n    return rot;\n  }\n\n  // cos = ( x1 * x2 + y1 * y2 ) / ( length1 * length2 )\n  // sin = ( x1 * y2 - x2 * y1 ) / ( length1 * length2 )\n  // x1 = d.x, y1 = d.y\n  // x2 = 0, y2 = 1\n  // length1 = length, length2 = 1\n  rot.c = d.y / length;\n  rot.s = d.x / length;\n\n  return rot;\n};\n\n/**\n * Inline-transforms provided point so it's in coordinate system where current edge is aligned to y axis.\n *\n * @param {Vec2} p Point.\n * @return {Vec2} The transformed point.\n */\nEdgeShape.prototype._alignPoint = function(p) {\n  return p.sub(this.m_vertex1).rot(this.m_alignRot);\n};\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  if (this.m_edgeRadius > 0.0) {\n    return this.rayCastWithRadius(output, input, xf);\n  }\n\n  v1 = v1.set(this.m_vertex1);\n  v2 = v2.set(this.m_vertex2);\n  v2 = v2.sub(v1);\n  var r = v2;\n  p = p.set(r.y, -r.x);\n  var normal = p;\n  var length = normal.normalize();\n\n  if (length <= Math.EPSILON) { // The edge is a point, can't intersect.\n    return false;\n  }\n\n  // Put the ray into the edge's frame of reference.\n  p1 = p1.set(input.p1).sub(xf.p).rotT(xf.q);\n  p2 = p2.set(input.p2).sub(xf.p).rotT(xf.q);\n  d = d.set(p2).sub(p1);\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator <= Math.EPSILON) { // Ray is parallel to the edge.\n    return false;\n  }\n\n  p2 = p2.set(v1).sub(p1);\n  var numerator = Vec2.dot(normal, p2);\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var rr = length * length;\n\n  // q = p1 + t * d\n  d = d.mul(t);\n  p1 = p1.add(d);\n  var q = p1;\n\n  q = q.sub(v1);\n  var s = Vec2.dot(q, r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = normal.rot(xf.q).neg(); // We are safe to return a reference as it's coppied in c# wrapper.\n  } else {\n    output.normal = normal.rot(xf.q); // We are safe to return a reference as it's coppied in c# wrapper.\n  }\n  return true;\n};\n\n/**\n * Used internally to do ray casts if current edge has positive radius.\n *\n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n */\nEdgeShape.prototype.rayCastWithRadius = function(output, input, xf) {\n  if (this.m_noAlignRot) {\n    this.m_alignRot = this._getAlignRot();\n    this.m_alignedV2 = this._alignPoint( (this.m_alignedV2 || new Vec2()).set(this.m_vertex2) );\n  }\n\n  var radius = this.m_edgeRadius;\n\n  // Put the ray into the edge's frame of reference.\n  p1 = this._alignPoint( p1.set(input.p1).sub(xf.p).rotT(xf.q) );\n  p2 = this._alignPoint( p2.set(input.p2).sub(xf.p).rotT(xf.q) );\n  d = d.set(p2).sub(p1);\n  var dx = d.x;\n\n  if (-Math.EPSILON <= dx && dx <= Math.EPSILON) { // The ray runs parallel to edge y axis.\n    var px = p1.x; // Intersection point x component.\n    if (px <= -radius || radius <= px) { // The ray runs parallel to the edge and fully outside of its radius.\n      return false;\n    }\n    var height = this.m_alignedV2.y;\n    var ry = Math.sqrt(radius * radius - px * px);\n    var py = height + ry; // Intersection point y component.\n\n    if (p1.y >= py) { // The ray starts above top.\n      if (p2.y >= py) { // The ray ends above top, it's fully outside.\n        return false;\n      }\n      output.fraction = (p1.y - py) / d.length();\n      output.normal = p.set(px, ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else if (p1.y <= -ry) { // The ray starts below bottom.\n      if (p2.y <= -ry) { // The ray ends below bottom, it's fully outside.\n        return false;\n      }\n      output.fraction = (-p1.y - ry) / d.length();\n      output.normal = p.set(px, -ry); // Will be coppied in c# wrapper.\n      output.normal.mul(1.0 / radius);\n    } else { // The ray starts between top and bottom.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n    }\n  } else { // The ray is not parallel to edge y axis.\n    var p1x = p1.x;\n    var t1 = (-radius - p1x) / dx; // Intersection points of the ray line and cylinder containing edge with radius.\n    var t2 = (radius - p1x) / dx;\n\n    if ( (t1 <= 0.0 && t2 <= 0.0) || (t1 >= 1.0 && t2 >= 1.0) ) { // Intersections are outside of the ray.\n      return false;\n    }\n\n    if (t1 > t2) {\n      var t = t1;\n      t1 = t2;\n      t2 = t;\n    }\n\n    var dy = d.y;\n    var p1y = p1.y;\n    var y1 = p1y + t1 * dy;\n    if (y1 > height) { // Line intersects cylinder above edge top.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n      var k = p1x * dx + dy * (p1y - height);\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect top circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and top circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy - height); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and top circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 >= height) { // Line and top circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects bottom semicircle of the top circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 < 0.0) { // Line intersects cylinder below edge bottom, i. e. intersects bottom circle.\n\n            c += height * (2 * p1y - height);\n            k += dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n              return false;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from bottom circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (y1 < 0.0) { // Line intersects cylinder below edge bottom.\n      var a = dx * dx + dy * dy;\n      var c = p1x * p1x + p1y * p1y - radius * radius;\n      var k = p1x * dx + p1y * dy;\n      var discr = k * k - a * c;\n\n      if (discr <= Math.EPSILON) { // Line doesn't intersect bottom circle.\n        return false;\n      }\n\n      var discrSqrt = Math.sqrt(discr);\n      var t3 = (-k - discrSqrt) / a; // Line and bottom circle intersection closest to start point.\n\n      if (t3 >= 0.0) { \n        if (t3 < 1.0) { // Intersection is inside of the segment.\n          output.fraction = t3;\n          output.normal = p.set(p1x + t3 * dx, p1y + t3 * dy); // Will be coppied in c# wrapper.\n          output.normal.mul(1.0 / radius);\n        } else { // Intersection is after segment ends.\n          return false;\n        }\n      } else { // The ray is pointing away from the line and bottom circle first intersection.\n        var t4 = (-k + discrSqrt) / a; \n        var y4 = p1y + t4 * dy;\n\n        if (y4 <= 0.0) { // Line and bottom circle intersection happens on the shape surface.\n          if (t4 <= 0.0) { // Start point is outside of semicircle.\n            return false;\n          }\n          // Start point is inside of semicircle.\n        } else { // Line intersects top semicircle of the bottom circle.\n          var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n          if (y2 > height) { // Line intersects cylinder above edge bottom, i. e. intersects top circle.\n\n            c -= height * (2 * p1y - height);\n            k -= dy * height;\n            discr = k * k - a * c;\n\n            if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n              return null;\n            }\n\n            discrSqrt = Math.sqrt(discr);\n            t4 = (-k + discrSqrt) / a;\n\n            if (t4 <= 0.0) { // The ray is pointing away from top circle, no intersections.\n              return false;\n            }\n            // The ray starts inside of the shape.\n          } // Line intersects cylinder inside of the shape.\n        }\n        output.fraction = 0.0;\n        output.normal = d.neg().normal(); // Will be coppied in c# wrapper.\n      }\n    } else if (t1 >= 0.0) { // The ray intersects cylinder between top and bottom (first intersection point).\n      output.fraction = t1;\n      output.normal = p.set(dx > 0.0 ? -1.0 : 1.0, 0.0); // Will be coppied in c# wrapper.\n    } else { // Start point is inside of cylinder and the ray is pointing away from first intersection point.\n      var y2 = p1y + t2 * dy; // Line and cylinder second intersection point.\n\n      if (y2 > height) { // Line intersects cylinder above edge top.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + (p1y - height) * (p1y - height) - radius * radius;\n        var k = p1x * dx + dy * (p1y - height);\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect top circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and top circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the top circle.\n          return false;\n        }\n      } else if (y2 < 0.0) { // Line intersects cylinder below edge bottom.\n        var a = dx * dx + dy * dy;\n        var c = p1x * p1x + p1y * p1y - radius * radius;\n        var k = p1x * dx + p1y * dy;\n        var discr = k * k - a * c;\n\n        if (discr <= 0.0) { // Line doesn't intersect bottom circle or has single intersection point, that should never happen.\n          return false;\n        }\n\n        var discrSqrt = Math.sqrt(discr);\n        var t4 = (-k + discrSqrt) / a; // Line and bottom circle intersection point, the most distant from the start point.\n\n        if (t4 <= 0.0) { // The ray is pointing away from the bottom circle.\n          return false;\n        }\n      }\n      // The ray starts inside of the shape.\n      output.fraction = 0.0;\n      output.normal = d.neg().normal();\n    }\n  }\n\n  output.normal.rotT(this.m_alignRot).rot(xf.q);\n  return true;\n};\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an impulse to the center of mass. This immediately modifies the velocity.\n * This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulseToCenter = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.isActive()) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = fixture.isActive();\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n *\n * @param {Number} radius Radius extending around the chain.\n */\nfunction ChainShape(vertices, loop, radius) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  if (radius > 0.0) {\n    this.m_edgeRadius = radius;\n    this.m_radius += radius;\n  } else {\n    this.m_edgeRadius = 0.0;\n  }\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  /*_ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }*/\n\n  this.m_count = this.m_vertices.length = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count > 0 ? this.m_count - 1 : 0;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n  edge.m_edgeRadius = this.m_edgeRadius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * Test a point for containment in this shape.\n * \n * @param {Transform} xf The shape world transform.\n * @param {Vec2} p A point in world coordinates.\n * @return {boolean} True if the point is included into the shape, false otherwise.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  if (this.m_edgeRadius <= 0.0 || this.m_count < 2) {\n    return false;\n  }\n  var vertices = this.m_vertices;\n  var edgeShape = new EdgeShape(vertices[0], vertices[1], this.m_edgeRadius);\n  if (edgeShape.testPoint(xf, p)) {\n    return true;\n  }\n  for (var count = this.m_count, i = 2; i < count; ++i) {\n    edgeShape._set(vertices[i - 1], vertices[i]);\n    if (edgeShape.testPoint(xf, p)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1), this.m_edgeRadius);\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  if (this.m_activeFlag) {\n    var childCount = this.m_proxyCount = this.m_shape.getChildCount();\n    for (var i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  broadPhase = broadPhase || this.m_body.getWorld().m_broadPhase;\n  xf = xf || this.m_body.getTransform();\n\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = this.m_proxies.length - 1; i >= this.m_proxyCount; --i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxies.length = this.m_proxyCount;\n\n  // Create proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i] = this.m_proxies[i] || new FixtureProxy(this, i);\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  if (!this.m_activeFlag) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null || !this.m_activeFlag) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\n/**\n * If this fixture is used in physics calculations.\n *\n * @return {boolean} True if active, false otherwise.\n */\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\n/**\n * Changes active status.\n *\n * @param {boolean} flag This fixture will be used in physics callculations if true, and skipped if false.\n */\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  World._reportFixtureCallback = reportFixtureCallback;\n  this.m_broadPhase.rayCast(null, this._raycastCallback, point1, point2, 1.0);\n  World._reportFixtureCallback = undefined;\n};\n\n/**\n * A function that is called for each proxy that is hit by the ray.\n * Used internally.\n */\nWorld.prototype._raycastCallback = function(input, proxyId, proxy) {\n  var fixture = proxy.fixture;\n  var index = proxy.childIndex;\n  var output = {}; // TODO GC\n  var hit = fixture.rayCast(output, input, index);\n  if (hit) {\n    var fraction = output.fraction;\n    var point = input.p1.mul(1.0 - fraction).add(input.p2.mul(fraction));\n    return World._reportFixtureCallback(fixture, point, output.normal, fraction);\n  }\n  return input.maxFraction;\n};\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyA = fixtureA.getBody();\n    if (!bodyA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var bodyB = fixtureB.getBody();\n    if (!bodyB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  p1 = p1 || input.p1;\n  p2 = p2 || input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  maxFraction = maxFraction >= 0.0 ? maxFraction : input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(p1);\n      subInput.p2 = Vec2.clone(p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id, node.userData);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false,\n  active: true\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0,\n  active: true\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n * @param p1\n * @param p2\n * @param maxFraction\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback, p1, p2, maxFraction) {\n  this.m_tree.rayCast(input, rayCastCallback, p1, p2, maxFraction);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        var fixtureA = contact.m_fixtureA;\n        var fixtureB = contact.m_fixtureB;\n\n        if (!(fixtureA.isActive() && fixtureB.isActive())) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = fixtureA.m_isSensor;\n        var sensorB = fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true || je.joint.m_activeFlag == false) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        if (!(fA.isActive() && fB.isActive())) {\n          continue;\n        }\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n    var offset = Vec2.dot(n, v1);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - offset;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = edgeA.m_radius + polygonB.m_radius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n  active: true\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0,\n  active: true\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3,\n  active: true\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true,\n  active: true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n  active: true\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n  active: true\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n  active: true\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, -1, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          this._options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          this._options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          this._options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          this._options.fillStyle = b.render.fill;\n        } else {\n          this._options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, this._options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, this._options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, this._options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, this._options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, -p.y);\n          f.ui.rotate(-r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      this._options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, this._options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = (-a.y + -b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = -a.y - -b.y;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, -shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(-v1.y, -v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(-Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}