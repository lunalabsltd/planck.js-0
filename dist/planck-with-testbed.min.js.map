{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","ZERO","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","rot","rotT","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","body","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","PolygonShape","v1","v2","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","m_outsidePoint","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","maxX","maxY","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","isPoint","lowest","numerator","denominator","intersects","minX","minY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","EdgeShape","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","scale","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","height","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","active","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","setActive","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","_textures","render","context","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","indexOf","splice","timeout","time","setTimeout","timer","clearTimeout","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","createProxy","destroyProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","Iterator","iterator","close","parents","states","root","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","undefined","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","BoxShape","CollideCircles","circleA","circleB","distSqr","radius","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","y1","x2","y2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","reverse","inversed","map","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","ctx","save","lineCap","drawing","restore","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","str","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","self","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","join","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":"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","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.ZERO = Vec2.zero();\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\nVec2.prototype.rot = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x - rot.s * y;\n  this.y = rot.s * x + rot.c * y;\n  return this;\n};\n\nVec2.prototype.rotT = function(rot) {\n  var x = this.x;\n  var y = this.y;\n  this.x = rot.c * x + rot.s * y;\n  this.y = -rot.s * x + rot.c * y;\n  return this;\n};\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nvar p = new Vec2(), p1 = new Vec2(), p2 = new Vec2(), v1 = new Vec2(), v2 = new Vec2(), d = new Vec2();\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n  this.m_outsidePoint = new Vec2(1.0, 1.0);\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  clone.m_outsidePoint.set(this.m_outsidePoint);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  if (m > 0) {\n    var maxX = -Infinity, maxY = maxX;\n\n    // Copy vertices.\n    for (var v, i = 0; i < m; ++i) {\n      v = this.m_vertices[i] = ps[hull[i]];\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    var maxX = -Infinity, maxY = maxX;\n\n    // Transform vertices and normals.\n    for (var v, i = 0; i < this.m_count; ++i) {\n      v = this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n\n      if (v.x > maxX) {\n        maxX = v.x;\n      }\n      if (v.y > maxY) {\n        maxY = v.y;\n      }\n    }\n\n    this.m_outsidePoint.x = maxX + 1.0;\n    this.m_outsidePoint.y = maxY + 1.0;\n  } else {\n    this.m_outsidePoint.x = this.m_outsidePoint.y = (hx > hy ? hx : hy) + 1.0;\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  p1.set(input.p1);\n  p2.set(input.p2);\n\n  // Put the ray into the polygon's frame of reference.\n  p1 = p1.sub(xf.p).rotT(xf.q);\n  p2 = p2.sub(xf.p).rotT(xf.q);\n\n  d = d.set(p2).sub(p1); // Direction of the ray.\n\n  var isPoint = Vec2.dot(d, d) <= Math.EPSILON;\n  if (isPoint) { // If we can raycast outside then we start inside.\n    p2.set(this.m_outsidePoint);\n    d = d.set(p2).sub(p1);\n  }\n\n  var maxFraction = input.maxFraction;\n  var lowest = maxFraction;\n  var lower, upper;\n  var index = -1;\n  var count = 0;\n\n  for (var m_count = this.m_count, i = 0; i < m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    // -numerator + a * denominator = 0\n    var normal = this.m_normals[i];\n    var numerator = Vec2.dot( normal, p.set( v1.set(this.m_vertices[i]) ).sub(p1) );\n    var denominator = Vec2.dot(normal, d);\n\n    if (denominator == 0.0) { // Ray is parallel to poligon's side.\n      continue;\n    } else {\n\n      var a = numerator / denominator;\n      p.set(d).mul(a).add(p1);\n\n      v2.set( this.m_vertices[ i + 1 < this.m_count  ? i + 1 : 0 ] ); // Set second vertex.\n      var intersects = Vec2.dot(v1.sub(p), v2.sub(p)) < 0.0; // If ray line intersects polygon side.\n      if (!intersects) {\n        continue;\n      }\n\n      lower = 0.0;\n      upper = maxFraction;\n\n      intersects = lower < a; // If half-line intersects polygon side.\n      if (intersects) {\n        ++count;\n      }\n\n      if (denominator < 0.0 && intersects) { // denominator < 0 <=> ray and normal are opposite.\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = a;\n      } else if (denominator > 0.0 && a < upper) { // denominator > 0 <=> ray and normal are codirectional.\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = a;\n      }\n\n    }\n\n    if (lower <= upper && lower < lowest) {\n      index = i; // Save closest intersection.\n    }\n\n  }\n\n  if (count & 1) { // Half-line intersections number is odd => we start inside.\n    output.fraction = 0.0;\n    output.normal = Vec2.ZERO;\n    return true;\n  } else if (index >= 0 && !isPoint) {\n    output.fraction = lowest;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  if (b < 0.0) {\n    output.fraction = 0;\n    output.normal = Vec2.ZERO;\n    return true;\n  }\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag && fixture.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. If fixture is active this will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n  active: true,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n  this.m_activeFlag = def.active;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n\nFixture.prototype.isActive = function() {\n  return this.m_activeFlag;\n}\n\nFixture.prototype.setActive = function(flag) {\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n  var body = this.m_body;\n\n  if (this.m_activeFlag) {\n    this.createProxies(body.getWorld().m_broadPhase, body.getTransform());\n  } else {\n    this.destroyProxies(body.getWorld().m_broadPhase); // contacts will be destroyed on next step.\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext();\n    var fixtureA = c.getFixtureA();\n    if (!fixtureA.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var fixtureB = c.getFixtureB();\n    if (!fixtureB.isActive()) {\n      this.destroyContact(c);\n      continue;\n    }\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, -1, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          this._options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          this._options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          this._options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          this._options.fillStyle = b.render.fill;\n        } else {\n          this._options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, this._options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, this._options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, this._options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, this._options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, -p.y);\n          f.ui.rotate(-r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      this._options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, this._options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = (-a.y + -b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = -a.y - -b.y;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, -shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(-v1.y, -v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(-Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}